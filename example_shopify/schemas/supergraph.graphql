"""
Marks an element of a GraphQL schema as having restricted access.
"""
directive @accessRestricted(
  """
  Explains the reason around this restriction
  """
  reason: String
) on FIELD_DEFINITION | OBJECT

"""
An Amazon Web Services Amazon Resource Name (ARN), including the Region and account ID.
For more information, refer to [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
"""
scalar ARN

"""
A checkout that was abandoned by the customer.
"""
type AbandonedCheckout implements Navigable & Node {
  """
  A list of events relevant to an abandoned checkout.
  """
  abandonedCheckoutEvents: [AbandonedCheckoutEvent!]!

  """
  The URL for the buyer to recover their checkout.
  """
  abandonedCheckoutUrl: URL!

  """
  The date and time when a recovery notification was last sent or scheduled for this checkout.
  Null if no recovery notification has been sent or scheduled yet.
  Will also be null for very old checkout records that had been sent a notification.
  """
  abandonedEmailAt: DateTime

  """
  Whether a buyer has been sent a notification to recover their abandoned checkout.
  """
  abandonedEmailState: AbandonedCheckoutEmailState!

  """
  Warnings and informational alerts to show when viewing this abandoned checkout in the Shopify admin.
  """
  alerts: [ResourceAlert!]!

  """
  The app that created this checkout, e.g. Online Store or Point of Sale.
  Null if the app has since been deleted.
  """
  app: App

  """
  The detailed string of "{app} - {location}" of the checkout.
  If no location is available, then it provides the app title only.
  If the app has been deleted, then it returns `null`.
  """
  attribution: String

  """
  The billing address provided by the buyer.
  Null if the user did not provide a billing address.
  """
  billingAddress: MailingAddress

  """
  Whether the billing address provided by the user matches the shipping address provided by the user.
  False if the billing address is null.
  """
  billingAddressMatchesShippingAddress: Boolean!

  """
  The checkout email address.
  """
  checkoutEmail: String

  """
  The date and time when the checkout was marked as archived.
  Null if the checkout is not archived.
  """
  closedAt: DateTime

  """
  The date and time when the buyer completed the checkout.
  Null if the checkout has not been completed.
  """
  completedAt: DateTime

  """
  The date and time when the checkout was created.
  """
  createdAt: DateTime!

  """
  A list of extra information that has been added to the checkout.
  """
  customAttributes: [Attribute!]!

  """
  The customer who created this checkout.
  May be null if the checkout was created from a draft order or via an app.
  """
  customer: Customer

  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  Discounts that have been applied on the checkout.
  """
  discountApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscountApplicationConnection!

  """
  The discount code entered by the buyer at checkout.
  Will be "" if the checkout has no discount.
  """
  discountCode: String!

  """
  The discount codes entered by the buyer at checkout.
  """
  discountCodes: [String!]!

  """
  The translated explanation for why notifications will no longer be scheduled for this checkout.
  Null if such an explanation is not applicable or when notifications are scheduled.
  """
  emailSchedulingChangeReason: String

  """
  Whether duties are missing from the checkout.
  """
  hasMissingDuties: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Information about the incoterm used for this checkout and the reasoning behind it.
  """
  incotermInformation: IncotermInformation

  """
  A list of the line items in this checkout.
  """
  lineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AbandonedCheckoutLineItemConnection!

  """
  The number of products in the checkout.
  """
  lineItemsQuantity: Int!

  """
  Unique merchant-facing identifier for the checkout.
  """
  name: String!

  """
  A merchant-facing note added to the checkout. Not visible to the buyer.
  """
  note: String!

  """
  The order that was created from this checkout.
  NULL if the checkout has not been completed, or if the order has been deleted.
  """
  order: Order

  """
  A preview of the recovery email that will be sent for this abandoned checkout
  by the `AbandonedCheckoutRecoveryEmailSend` mutation.
  Null if the checkout does not have an email address to send to.
  """
  recoveryEmailPreview(
    """
    An optional custom message that will be included in the body of the email if
    passed to the `AbandonedCheckoutRecoveryEmailSend` mutation.
    """
    customMessage: String

    """
    An optional custom subject that will override the template default if passed
    to the `AbandonedCheckoutRecoveryEmailSend` mutation.
    """
    customSubject: String
  ): AbandonedCheckoutRecoveryEmail

  """
  Whether the buyer returned to complete this checkout after a recovery notification was sent.
  """
  recoveryState: AbandonedCheckoutRecoveryState!

  """
  The shipping address to where the line items will be shipped.
  Null if the user did not provide a shipping address.
  """
  shippingAddress: MailingAddress

  """
  The shipping option chosen by the buyer.
  Null if the user has not yet chosen a shipping option.
  """
  shippingLine: AbandonedCheckoutShippingLine

  """
  A list of shipping options chosen by the customer.
  """
  shippingLines: [AbandonedCheckoutShippingLine!]!

  """
  The sum of all items in the checkout, including discounts but excluding shipping, taxes and tips.
  """
  subtotalPriceSet: MoneyBag!

  """
  Individual taxes charged on the checkout.
  """
  taxLines: [TaxLine!]!

  """
  Whether taxes are included in line item and shipping line prices.
  """
  taxesIncluded: Boolean!

  """
  The total additional fees applied to the checkout.
  """
  totalAdditionalFeesSet: MoneyBag

  """
  The total discount applied to the buyer's cart as a whole, excluding shipping
  discounts and discounts on individual line items.
  """
  totalCartDiscountSet: MoneyBag!

  """
  The total duties applied to the checkout.
  """
  totalDutiesSet: MoneyBag

  """
  The sum of all items in the checkout, including discounts, shipping, taxes, and tips.
  """
  totalPriceSet: MoneyBag!

  """
  The total tax applied to the checkout.
  """
  totalTaxSet: MoneyBag

  """
  The total tip applied to the checkout.
  """
  totalTipSet: MoneyBag!

  """
  The date and time when the checkout was most recently updated.
  """
  updatedAt: DateTime!
}

"""
An object representing an authentication event for use in an abandoned checkout.
"""
type AbandonedCheckoutAuthenticationEvent {
  """
  The date and time when the event was created.
  """
  createdAt: DateTime!

  """
  The last digits of the credit card for a failed authentication.
  """
  failedAuthenticationCreditCardLastDigits: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The kind of authentication event.
  """
  kind: String

  """
  The status of the authentication event.
  """
  status: String
}

"""
Whether a buyer has been sent a notification to recover their abandoned checkout.
"""
enum AbandonedCheckoutEmailState {
  """
  The buyer has not been sent a recovery notification.
  """
  NOT_SENT

  """
  A recovery notification has been scheduled for later delivery.
  """
  SCHEDULED

  """
  The buyer has already been sent a recovery notification.
  """
  SENT
}

"""
An event for an abandoned checkout.
"""
union AbandonedCheckoutEvent = AbandonedCheckoutAuthenticationEvent | AbandonedCheckoutTransactionEvent

"""
A single line item in an abandoned checkout.
"""
type AbandonedCheckoutLineItem implements Node {
  """
  A list of extra information that has been added to the line item.
  """
  customAttributes: [Attribute!]!

  """
  Final total price for the entire quantity of this line item, including discounts.
  """
  discountedTotalPriceSet: MoneyBag!

  """
  The total price for the entire quantity of this line item, after all discounts
  are applied, at both the line item and code-based line item level.
  """
  discountedTotalPriceWithCodeDiscount: MoneyBag!

  """
  The price of a single variant unit after discounts are applied at the line item level, in shop and presentment currencies.
  """
  discountedUnitPriceSet: MoneyBag!

  """
  The price of a single variant unit after all discounts are applied, at both the line item and code-based line item level.
  """
  discountedUnitPriceWithCodeDiscount: MoneyBag!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The image associated with the line item's variant or product.
  NULL if the line item has no product, or if neither the variant nor the product have an image.
  """
  image: Image

  """
  Original total price for the entire quantity of this line item, before discounts.
  """
  originalTotalPriceSet: MoneyBag!

  """
  Original price for a single unit of this line item, before discounts.
  """
  originalUnitPriceSet: MoneyBag!

  """
  Product for this line item.
  NULL for custom line items and products that were deleted after checkout began.
  """
  product: Product

  """
  The quantity of the line item.
  """
  quantity: Int!

  """
  SKU for the inventory item associated with the variant, if any.
  """
  sku: String

  """
  Title of the line item. Defaults to the product's title.
  """
  title: String!

  """
  Product variant for this line item.
  NULL for custom line items and variants that were deleted after checkout began.
  """
  variant: ProductVariant

  """
  Title of the variant for this line item.
  NULL for custom line items and products that do not have distinct variants.
  """
  variantTitle: String
}

"""
An auto-generated type for paginating through multiple AbandonedCheckoutLineItems.
"""
type AbandonedCheckoutLineItemConnection {
  """
  A list of edges.
  """
  edges: [AbandonedCheckoutLineItemEdge!]!

  """
  A list of the nodes contained in AbandonedCheckoutLineItemEdge.
  """
  nodes: [AbandonedCheckoutLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AbandonedCheckoutLineItem and a cursor during pagination.
"""
type AbandonedCheckoutLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of AbandonedCheckoutLineItemEdge.
  """
  node: AbandonedCheckoutLineItem!
}

"""
The content of the recovery email for an abandoned checkout.
"""
type AbandonedCheckoutRecoveryEmail {
  """
  The HTML body of the recovery email.

  This is rendered from a template that may trigger complex queries;
  avoid requesting this field in a paginated query.
  """
  bodyHtml: HTML!

  """
  The From email address for the recovery email.
  """
  from: String!

  """
  The subject line for the recovery email.

  This is rendered from a template that may trigger complex queries;
  avoid requesting this field in a paginated query.
  """
  subject: String!

  """
  The To email address for the recovery email.
  """
  to: String!
}

"""
Whether the buyer has returned to complete their abandoned checkout.
"""
enum AbandonedCheckoutRecoveryState {
  """
  The buyer has not completed the checkout.
  """
  NOT_RECOVERED

  """
  The buyer completed the checkout after being notified.
  """
  RECOVERED
}

"""
The shipping method that the buyer chose during checkout.
"""
type AbandonedCheckoutShippingLine {
  """
  A list of reasons for applied shipping discounts.
  """
  discountReasons: [String!]!

  """
  Final price for this shipping method, including discounts.
  """
  discountedPriceSet: MoneyBag!

  """
  Original price for this shipping method, excluding discounts.
  """
  originalPriceSet: MoneyBag!

  """
  Title of the chosen shipping method.
  """
  title: String!

  """
  The total shipping weight including packaging.
  """
  totalWeightWithPackage: String!
}

"""
An object representing a transaction event for use in an abandoned checkout.
"""
type AbandonedCheckoutTransactionEvent {
  """
  The amount of money that the transaction was for.
  """
  amount: MoneyV2!

  """
  The authorization code associated with the transaction.
  """
  authorization: String

  """
  The date and time when the event was created.
  """
  createdAt: DateTime!

  """
  The payment gateway used to process the transaction.
  """
  gateway: String

  """
  The gift card used for this transaction.
  """
  giftCard: GiftCard

  """
  The id of the gift card used for this transaction.
  """
  giftCardId: ID

  """
  The masked code of the gift card used for this transaction.
  """
  giftCardMaskedCode: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Whether this is a test transaction.
  """
  isTest: Boolean!

  """
  The kind of transaction.
  """
  kind: String

  """
  A message describing the transaction event.
  """
  message: String

  """
  The payment device.
  """
  paymentDevice: JSON

  """
  The receipt.
  """
  receipt: JSON

  """
  The receipt without backtraces nor exceptions.
  """
  sanitizedReceipt: JSON

  """
  The link to the image of the signature used for this transaction.
  """
  signatureImageUrl: URL

  """
  The status of the transaction.
  """
  status: String

  """
  A message describing the transaction event.
  """
  transactionMessage: String
}

"""
A browse, cart, or checkout that was abandoned by a customer.
"""
type Abandonment implements Node {
  """
  The abandonment payload for the abandoned checkout.
  """
  abandonedCheckoutPayload: AbandonedCheckout

  """
  The abandonment type.
  """
  abandonmentType: AbandonmentAbandonmentType!

  """
  The app associated with an abandoned checkout.
  """
  app: App!

  """
  The date and time when the abandonment was created.
  """
  createdAt: DateTime!

  """
  The customer who abandoned this event.
  """
  customer: Customer!

  """
  Whether the customer has completed an order since this checkout has been abandoned.
  """
  customerHasNoOrderSinceAbandonment: Boolean!

  """
  The number of days since the last abandonment email was sent to the customer.
  """
  daysSinceLastAbandonmentEmail: Int!

  """
  When the email was sent, if that is the case.
  """
  emailSentAt: DateTime

  """
  The email state (e.g., sent or not sent).
  """
  emailState: AbandonmentEmailState

  """
  The number of hours since the customer has last abandoned a checkout.
  """
  hoursSinceLastAbandonedCheckout: Float

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Whether the products in abandonment are available.
  """
  inventoryAvailable: Boolean!

  """
  Whether the abandonment event comes from the Online Store sales channel.
  """
  isFromOnlineStore: Boolean!

  """
  Whether the abandonment event comes from the Shop app sales channel.
  """
  isFromShopApp: Boolean!

  """
  Whether the abandonment event comes from Shop Pay.
  """
  isFromShopPay: Boolean!

  """
  Whether the customer did not complete another most significant step since this abandonment.
  """
  isMostSignificantAbandonment: Boolean!

  """
  The date for the latest browse abandonment.
  """
  lastBrowseAbandonmentDate: DateTime!

  """
  The date for the latest cart abandonment.
  """
  lastCartAbandonmentDate: DateTime!

  """
  The date for the latest checkout abandonment.
  """
  lastCheckoutAbandonmentDate: DateTime!

  """
  The most recent step type.
  """
  mostRecentStep: AbandonmentAbandonmentType!

  """
  The products added to the cart during the customer abandoned visit.
  """
  productsAddedToCart(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CustomerVisitProductInfoConnection!

  """
  The products viewed during the customer abandoned visit.
  """
  productsViewed(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CustomerVisitProductInfoConnection!

  """
  The date and time when the visit started.
  """
  visitStartedAt: DateTime
}

"""
Specifies the abandonment type.
"""
enum AbandonmentAbandonmentType {
  """
  The abandonment event is an abandoned browse.
  """
  BROWSE

  """
  The abandonment event is an abandoned cart.
  """
  CART

  """
  The abandonment event is an abandoned checkout.
  """
  CHECKOUT
}

"""
Specifies the email state.
"""
enum AbandonmentEmailState {
  """
  The email has not yet been sent.
  """
  NOT_SENT

  """
  The email has been scheduled for later delivery.
  """
  SCHEDULED

  """
  The email has been sent.
  """
  SENT
}

"""
The permission required to access a Shopify Admin API or Storefront API resource
for a shop. Merchants grant access scopes that are requested by applications.
"""
type AccessScope {
  """
  Whether the access scope is available to the current staff member.
  """
  availableToStaffMember: Boolean!

  """
  A description of the actions that the access scope allows an app to perform.
  """
  description: String!

  """
  A readable string that represents the access scope. The string usually follows
  the format `{action}_{resource}`. `{action}` is `read` or `write`, and
  `{resource}` is the resource that the action can be performed on. `{action}`
  and `{resource}` are separated by an underscore. For example, `read_orders` or
  `write_products`.
  """
  handle: String!

  """
  The PII (personally identifiable information) of the access scope.
  """
  pii: [String!]!
}

"""
Possible account types that a staff member can have.
"""
enum AccountType {
  """
  The account of a partner who collaborates with the merchant.
  """
  COLLABORATOR

  """
  The account can be signed into using a Google account.
  """
  GOOGLE_APPS @deprecated(reason: "Google Apps users no longer supported.")

  """
  The user has not yet accepted the invitation to create an account.
  """
  INVITED

  """
  The account can access the Shopify admin.
  """
  REGULAR

  """
  The admin has not yet accepted the request to create a collaborator account.
  """
  REQUESTED

  """
  The account cannot access the Shopify admin.
  """
  RESTRICTED

  """
  The account can be signed into via a SAML provider.
  """
  SAML
}

"""
Succinct overview of a shop activity.
"""
type Activity {
  """
  True if the message already contains the author name.
  """
  attributed: Boolean!

  """
  Event author name. This may be a user name, app name or `Shopify`.
  """
  author: String!

  """
  When the activity event occured.
  """
  createdAt: DateTime!

  """
  An array of formatted messages, each providing detail about the activity. Typically only a single message is present.
  """
  messages: [FormattedString!]!

  """
  The topic of the activity, used to display an appropriate icon.
  """
  topic: ActivityTopic!
}

"""
An auto-generated type for paginating through multiple Activities.
"""
type ActivityConnection {
  """
  A list of edges.
  """
  edges: [ActivityEdge!]!

  """
  A list of the nodes contained in ActivityEdge.
  """
  nodes: [Activity!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Activity and a cursor during pagination.
"""
type ActivityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ActivityEdge.
  """
  node: Activity!
}

"""
The topic of the activity, used to display an appropriate icon or a default icon.
"""
enum ActivityTopic {
  APPS
  BLOGS
  COLLECTIONS
  DEFAULT
  DOMAINS
  MERCHANT
  ONLINE_STORE
  PAGES
  PAYMENTS
  PRODUCTS
  SCRIPT
}

"""
A sale associated with an order price adjustment.
"""
type AdjustmentSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique identifier for the sale.
  """
  id: ID!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
Targets all items the cart for a specified discount.
"""
type AllDiscountItems {
  """
  Whether all items are eligible for the discount. This value always returns `true`.
  """
  allItems: Boolean!
}

"""
A Shopify application.
"""
type App implements Node {
  """
  A unique application API identifier.
  """
  apiKey: String!

  """
  App store page URL of the app.
  """
  appStoreAppUrl: URL

  """
  App store page URL of the developer who created the app.
  """
  appStoreDeveloperUrl: URL

  """
  The access scopes available to the app.
  """
  availableAccessScopes: [AccessScope!]!

  """
  Banner image for the app.
  """
  banner: Image!

  """
  Whether the specified beta feature is enabled on the app.
  """
  beta(
    """
    Code name of the beta.
    """
    name: String!
  ): Boolean!

  """
  Description of the app.
  """
  description: String

  """
  The name of the app developer.
  """
  developerName: String

  """
  The type of app developer.
  """
  developerType: AppDeveloperType!

  """
  Website of the developer who created the app.
  """
  developerUrl: URL! @deprecated(reason: "Use `appStoreDeveloperUrl` instead.")

  """
  Whether the app uses the Embedded App SDK.
  """
  embedded: Boolean!

  """
  Requirements that must be met before the app can be installed.
  """
  failedRequirements: [FailedRequirement!]!

  """
  A list of app features that are shown in the Shopify App Store listing.
  """
  features: [String!]!

  """
  Feedback from this app about the store.
  """
  feedback: AppFeedback

  """
  The flow trigger discovery webhook for this app.
  """
  flowTriggerDiscoveryWebhook: FlowTriggerDiscoveryWebhook

  """
  Handle of the app.
  """
  handle: String

  """
  Icon that represents the app.
  """
  icon: Image!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Webpage where you can install the app.
  """
  installUrl: URL

  """
  Corresponding AppInstallation for this shop and App.
  Returns null if the App is not installed.
  """
  installation: AppInstallation

  """
  Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use.
  """
  isPostPurchaseAppInUse: Boolean!

  """
  Webpage that the app starts in.
  """
  launchUrl: URL! @deprecated(reason: "Use AppInstallation.launchUrl instead")

  """
  Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
  """
  navigationItems: [NavigationItem!]! @deprecated(reason: "Use AppInstallation.navigationItems instead")

  """
  URL to edit app preferences.
  """
  preferencesUrl: URL

  """
  Whether the app was previously installed on the current shop.
  """
  previouslyInstalled: Boolean!

  """
  Detailed information about the app pricing.
  """
  pricingDetails: String

  """
  Summary of the app pricing details.
  """
  pricingDetailsSummary: String!

  """
  Link to app privacy policy.
  """
  privacyPolicyUrl: URL

  """
  The public category for the app.
  """
  publicCategory: AppPublicCategory!

  """
  Whether the app is published to the Shopify App Store.
  """
  published: Boolean!

  """
  Allowed redirect URLs.
  """
  redirectUrls: [URL!]!

  """
  The access scopes requested by the app.
  """
  requestedAccessScopes: [AccessScope!]!

  """
  Screenshots of the app.
  """
  screenshots: [Image!]!

  """
  Whether the app was developed by Shopify.
  """
  shopifyDeveloped: Boolean!

  """
  Locales the app developer can support for help requests.
  """
  supportLocales: [String!]!

  """
  Name of the app.
  """
  title: String!

  """
  Message that appears when the app is uninstalled. For example:
  By removing this app, you will no longer be able to publish products to
  MySocialSite or view this app in your Shopify admin. You can re-enable this
  channel at any time.
  """
  uninstallMessage: String!

  """
  Webpage where you can uninstall the app.
  """
  uninstallUrl: URL @deprecated(reason: "Use AppInstallation.uninstallUrl instead")

  """
  The webhook API version for the app.
  """
  webhookApiVersion: String!
}

"""
An auto-generated type for paginating through multiple Apps.
"""
type AppConnection {
  """
  A list of edges.
  """
  edges: [AppEdge!]!

  """
  A list of the nodes contained in AppEdge.
  """
  nodes: [App!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
"""
type AppCredit implements Node {
  """
  The amount that can be used towards future app purchases in Shopify.
  """
  amount: MoneyV2!

  """
  The date and time when the app credit was created.
  """
  createdAt: DateTime!

  """
  The description of the app credit.
  """
  description: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Whether the app credit is a test transaction.
  """
  test: Boolean!
}

"""
An auto-generated type for paginating through multiple AppCredits.
"""
type AppCreditConnection {
  """
  A list of edges.
  """
  edges: [AppCreditEdge!]!

  """
  A list of the nodes contained in AppCreditEdge.
  """
  nodes: [AppCredit!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AppCredit and a cursor during pagination.
"""
type AppCreditEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of AppCreditEdge.
  """
  node: AppCredit!
}

"""
Possible types of app developer.
"""
enum AppDeveloperType {
  """
  Indicates the app developer works directly for a Merchant.
  """
  MERCHANT

  """
  Indicates the app developer is a Partner.
  """
  PARTNER

  """
  Indicates the app developer is Shopify.
  """
  SHOPIFY

  """
  Indicates the app developer is unknown. It is not categorized as any of the other developer types.
  """
  UNKNOWN
}

"""
A script that defines a discount type.
"""
type AppDiscountType {
  """
  The app providing the app discount type.
  """
  app: App!

  """
  The App Bridge details for discount type configuration.
  """
  appBridge: FunctionsAppBridge!

  """
  The client ID of the app providing the app discount type.
  """
  appKey: String!

  """
  A description of the app discount type.
  """
  description: String

  """
  The class of the app discount type.
  """
  discountClass: DiscountClass!

  """
  The ID of the function providing the app discount type.
  """
  functionId: String!

  """
  The target type of the app discount type. Possible values: `SHIPPING_LINE` and `LINE_ITEM`.
  """
  targetType: DiscountApplicationTargetType!

  """
  The title of the app discount type.
  """
  title: String!
}

"""
An auto-generated type which holds one App and a cursor during pagination.
"""
type AppEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of AppEdge.
  """
  node: App!
}

"""
Reports the status of shops and their resources and displays this information
within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
to set up an app on their store.
"""
type AppFeedback {
  """
  The application associated to the feedback.
  """
  app: App!

  """
  A link to where merchants can resolve errors.
  """
  link: Link

  """
  The feedback message presented to the merchant.
  """
  messages: [UserError!]!
}

"""
Represents an installed application on a shop.
"""
type AppInstallation implements HasMetafields & Node {
  """
  The access scopes granted to the application by a merchant during installation.
  """
  accessScopes: [AccessScope!]!

  """
  The active application subscriptions billed to the shop on a recurring basis.
  """
  activeSubscriptions: [AppSubscription!]!

  """
  All subscriptions created for a shop.
  """
  allSubscriptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AppSubscriptionConnection!

  """
  Application which is installed.
  """
  app: App!

  """
  Information on where the app is accessible from the bulk action drop-down in admin.
  """
  appLinks: [AppLink!]!

  """
  The state of the app installation for this particular shop.
  """
  appState: String

  """
  The url used for rendering the app inside of an iframe.
  """
  appUrl(
    """
    Optional additional query parameters to include in the URL.
    Example: `very=cool&super=modern`
    """
    parameters: String
  ): URL!

  """
  Channel associated with the installed application.
  """
  channel: Channel @deprecated(reason: "Use `publication` instead.")

  """
  Credits that can be used towards future app purchases.
  """
  credits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AppCreditConnection!

  """
  List of the fulfillment services related to the app.
  """
  fulfillmentServices: [FulfillmentService!]!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The URL to launch the application.
  """
  launchUrl: URL!

  """
  Analytics API token for Legacy Embedded Apps ONLY.
  """
  legacyEasdkAnalyticsToken: String

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  App's navigation item. Applicable to primary navs only. Please use navigationItems if you need to retrieve sales channels.
  """
  navigationItem(
    """
    Type for navigation item.
    """
    type: NavigationItemV2Type!
  ): NavigationItemV2

  """
  Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
  """
  navigationItems: [NavigationItem!]!

  """
  One-time purchases to a shop.
  """
  oneTimePurchases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AppPurchaseOneTimeConnection!

  """
  The personally identifiable information the app has access to.
  """
  pii: [String!]!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  A count of products with feedback for the app.
  """
  productFeedbackCount: Int!

  """
  The publication associated with the installed application.
  """
  publication: Publication

  """
  The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes.
  """
  revenueAttributionRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AppRevenueAttributionRecordConnection!

  """
  Shop proxy configuration for the app.
  """
  shopProxy: ShopProxy

  """
  Subscriptions charge to a shop on a recurring basis.
  """
  subscriptions: [AppSubscription!]! @deprecated(reason: "Use `activeSubscriptions` instead.")

  """
  Trial information. If null the app does not have a trial.
  """
  trial: AppTrial

  """
  The URL to uninstall the application.
  """
  uninstallUrl: URL
}

"""
App links make apps accessible to the merchant throughout the Shopify admin.
Configured app links appear in the *More actions* menu on specified pages in Shopify admin.
"""
type AppLink {
  """
  The app that registered this link.
  """
  app: App!

  """
  Whether the app link uses the Embedded App SDK.
  """
  embedded: Boolean! @deprecated(reason: "Use `App.embedded` instead.")

  """
  The merchant facing icon of the app link.
  """
  icon: Image!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Specifies whether the app link is opened in the context of the current page or not.
  """
  inContext: Boolean!

  """
  Page with the app accessible from the bulk action drop-down in admin.
  """
  location: String!

  """
  Task-oriented text that appears to the merchant in the App menu.
  """
  text: String!

  """
  The title of the app link.
  """
  title: String! @deprecated(reason: "Use `App.title` instead.")

  """
  The URL where your app is hosted, or a specific URL for this task.
  """
  url: URL!
}

"""
The plan billed to a shop on a recurring basis.
"""
union AppPlan = RecurringAppPlan | UsageAppPlan

"""
The app plan that the merchant is subscribed to.
"""
type AppPlanV2 {
  """
  The plan billed to a shop on a recurring basis.
  """
  pricingDetails: AppPricingDetails!
}

"""
The information about the price that's charged to a shop every plan period.
The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
"""
union AppPricingDetails = AppRecurringPricing | AppUsagePricing

"""
The frequency at which the shop is billed for an app subscription.
"""
enum AppPricingInterval {
  """
  The app subscription bills the shop annually.
  """
  ANNUAL

  """
  The app subscription bills the shop every 30 days.
  """
  EVERY_30_DAYS
}

"""
The public-facing category for an app.
"""
enum AppPublicCategory {
  """
  The app's public category is [custom](https://shopify.dev/apps/distribution#capabilities-and-requirements).
  """
  CUSTOM

  """
  The app's public category is other. An app is in this category if it's not
  classified under any of the other app types (private, public, or custom).
  """
  OTHER

  """
  The app's public category is [private](https://shopify.dev/apps/distribution#deprecated-app-types).
  """
  PRIVATE

  """
  The app's public category is [public](https://shopify.dev/apps/distribution#capabilities-and-requirements).
  """
  PUBLIC
}

"""
Services and features purchased once by the store.
"""
interface AppPurchase {
  """
  The date and time when the app purchase occurred.
  """
  createdAt: DateTime!

  """
  The name of the app purchase.
  """
  name: String!

  """
  The amount to be charged to the store for the app purchase.
  """
  price: MoneyV2!

  """
  The status of the app purchase.
  """
  status: AppPurchaseStatus!

  """
  Whether the app purchase is a test transaction.
  """
  test: Boolean!
}

"""
Services and features purchased once by a store.
"""
type AppPurchaseOneTime implements AppPurchase & Node {
  """
  The date and time when the app purchase occurred.
  """
  createdAt: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The name of the app purchase.
  """
  name: String!

  """
  The amount to be charged to the store for the app purchase.
  """
  price: MoneyV2!

  """
  The status of the app purchase.
  """
  status: AppPurchaseStatus!

  """
  Whether the app purchase is a test transaction.
  """
  test: Boolean!
}

"""
An auto-generated type for paginating through multiple AppPurchaseOneTimes.
"""
type AppPurchaseOneTimeConnection {
  """
  A list of edges.
  """
  edges: [AppPurchaseOneTimeEdge!]!

  """
  A list of the nodes contained in AppPurchaseOneTimeEdge.
  """
  nodes: [AppPurchaseOneTime!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.
"""
type AppPurchaseOneTimeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of AppPurchaseOneTimeEdge.
  """
  node: AppPurchaseOneTime!
}

"""
The approval status of the app purchase.

The merchant is charged for the purchase immediately after approval, and the status changes to `active`.
If the payment fails, then the app purchase remains `pending`.

Purchases start as `pending` and can change to: `active`, `declined`, `expired`. After a purchase changes, it
remains in that final state.
"""
enum AppPurchaseStatus {
  """
  The app purchase has been approved by the merchant and is ready to be
  activated by the app. App purchases created through the GraphQL Admin API are
  activated upon approval.
  """
  ACCEPTED @deprecated(reason: "As of API version 2021-01, when a merchant accepts an app purchase, the status immediately changes from `pending` to `active`.")

  """
  The app purchase was approved by the merchant and has been activated by the
  app. Active app purchases are charged to the merchant and are paid out to the partner.
  """
  ACTIVE

  """
  The app purchase was declined by the merchant.
  """
  DECLINED

  """
  The app purchase was not accepted within two days of being created.
  """
  EXPIRED

  """
  The app purchase is pending approval by the merchant.
  """
  PENDING
}

"""
The pricing information about a subscription app.
The object contains an interval (the frequency at which the shop is billed for an app subscription) and
a price (the amount to be charged to the subscribing shop at each interval).
"""
type AppRecurringPricing {
  """
  The discount applied to the subscription for a given number of billing intervals.
  """
  discount: AppSubscriptionDiscount

  """
  The frequency at which the subscribing shop is billed for an app subscription.
  """
  interval: AppPricingInterval!

  """
  The amount and currency to be charged to the subscribing shop every billing interval.
  """
  price: MoneyV2!
}

"""
Represents app revenue that was captured externally by the partner.
"""
type AppRevenueAttributionRecord implements Node {
  """
  The financial amount captured in this attribution.
  """
  amount: MoneyV2!

  """
  The timestamp when the financial amount was captured.
  """
  capturedAt: DateTime!

  """
  The timestamp at which this revenue attribution was issued.
  """
  createdAt: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The unique value submitted during the creation of the app revenue attribution record.
  For more information, refer to
  [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
  """
  idempotencyKey: String!

  """
  Indicates whether this is a test submission.
  """
  test: Boolean!

  """
  The type of revenue attribution.
  """
  type: AppRevenueAttributionType!
}

"""
An auto-generated type for paginating through multiple AppRevenueAttributionRecords.
"""
type AppRevenueAttributionRecordConnection {
  """
  A list of edges.
  """
  edges: [AppRevenueAttributionRecordEdge!]!

  """
  A list of the nodes contained in AppRevenueAttributionRecordEdge.
  """
  nodes: [AppRevenueAttributionRecord!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.
"""
type AppRevenueAttributionRecordEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of AppRevenueAttributionRecordEdge.
  """
  node: AppRevenueAttributionRecord!
}

"""
Represents the billing types of revenue attribution.
"""
enum AppRevenueAttributionType {
  """
  App purchase related revenue collection.
  """
  APPLICATION_PURCHASE

  """
  App subscription revenue collection.
  """
  APPLICATION_SUBSCRIPTION

  """
  App usage-based revenue collection.
  """
  APPLICATION_USAGE

  """
  Other app revenue collection type.
  """
  OTHER
}

"""
Provides users access to services and/or features for a duration of time.
"""
type AppSubscription implements Node {
  """
  The frequency with which the subscribing shop is billed for an app subscription.
  """
  billingInterval: AppSubscriptionBillingInterval!

  """
  The date and time when the app subscription was created.
  """
  createdAt: DateTime!

  """
  The date and time when the current app subscription period ends. Returns `null` if the subscription isn't active.
  """
  currentPeriodEnd: DateTime

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The plans attached to the app subscription.
  """
  lineItems: [AppSubscriptionLineItem!]!

  """
  The name of the app subscription.
  """
  name: String!

  """
  Defines the cost of an app subscription.
  """
  plans: [AppPlan!]! @deprecated(reason: "Use `lineItems` instead.")

  """
  The URL that the merchant is redirected to after approving the app subscription.
  """
  returnUrl: URL!

  """
  The status of the app subscription.
  """
  status: AppSubscriptionStatus!

  """
  Specifies whether the app subscription is a test transaction.
  """
  test: Boolean!

  """
  The number of free trial days, starting at the subscription's creation date, by which billing is delayed.
  """
  trialDays: Int!
}

"""
Possible billing intervals for an app subscription.
"""
enum AppSubscriptionBillingInterval {
  """
  App charge applied annually.
  """
  ANNUAL

  """
  App charge applied every 30 days.
  """
  EVERY_30_DAYS
}

"""
An auto-generated type for paginating through multiple AppSubscriptions.
"""
type AppSubscriptionConnection {
  """
  A list of edges.
  """
  edges: [AppSubscriptionEdge!]!

  """
  A list of the nodes contained in AppSubscriptionEdge.
  """
  nodes: [AppSubscription!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Discount applied to the recurring pricing portion of a subscription.
"""
type AppSubscriptionDiscount {
  """
  The total number of billing intervals to which the discount will be applied.
  The discount will be applied to an indefinite number of billing intervals if this value is blank.
  """
  durationLimitInIntervals: Int

  """
  The price of the subscription after the discount is applied.
  """
  priceAfterDiscount: MoneyV2!

  """
  The remaining number of billing intervals to which the discount will be applied.
  """
  remainingDurationInIntervals: Int

  """
  The value of the discount applied every billing interval.
  """
  value: AppSubscriptionDiscountValue!
}

"""
The fixed amount value of a discount.
"""
type AppSubscriptionDiscountAmount {
  """
  The fixed amount value of a discount.
  """
  amount: MoneyV2!
}

"""
The percentage value of a discount.
"""
type AppSubscriptionDiscountPercentage {
  """
  The percentage value of a discount.
  """
  percentage: Float!
}

"""
The value of the discount.
"""
union AppSubscriptionDiscountValue = AppSubscriptionDiscountAmount | AppSubscriptionDiscountPercentage

"""
An auto-generated type which holds one AppSubscription and a cursor during pagination.
"""
type AppSubscriptionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of AppSubscriptionEdge.
  """
  node: AppSubscription!
}

"""
The plan attached to an app subscription.
"""
type AppSubscriptionLineItem {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The pricing model for the app subscription.
  """
  plan: AppPlanV2!

  """
  A list of the store's usage records for a usage pricing plan.
  """
  usageRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AppUsageRecordConnection!
}

"""
The status of the app subscription.
"""
enum AppSubscriptionStatus {
  """
  The app subscription has been approved by the merchant and is ready to be activated by the app.
  """
  ACCEPTED @deprecated(reason: "As of API version 2021-01, when a merchant approves an app subscription, the status immediately transitions from `pending` to `active`.")

  """
  The app subscription has been approved by the merchant. Active app
  subscriptions are billed to the shop. After payment, partners receive payouts.
  """
  ACTIVE

  """
  The app subscription was cancelled by the app. This could be caused by the app
  being uninstalled, a new app subscription being activated, or a direct
  cancellation by the app. This is a terminal state.
  """
  CANCELLED

  """
  The app subscription was declined by the merchant. This is a terminal state.
  """
  DECLINED

  """
  The app subscription wasn't approved by the merchant within two days of being created. This is a terminal state.
  """
  EXPIRED

  """
  The app subscription is on hold due to non-payment. The subscription re-activates after payments resume.
  """
  FROZEN

  """
  The app subscription is pending approval by the merchant.
  """
  PENDING
}

"""
App trial information.
"""
type AppTrial {
  """
  Whether the app is in trial.
  """
  active: Boolean!

  """
  Description of time remaining in trial.
  """
  statusMessage: String!
}

"""
Defines a usage pricing model for the app subscription.
These charges are variable based on how much the merchant uses the app.
"""
type AppUsagePricing {
  """
  The total usage records for interval.
  """
  balanceUsed: MoneyV2!

  """
  The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
  This prevents billing from exceeding a maximum threshold over the duration of the billing period.
  For the merchant to continue using the app after exceeding a capped amount,
  they would need to agree to a new usage charge.
  """
  cappedAmount: MoneyV2!

  """
  The frequency with which the app usage records are billed.
  """
  interval: AppPricingInterval!

  """
  The terms and conditions for app usage pricing.
  Must be present in order to create usage charges.
  The terms are presented to the merchant when they approve an app's usage charges.
  """
  terms: String!
}

"""
Store usage for app subscriptions with usage pricing.
"""
type AppUsageRecord implements Node {
  """
  The date and time when the usage record was created.
  """
  createdAt: DateTime!

  """
  The description of the app usage record.
  """
  description: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The price of the usage record.
  """
  price: MoneyV2!

  """
  Defines the usage pricing plan the merchant is subscribed to.
  """
  subscriptionLineItem: AppSubscriptionLineItem!
}

"""
An auto-generated type for paginating through multiple AppUsageRecords.
"""
type AppUsageRecordConnection {
  """
  A list of edges.
  """
  edges: [AppUsageRecordEdge!]!

  """
  A list of the nodes contained in AppUsageRecordEdge.
  """
  nodes: [AppUsageRecord!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AppUsageRecord and a cursor during pagination.
"""
type AppUsageRecordEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of AppUsageRecordEdge.
  """
  node: AppUsageRecord!
}

"""
Information aggregated for resources associated with a company such as addresses from all locations of the company.
"""
type AssociatedAggregates {
  """
  The list of addresses associated to the company.
  """
  addresses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CompanyAddressConnection!

  """
  The list of billing addresses associated to the company.
  """
  billingAddresses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CompanyAddressConnection!
}

"""
Represents a generic custom attribute.
"""
type Attribute {
  """
  Key or name of the attribute.
  """
  key: String!

  """
  Value of the attribute.
  """
  value: String
}

"""
Specifies the input fields required for an attribute.
"""
input AttributeInput {
  """
  Key or name of the attribute.
  """
  key: String!

  """
  Value of the attribute.
  """
  value: String!
}

"""
Automatic discount applications capture the intentions of a discount that was automatically applied.
"""
type AutomaticDiscountApplication implements DiscountApplication {
  """
  The allocated amount of the discount that was applied to the order.
  """
  allocatedAmount: DiscountApplicationAllocationAmount!

  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The title of the discount application.
  """
  title: String!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
Represents an object containing all information for channels available to a shop.
"""
type AvailableChannelDefinitionsByChannel {
  """
  The channel definitions for channels installed on a shop.
  """
  channelDefinitions: [ChannelDefinition!]!

  """
  The name of the channel.
  """
  channelName: String!
}

"""
The possible types for a badge.
"""
enum BadgeType {
  """
  This badge has type `attention`.
  """
  ATTENTION

  """
  This badge has type `default`.
  """
  DEFAULT

  """
  This badge has type `info`.
  """
  INFO

  """
  This badge has type `success`.
  """
  SUCCESS

  """
  This badge has type `warning`.
  """
  WARNING
}

"""
Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
the addition of a product.
"""
type BasicEvent implements Event & Node {
  """
  The name of the app that created the event.
  """
  appTitle: String

  """
  Whether the event was created by an app.
  """
  attributeToApp: Boolean!

  """
  Whether the event was caused by an admin user.
  """
  attributeToUser: Boolean!

  """
  The date and time when the event was created.
  """
  createdAt: DateTime!

  """
  Whether the event is critical.
  """
  criticalAlert: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Human readable text that describes the event.
  """
  message: FormattedString!
}

"""
Represents a billing account.
"""
type BillingAccount implements Node {
  """
  The payment method the merchant uses for invoices.
  """
  activePaymentMethod: BillingPaymentMethod

  """
  A list of the amount of unused credit for a specific category.
  """
  credits: [BillingCredit!]

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  All historical invoices belonging to the merchant.
  """
  invoices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BillingInvoiceConnection

  """
  A list of all of the merchant's active payment methods.
  """
  paymentMethods: [BillingPaymentMethod!]

  """
  Tax information.
  """
  taxInformation: BillingTaxInformation

  """
  Contains details about various billing thresholds imposed on the account.
  """
  thresholds: BillingThresholds

  """
  A represention of pending charges on a yet to be created invoice.
  """
  upcomingInvoice: BillingUpcomingInvoice

  """
  List of payment method types that the merchant is eligible to add to their account.
  """
  validPaymentMethods: [BillingPaymentMethodType!]!
}

"""
Represents payment using the merchant's balance.
"""
type BillingBalance implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!
}

"""
Represents a merchant's bank account.
"""
type BillingBankAccount implements Node {
  """
  Name of the account holder.
  """
  accountHolderName: String!

  """
  The type of account holder.
  """
  accountHolderType: BillingBankAccountHolderType!

  """
  Name of the bank.
  """
  bankName: String!

  """
  Bank account country.
  """
  countryCode: CountryCode!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The last 4 digits of the bank account.
  """
  lastDigits: String!

  """
  The bank account routing number.
  """
  routingNumber: Int!

  """
  The status of the verification process.
  """
  verificationStatus: BillingBankAccountVerificationStatus!

  """
  The time the bank account was verified.
  """
  verifiedAt: DateTime
}

"""
The types of account holder for a bank account.
"""
enum BillingBankAccountHolderType {
  """
  Company owned bank account.
  """
  COMPANY

  """
  Individual owned bank account.
  """
  INDIVIDUAL
}

"""
Possible states bank account verification can be in.
"""
enum BillingBankAccountVerificationStatus {
  """
  Bank account verification has failed and cannot be used for payments.
  """
  FAILED

  """
  Bank account is awaiting verification from the merchant.
  """
  INITIATED

  """
  Bank account verification has not been initiated by Shopify yet.
  """
  PENDING

  """
  Our payment gateway has confirmed that the bank account exists but is awaiting verification from the merchant.
  """
  VALIDATED

  """
  Bank account has been verified by the merchant and can be used for payments.
  """
  VERIFIED
}

"""
A credit amount for a specific category.
"""
type BillingCredit {
  """
  The category that the credit is applicable for.
  """
  category: BillingInvoiceableCategory!

  """
  The amount of the credit.
  """
  invoiceAmount: MoneyV2!
}

"""
Represents a merchant's credit card.
"""
type BillingCreditCard implements Node {
  """
  Brand of credit card.
  """
  brand: CardBrand!

  """
  Credit card's country.
  """
  countryCode: CountryCode!

  """
  Credit card expiry month.
  """
  expiryMonth: Int!

  """
  Credit card expiry year.
  """
  expiryYear: Int!

  """
  The credit card's bin number.
  """
  firstDigits: String!

  """
  First name of the card holder.
  """
  firstName: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The last 4 digits of the credit card.
  """
  lastDigits: String!

  """
  Last name of the card holder.
  """
  lastName: String!

  """
  Masked credit card number with only the last 4 digits displayed.
  """
  maskedNumber: String
}

"""
A merchant's invoice.
"""
type BillingInvoice implements Node {
  """
  The date Shopify will attempt to collect payment from the active payment method.
  """
  billOn: Date

  """
  The date and time that the invoice was created.
  """
  createdAt: DateTime

  """
  The date that the invoice is due.
  """
  dueOn: Date

  """
  Invoice has been fully refunded.
  """
  fullyRefunded: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Invoice name.
  """
  name: String!

  """
  The date and time that the invoice was paid.
  """
  paidAt: DateTime

  """
  Indicates that automated payment collection failed for this invoice.
  """
  paymentCollectionFailed: Boolean!

  """
  Invoice has been refunded at least partially.
  """
  refunded: Boolean!

  """
  The amount that has been refunded.
  """
  refundedAmount: MoneyV2!

  """
  The current state of the invoice.
  """
  status: BillingInvoiceStatus!

  """
  The invoice total less tax.
  """
  subtotalAmount: MoneyV2!

  """
  The amount of the invoice total that is tax.
  """
  taxAmount: MoneyV2!

  """
  The total requested amount.
  """
  totalAmount: MoneyV2!
}

"""
A charge is an aggregation of invoice transactions, either positive or negative in value.
"""
type BillingInvoiceCharge {
  """
  The invoiceable amount of the charge.
  """
  amount: MoneyV2!

  """
  The description of the charge.
  """
  description: String

  """
  The discount applied to the fee or charge.
  """
  discountValue: AppSubscriptionDiscountValue

  """
  The title of the charge.
  """
  title: String!

  """
  The primary URL to view details related to the charge. Typically, this URL
  shows a list of individual charges that makeup the rolled up charge.
  For application fees, however, the URL redirects to the app's page.
  """
  url: String
}

"""
Charges grouped and aggregated by category.
"""
type BillingInvoiceChargeCategory {
  """
  The invoiceable category.
  """
  category: BillingInvoiceableCategory!

  """
  List of the charges in the category.
  """
  charges: [BillingInvoiceCharge!]

  """
  Number of charges in the category.
  """
  count: Int!

  """
  The sub heading for the category. For example: “5 shipping charges” or “Shopify Basic Plan”.
  """
  description: String!

  """
  The name of the charge category. For example “Subscription” or “Shipping” or “Apps”.
  """
  name: String!

  """
  Total amount of the charges in the category.
  """
  subtotalAmount: MoneyV2!

  """
  Total number of charges in the category.
  """
  totalCount: Int!
}

"""
An auto-generated type for paginating through multiple BillingInvoices.
"""
type BillingInvoiceConnection {
  """
  A list of edges.
  """
  edges: [BillingInvoiceEdge!]!

  """
  A list of the nodes contained in BillingInvoiceEdge.
  """
  nodes: [BillingInvoice!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one BillingInvoice and a cursor during pagination.
"""
type BillingInvoiceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of BillingInvoiceEdge.
  """
  node: BillingInvoice!
}

"""
The various states an invoice can be in.
"""
enum BillingInvoiceStatus {
  """
  Indicates an invoice has been finalized ready for payment.
  """
  CLOSED

  """
  Indicates invoice payment has been unsuccessful.
  """
  FAILED

  """
  Indicates an invoice is awaiting scheduled, automated payment.
  """
  PENDING

  """
  Indicates an invoice being processed and not ready for payment.
  """
  POTENTIAL

  """
  Indicates an invoice is awaiting response of payment.
  """
  REQUESTING

  """
  Indicates an invoice has been successfully paid.
  """
  SUCCESS
}

"""
The various categories we create charges for.
"""
enum BillingInvoiceableCategory {
  """
  Application fee.
  """
  APPLICATION_FEE

  """
  Services Market Place fee.
  """
  BROKERED_SERVICE_FEE

  """
  Domain fee.
  """
  DOMAIN_FEE

  """
  Gateway surcharge fee.
  """
  ORDER_COMMISSION

  """
  Discount for an order order commission.
  """
  ORDER_COMMISSION_DISCOUNT

  """
  Other fee.
  """
  OTHER

  """
  Platform fee.
  """
  PLATFORM_FEE

  """
  POS fee.
  """
  POS_FEE

  """
  Shipping fee.
  """
  SHIPPING_FEE

  """
  Subscription fee discount.
  """
  SUBSCRIPTION_DISCOUNT

  """
  Subscription fee.
  """
  SUBSCRIPTION_FEE

  """
  Tax.
  """
  TAXES
}

"""
Represents payment outside of the Billing system.
"""
type BillingManualPayment implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!
}

"""
A charge or fee incurred by the merchant for good or services rendered.
"""
type BillingPayable {
  """
  The category of the fee or charge.
  """
  category: BillingInvoiceableCategory!

  """
  The creation time of the fee or charge.
  """
  createdAt: DateTime!

  """
  Description of the fee or charge.
  """
  description: String

  """
  The amount of the fee or charge.
  """
  invoiceAmount: MoneyV2!

  """
  The domain of the store which incurred the fee or charge.
  """
  myshopifyDomain: String

  """
  The id of the referenced object related to the fee or charge.
  """
  resourceId: String

  """
  The title of the charge or fee.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple BillingPayables.
"""
type BillingPayableConnection {
  """
  A list of edges.
  """
  edges: [BillingPayableEdge!]!

  """
  A list of the nodes contained in BillingPayableEdge.
  """
  nodes: [BillingPayable!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one BillingPayable and a cursor during pagination.
"""
type BillingPayableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of BillingPayableEdge.
  """
  node: BillingPayable!
}

"""
Represents a method of payment, such as a credit card.
"""
union BillingPaymentMethod = BillingBalance | BillingBankAccount | BillingCreditCard | BillingManualPayment | BillingPaypalAccount | BillingReseller

"""
The types of payment method.
"""
enum BillingPaymentMethodType {
  """
  Merchant's account balance is used as the method of payment.
  """
  BALANCE

  """
  Bank account payment method.
  """
  BANK_ACCOUNT

  """
  Credit card payment method.
  """
  CREDIT_CARD

  """
  Payment happens outside of the billing system.
  """
  MANUAL

  """
  PayPal payment method.
  """
  PAYPAL

  """
  Reseller payment method.
  """
  RESELLER
}

"""
Represents payment using the merchant's PayPal account.
"""
type BillingPaypalAccount implements Node {
  """
  The token used to verify the PayPal account with PayPal JS SDK.
  """
  clientToken: String

  """
  Email of the merchants PayPal account.
  """
  email: String

  """
  A globally-unique identifier.
  """
  id: ID!
}

"""
Represents payment via a named reseller.
"""
type BillingReseller implements Node {
  """
  The reseller identity.
  """
  handle: String!

  """
  A globally-unique identifier.
  """
  id: ID!
}

"""
Tax information.
"""
type BillingTaxInformation {
  """
  The last time the tax number was successfully verified.
  """
  lastVerifiedAt: DateTime

  """
  Is the merchant tax registered.
  """
  registered: Boolean

  """
  Tax registration number.
  """
  registrationNumber: String

  """
  The verification status of the tax number.
  """
  verificationStatus: BillingTaxNumberVerificationStatus
}

"""
The various states an tax number verification can be in.
"""
enum BillingTaxNumberVerificationStatus {
  """
  Tax number verification errored.
  """
  ERROR

  """
  Tax number verification failed.
  """
  FAILED

  """
  Opted out of submitting tax information.
  """
  OPT_OUT

  """
  Awaiting tax number verification.
  """
  PENDING

  """
  Tax number verification successful.
  """
  SUCCESS
}

"""
Contains details about a billing thresholds imposed on the account.
"""
type BillingThresholds {
  """
  The sum of pending charges.
  """
  currentAmount: MoneyV2!

  """
  The account will be invoiced when the thresholds are reached.
  """
  enabled: Boolean!

  """
  The amount that should pending charges exceed at anytime will result in being invoiced.
  """
  runningMaximumAmount: MoneyV2!
}

"""
A preview of the merchant's upcoming invoice.
"""
type BillingUpcomingInvoice {
  """
  The date Shopify will issue the bill to the merchant.
  """
  billOn: Date

  """
  Breakdown of the charges incurred by category.
  """
  chargeCategories: [BillingInvoiceChargeCategory!]!

  """
  Invoice name.
  """
  name: String!

  """
  List of upcoming charges or fees.
  """
  payables(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BillingPayableConnection

  """
  Total of all the upcoming charges.
  """
  subtotalAmount: MoneyV2!
}

"""
Represents the dimensions of a three-dimensional box.
"""
type BoxDimensions {
  """
  The height in `unit`s.
  """
  height: Float!

  """
  The length in `unit`s.
  """
  length: Float!

  """
  Unit of measurement for `length`, `width`, and `height`.
  """
  unit: LengthUnit!

  """
  The width in `unit`s.
  """
  width: Float!
}

type Brand {
  id: ID!
  name: String!
  products: [Product!]!
}

"""
An asynchronous long-running operation to fetch data in bulk or to bulk import data.

Bulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After
they are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
a link to the data in [JSONL](http://jsonlines.org/) format.

Refer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
"""
type BulkOperation implements Node {
  """
  When the bulk operation was successfully completed.
  """
  completedAt: DateTime

  """
  When the bulk operation was created.
  """
  createdAt: DateTime!

  """
  Error code for failed operations.
  """
  errorCode: BulkOperationErrorCode

  """
  File size in bytes of the file in the `url` field.
  """
  fileSize: UnsignedInt64

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  A running count of all the objects processed.
  For example, when fetching all the products and their variants, this field counts both products and variants.
  This field can be used to track operation progress.
  """
  objectCount: UnsignedInt64!

  """
  The URL that points to the partial or incomplete response data (in
  [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.
  The URL expires 7 days after the operation fails. Returns `null` when there's no data available.
  """
  partialDataUrl: URL

  """
  GraphQL query document specified in `bulkOperationRunQuery`.
  """
  query: String!

  """
  A running count of all the objects that are processed at the root of the query.
  For example, when fetching all the products and their variants, this field only counts products.
  This field can be used to track operation progress.
  """
  rootObjectCount: UnsignedInt64!

  """
  Status of the bulk operation.
  """
  status: BulkOperationStatus!

  """
  The bulk operation's type.
  """
  type: BulkOperationType!

  """
  The URL that points to the response data in [JSONL](http://jsonlines.org/) format.
  The URL expires 7 days after the operation completes.
  """
  url: URL
}

"""
Error codes for failed bulk operations.
"""
enum BulkOperationErrorCode {
  """
  The provided operation `query` returned access denied due to missing
  [access scopes](https://shopify.dev/api/usage/access-scopes).
  Review the requested object permissions and execute the query as a normal non-bulk GraphQL request to see more details.
  """
  ACCESS_DENIED

  """
  The operation resulted in partial or incomplete data due to internal server errors during execution.
  These errors might be intermittent, so you can try performing the same query again.
  """
  INTERNAL_SERVER_ERROR

  """
  The operation resulted in partial or incomplete data due to query timeouts during execution.
  In some cases, timeouts can be avoided by modifying your `query` to select fewer fields.
  """
  TIMEOUT
}

"""
The valid values for the status of a bulk operation.
"""
enum BulkOperationStatus {
  """
  The bulk operation has been canceled.
  """
  CANCELED

  """
  Cancelation has been initiated on the bulk operation. There may be a short delay from when a cancelation
  starts until the operation is actually canceled.
  """
  CANCELING

  """
  The bulk operation has successfully completed.
  """
  COMPLETED

  """
  The bulk operation has been created.
  """
  CREATED

  """
  The bulk operation URL has expired.
  """
  EXPIRED

  """
  The bulk operation has failed. For information on why the operation failed, use
  [BulkOperation.errorCode](https://shopify.dev/api/admin-graphql/latest/enums/bulkoperationerrorcode).
  """
  FAILED

  """
  The bulk operation is runnning.
  """
  RUNNING
}

"""
The valid values for the bulk operation's type.
"""
enum BulkOperationType {
  """
  The bulk operation is a mutation.
  """
  MUTATION

  """
  The bulk operation is a query.
  """
  QUERY
}

"""
Settings describing the behavior of checkout for a B2B buyer.
"""
type BuyerExperienceConfiguration {
  """
  Whether to checkout to draft order for merchant review.
  """
  checkoutToDraft: Boolean!

  """
  Whether a buyer must pay at checkout or they can also choose to pay
  later using net terms.
  """
  payNowOnly: Boolean!

  """
  Represents the merchant configured payment terms.
  """
  paymentTermsTemplate: PaymentTermsTemplate
}

"""
A discount that is automatically applied to an order that is being edited.
"""
type CalculatedAutomaticDiscountApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The level at which the discount was applied.
  """
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
An amount discounting the line that has been allocated by an associated discount application.
"""
type CalculatedDiscountAllocation {
  """
  The money amount that's allocated by the discount application in shop and presentment currencies.
  """
  allocatedAmountSet: MoneyBag!

  """
  The discount that the allocated amount originated from.
  """
  discountApplication: CalculatedDiscountApplication!
}

"""
A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied.
"""
interface CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The level at which the discount was applied.
  """
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
An auto-generated type for paginating through multiple CalculatedDiscountApplications.
"""
type CalculatedDiscountApplicationConnection {
  """
  A list of edges.
  """
  edges: [CalculatedDiscountApplicationEdge!]!

  """
  A list of the nodes contained in CalculatedDiscountApplicationEdge.
  """
  nodes: [CalculatedDiscountApplication!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.
"""
type CalculatedDiscountApplicationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CalculatedDiscountApplicationEdge.
  """
  node: CalculatedDiscountApplication!
}

"""
A discount code that is applied to an order that is being edited.
"""
type CalculatedDiscountCodeApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The level at which the discount was applied.
  """
  appliedTo: DiscountApplicationLevel!

  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
A calculated exchange containing a refund and checkout to be processed.
"""
type CalculatedExchange {
  """
  The amount of funds that must be transferred during the exchange.
  """
  balance: MoneyV2!

  """
  The checkout portion of an exchange.
  """
  checkout: CalculatedExchangeCheckout!

  """
  The refund portion of an exchange.
  """
  intendedRefund: IntendedExchangeRefund!

  """
  Staff member who is processing the exchange.
  """
  staffMember: StaffMember!

  """
  Suggested transactions for the exchange.
  """
  suggestedTransactions: [SuggestedOrderTransaction!]!

  """
  Specifies the flow of the balance on the exchange.
  """
  type: ExchangeType!
}

"""
A checkout that will be created upon completing an exchange.
"""
type CalculatedExchangeCheckout {
  """
  Customer of exchange.
  """
  customer: Customer

  """
  The discount amounts that have been applied to the checkout.
  """
  discountAllocations: [DiscountAllocation!]!

  """
  Discounts that have been applied on the checkout.
  """
  discountApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscountApplicationConnection!

  """
  Line items on the exchange checkout.
  """
  lineItems: [ExchangeCheckoutLineItem!]!

  """
  Shipping address for the exchange checkout.
  """
  shippingAddress: MailingAddress

  """
  Shipping line for the exchange checkout.
  """
  shippingLine: ExchangeCheckoutShippingLine

  """
  Subtotal price for the exchange checkout.
  """
  subtotalPrice: MoneyV2!

  """
  Tax lines belonging to an exchange checkout.
  """
  taxLines: [ExchangeCheckoutTaxLine!]!

  """
  Total discounts for the exchange checkout.
  """
  totalDiscounts: MoneyV2!

  """
  Total line items price for the exchange checkout.
  """
  totalLineItemsPrice: MoneyV2!

  """
  Total price for the exchange checkout.
  """
  totalPrice: MoneyV2!

  """
  Total tax for the exchange checkout.
  """
  totalTax: MoneyV2!
}

"""
The calculated exchange payload. Contains the actual exchange if successful or any potential errors.
"""
type CalculatedExchangePayload {
  """
  The calculated exchange.
  """
  exchange: CalculatedExchange

  """
  List of errors that occurred calculating the exchange.
  """
  userErrors: [ExchangeError!]!
}

"""
A line item involved in order editing that may be newly added or have new changes applied.
"""
type CalculatedLineItem {
  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  calculatedDiscountAllocations: [CalculatedDiscountAllocation!]!

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [DiscountAllocation!]! @deprecated(reason: "Use `calculatedDiscountAllocations` instead.")

  """
  The price of a single quantity of the line item with line item discounts
  applied, in shop and presentment currencies. Discounts applied to the entire
  order aren't included in this price.
  """
  discountedUnitPriceSet: MoneyBag!

  """
  The total number of items that can be edited.
  """
  editableQuantity: Int!

  """
  The editable quantity prior to any changes made in the current edit.
  """
  editableQuantityBeforeChanges: Int!

  """
  The total price of editable lines in shop and presentment currencies.
  """
  editableSubtotalSet: MoneyBag!

  """
  Whether the calculated line item has a staged discount.
  """
  hasStagedLineItemDiscount: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The image object associated to the line item's variant.
  """
  image: Image

  """
  The variant unit price in shop and presentment currencies, without any discounts applied.
  """
  originalUnitPriceSet: MoneyBag!

  """
  The total number of items.
  """
  quantity: Int!

  """
  Whether the line item can be restocked or not.
  """
  restockable: Boolean!

  """
  Whether the changes on the line item will result in a restock.
  """
  restocking: Boolean!

  """
  The variant SKU number.
  """
  sku: String

  """
  A list of changes that affect this line item.
  """
  stagedChanges: [OrderStagedChange!]!

  """
  The title of the product.
  """
  title: String!

  """
  The total price of uneditable lines in shop and presentment currencies.
  """
  uneditableSubtotalSet: MoneyBag!

  """
  The product variant associated with this line item. The value is null for custom line items and items where
  the variant has been deleted.
  """
  variant: ProductVariant

  """
  The title of the variant.
  """
  variantTitle: String
}

"""
An auto-generated type for paginating through multiple CalculatedLineItems.
"""
type CalculatedLineItemConnection {
  """
  A list of edges.
  """
  edges: [CalculatedLineItemEdge!]!

  """
  A list of the nodes contained in CalculatedLineItemEdge.
  """
  nodes: [CalculatedLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.
"""
type CalculatedLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CalculatedLineItemEdge.
  """
  node: CalculatedLineItem!
}

"""
Represents a discount that was manually created for an order that is being edited.
"""
type CalculatedManualDiscountApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The level at which the discount was applied.
  """
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
An order with edits applied but not saved.
"""
type CalculatedOrder implements Node {
  """
  Returns only the new discount applications being added to the order in the current edit.
  """
  addedDiscountApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CalculatedDiscountApplicationConnection!

  """
  Returns only the new line items being added to the order during the current edit.
  """
  addedLineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CalculatedLineItemConnection!

  """
  Warnings and informational alerts to show when editing this order in the Shopify admin.
  """
  alerts: [ResourceAlert!]!

  """
  Amount of the order-level discount (does not contain any line item discounts) in shop and presentment currencies.
  """
  cartDiscountAmountSet: MoneyBag

  """
  Whether the changes have been applied and saved to the order.
  """
  committed: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Returns all items on the order that existed before starting the edit.
  Will include any changes that have been made.
  Will not include line items added during the current edit.
  """
  lineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CalculatedLineItemConnection!

  """
  The HTML of the customer notification for the order edit.
  """
  notificationPreviewHtml: HTML

  """
  The customer notification title.
  """
  notificationPreviewTitle: String!

  """
  The order without any changes applied.
  """
  order: Order! @deprecated(reason: "Use `originalOrder` instead.")

  """
  The order without any changes applied.
  """
  originalOrder: Order!

  """
  List of changes made to the order during the current edit.
  """
  stagedChanges(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderStagedChangeConnection!

  """
  The sum of the quantities for the line items that contribute to the order's subtotal.
  """
  subtotalLineItemsQuantity: Int!

  """
  The subtotal of the line items, in shop and presentment currencies, after all
  the discounts are applied.  The subtotal does not include shipping.  The
  subtotal includes taxes for taxes-included orders and excludes taxes for
  taxes-excluded orders.
  """
  subtotalPriceSet: MoneyBag

  """
  Taxes charged for the line item.
  """
  taxLines: [TaxLine!]!

  """
  Total price of the order less the total amount received from the customer in shop and presentment currencies.
  """
  totalOutstandingSet: MoneyBag!

  """
  Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
  """
  totalPriceSet: MoneyBag!
}

"""
A discount created by a Shopify script for an order that is being edited.
"""
type CalculatedScriptDiscountApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The level at which the discount was applied.
  """
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
The onboarding state of a payment method.
"""
type CapabilityParams {
  """
  Whether the payment method is available to process payments.
  """
  available: Boolean!

  """
  A message that describes why a payment method is disabled or pending.
  """
  message: PaymentMethodConfigurationMessage
}

"""
Card brand, such as Visa or Mastercard, which can be used for payments.
"""
enum CardBrand {
  """
  American Express.
  """
  AMERICAN_EXPRESS

  """
  Bogus.
  """
  BOGUS

  """
  Dankort.
  """
  DANKORT

  """
  Diners Club.
  """
  DINERS_CLUB

  """
  Discover.
  """
  DISCOVER

  """
  Eftpos.
  """
  EFTPOS_AU

  """
  Elo.
  """
  ELO

  """
  Forbrugsforeningen.
  """
  FORBRUGSFORENINGEN

  """
  Hyper Card.
  """
  HYPERCARD

  """
  Interac.
  """
  INTERAC

  """
  JCB.
  """
  JCB

  """
  Laser.
  """
  LASER

  """
  Maestro.
  """
  MAESTRO

  """
  Mastercard.
  """
  MASTERCARD

  """
  RuPay.
  """
  RUPAY

  """
  UnionPay.
  """
  UNIONPAY

  """
  Visa.
  """
  VISA

  """
  Visa Electron.
  """
  VISAELECTRON
}

"""
Card payment details related to a transaction.
"""
type CardPaymentDetails {
  """
  The response code from the address verification system (AVS). The code is always a single letter.
  """
  avsResultCode: String

  """
  The issuer identification number (IIN), formerly known as bank identification
  number (BIN) of the customer's credit card. This is made up of the first few
  digits of the credit card number.
  """
  bin: String

  """
  The name of the company that issued the customer's credit card.
  """
  company: String

  """
  The response code from the credit card company indicating whether the customer
  entered the card security code, or card verification value, correctly. The
  code is a single letter or empty string.
  """
  cvvResultCode: String

  """
  The month in which the used credit card expires.
  """
  expirationMonth: Int

  """
  The year in which the used credit card expires.
  """
  expirationYear: Int

  """
  The holder of the credit card.
  """
  name: String

  """
  The customer's credit card number, with most of the leading digits redacted.
  """
  number: String

  """
  Digital wallet used for the payment.
  """
  wallet: DigitalWallet
}

"""
A channel represents an app where you sell a group of products and collections.
A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
"""
type Channel implements Node {
  """
  The underlying app used by the channel.
  """
  app: App!

  """
  The collection publications for the list of collections published to the channel.
  """
  collectionPublicationsV3(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ResourcePublicationConnection!

  """
  The list of collections published to the channel.
  """
  collections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CollectionConnection!

  """
  The unique identifier for the channel.
  """
  handle: String! @deprecated(reason: "Use `id` instead.")

  """
  Whether the collection is available to the channel.
  """
  hasCollection(
    """
    The collection ID to check.
    """
    id: ID!
  ): Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The name of the channel.
  """
  name: String!

  """
  The menu items for the channel, which also appear as submenu items in the left navigation sidebar in the Shopify admin.
  """
  navigationItems: [NavigationItem!]! @deprecated(reason: "Use [AppInstallation.navigationItems](\n          https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-navigationitems) instead.")

  """
  Home page for the channel.
  """
  overviewPath: URL @deprecated(reason: "Use [AppInstallation.launchUrl](\n          https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-launchurl) instead.")

  """
  The product publications for the products published to the channel.
  """
  productPublications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductPublicationConnection! @deprecated(reason: "Use `productPublicationsV3` instead.")

  """
  The product publications for the list of products published to the channel.
  """
  productPublicationsV3(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ResourcePublicationConnection!

  """
  The list of products published to the channel.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductConnection!

  """
  Whether the channel supports future publishing.
  """
  supportsFuturePublishing: Boolean!
}

"""
An auto-generated type for paginating through multiple Channels.
"""
type ChannelConnection {
  """
  A list of edges.
  """
  edges: [ChannelEdge!]!

  """
  A list of the nodes contained in ChannelEdge.
  """
  nodes: [Channel!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A channel definition represents channels surfaces on the platform.
A channel definition can be a platform or a subsegment of it such as Facebook
Home, Instagram Live, Instagram Shops, or WhatsApp chat.
"""
type ChannelDefinition implements Node {
  """
  Name of the channel that this sub channel belongs to.
  """
  channelName: String!

  """
  Unique string used as a public identifier for the channel definition.
  """
  handle: String!

  """
  The unique identifier for the channel definition.
  """
  id: ID!

  """
  Name of the sub channel (e.g. Online Store, Instagram Shopping, TikTok Live).
  """
  subChannelName: String!

  """
  Icon displayed when showing the channel in admin.
  """
  svgIcon: String
}

"""
An auto-generated type which holds one Channel and a cursor during pagination.
"""
type ChannelEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ChannelEdge.
  """
  node: Channel!
}

"""
Contains the information for a given sales channel.
"""
type ChannelInformation implements Node {
  """
  The app associated with the channel.
  """
  app: App!

  """
  The channel definition associated with the channel.
  """
  channelDefinition: ChannelDefinition

  """
  The unique identifier for the channel.
  """
  channelId: ID!

  """
  A globally-unique identifier.
  """
  id: ID!
}

"""
A container for all the information required to check out items and pay.
"""
type Checkout {
  """
  The ID of the checkout.
  """
  id: ID!

  """
  The URL that the customer should follow to complete their checkout.
  """
  toUrl(
    """
    The type of checkout URL.
    """
    area: CheckoutToUrlState!

    """
    Optional query parameters that are passed as JSON when generating the URL.
    """
    queryParams: JSON
  ): URL
}

"""
A checkout profile defines the branding settings and the UI extensions for a
store's checkout. A checkout profile could be published or draft. A store might
have at most one published checkout profile, which is used to render their live
checkout. The store could also have multiple draft profiles that were created,
previewed, and published using the admin checkout editor.
"""
type CheckoutProfile implements Node {
  """
  The date and time when the checkout profile was created.
  """
  createdAt: DateTime!

  """
  The date and time when the checkout profile was last edited.
  """
  editedAt: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Whether the checkout profile is published or not.
  """
  isPublished: Boolean!

  """
  The profile name.
  """
  name: String!

  """
  The checkout preview token.
  """
  previewToken: String!

  """
  The date and time when the checkout profile was last updated.
  """
  updatedAt: DateTime!
}

"""
The possible states of the `to_url` field for a checkout.
"""
enum CheckoutToUrlState {
  """
  The checkout recovery URL.
  """
  ABANDONED

  """
  The shop's permanent URL.
  """
  ALTERNATE

  """
  The checkout main URL.
  """
  INVOICE_PAYMENT

  """
  The merchant's admin checkout URL.
  """
  MERCHANT
}

"""
Represents a group of products that can be displayed in online stores and other
sales channels in categories, which makes it easy for customers to find them.
For example, an athletics store might create different collections for running
attire, shoes, and accessories.

Collections can be defined by conditions, such as whether they match certain
product tags. These are called smart or automated collections.

Collections can also be created for a custom group of products. These are called custom or manual collections.
"""
type Collection implements HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Node & Publishable {
  """
  The number of publications a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!

  """
  A single-line, text-only description of the collection, stripped of any HTML
  tags and formatting that were included in the description.
  """
  description(
    """
    Truncates string after the given length.
    """
    truncateAt: Int
  ): String!

  """
  The description of the collection, including any HTML tags and formatting.
  This content is typically displayed to customers, such as on an online store,
  depending on the theme.
  """
  descriptionHtml: HTML!

  """
  Information about the collection that's provided through resource feedback.
  """
  feedback: ResourceFeedback

  """
  A unique string that identifies the collection. If a handle isn't specified
  when a collection is created, it's automatically generated from the
  collection's original title, and typically includes words from the title
  separated by hyphens. For example, a collection that was created with the
  title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.

  If the title is changed, the handle doesn't automatically change.

  The handle can be used in themes by the Liquid templating language to refer to
  the collection, but using the ID is preferred because it never changes.
  """
  handle: String!

  """
  Whether the collection includes the specified product.
  """
  hasProduct(
    """
    The ID of the product to check.
    """
    id: ID!
  ): Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The image associated with the collection.
  """
  image(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  Checks if a collection is being rebuilt or not.
  """
  isRebuilding: Boolean!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  The products that are included in the collection.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductConnection!

  """
  The number of products automatically sorted in the collection.
  """
  productsAutomaticallySortedCount: Int!

  """
  The number of products in the collection.
  """
  productsCount: Int!

  """
  The number of products manually sorted in the collection.
  """
  productsManuallySortedCount: Int!

  """
  The number of publications a resource is published on.
  """
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean
  ): Int!

  """
  The channels where the collection is published.
  """
  publications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CollectionPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead.")

  """
  Check to see whether the resource is published to a given channel.
  """
  publishedOnChannel(
    """
    The ID of the channel to check.
    """
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")

  """
  Check to see whether the resource is published to the calling app's channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead.")

  """
  Check to see whether the resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!

  """
  Check to see whether the resource is published to a given publication.
  """
  publishedOnPublication(
    """
    The ID of the publication to check.
    """
    publicationId: ID!
  ): Boolean!

  """
  The list of resources that are published to a publication.
  """
  resourcePublications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ResourcePublicationConnection!

  """
  The list of resources that are either published or staged to be published to a publication.
  """
  resourcePublicationsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ResourcePublicationV2Connection!

  """
  For a smart (automated) collection, specifies the rules that determine whether a product is included.
  """
  ruleSet: CollectionRuleSet

  """
  If the default SEO fields for page title and description have been modified, contains the modified information.
  """
  seo: SEO!

  """
  Whether to show the collection to navigation banner.
  """
  showMenuLink: Boolean!

  """
  The order in which the products in the collection are displayed by default in
  the Shopify admin and in sales channels, such as an online store.
  """
  sortOrder: CollectionSortOrder!

  """
  The Storefront GraphQL API ID of the `Collection`.

  As of the `2022-04` version release, the Storefront GraphQL API will no longer
  return Base64 encoded IDs to match the behavior of the Admin GraphQL API.
  Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontID! @deprecated(reason: "Use `id` instead.")

  """
  The suffix of the Liquid template being used to show the collection in an
  online store. For example, if the value is `custom`, then the collection is
  using the `collection.custom.liquid` template. If the value is `null`, then
  the collection is using the default `collection.liquid` template.
  """
  templateSuffix: String

  """
  The name of the collection. It's displayed in the Shopify admin and is
  typically displayed in sales channels, such as an online store.
  """
  title: String!

  """
  The translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [PublishedTranslation!]!

  """
  The list of channels that the resource is not published to.
  """
  unpublishedChannels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead.")

  """
  The list of publications that the resource is not published to.
  """
  unpublishedPublications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PublicationConnection!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple Collections.
"""
type CollectionConnection {
  """
  A list of edges.
  """
  edges: [CollectionEdge!]!

  """
  A list of the nodes contained in CollectionEdge.
  """
  nodes: [Collection!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Collection and a cursor during pagination.
"""
type CollectionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CollectionEdge.
  """
  node: Collection!
}

"""
Represents the publications where a collection is published.
"""
type CollectionPublication {
  """
  The channel where the collection will be published.
  """
  channel: Channel! @deprecated(reason: "Use `publication` instead.")

  """
  The collection to be published on the publication.
  """
  collection: Collection!

  """
  Whether the publication is published or not.
  """
  isPublished: Boolean!

  """
  The publication where the collection will be published.
  """
  publication: Publication!

  """
  The date that the publication was or is going to be published.
  """
  publishDate: DateTime!
}

"""
An auto-generated type for paginating through multiple CollectionPublications.
"""
type CollectionPublicationConnection {
  """
  A list of edges.
  """
  edges: [CollectionPublicationEdge!]!

  """
  A list of the nodes contained in CollectionPublicationEdge.
  """
  nodes: [CollectionPublication!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CollectionPublication and a cursor during pagination.
"""
type CollectionPublicationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CollectionPublicationEdge.
  """
  node: CollectionPublication!
}

"""
Represents at rule that's used to assign products to a collection.
"""
type CollectionRule {
  """
  The attribute that the rule focuses on. For example, `title` or `product_type`.
  """
  column: CollectionRuleColumn!

  """
  The value that the operator is applied to. For example, `Hats`.
  """
  condition: String!

  """
  The value that the operator is applied to.
  """
  conditionObject: CollectionRuleConditionObject

  """
  The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
  """
  relation: CollectionRuleRelation!
}

"""
Specifies the attribute of a product being used to populate the smart collection.
"""
enum CollectionRuleColumn {
  """
  An attribute evaluated based on the `compare_at_price` attribute of the product's variants.
  With `is_set` relation, the rule matches products with at least one variant with `compare_at_price` set.
  With `is_not_set` relation, the rule matches matches products with at least one variant with `compare_at_price` not set.
  """
  IS_PRICE_REDUCED

  """
  This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
  """
  PRODUCT_METAFIELD_DEFINITION

  """
  The [`product_taxonomy_node_id`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-productcategory) attribute.
  """
  PRODUCT_TAXONOMY_NODE_ID

  """
  The [`tag`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
  """
  TAG

  """
  The [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-title) attribute.
  """
  TITLE

  """
  The [`type`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
  """
  TYPE

  """
  The [`variant_compare_at_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-compareatprice) attribute.
  """
  VARIANT_COMPARE_AT_PRICE

  """
  The [`variant_inventory`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryquantity) attribute.
  """
  VARIANT_INVENTORY

  """
  This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
  """
  VARIANT_METAFIELD_DEFINITION

  """
  The [`variant_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-price) attribute.
  """
  VARIANT_PRICE

  """
  The [`variant_title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-title) attribute.
  """
  VARIANT_TITLE

  """
  The [`variant_weight`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-weight) attribute.
  """
  VARIANT_WEIGHT

  """
  The [`vendor`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-vendor) attribute.
  """
  VENDOR
}

"""
Specifies object for the condition of the rule.
"""
union CollectionRuleConditionObject = CollectionRuleMetafieldCondition | CollectionRuleProductCategoryCondition | CollectionRuleTextCondition

"""
Identifies a metafield definition used as a rule for the smart collection.
"""
type CollectionRuleMetafieldCondition {
  """
  The metafield definition associated with the condition.
  """
  metafieldDefinition: MetafieldDefinition!
}

"""
Specifies the condition for a Product Category field.
"""
type CollectionRuleProductCategoryCondition {
  """
  The value of the condition.
  """
  value: ProductTaxonomyNode!
}

"""
Specifies the relationship between the `column` and the `condition`.
"""
enum CollectionRuleRelation {
  """
  The attribute contains the condition.
  """
  CONTAINS

  """
  The attribute ends with the condition.
  """
  ENDS_WITH

  """
  The attribute is equal to the condition.
  """
  EQUALS

  """
  The attribute is greater than the condition.
  """
  GREATER_THAN

  """
  The attribute is not set (equal to `null`).
  """
  IS_NOT_SET

  """
  The attribute is set (not equal to `null`).
  """
  IS_SET

  """
  The attribute is less than the condition.
  """
  LESS_THAN

  """
  The attribute does not contain the condition.
  """
  NOT_CONTAINS

  """
  The attribute does not equal the condition.
  """
  NOT_EQUALS

  """
  The attribute starts with the condition.
  """
  STARTS_WITH
}

"""
The set of rules that are used to determine which products are included in the collection.
"""
type CollectionRuleSet {
  """
  Whether products must match any or all of the rules to be included in the collection.
  If true, then products must match at least one of the rules to be included in the collection.
  If false, then products must match all of the rules to be included in the collection.
  """
  appliedDisjunctively: Boolean!

  """
  The rules used to assign products to the collection.
  """
  rules: [CollectionRule!]!
}

"""
Specifies the condition for a text field.
"""
type CollectionRuleTextCondition {
  """
  The value of the condition.
  """
  value: String!
}

"""
Specifies the sort order for the products in the collection.
"""
enum CollectionSortOrder {
  """
  Alphabetically, in ascending order (A - Z).
  """
  ALPHA_ASC

  """
  Alphabetically, in descending order (Z - A).
  """
  ALPHA_DESC

  """
  By best-selling products.
  """
  BEST_SELLING

  """
  By date created, in ascending order (oldest - newest).
  """
  CREATED

  """
  By date created, in descending order (newest - oldest).
  """
  CREATED_DESC

  """
  In the order set manually by the merchant.
  """
  MANUAL

  """
  By price, in ascending order (lowest - highest).
  """
  PRICE_ASC

  """
  By price, in descending order (highest - lowest).
  """
  PRICE_DESC
}

"""
Comment events are generated by staff members of a shop.
They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
"""
type CommentEvent implements Event & Node {
  """
  The name of the app that created the event.
  """
  appTitle: String

  """
  The attachments associated with the comment event.
  """
  attachments: [CommentEventAttachment!]!

  """
  Whether the event was created by an app.
  """
  attributeToApp: Boolean!

  """
  Whether the event was caused by an admin user.
  """
  attributeToUser: Boolean!

  """
  The name of the user that authored the comment event.
  """
  author: StaffMember!

  """
  Whether the comment event can be deleted. If true, then the comment event can be deleted.
  """
  canDelete: Boolean!

  """
  Whether the comment event can be edited. If true, then the comment event can be edited.
  """
  canEdit: Boolean!

  """
  The date and time when the event was created.
  """
  createdAt: DateTime!

  """
  Whether the event is critical.
  """
  criticalAlert: Boolean!

  """
  Whether the comment event has been edited. If true, then the comment event has been edited.
  """
  edited: Boolean!

  """
  The object reference associated with the comment event. For example, a product or discount).
  """
  embed: CommentEventEmbed

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Human readable text that describes the event.
  """
  message: FormattedString!

  """
  The raw body of the comment event.
  """
  rawMessage: String!

  """
  The parent subject to which the comment event belongs.
  """
  subject: CommentEventSubject!
}

"""
A file attachment associated to a comment event.
"""
type CommentEventAttachment {
  """
  The file extension of the comment event attachment, indicating the file format.
  """
  fileExtension: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The image attached to the comment event.
  """
  image(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  The filename of the comment event attachment.
  """
  name: String!

  """
  The size of the attachment.
  """
  size: Int!

  """
  The URL of the attachment.
  """
  url: URL!
}

"""
The main embed of a comment event.
"""
union CommentEventEmbed = Customer | DraftOrder | Order | Product | ProductVariant

"""
The subject line of a comment event.
"""
interface CommentEventSubject {
  """
  Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!
}

"""
Represents information about a company which is also a customer of the shop.
"""
type Company implements CommentEventSubject & HasEvents & HasMetafieldDefinitions & HasMetafields & Navigable & Node {
  """
  Represents information about aggregate relations associated to company.
  """
  associatedAggregates: AssociatedAggregates!

  """
  A summary of key settings from all locations of the company.
  """
  companyAggregateDetails: CompanyAggregateDetails!

  """
  The number of contacts that belong to the company.
  """
  contactCount: Int!

  """
  The list of roles for the company contacts.
  """
  contactRoles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CompanyContactRoleConnection!

  """
  The list of contacts in the company.
  """
  contacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CompanyContactConnection!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was created in Shopify.
  """
  createdAt: DateTime!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company became the customer.
  """
  customerSince: DateTime!

  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  The role proposed by default for a contact at the company.
  """
  defaultRole: CompanyContactRole

  """
  The list of the company's draft orders.
  """
  draftOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DraftOrderConnection!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!

  """
  A unique externally-supplied identifier for the company.
  """
  externalId: String

  """
  Whether the merchant added a timeline comment to the company.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The lifetime duration of the company, since it became a customer of the shop. Examples: `2 days`, `3 months`, `1 year`.
  """
  lifetimeDuration: String!

  """
  The number of locations that belong to the company.
  """
  locationCount: Int!

  """
  The list of locations in the company.
  """
  locations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CompanyLocationConnection!

  """
  The main contact for the company.
  """
  mainContact: CompanyContact

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  The name of the company.
  """
  name: String!

  """
  A note about the company.
  """
  note: String

  """
  The total number of orders placed for this company, across all its locations.
  """
  orderCount: Int!

  """
  The list of the company's orders.
  """
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  The total amount spent by this company, across all its locations.
  """
  totalSpent: MoneyV2!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was last modified.
  """
  updatedAt: DateTime!
}

"""
Represents a billing or shipping address for a company location.
"""
type CompanyAddress implements Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String!

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the company.
  """
  companyName: String!

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: CountryCode!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was created.
  """
  createdAt: DateTime!

  """
  The formatted version of the address.
  """
  formattedAddress(
    """
    Whether to include the company name in the formatted address.
    """
    withCompanyName: Boolean

    """
    Whether to include the recipient's name in the formatted address.
    """
    withName: Boolean
  ): [String!]!

  """
  A comma-separated list of the values for city, province, and country.
  """
  formattedArea: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  A unique phone number for the customer.
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The identity of the recipient e.g. 'Receiving Department'.
  """
  recipient: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company address was last updated.
  """
  updatedAt: DateTime!

  """
  The zip or postal code of the address.
  """
  zip: String

  """
  The two-letter code for the region.
  For example, ON.
  """
  zoneCode: String
}

"""
An auto-generated type for paginating through multiple CompanyAddresses.
"""
type CompanyAddressConnection {
  """
  A list of edges.
  """
  edges: [CompanyAddressEdge!]!

  """
  A list of the nodes contained in CompanyAddressEdge.
  """
  nodes: [CompanyAddress!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CompanyAddress and a cursor during pagination.
"""
type CompanyAddressEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CompanyAddressEdge.
  """
  node: CompanyAddress!
}

"""
Provides a merchant with an overview of key settings across a company.
"""
type CompanyAggregateDetails {
  """
  The order confirmation info for the company.
  """
  orderConfirmationInfo: OrderConfirmationInfoType

  """
  The order confirmation summary for the company.
  """
  orderConfirmationSummary: String

  """
  The payment terms info for the company.
  """
  paymentTermsInfo: PaymentTermsInfoType

  """
  The payment terms summary for the company.
  """
  paymentTermsSummary: String

  """
  The number of price lists assigned to the company.
  """
  priceListCount: Int!

  """
  The list of price lists for the company.
  """
  priceLists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PriceListConnection!
}

"""
A person that acts on behalf of company associated to [a
customer](https://shopify.dev/api/admin-graphql/latest/objects/customer).
"""
type CompanyContact implements Node {
  """
  The company to which the contact belongs.
  """
  company: Company!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company contact was created at Shopify.
  """
  createdAt: DateTime!

  """
  The customer associated to this contact.
  """
  customer: Customer!

  """
  The list of draft orders for the company contact.
  """
  draftOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DraftOrderConnection!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Whether the contact is the main contact of the company.
  """
  isMainContact: Boolean!

  """
  The lifetime duration of the company contact, since its creation date on
  Shopify. Examples: `1 year`, `2 months`, `3 days`.
  """
  lifetimeDuration: String!

  """
  The company contact's locale (language).
  """
  locale: String

  """
  A note about the company contact.
  """
  note: String @deprecated(reason: "No longer supported. Use Customer.notes instead.")

  """
  The number of B2B orders associated with the company contact.
  """
  orderCount: Int!

  """
  The list of orders for the company contact.
  """
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderConnection!

  """
  The list of roles assigned to this company contact.
  """
  roleAssignments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CompanyContactRoleAssignmentConnection!

  """
  The company contact's job title.
  """
  title: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company contact was last updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple CompanyContacts.
"""
type CompanyContactConnection {
  """
  A list of edges.
  """
  edges: [CompanyContactEdge!]!

  """
  A list of the nodes contained in CompanyContactEdge.
  """
  nodes: [CompanyContact!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CompanyContact and a cursor during pagination.
"""
type CompanyContactEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CompanyContactEdge.
  """
  node: CompanyContact!
}

"""
The role for a [company contact](https://shopify.dev/api/admin-graphql/latest/objects/companycontact).
"""
type CompanyContactRole implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The name of a role.
  For example, `admin` or `buyer`.
  """
  name: String!

  """
  A note for the role.
  """
  note: String
}

"""
The CompanyContactRoleAssignment describes the company and location associated to a company contact's role.
"""
type CompanyContactRoleAssignment implements Node {
  """
  The company this role assignment belongs to.
  """
  company: Company!

  """
  The company contact for whom this role is assigned.
  """
  companyContact: CompanyContact!

  """
  The company location to which the role is assigned.
  """
  companyLocation: CompanyLocation!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was created.
  """
  createdAt: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The role that is assigned to the company contact.
  """
  role: CompanyContactRole!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was last updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple CompanyContactRoleAssignments.
"""
type CompanyContactRoleAssignmentConnection {
  """
  A list of edges.
  """
  edges: [CompanyContactRoleAssignmentEdge!]!

  """
  A list of the nodes contained in CompanyContactRoleAssignmentEdge.
  """
  nodes: [CompanyContactRoleAssignment!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CompanyContactRoleAssignment and a cursor during pagination.
"""
type CompanyContactRoleAssignmentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CompanyContactRoleAssignmentEdge.
  """
  node: CompanyContactRoleAssignment!
}

"""
An auto-generated type for paginating through multiple CompanyContactRoles.
"""
type CompanyContactRoleConnection {
  """
  A list of edges.
  """
  edges: [CompanyContactRoleEdge!]!

  """
  A list of the nodes contained in CompanyContactRoleEdge.
  """
  nodes: [CompanyContactRole!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CompanyContactRole and a cursor during pagination.
"""
type CompanyContactRoleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CompanyContactRoleEdge.
  """
  node: CompanyContactRole!
}

"""
A location or branch of a [company that's a
customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the
shop. Configuration of B2B relationship, for example prices lists and checkout
settings, may be done for a location.
"""
type CompanyLocation implements CommentEventSubject & HasEvents & HasMetafieldDefinitions & HasMetafields & Navigable & Node {
  """
  The address used as billing address for the location.
  """
  billingAddress: CompanyAddress

  """
  The configuration for the buyer's B2B checkout.
  """
  buyerExperienceConfiguration: BuyerExperienceConfiguration

  """
  The company that the company location belongs to.
  """
  company: Company!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company location was created in Shopify.
  """
  createdAt: DateTime!

  """
  The location's currency based on the shipping address. If the shipping address
  is empty, then the value is the shop's primary market.
  """
  currency: CurrencyCode!

  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  The list of draft orders for the company location.
  """
  draftOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DraftOrderConnection!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!

  """
  A unique externally-supplied identifier for the company location.
  """
  externalId: String

  """
  Whether the merchant added a timeline comment to the company location.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The preferred locale of the company location.
  """
  locale: String

  """
  The market that includes the location's shipping address. If the shipping
  address is empty, then the value is the shop's primary market.
  """
  market: Market!

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  The name of the company location.
  """
  name: String!

  """
  A note about the company location.
  """
  note: String

  """
  The total number of orders placed for the location.
  """
  orderCount: Int!

  """
  The list of orders for the company location.
  """
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderConnection!

  """
  The phone number of the company location.
  """
  phone: String

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  The list of roles assigned to the company location.
  """
  roleAssignments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CompanyContactRoleAssignmentConnection!

  """
  The address used as shipping address for the location.
  """
  shippingAddress: CompanyAddress

  """
  The list of tax exemptions applied to the location.
  """
  taxExemptions: [TaxExemption!]!

  """
  The list of tax exemptions applied to the location with additional details.
  """
  taxExemptionsDetails: [TaxExemptionDetails!]!

  """
  The tax registration ID for the company location.
  """
  taxRegistrationId: String

  """
  The total amount spent by the location.
  """
  totalSpent: MoneyV2!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company location was last modified.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple CompanyLocations.
"""
type CompanyLocationConnection {
  """
  A list of edges.
  """
  edges: [CompanyLocationEdge!]!

  """
  A list of the nodes contained in CompanyLocationEdge.
  """
  nodes: [CompanyLocation!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CompanyLocation and a cursor during pagination.
"""
type CompanyLocationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CompanyLocationEdge.
  """
  node: CompanyLocation!
}

"""
Indicates how HTTP response content should be handled.
"""
enum ContentDisposition {
  """
  Content is downloaded and saved locally.
  """
  ATTACHMENT

  """
  Content is displayed inline in the browser as a web page or as part of a web page.
  """
  INLINE
}

"""
The context data that determines the pricing of a variant.
"""
input ContextualPricingContext {
  """
  The CompanyLocation ID used to fetch company location specific prices.
  """
  companyLocationId: ID

  """
  The country code used to fetch country-specific prices.
  """
  country: CountryCode
}

"""
The list of all the countries from the combined shipping zones for the shop.
"""
type CountriesInShippingZones {
  """
  The list of all the countries from all the combined shipping zones.
  """
  countryCodes: [CountryCode!]!

  """
  Whether 'Rest of World' has been defined in any of the shipping zones.
  """
  includeRestOfWorld: Boolean!
}

"""
The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
of another country. For example, the territories associated with Spain are represented by the country code `ES`,
and the territories associated with the United States of America are represented by the country code `US`.
"""
enum CountryCode {
  """
  Ascension Island.
  """
  AC

  """
  Andorra.
  """
  AD

  """
  United Arab Emirates.
  """
  AE

  """
  Afghanistan.
  """
  AF

  """
  Antigua & Barbuda.
  """
  AG

  """
  Anguilla.
  """
  AI

  """
  Albania.
  """
  AL

  """
  Armenia.
  """
  AM

  """
  Netherlands Antilles.
  """
  AN

  """
  Angola.
  """
  AO

  """
  Argentina.
  """
  AR

  """
  Austria.
  """
  AT

  """
  Australia.
  """
  AU

  """
  Aruba.
  """
  AW

  """
  Åland Islands.
  """
  AX

  """
  Azerbaijan.
  """
  AZ

  """
  Bosnia & Herzegovina.
  """
  BA

  """
  Barbados.
  """
  BB

  """
  Bangladesh.
  """
  BD

  """
  Belgium.
  """
  BE

  """
  Burkina Faso.
  """
  BF

  """
  Bulgaria.
  """
  BG

  """
  Bahrain.
  """
  BH

  """
  Burundi.
  """
  BI

  """
  Benin.
  """
  BJ

  """
  St. Barthélemy.
  """
  BL

  """
  Bermuda.
  """
  BM

  """
  Brunei.
  """
  BN

  """
  Bolivia.
  """
  BO

  """
  Caribbean Netherlands.
  """
  BQ

  """
  Brazil.
  """
  BR

  """
  Bahamas.
  """
  BS

  """
  Bhutan.
  """
  BT

  """
  Bouvet Island.
  """
  BV

  """
  Botswana.
  """
  BW

  """
  Belarus.
  """
  BY

  """
  Belize.
  """
  BZ

  """
  Canada.
  """
  CA

  """
  Cocos (Keeling) Islands.
  """
  CC

  """
  Congo - Kinshasa.
  """
  CD

  """
  Central African Republic.
  """
  CF

  """
  Congo - Brazzaville.
  """
  CG

  """
  Switzerland.
  """
  CH

  """
  Côte d’Ivoire.
  """
  CI

  """
  Cook Islands.
  """
  CK

  """
  Chile.
  """
  CL

  """
  Cameroon.
  """
  CM

  """
  China.
  """
  CN

  """
  Colombia.
  """
  CO

  """
  Costa Rica.
  """
  CR

  """
  Cuba.
  """
  CU

  """
  Cape Verde.
  """
  CV

  """
  Curaçao.
  """
  CW

  """
  Christmas Island.
  """
  CX

  """
  Cyprus.
  """
  CY

  """
  Czechia.
  """
  CZ

  """
  Germany.
  """
  DE

  """
  Djibouti.
  """
  DJ

  """
  Denmark.
  """
  DK

  """
  Dominica.
  """
  DM

  """
  Dominican Republic.
  """
  DO

  """
  Algeria.
  """
  DZ

  """
  Ecuador.
  """
  EC

  """
  Estonia.
  """
  EE

  """
  Egypt.
  """
  EG

  """
  Western Sahara.
  """
  EH

  """
  Eritrea.
  """
  ER

  """
  Spain.
  """
  ES

  """
  Ethiopia.
  """
  ET

  """
  Finland.
  """
  FI

  """
  Fiji.
  """
  FJ

  """
  Falkland Islands.
  """
  FK

  """
  Faroe Islands.
  """
  FO

  """
  France.
  """
  FR

  """
  Gabon.
  """
  GA

  """
  United Kingdom.
  """
  GB

  """
  Grenada.
  """
  GD

  """
  Georgia.
  """
  GE

  """
  French Guiana.
  """
  GF

  """
  Guernsey.
  """
  GG

  """
  Ghana.
  """
  GH

  """
  Gibraltar.
  """
  GI

  """
  Greenland.
  """
  GL

  """
  Gambia.
  """
  GM

  """
  Guinea.
  """
  GN

  """
  Guadeloupe.
  """
  GP

  """
  Equatorial Guinea.
  """
  GQ

  """
  Greece.
  """
  GR

  """
  South Georgia & South Sandwich Islands.
  """
  GS

  """
  Guatemala.
  """
  GT

  """
  Guinea-Bissau.
  """
  GW

  """
  Guyana.
  """
  GY

  """
  Hong Kong SAR.
  """
  HK

  """
  Heard & McDonald Islands.
  """
  HM

  """
  Honduras.
  """
  HN

  """
  Croatia.
  """
  HR

  """
  Haiti.
  """
  HT

  """
  Hungary.
  """
  HU

  """
  Indonesia.
  """
  ID

  """
  Ireland.
  """
  IE

  """
  Israel.
  """
  IL

  """
  Isle of Man.
  """
  IM

  """
  India.
  """
  IN

  """
  British Indian Ocean Territory.
  """
  IO

  """
  Iraq.
  """
  IQ

  """
  Iran.
  """
  IR

  """
  Iceland.
  """
  IS

  """
  Italy.
  """
  IT

  """
  Jersey.
  """
  JE

  """
  Jamaica.
  """
  JM

  """
  Jordan.
  """
  JO

  """
  Japan.
  """
  JP

  """
  Kenya.
  """
  KE

  """
  Kyrgyzstan.
  """
  KG

  """
  Cambodia.
  """
  KH

  """
  Kiribati.
  """
  KI

  """
  Comoros.
  """
  KM

  """
  St. Kitts & Nevis.
  """
  KN

  """
  North Korea.
  """
  KP

  """
  South Korea.
  """
  KR

  """
  Kuwait.
  """
  KW

  """
  Cayman Islands.
  """
  KY

  """
  Kazakhstan.
  """
  KZ

  """
  Laos.
  """
  LA

  """
  Lebanon.
  """
  LB

  """
  St. Lucia.
  """
  LC

  """
  Liechtenstein.
  """
  LI

  """
  Sri Lanka.
  """
  LK

  """
  Liberia.
  """
  LR

  """
  Lesotho.
  """
  LS

  """
  Lithuania.
  """
  LT

  """
  Luxembourg.
  """
  LU

  """
  Latvia.
  """
  LV

  """
  Libya.
  """
  LY

  """
  Morocco.
  """
  MA

  """
  Monaco.
  """
  MC

  """
  Moldova.
  """
  MD

  """
  Montenegro.
  """
  ME

  """
  St. Martin.
  """
  MF

  """
  Madagascar.
  """
  MG

  """
  North Macedonia.
  """
  MK

  """
  Mali.
  """
  ML

  """
  Myanmar (Burma).
  """
  MM

  """
  Mongolia.
  """
  MN

  """
  Macao SAR.
  """
  MO

  """
  Martinique.
  """
  MQ

  """
  Mauritania.
  """
  MR

  """
  Montserrat.
  """
  MS

  """
  Malta.
  """
  MT

  """
  Mauritius.
  """
  MU

  """
  Maldives.
  """
  MV

  """
  Malawi.
  """
  MW

  """
  Mexico.
  """
  MX

  """
  Malaysia.
  """
  MY

  """
  Mozambique.
  """
  MZ

  """
  Namibia.
  """
  NA

  """
  New Caledonia.
  """
  NC

  """
  Niger.
  """
  NE

  """
  Norfolk Island.
  """
  NF

  """
  Nigeria.
  """
  NG

  """
  Nicaragua.
  """
  NI

  """
  Netherlands.
  """
  NL

  """
  Norway.
  """
  NO

  """
  Nepal.
  """
  NP

  """
  Nauru.
  """
  NR

  """
  Niue.
  """
  NU

  """
  New Zealand.
  """
  NZ

  """
  Oman.
  """
  OM

  """
  Panama.
  """
  PA

  """
  Peru.
  """
  PE

  """
  French Polynesia.
  """
  PF

  """
  Papua New Guinea.
  """
  PG

  """
  Philippines.
  """
  PH

  """
  Pakistan.
  """
  PK

  """
  Poland.
  """
  PL

  """
  St. Pierre & Miquelon.
  """
  PM

  """
  Pitcairn Islands.
  """
  PN

  """
  Palestinian Territories.
  """
  PS

  """
  Portugal.
  """
  PT

  """
  Paraguay.
  """
  PY

  """
  Qatar.
  """
  QA

  """
  Réunion.
  """
  RE

  """
  Romania.
  """
  RO

  """
  Serbia.
  """
  RS

  """
  Russia.
  """
  RU

  """
  Rwanda.
  """
  RW

  """
  Saudi Arabia.
  """
  SA

  """
  Solomon Islands.
  """
  SB

  """
  Seychelles.
  """
  SC

  """
  Sudan.
  """
  SD

  """
  Sweden.
  """
  SE

  """
  Singapore.
  """
  SG

  """
  St. Helena.
  """
  SH

  """
  Slovenia.
  """
  SI

  """
  Svalbard & Jan Mayen.
  """
  SJ

  """
  Slovakia.
  """
  SK

  """
  Sierra Leone.
  """
  SL

  """
  San Marino.
  """
  SM

  """
  Senegal.
  """
  SN

  """
  Somalia.
  """
  SO

  """
  Suriname.
  """
  SR

  """
  South Sudan.
  """
  SS

  """
  São Tomé & Príncipe.
  """
  ST

  """
  El Salvador.
  """
  SV

  """
  Sint Maarten.
  """
  SX

  """
  Syria.
  """
  SY

  """
  Eswatini.
  """
  SZ

  """
  Tristan da Cunha.
  """
  TA

  """
  Turks & Caicos Islands.
  """
  TC

  """
  Chad.
  """
  TD

  """
  French Southern Territories.
  """
  TF

  """
  Togo.
  """
  TG

  """
  Thailand.
  """
  TH

  """
  Tajikistan.
  """
  TJ

  """
  Tokelau.
  """
  TK

  """
  Timor-Leste.
  """
  TL

  """
  Turkmenistan.
  """
  TM

  """
  Tunisia.
  """
  TN

  """
  Tonga.
  """
  TO

  """
  Turkey.
  """
  TR

  """
  Trinidad & Tobago.
  """
  TT

  """
  Tuvalu.
  """
  TV

  """
  Taiwan.
  """
  TW

  """
  Tanzania.
  """
  TZ

  """
  Ukraine.
  """
  UA

  """
  Uganda.
  """
  UG

  """
  U.S. Outlying Islands.
  """
  UM

  """
  United States.
  """
  US

  """
  Uruguay.
  """
  UY

  """
  Uzbekistan.
  """
  UZ

  """
  Vatican City.
  """
  VA

  """
  St. Vincent & Grenadines.
  """
  VC

  """
  Venezuela.
  """
  VE

  """
  British Virgin Islands.
  """
  VG

  """
  Vietnam.
  """
  VN

  """
  Vanuatu.
  """
  VU

  """
  Wallis & Futuna.
  """
  WF

  """
  Samoa.
  """
  WS

  """
  Kosovo.
  """
  XK

  """
  Yemen.
  """
  YE

  """
  Mayotte.
  """
  YT

  """
  South Africa.
  """
  ZA

  """
  Zambia.
  """
  ZM

  """
  Zimbabwe.
  """
  ZW

  """
  Unknown Region.
  """
  ZZ
}

"""
The country-specific harmonized system code and ISO country code for an inventory item.
"""
type CountryHarmonizedSystemCode {
  """
  The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
  """
  countryCode: CountryCode!

  """
  The country-specific harmonized system code. These are usually longer than 6 digits.
  """
  harmonizedSystemCode: String!
}

"""
An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.
"""
type CountryHarmonizedSystemCodeConnection {
  """
  A list of edges.
  """
  edges: [CountryHarmonizedSystemCodeEdge!]!

  """
  A list of the nodes contained in CountryHarmonizedSystemCodeEdge.
  """
  nodes: [CountryHarmonizedSystemCode!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.
"""
type CountryHarmonizedSystemCodeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CountryHarmonizedSystemCodeEdge.
  """
  node: CountryHarmonizedSystemCode!
}

"""
The part of the image that should remain after cropping.
"""
enum CropRegion {
  """
  Keep the bottom of the image.
  """
  BOTTOM

  """
  Keep the center of the image.
  """
  CENTER

  """
  Keep the left of the image.
  """
  LEFT

  """
  Keep the right of the image.
  """
  RIGHT

  """
  Keep the top of the image.
  """
  TOP
}

"""
The three-letter currency codes that represent the world currencies used in
stores. These include standard ISO 4217 codes, legacy codes,
and non-standard codes.
"""
enum CurrencyCode {
  """
  United Arab Emirates Dirham (AED).
  """
  AED

  """
  Afghan Afghani (AFN).
  """
  AFN

  """
  Albanian Lek (ALL).
  """
  ALL

  """
  Armenian Dram (AMD).
  """
  AMD

  """
  Netherlands Antillean Guilder.
  """
  ANG

  """
  Angolan Kwanza (AOA).
  """
  AOA

  """
  Argentine Pesos (ARS).
  """
  ARS

  """
  Australian Dollars (AUD).
  """
  AUD

  """
  Aruban Florin (AWG).
  """
  AWG

  """
  Azerbaijani Manat (AZN).
  """
  AZN

  """
  Bosnia and Herzegovina Convertible Mark (BAM).
  """
  BAM

  """
  Barbadian Dollar (BBD).
  """
  BBD

  """
  Bangladesh Taka (BDT).
  """
  BDT

  """
  Bulgarian Lev (BGN).
  """
  BGN

  """
  Bahraini Dinar (BHD).
  """
  BHD

  """
  Burundian Franc (BIF).
  """
  BIF

  """
  Bermudian Dollar (BMD).
  """
  BMD

  """
  Brunei Dollar (BND).
  """
  BND

  """
  Bolivian Boliviano (BOB).
  """
  BOB

  """
  Brazilian Real (BRL).
  """
  BRL

  """
  Bahamian Dollar (BSD).
  """
  BSD

  """
  Bhutanese Ngultrum (BTN).
  """
  BTN

  """
  Botswana Pula (BWP).
  """
  BWP

  """
  Belarusian Ruble (BYN).
  """
  BYN

  """
  Belarusian Ruble (BYR).
  """
  BYR @deprecated(reason: "`BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.")

  """
  Belize Dollar (BZD).
  """
  BZD

  """
  Canadian Dollars (CAD).
  """
  CAD

  """
  Congolese franc (CDF).
  """
  CDF

  """
  Swiss Francs (CHF).
  """
  CHF

  """
  Chilean Peso (CLP).
  """
  CLP

  """
  Chinese Yuan Renminbi (CNY).
  """
  CNY

  """
  Colombian Peso (COP).
  """
  COP

  """
  Costa Rican Colones (CRC).
  """
  CRC

  """
  Cape Verdean escudo (CVE).
  """
  CVE

  """
  Czech Koruny (CZK).
  """
  CZK

  """
  Djiboutian Franc (DJF).
  """
  DJF

  """
  Danish Kroner (DKK).
  """
  DKK

  """
  Dominican Peso (DOP).
  """
  DOP

  """
  Algerian Dinar (DZD).
  """
  DZD

  """
  Egyptian Pound (EGP).
  """
  EGP

  """
  Eritrean Nakfa (ERN).
  """
  ERN

  """
  Ethiopian Birr (ETB).
  """
  ETB

  """
  Euro (EUR).
  """
  EUR

  """
  Fijian Dollars (FJD).
  """
  FJD

  """
  Falkland Islands Pounds (FKP).
  """
  FKP

  """
  United Kingdom Pounds (GBP).
  """
  GBP

  """
  Georgian Lari (GEL).
  """
  GEL

  """
  Ghanaian Cedi (GHS).
  """
  GHS

  """
  Gibraltar Pounds (GIP).
  """
  GIP

  """
  Gambian Dalasi (GMD).
  """
  GMD

  """
  Guinean Franc (GNF).
  """
  GNF

  """
  Guatemalan Quetzal (GTQ).
  """
  GTQ

  """
  Guyanese Dollar (GYD).
  """
  GYD

  """
  Hong Kong Dollars (HKD).
  """
  HKD

  """
  Honduran Lempira (HNL).
  """
  HNL

  """
  Croatian Kuna (HRK).
  """
  HRK

  """
  Haitian Gourde (HTG).
  """
  HTG

  """
  Hungarian Forint (HUF).
  """
  HUF

  """
  Indonesian Rupiah (IDR).
  """
  IDR

  """
  Israeli New Shekel (NIS).
  """
  ILS

  """
  Indian Rupees (INR).
  """
  INR

  """
  Iraqi Dinar (IQD).
  """
  IQD

  """
  Iranian Rial (IRR).
  """
  IRR

  """
  Icelandic Kronur (ISK).
  """
  ISK

  """
  Jersey Pound.
  """
  JEP

  """
  Jamaican Dollars (JMD).
  """
  JMD

  """
  Jordanian Dinar (JOD).
  """
  JOD

  """
  Japanese Yen (JPY).
  """
  JPY

  """
  Kenyan Shilling (KES).
  """
  KES

  """
  Kyrgyzstani Som (KGS).
  """
  KGS

  """
  Cambodian Riel.
  """
  KHR

  """
  Kiribati Dollar (KID).
  """
  KID

  """
  Comorian Franc (KMF).
  """
  KMF

  """
  South Korean Won (KRW).
  """
  KRW

  """
  Kuwaiti Dinar (KWD).
  """
  KWD

  """
  Cayman Dollars (KYD).
  """
  KYD

  """
  Kazakhstani Tenge (KZT).
  """
  KZT

  """
  Laotian Kip (LAK).
  """
  LAK

  """
  Lebanese Pounds (LBP).
  """
  LBP

  """
  Sri Lankan Rupees (LKR).
  """
  LKR

  """
  Liberian Dollar (LRD).
  """
  LRD

  """
  Lesotho Loti (LSL).
  """
  LSL

  """
  Lithuanian Litai (LTL).
  """
  LTL

  """
  Latvian Lati (LVL).
  """
  LVL

  """
  Libyan Dinar (LYD).
  """
  LYD

  """
  Moroccan Dirham.
  """
  MAD

  """
  Moldovan Leu (MDL).
  """
  MDL

  """
  Malagasy Ariary (MGA).
  """
  MGA

  """
  Macedonia Denar (MKD).
  """
  MKD

  """
  Burmese Kyat (MMK).
  """
  MMK

  """
  Mongolian Tugrik.
  """
  MNT

  """
  Macanese Pataca (MOP).
  """
  MOP

  """
  Mauritanian Ouguiya (MRU).
  """
  MRU

  """
  Mauritian Rupee (MUR).
  """
  MUR

  """
  Maldivian Rufiyaa (MVR).
  """
  MVR

  """
  Malawian Kwacha (MWK).
  """
  MWK

  """
  Mexican Pesos (MXN).
  """
  MXN

  """
  Malaysian Ringgits (MYR).
  """
  MYR

  """
  Mozambican Metical.
  """
  MZN

  """
  Namibian Dollar.
  """
  NAD

  """
  Nigerian Naira (NGN).
  """
  NGN

  """
  Nicaraguan Córdoba (NIO).
  """
  NIO

  """
  Norwegian Kroner (NOK).
  """
  NOK

  """
  Nepalese Rupee (NPR).
  """
  NPR

  """
  New Zealand Dollars (NZD).
  """
  NZD

  """
  Omani Rial (OMR).
  """
  OMR

  """
  Panamian Balboa (PAB).
  """
  PAB

  """
  Peruvian Nuevo Sol (PEN).
  """
  PEN

  """
  Papua New Guinean Kina (PGK).
  """
  PGK

  """
  Philippine Peso (PHP).
  """
  PHP

  """
  Pakistani Rupee (PKR).
  """
  PKR

  """
  Polish Zlotych (PLN).
  """
  PLN

  """
  Paraguayan Guarani (PYG).
  """
  PYG

  """
  Qatari Rial (QAR).
  """
  QAR

  """
  Romanian Lei (RON).
  """
  RON

  """
  Serbian dinar (RSD).
  """
  RSD

  """
  Russian Rubles (RUB).
  """
  RUB

  """
  Rwandan Franc (RWF).
  """
  RWF

  """
  Saudi Riyal (SAR).
  """
  SAR

  """
  Solomon Islands Dollar (SBD).
  """
  SBD

  """
  Seychellois Rupee (SCR).
  """
  SCR

  """
  Sudanese Pound (SDG).
  """
  SDG

  """
  Swedish Kronor (SEK).
  """
  SEK

  """
  Singapore Dollars (SGD).
  """
  SGD

  """
  Saint Helena Pounds (SHP).
  """
  SHP

  """
  Sierra Leonean Leone (SLL).
  """
  SLL

  """
  Somali Shilling (SOS).
  """
  SOS

  """
  Surinamese Dollar (SRD).
  """
  SRD

  """
  South Sudanese Pound (SSP).
  """
  SSP

  """
  Sao Tome And Principe Dobra (STD).
  """
  STD @deprecated(reason: "`STD` is deprecated. Use `STN` available from version `2022-07` onwards instead.")

  """
  Sao Tome And Principe Dobra (STN).
  """
  STN

  """
  Syrian Pound (SYP).
  """
  SYP

  """
  Swazi Lilangeni (SZL).
  """
  SZL

  """
  Thai baht (THB).
  """
  THB

  """
  Tajikistani Somoni (TJS).
  """
  TJS

  """
  Turkmenistani Manat (TMT).
  """
  TMT

  """
  Tunisian Dinar (TND).
  """
  TND

  """
  Tongan Pa'anga (TOP).
  """
  TOP

  """
  Turkish Lira (TRY).
  """
  TRY

  """
  Trinidad and Tobago Dollars (TTD).
  """
  TTD

  """
  Taiwan Dollars (TWD).
  """
  TWD

  """
  Tanzanian Shilling (TZS).
  """
  TZS

  """
  Ukrainian Hryvnia (UAH).
  """
  UAH

  """
  Ugandan Shilling (UGX).
  """
  UGX

  """
  United States Dollars (USD).
  """
  USD

  """
  Uruguayan Pesos (UYU).
  """
  UYU

  """
  Uzbekistan som (UZS).
  """
  UZS

  """
  Venezuelan Bolivares (VED).
  """
  VED

  """
  Venezuelan Bolivares (VEF).
  """
  VEF @deprecated(reason: "`VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.")

  """
  Venezuelan Bolivares (VES).
  """
  VES

  """
  Vietnamese đồng (VND).
  """
  VND

  """
  Vanuatu Vatu (VUV).
  """
  VUV

  """
  Samoan Tala (WST).
  """
  WST

  """
  Central African CFA Franc (XAF).
  """
  XAF

  """
  East Caribbean Dollar (XCD).
  """
  XCD

  """
  West African CFA franc (XOF).
  """
  XOF

  """
  CFP Franc (XPF).
  """
  XPF

  """
  Unrecognized currency.
  """
  XXX

  """
  Yemeni Rial (YER).
  """
  YER

  """
  South African Rand (ZAR).
  """
  ZAR

  """
  Zambian Kwacha (ZMW).
  """
  ZMW
}

"""
Currency formats configured for the merchant. These formats are available to use within Liquid.
"""
type CurrencyFormats {
  """
  Money without currency in HTML.
  """
  moneyFormat: FormattedString!

  """
  Money without currency in emails.
  """
  moneyInEmailsFormat: String!

  """
  Money with currency in HTML.
  """
  moneyWithCurrencyFormat: FormattedString!

  """
  Money with currency in emails.
  """
  moneyWithCurrencyInEmailsFormat: String!
}

"""
A setting for a presentment currency.
"""
type CurrencySetting {
  """
  The currency's ISO code.
  """
  currencyCode: CurrencyCode!

  """
  The full name of the currency.
  """
  currencyName: String!

  """
  Whether the currency is enabled or not. An enabled currency setting is visible
  to buyers and allows orders to be generated with that currency as presentment.
  """
  enabled: Boolean!

  """
  A list of currency setting vanity operations for the currency setting.
  """
  operations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CurrencySettingOperationConnection!

  """
  The date and time when the active exchange rate for the currency was last
  modified. It can be the automatic rate's creation date, or the manual rate's
  last updated at date if active.
  """
  rateUpdatedAt: DateTime
}

"""
An auto-generated type for paginating through multiple CurrencySettings.
"""
type CurrencySettingConnection {
  """
  A list of edges.
  """
  edges: [CurrencySettingEdge!]!

  """
  A list of the nodes contained in CurrencySettingEdge.
  """
  nodes: [CurrencySetting!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CurrencySetting and a cursor during pagination.
"""
type CurrencySettingEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CurrencySettingEdge.
  """
  node: CurrencySetting!
}

"""
A vanity operation for a presentment currency setting.
"""
type CurrencySettingOperation {
  """
  Whether the vanity operation is active.
  """
  active: Boolean!

  """
  The formatted vanity operation amount.
  """
  moneyFormatted: String!

  """
  Whether the vanity operation is recommended by Shopify for the applicable currency.
  """
  recommended: Boolean!
}

"""
An auto-generated type for paginating through multiple CurrencySettingOperations.
"""
type CurrencySettingOperationConnection {
  """
  A list of edges.
  """
  edges: [CurrencySettingOperationEdge!]!

  """
  A list of the nodes contained in CurrencySettingOperationEdge.
  """
  nodes: [CurrencySettingOperation!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CurrencySettingOperation and a cursor during pagination.
"""
type CurrencySettingOperationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CurrencySettingOperationEdge.
  """
  node: CurrencySettingOperation!
}

"""
A checkout line item that represents a gift card with a custom amount (no variant).
"""
input CustomGiftCardLineItemInput {
  """
  Gift card product that the custom gift card belongs to.
  """
  giftCardProductId: ID

  """
  Price of the custom gift card.
  """
  price: Decimal!

  """
  Title of the custom gift card.
  """
  title: String!
}

"""
Holds all custom payment method information.
"""
type CustomPaymentMethod implements Node {
  """
  The status of the custom payment method.
  """
  enabled: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The instructions for the custom payment method.
  """
  instructions: String

  """
  The message for the custom payment method.
  """
  message: String

  """
  The name of the custom payment method.
  """
  name: String!
}

"""
Represents information about a customer of the shop, such as the customer's contact details, their order
history, and whether they've agreed to receive marketing material by email.

**Caution:** Only use this data if it's required for your app's functionality.
Shopify will restrict [access to
scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
legitimate use for the associated data.
"""
type Customer implements CommentEventSubject & HasEvents & HasMetafieldDefinitions & HasMetafields & LegacyInteroperability & Node {
  """
  Whether the customer has agreed to receive marketing material.
  """
  acceptsMarketing: Boolean! @deprecated(reason: "Use `emailMarketingConsent` instead.")

  """
  The date and time when the customer consented or objected to receiving marketing material by email.
  """
  acceptsMarketingUpdatedAt: DateTime! @deprecated(reason: "Use `emailMarketingConsent` instead.")

  """
  A list of addresses associated with the customer.
  """
  addresses(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [MailingAddress!]!

  """
  The addresses associated with the customer.
  """
  addressesV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MailingAddressConnection!

  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  amountSpent: MoneyV2!

  """
  The average amount that the customer spent per order.
  """
  averageOrderAmount: Money @deprecated(reason: "Use `averageOrderAmountV2` instead.")

  """
  The average amount that the customer spent per order.
  """
  averageOrderAmountV2: MoneyV2

  """
  Whether the merchant can delete the customer from their store.

  A customer can be deleted from a store only if they have not yet made an order. After a customer makes an
  order, they can't be deleted from a store.
  """
  canDelete: Boolean!

  """
  A list of the customer's company contact profiles.
  """
  companyContactProfiles: [CompanyContact!]!

  """
  The date and time when the customer was added to the store.
  """
  createdAt: DateTime!

  """
  The default address associated with the customer.
  """
  defaultAddress: MailingAddress

  """
  The full name of the customer, based on the values for first_name and last_name. If the first_name and
  last_name are not available, then this falls back to the customer's email
  address, and if that is not available, the customer's phone number.
  """
  displayName: String!

  """
  The customer's email address.
  """
  email: String

  """
  The current email marketing state for the customer.
  If the customer doesn't have an email address, then this property is `null`.
  """
  emailMarketingConsent: CustomerEmailMarketingConsentState

  """
  The level of engagement for the customer's email address.
  """
  engagementScore: Int!

  """
  A list of events associated with the customer.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!

  """
  The customer's first name.
  """
  firstName: String

  """
  Whether the customer has a note associated with them.
  """
  hasNote: Boolean! @deprecated(reason: "Check for a value in the note field directly instead.")

  """
  Whether the merchant has added timeline comments about the customer on the customer's page.
  """
  hasTimelineComment: Boolean! @deprecated(reason: "To query for comments on the timeline, use the events connection and a `query` argument containing `verb:comment`, or look for a `CommentEvent` in the `__typename` of events.")

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The image associated with the customer.
  """
  image(
    """
    Image width and height (1 - 2048 pixels).
    """
    size: Int @deprecated(reason: "Use `maxWidth` or `maxHeight` on `Image.transformedSrc` instead.")
  ): Image!

  """
  The customer's last name.
  """
  lastName: String

  """
  The customer's last order.
  """
  lastOrder: Order

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The amount of time since the customer was first added to the store.

  Example: 'about 12 years'.
  """
  lifetimeDuration: String!

  """
  The customer's locale.
  """
  locale: String!

  """
  The market that includes the customer’s default address.
  """
  market: Market

  """
  The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines, that the
  customer gave when they consented to receive marketing material by email.

  If the customer does not accept email marketing, then this property is `null`.
  """
  marketingOptInLevel: CustomerMarketingOptInLevel @deprecated(reason: "Use `emailMarketingConsent` instead.")

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  A unique identifier for the customer that's used with Multipass login.
  """
  multipassIdentifier: String

  """
  A note about the customer.
  """
  note: String

  """
  The number of orders that the customer has made at the store in their lifetime.
  """
  numberOfOrders: UnsignedInt64!

  """
  A list of the customer's orders.
  """
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderConnection!

  """
  The number of orders that the customer has made at the store in their lifetime.
  """
  ordersCount: UnsignedInt64! @deprecated(reason: "Use `numberOfOrders` instead.")

  """
  A list of the customer's payment methods.
  """
  paymentMethods(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CustomerPaymentMethodConnection!

  """
  The customer's phone number.
  """
  phone: String

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  Possible subscriber states of a customer defined by their subscription contracts.
  """
  productSubscriberStatus: CustomerProductSubscriberStatus!

  """
  The current SMS marketing state for the customer's phone number.

  If the customer does not have a phone number, then this property is `null`.
  """
  smsMarketingConsent: CustomerSmsMarketingConsentState

  """
  The state of the customer's account with the shop.
  """
  state: CustomerState!

  """
  The statistics for a given customer.
  """
  statistics: CustomerStatistics!

  """
  A list of the customer's subscription contracts.
  """
  subscriptionContracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionContractConnection!

  """
  A comma separated list of tags that have been added to the customer.
  """
  tags: [String!]!

  """
  Whether the customer is exempt from being charged taxes on their orders.
  """
  taxExempt: Boolean!

  """
  The list of tax exemptions applied to the customer.
  """
  taxExemptions: [TaxExemption!]!

  """
  The list of tax exemptions applied to the customer with additional details.
  """
  taxExemptionsDetails: [TaxExemptionDetails!]!

  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  totalSpent: Money! @deprecated(reason: "Use `amountSpent` instead.")

  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  totalSpentV2: MoneyV2! @deprecated(reason: "Use `amountSpent` instead.")

  """
  The URL to unsubscribe the customer from the mailing list.
  """
  unsubscribeUrl: URL!

  """
  The date and time when the customer was last updated.
  """
  updatedAt: DateTime!

  """
  Whether the email address is formatted correctly.

  Returns `true` when the email is formatted correctly and
  belongs to an existing domain. This doesn't guarantee that
  the email address actually exists.
  """
  validEmailAddress: Boolean!

  """
  Whether the customer has verified their email address. Defaults to `true` if
  the customer is created through the Shopify admin or API.
  """
  verifiedEmail: Boolean!
}

"""
An auto-generated type for paginating through multiple Customers.
"""
type CustomerConnection {
  """
  A list of edges.
  """
  edges: [CustomerEdge!]!

  """
  A list of the nodes contained in CustomerEdge.
  """
  nodes: [Customer!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
The source that collected the customer's consent to receive marketing materials.
"""
enum CustomerConsentCollectedFrom {
  """
  The customer consent was collected outside of Shopify.
  """
  OTHER

  """
  The customer consent was collected by Shopify.
  """
  SHOPIFY
}

"""
Represents a card instrument for customer payment method.
"""
type CustomerCreditCard {
  """
  The billing address of the card.
  """
  billingAddress: CustomerCreditCardBillingAddress

  """
  The brand of the card.
  """
  brand: String!

  """
  Whether the card is about to expire.
  """
  expiresSoon: Boolean!

  """
  The expiry month of the card.
  """
  expiryMonth: Int!

  """
  The expiry year of the card.
  """
  expiryYear: Int!

  """
  The card's BIN number.
  """
  firstDigits: String

  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """
  The last 4 digits of the card.
  """
  lastDigits: String!

  """
  The masked card number with only the last 4 digits displayed.
  """
  maskedNumber: String!

  """
  The name of the card holder.
  """
  name: String!

  """
  The source of the card if coming from a wallet such as Apple Pay.
  """
  source: String

  """
  The last 4 digits of the Device Account Number.
  """
  virtualLastDigits: String
}

"""
The billing address of a credit card payment instrument.
"""
type CustomerCreditCardBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: CountryCode

  """
  The first name in the billing address.
  """
  firstName: String

  """
  The last name in the billing address.
  """
  lastName: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The two-letter code for the region.
  For example, ON.
  """
  provinceCode: String

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
An auto-generated type which holds one Customer and a cursor during pagination.
"""
type CustomerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CustomerEdge.
  """
  node: Customer!
}

"""
The record of when a customer consented to receive marketing material by email.
"""
type CustomerEmailMarketingConsentState {
  """
  The date and time at which the customer consented to receive marketing material by email.
  The customer's consent state reflects the consent record with the most recent `consent_updated_at` date.
  If no date is provided, then the date and time at which the consent information was sent is used.
  """
  consentUpdatedAt: DateTime

  """
  The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
  that the customer gave when they consented to receive marketing material by email.
  """
  marketingOptInLevel: CustomerMarketingOptInLevel

  """
  The current email marketing state for the customer.
  """
  marketingState: CustomerEmailMarketingState!
}

"""
The possible email marketing states for a customer.
"""
enum CustomerEmailMarketingState {
  """
  The customer’s email address marketing state is invalid.
  """
  INVALID

  """
  The customer isn't subscribed to email marketing.
  """
  NOT_SUBSCRIBED

  """
  The customer is in the process of subscribing to email marketing.
  """
  PENDING

  """
  The customer's personal data is erased. This value is internally-set and read-only.
  """
  REDACTED

  """
  The customer is subscribed to email marketing.
  """
  SUBSCRIBED

  """
  The customer isn't currently subscribed to email marketing but was previously subscribed.
  """
  UNSUBSCRIBED
}

"""
Represents a customer's visiting activities on a shop's online store.
"""
type CustomerJourney {
  """
  The position of the current order within the customer's order history.
  """
  customerOrderIndex: Int!

  """
  The amount of days between first session and order creation date. First
  session represents first session since the last order, or first session within
  the 30 day attribution window, if more than 30 days has passed since the last order.
  """
  daysToConversion: Int!

  """
  The customer's first session going into the shop.
  """
  firstVisit: CustomerVisit!

  """
  The last session before an order is made.
  """
  lastVisit: CustomerVisit

  """
  Events preceding a customer order, such as shop sessions.
  """
  moments: [CustomerMoment!]!
}

"""
Represents a customer's visiting activities on a shop's online store.
"""
type CustomerJourneySummary {
  """
  The position of the current order within the customer's order history. Test orders aren't included.
  """
  customerOrderIndex: Int

  """
  The number of days between the first session and the order creation date. The
  first session represents the first session since the last order, or the first
  session within the 30 day attribution window, if more than 30 days have passed
  since the last order.
  """
  daysToConversion: Int

  """
  The customer's first session going into the shop.
  """
  firstVisit: CustomerVisit

  """
  The last session before an order is made.
  """
  lastVisit: CustomerVisit

  """
  The events preceding a customer's order, such as shop sessions.
  """
  moments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CustomerMomentConnection

  """
  The total number of customer moments associated with this order. Returns null
  if the order is still in the process of being attributed.
  """
  momentsCount: Int

  """
  Whether the attributed sessions for the order have been created yet.
  """
  ready: Boolean!
}

"""
The possible values for the marketing subscription opt-in level enabled at the
time the customer consented to receive marketing information.

The levels are defined by [the M3AAWG best practices guideline
  document](https://www.m3aawg.org/sites/maawg/files/news/M3AAWG_Senders_BCP_Ver3-2015-02.pdf).
"""
enum CustomerMarketingOptInLevel {
  """
  After providing their information, the customer receives a confirmation and is required to
  perform a intermediate step before receiving marketing information.
  """
  CONFIRMED_OPT_IN

  """
  After providing their information, the customer receives marketing information without any
  intermediate steps.
  """
  SINGLE_OPT_IN

  """
  The customer receives marketing information but how they were opted in is unknown.
  """
  UNKNOWN
}

"""
Represents a session preceding an order, often used for building a timeline of events leading to an order.
"""
interface CustomerMoment {
  """
  The date and time when the customer's session occurred.
  """
  occurredAt: DateTime!
}

"""
An auto-generated type for paginating through multiple CustomerMoments.
"""
type CustomerMomentConnection {
  """
  A list of edges.
  """
  edges: [CustomerMomentEdge!]!

  """
  A list of the nodes contained in CustomerMomentEdge.
  """
  nodes: [CustomerMoment!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CustomerMoment and a cursor during pagination.
"""
type CustomerMomentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CustomerMomentEdge.
  """
  node: CustomerMoment!
}

"""
All possible instruments for CustomerPaymentMethods.
"""
union CustomerPaymentInstrument = CustomerCreditCard | CustomerPaypalBillingAgreement | CustomerShopPayAgreement

"""
The billing address of a payment instrument.
"""
type CustomerPaymentInstrumentBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: CountryCode

  """
  The name of the buyer of the address.
  """
  name: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The two-letter code for the region.
  For example, ON.
  """
  provinceCode: String

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
A customer's payment method.
"""
type CustomerPaymentMethod implements Node {
  """
  The customer to whom the payment method belongs.
  """
  customer: Customer

  """
  The ID of this payment method.
  """
  id: ID!

  """
  The instrument for this payment method.
  """
  instrument: CustomerPaymentInstrument

  """
  The time that the payment method was revoked.
  """
  revokedAt: DateTime

  """
  The revocation reason for this payment method.
  """
  revokedReason: CustomerPaymentMethodRevocationReason

  """
  List Subscription Contracts.
  """
  subscriptionContracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionContractConnection!
}

"""
An auto-generated type for paginating through multiple CustomerPaymentMethods.
"""
type CustomerPaymentMethodConnection {
  """
  A list of edges.
  """
  edges: [CustomerPaymentMethodEdge!]!

  """
  A list of the nodes contained in CustomerPaymentMethodEdge.
  """
  nodes: [CustomerPaymentMethod!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.
"""
type CustomerPaymentMethodEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CustomerPaymentMethodEdge.
  """
  node: CustomerPaymentMethod!
}

"""
The revocation reason types for a customer payment method.
"""
enum CustomerPaymentMethodRevocationReason {
  """
  The Authorize.net payment gateway is not enabled.
  """
  AUTHORIZE_NET_GATEWAY_NOT_ENABLED

  """
  Authorize.net did not return any payment methods. Make sure that the correct Authorize.net account is linked.
  """
  AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD

  """
  Failed to contact Braintree API.
  """
  BRAINTREE_API_AUTHENTICATION_ERROR

  """
  The Braintree payment gateway is not enabled.
  """
  BRAINTREE_GATEWAY_NOT_ENABLED

  """
  The Braintree payment method type should be a credit card or Apple Pay card.
  """
  BRAINTREE_PAYMENT_METHOD_NOT_CARD

  """
  Braintree returned no payment methods. Make sure the correct Braintree account is linked.
  """
  BRAINTREE_RETURNED_NO_PAYMENT_METHOD

  """
  The credit card failed to update.
  """
  FAILED_TO_UPDATE_CREDIT_CARD

  """
  The payment method was manually revoked.
  """
  MANUALLY_REVOKED

  """
  The payment method was replaced with an existing payment method. The
  associated contracts have been migrated to the other payment method.
  """
  MERGED

  """
  Failed to contact the Stripe API.
  """
  STRIPE_API_AUTHENTICATION_ERROR

  """
  Invalid request. Failed to retrieve payment method from Stripe.
  """
  STRIPE_API_INVALID_REQUEST_ERROR

  """
  The Stripe payment gateway is not enabled.
  """
  STRIPE_GATEWAY_NOT_ENABLED

  """
  The Stripe payment method type should be card.
  """
  STRIPE_PAYMENT_METHOD_NOT_CARD

  """
  Stripe did not return any payment methods. Make sure that the correct Stripe account is linked.
  """
  STRIPE_RETURNED_NO_PAYMENT_METHOD
}

"""
Represents a PayPal instrument for customer payment method.
"""
type CustomerPaypalBillingAgreement {
  """
  The billing address of this payment method.
  """
  billingAddress: CustomerPaymentInstrumentBillingAddress

  """
  The ID of the PayPal billing agreement.
  """
  billingAgreementId: String! @deprecated(reason: "This field will always be empty.")

  """
  Whether the PayPal billing agreement is inactive.
  """
  inactive: Boolean!

  """
  Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """
  The customers's PayPal account email address.
  """
  paypalAccountEmail: String
}

"""
The valid tiers for the predicted spend of a customer with a shop.
"""
enum CustomerPredictedSpendTier {
  """
  The customer's spending is predicted to be in the top spending range for the shop in the following year.
  """
  HIGH

  """
  The customer's spending is predicted to be zero, or in the lowest spending range for the shop in the following year.
  """
  LOW

  """
  The customer's spending is predicted to be in the normal spending range for the shop in the following year.
  """
  MEDIUM
}

"""
The possible product subscription states for a customer, as defined by the customer's subscription contracts.
"""
enum CustomerProductSubscriberStatus {
  """
  The customer has at least one active subscription contract.
  """
  ACTIVE

  """
  The customer's last subscription contract was cancelled and there are no other active or paused
  subscription contracts.
  """
  CANCELLED

  """
  The customer's last subscription contract expired and there are no other active or paused
  subscription contracts.
  """
  EXPIRED

  """
  The customer's last subscription contract failed and there are no other active or paused
  subscription contracts.
  """
  FAILED

  """
  The customer has never had a subscription contract.
  """
  NEVER_SUBSCRIBED

  """
  The customer has at least one paused subscription contract and there are no other active
  subscription contracts.
  """
  PAUSED
}

"""
A job to determine a list of members, such as customers, that are associated with an individual segment.
"""
type CustomerSegmentMembersQuery implements JobResult & Node {
  """
  The current total number of members in a given segment.
  """
  currentCount: Int!

  """
  This indicates if the job is still queued or has been run.
  """
  done: Boolean!

  """
  A globally-unique identifier that's returned when running an asynchronous mutation.
  """
  id: ID!
}

"""
Represents a Shop Pay card instrument for customer payment method.
"""
type CustomerShopPayAgreement {
  """
  Whether the card is about to expire.
  """
  expiresSoon: Boolean!

  """
  The expiry month of the card.
  """
  expiryMonth: Int!

  """
  The expiry year of the card.
  """
  expiryYear: Int!

  """
  Whether the Shop Pay billing agreement is inactive.
  """
  inactive: Boolean!

  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """
  The last 4 digits of the card.
  """
  lastDigits: String!

  """
  The masked card number with only the last 4 digits displayed.
  """
  maskedNumber: String!

  """
  The name of the card holder.
  """
  name: String!
}

"""
The record of when a customer consented to receive marketing material by SMS.

The customer's consent state reflects the record with the most recent date when consent was updated.
"""
type CustomerSmsMarketingConsentState {
  """
  The source from which the SMS marketing information for the customer was collected.
  """
  consentCollectedFrom: CustomerConsentCollectedFrom

  """
  The date and time when the customer consented to receive marketing material by SMS.
  If no date is provided, then the date and time when the consent information was sent is used.
  """
  consentUpdatedAt: DateTime

  """
  The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
  """
  marketingOptInLevel: CustomerMarketingOptInLevel!

  """
  The current SMS marketing state for the customer.
  """
  marketingState: CustomerSmsMarketingState!
}

"""
The valid SMS marketing states for a customer’s phone number.
"""
enum CustomerSmsMarketingState {
  """
  The customer hasn't subscribed to SMS marketing.
  """
  NOT_SUBSCRIBED

  """
  The customer is in the process of subscribing to SMS marketing.
  """
  PENDING

  """
  The customer's personal data is erased. This value is internally-set and read-only.
  """
  REDACTED

  """
  The customer is subscribed to SMS marketing.
  """
  SUBSCRIBED

  """
  The customer isn't currently subscribed to SMS marketing but was previously subscribed.
  """
  UNSUBSCRIBED
}

"""
The valid values for the state of a customer's account with a shop.
"""
enum CustomerState {
  """
  The customer declined the email invite to create an account.
  """
  DECLINED

  """
  The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time.
  """
  DISABLED

  """
  The customer has created an account.
  """
  ENABLED

  """
  The customer has received an email invite to create an account.
  """
  INVITED
}

"""
A customer's computed statistics.
"""
type CustomerStatistics {
  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  amountSpent: MoneyV2!

  """
  The customer's average order value.
  """
  averageOrderValue: MoneyV2!

  """
  The date of the customer's first order.
  """
  firstOrderDate: DateTime

  """
  The customer's last order.
  """
  lastOrder: Order

  """
  The date of the customer's last order.
  """
  lastOrderDate: DateTime

  """
  The number of orders that the customer has made at the store in their lifetime.
  """
  numberOfOrders: Int!

  """
  The predicted spend tier of a customer with a shop.
  """
  predictedSpendTier: CustomerPredictedSpendTier
}

"""
Represents information about a customer tag of the shop.
"""
type CustomerTag {
  """
  Title of the customer tag.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple CustomerTags.
"""
type CustomerTagConnection {
  """
  A list of edges.
  """
  edges: [CustomerTagEdge!]!

  """
  A list of the nodes contained in CustomerTagEdge.
  """
  nodes: [CustomerTag!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CustomerTag and a cursor during pagination.
"""
type CustomerTagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CustomerTagEdge.
  """
  node: CustomerTag!
}

"""
Represents a customer's session visiting a shop's online store, including
information about the marketing activity attributed to starting the session.
"""
type CustomerVisit implements CustomerMoment & Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  URL of the first page the customer landed on for the session.
  """
  landingPage: URL

  """
  Landing page information with URL linked in HTML. For example, the first page
  the customer visited was store.myshopify.com/products/1.
  """
  landingPageHtml: HTML

  """
  Represent actions taken by an app, on behalf of a merchant,
  to market Shopify resources such as products, collections, and discounts.
  """
  marketingEvent: MarketingEvent

  """
  The date and time when the customer's session occurred.
  """
  occurredAt: DateTime!

  """
  Marketing referral code from the link that the customer clicked to visit the store.
  Supports the following URL attributes: _ref_, _source_, or _r_.
  For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
  """
  referralCode: String

  """
  Referral information with URLs linked in HTML.
  """
  referralInfoHtml: FormattedString!

  """
  Webpage where the customer clicked a link that sent them to the online store.
  For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
  """
  referrerUrl: URL

  """
  Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
  a website domain, QR code, or unknown.
  """
  source: String!

  """
  Describes the source explicitly for first or last session.
  """
  sourceDescription: String

  """
  Type of marketing tactic.
  """
  sourceType: MarketingTactic

  """
  A set of UTM parameters gathered from the URL parameters of the referrer.
  """
  utmParameters: UTMParameters
}

"""
This type returns the information about the product and product variant from a customer visit.
"""
type CustomerVisitProductInfo {
  """
  The product information. If `null`, then the product was deleted from the store.
  """
  product: Product

  """
  The quantity of the product that the customer requested.
  """
  quantity: Int!

  """
  The product variant information, if the product variant exists.
  """
  variant: ProductVariant
}

"""
An auto-generated type for paginating through multiple CustomerVisitProductInfos.
"""
type CustomerVisitProductInfoConnection {
  """
  A list of edges.
  """
  edges: [CustomerVisitProductInfoEdge!]!

  """
  A list of the nodes contained in CustomerVisitProductInfoEdge.
  """
  nodes: [CustomerVisitProductInfo!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CustomerVisitProductInfo and a cursor during pagination.
"""
type CustomerVisitProductInfoEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of CustomerVisitProductInfoEdge.
  """
  node: CustomerVisitProductInfo!
}

"""
Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date string.
For example, September 7, 2019 is represented as `"2019-07-16"`.
"""
scalar Date

"""
Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date and time string.
For example, 3:50 pm on September 7, 2019 in the time zone of UTC (Coordinated Universal Time) is
represented as `"2019-09-07T15:50:00Z`".
"""
scalar DateTime

"""
Days of the week from Monday to Sunday.
"""
enum DayOfTheWeek {
  """
  Friday.
  """
  FRIDAY

  """
  Monday.
  """
  MONDAY

  """
  Saturday.
  """
  SATURDAY

  """
  Sunday.
  """
  SUNDAY

  """
  Thursday.
  """
  THURSDAY

  """
  Tuesday.
  """
  TUESDAY

  """
  Wednesday.
  """
  WEDNESDAY
}

"""
A signed decimal number, which supports arbitrary precision and is serialized as a string.

Example values: `"29.99"`, `"29.999"`.
"""
scalar Decimal

"""
A shipping service and a list of countries that the service is available for.
"""
type DeliveryAvailableService {
  """
  The countries the service provider ships to.
  """
  countries: DeliveryCountryCodesOrRestOfWorld!

  """
  The name of the service.
  """
  name: String!
}

"""
A shipping service provider or a carrier account.
"""
type DeliveryCarrierService implements Node {
  """
  The list of services offered for given destinations.
  """
  availableServicesForCountries(
    """
    The country codes of the destinations.
    """
    countryCodes: [CountryCode!]

    """
    The locations of the possible origins.
    """
    origins: [ID!]

    """
    Whether to use 'Rest of World' as the destination.
    """
    restOfWorld: Boolean!
  ): [DeliveryAvailableService!]!

  """
  The carrier account identifier for this carrier service, if any.
  """
  carrierAccountIdentifier: String

  """
  The discount for the shipping service provider based on plan.
  """
  discountPercentage: Decimal

  """
  The properly formatted name of the shipping service provider, ready to display.
  """
  formattedName: String

  """
  The logo of the service provider.
  """
  icon: Image!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The list of information bullet points to be presented using a pop-over.
  """
  infoContent: [String!]

  """
  Whether the carrier or shipping service provider is an app.
  """
  isApp: Boolean!

  """
  Whether the carrier account is registered.
  """
  isRegistered: Boolean!

  """
  The label for the shipping service provider.
  """
  label: String

  """
  The name of the shipping service provider.
  """
  name: String
}

"""
Shipping packaging supplied by carrier used to pack shipment.
"""
type DeliveryCarrierShippingPackaging implements DeliveryShippingPackaging & Node {
  """
  Carrier supplying the packaging.
  """
  carrier: String!

  """
  Code identifying this packaging.
  """
  carrierPackagingCode: String!

  """
  The default packaging is the one used to calculate shipping costs on checkout.
  """
  default: Boolean!

  """
  Outside dimensions of the empty shipping packaging.
  """
  dimensions: BoxDimensions!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Descriptive name for the packaging.
  """
  name: String!

  """
  Type of packaging.
  """
  type: ShippingPackaging!

  """
  Weight of the empty shipping packaging.
  """
  weight: Weight!
}

"""
A condition that must pass for a delivery method definition to be applied to an order.
"""
type DeliveryCondition implements Node {
  """
  The value (weight or price) that the condition field is compared to.
  """
  conditionCriteria: DeliveryConditionCriteria!

  """
  The field to compare the criterion value against, using the operator.
  """
  field: DeliveryConditionField!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The operator to compare the field and criterion value.
  """
  operator: DeliveryConditionOperator!
}

"""
The value (weight or price) that the condition field is compared to.
"""
union DeliveryConditionCriteria = MoneyV2 | Weight

"""
The field type that the condition will be applied to.
"""
enum DeliveryConditionField {
  """
  The condition will check against the total price of the order.
  """
  TOTAL_PRICE

  """
  The condition will check against the total weight of the order.
  """
  TOTAL_WEIGHT
}

"""
The operator to use to determine if the condition passes.
"""
enum DeliveryConditionOperator {
  """
  The condition will check whether the field is greater than or equal to the criterion.
  """
  GREATER_THAN_OR_EQUAL_TO

  """
  The condition will check if the field is less than or equal to the criterion.
  """
  LESS_THAN_OR_EQUAL_TO
}

"""
A country that is used to define a shipping zone.
"""
type DeliveryCountry implements Node {
  """
  A two-letter country code in ISO 3166-1 alpha-2 standard.
  It also includes a flag indicating whether the country should be
  a part of the 'Rest Of World' shipping zone.
  """
  code: DeliveryCountryCodeOrRestOfWorld!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The full name of the country.
  """
  name: String!

  """
  The list of regions associated with this country.
  """
  provinces: [DeliveryProvince!]!

  """
  The translated name of the country. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""
The country details and the associated shipping zone.
"""
type DeliveryCountryAndZone {
  """
  The country details.
  """
  country: DeliveryCountry!

  """
  The name of the shipping zone.
  """
  zone: String!
}

"""
The country code and whether the country is a part of the 'Rest Of World' shipping zone.
"""
type DeliveryCountryCodeOrRestOfWorld {
  """
  The country code in the ISO 3166-1 alpha-2 format.
  """
  countryCode: CountryCode

  """
  Whether the country is a part of the 'Rest of World' shipping zone.
  """
  restOfWorld: Boolean!
}

"""
The list of country codes and information whether the countries
are a part of the 'Rest Of World' shipping zone.
"""
type DeliveryCountryCodesOrRestOfWorld {
  """
  List of applicable country codes in the ISO 3166-1 alpha-2 format.
  """
  countryCodes: [CountryCode!]!

  """
  Whether the countries are a part of the 'Rest of World' shipping zone.
  """
  restOfWorld: Boolean!
}

"""
Custom shipping packaging used to pack shipment.
"""
type DeliveryCustomShippingPackaging implements DeliveryShippingPackaging & Node {
  """
  The default packaging is the one used to calculate shipping costs on checkout.
  """
  default: Boolean!

  """
  Outside dimensions of the empty shipping packaging.
  """
  dimensions: BoxDimensions!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Descriptive name for the packaging.
  """
  name: String!

  """
  Type of packaging.
  """
  type: ShippingPackaging!

  """
  Weight of the empty shipping packaging.
  """
  weight: Weight!
}

"""
Represents an error that happened during a Shipping Label Purchase.
"""
type DeliveryLabelPurchaseError implements DisplayableError {
  """
  Carrier to which this error pertains.
  """
  carrier: String

  """
  Possible error classifications an error can be classified as.
  """
  classification: DeliveryLabelPurchaseErrorClassification!

  """
  The path to the input field that caused the error.
  """
  field: [String!]

  """
  The error message.
  """
  message: String!
}

"""
Possible error classifications an error can be classified as.
"""
enum DeliveryLabelPurchaseErrorClassification {
  """
  General errors with this label.
  """
  BASE

  """
  Errors with label's custom lines.
  """
  CUSTOMS_LINES

  """
  Errors with label's line items.
  """
  LINE_ITEMS

  """
  Errors with the label size or weight.
  """
  PACKAGE_AND_WEIGHT

  """
  Errors with the shipping address.
  """
  SHIPPING_ADDRESS
}

"""
Local pickup settings associated with a location.
"""
type DeliveryLocalPickupSettings {
  """
  Additional instructions or information related to the local pickup.
  """
  instructions: String!

  """
  The estimated pickup time to show customers at checkout.
  """
  pickupTime: DeliveryLocalPickupTime!
}

"""
Possible pickup time values that a location enabled for local pickup can have.
"""
enum DeliveryLocalPickupTime {
  """
  Usually ready in 5+ days.
  """
  FIVE_OR_MORE_DAYS

  """
  Usually ready in 4 hours.
  """
  FOUR_HOURS

  """
  Usually ready in 1 hour.
  """
  ONE_HOUR

  """
  Usually ready in 24 hours.
  """
  TWENTY_FOUR_HOURS

  """
  Usually ready in 2 hours.
  """
  TWO_HOURS

  """
  Usually ready in 2-4 days.
  """
  TWO_TO_FOUR_DAYS
}

"""
A location group is a collection of locations. They share zones and delivery methods across delivery
profiles.
"""
type DeliveryLocationGroup implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  A list of all locations that are part of this location group.
  """
  locations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LocationConnection!

  """
  A count of all locations that are part of this location group.
  """
  locationsCount: Int!
}

"""
Links a location group with a zone and the associated method definitions.
"""
type DeliveryLocationGroupZone {
  """
  The number of method definitions for the zone.
  """
  methodDefinitionCounts: DeliveryMethodDefinitionCounts!

  """
  The method definitions associated to a zone and location group.
  """
  methodDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeliveryMethodDefinitionConnection!

  """
  The zone associated to a location group.
  """
  zone: DeliveryZone!
}

"""
An auto-generated type for paginating through multiple DeliveryLocationGroupZones.
"""
type DeliveryLocationGroupZoneConnection {
  """
  A list of edges.
  """
  edges: [DeliveryLocationGroupZoneEdge!]!

  """
  A list of the nodes contained in DeliveryLocationGroupZoneEdge.
  """
  nodes: [DeliveryLocationGroupZone!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.
"""
type DeliveryLocationGroupZoneEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of DeliveryLocationGroupZoneEdge.
  """
  node: DeliveryLocationGroupZone!
}

"""
The delivery method used by a fulfillment order.
"""
type DeliveryMethod implements Node {
  """
  The date and time by which the delivery is expected to be completed.
  """
  expectedDeliveryBy: DateTime

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The maximum date and time by which the delivery is expected to be completed.
  """
  maxDeliveryDateTime: DateTime

  """
  The type of the delivery method.
  """
  methodType: DeliveryMethodType!

  """
  The minimum date and time by which the delivery is expected to be completed.
  """
  minDeliveryDateTime: DateTime
}

"""
A method definition contains the delivery rate and the conditions that must be met for the method to be
applied.
"""
type DeliveryMethodDefinition implements Node {
  """
  Whether this method definition is active.
  """
  active: Boolean!

  """
  The description of the method definition.
  """
  description: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The method conditions that must pass for this method definition to be applied to an order.
  """
  methodConditions: [DeliveryCondition!]!

  """
  The name of the method definition.
  """
  name: String!

  """
  The provided rate for this method definition, from a rate definition or participant.
  """
  rateProvider: DeliveryRateProvider!
}

"""
An auto-generated type for paginating through multiple DeliveryMethodDefinitions.
"""
type DeliveryMethodDefinitionConnection {
  """
  A list of edges.
  """
  edges: [DeliveryMethodDefinitionEdge!]!

  """
  A list of the nodes contained in DeliveryMethodDefinitionEdge.
  """
  nodes: [DeliveryMethodDefinition!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
The number of method definitions for a zone, separated into merchant-owned and participant definitions.
"""
type DeliveryMethodDefinitionCounts {
  """
  The number of participant method definitions for the specified zone.
  """
  participantDefinitionsCount: Int!

  """
  The number of merchant-defined method definitions for the specified zone.
  """
  rateDefinitionsCount: Int!
}

"""
An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.
"""
type DeliveryMethodDefinitionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of DeliveryMethodDefinitionEdge.
  """
  node: DeliveryMethodDefinition!
}

"""
Possible method types that a delivery method can have.
"""
enum DeliveryMethodType {
  """
  The order is delivered using a local delivery service.
  """
  LOCAL

  """
  No delivery is needed.
  """
  NONE

  """
  The order is picked up by the customer.
  """
  PICK_UP

  """
  The order is delivered to a retail store.
  """
  RETAIL

  """
  The order is shipped.
  """
  SHIPPING
}

"""
A participant defines carrier-calculated rates for shipping services
with a possible merchant-defined fixed fee or a percentage-of-rate fee.
"""
type DeliveryParticipant implements Node {
  """
  Whether to display new shipping services automatically to the customer when the service becomes available.
  """
  adaptToNewServicesFlag: Boolean!

  """
  The carrier used for this participant.
  """
  carrierService: DeliveryCarrierService!

  """
  The merchant-defined fixed fee for this participant.
  """
  fixedFee: MoneyV2

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The carrier-specific services offered by the participant, and whether each service is active.
  """
  participantServices: [DeliveryParticipantService!]!

  """
  The merchant-defined percentage-of-rate fee for this participant.
  """
  percentageOfRateFee: Float!
}

"""
A mail service provided by the participant.
"""
type DeliveryParticipantService {
  """
  Whether the service is active.
  """
  active: Boolean!

  """
  The name of the service.
  """
  name: String!
}

"""
How many product variants are in a profile. This count is capped at 500.
"""
type DeliveryProductVariantsCount {
  """
  Whether the count has reached the cap of 500.
  """
  capped: Boolean!

  """
  The product variant count.
  """
  count: Int!
}

"""
A shipping profile. In Shopify, a shipping profile is a set of shipping rates
scoped to a set of products or variants that can be shipped from selected
locations to zones.
"""
type DeliveryProfile implements Node {
  """
  The number of active shipping rates for the profile.
  """
  activeMethodDefinitionsCount: Int!

  """
  Whether this is the default profile.
  """
  default: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Whether this shop has enabled legacy compatibility mode for delivery profiles.
  """
  legacyMode: Boolean!

  """
  The number of locations without rates defined.
  """
  locationsWithoutRatesCount: Int!

  """
  The name of the delivery profile.
  """
  name: String!

  """
  The number of active origin locations for the profile.
  """
  originLocationCount: Int!

  """
  The number of product variants for this profile. The count for the default profile is not supported and will return -1.
  """
  productVariantsCount: Int! @deprecated(reason: "Use `productVariantsCountV2` instead.")

  """
  How many product variants are in this profile.
  """
  productVariantsCountV2: DeliveryProductVariantsCount!

  """
  The products and variants associated with this profile.
  """
  profileItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeliveryProfileItemConnection!

  """
  The location groups and associated zones using this profile.
  """
  profileLocationGroups(
    """
    Filter the location groups of the profile by location group ID.
    """
    locationGroupId: ID
  ): [DeliveryProfileLocationGroup!]!

  """
  Selling plan groups associated with the specified delivery profile.
  """
  sellingPlanGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SellingPlanGroupConnection!

  """
  List of locations that have not been assigned to a location group for this profile.
  """
  unassignedLocations: [Location!]!

  """
  List of locations that have not been assigned to a location group for this profile.
  """
  unassignedLocationsPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LocationConnection!

  """
  The number of countries with active rates to deliver to.
  """
  zoneCountryCount: Int!
}

"""
A product and the subset of associated variants that are part of this delivery profile.
"""
type DeliveryProfileItem implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  A product associated with this profile.
  """
  product: Product!

  """
  The product variants associated with this delivery profile.
  """
  variants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductVariantConnection!
}

"""
An auto-generated type for paginating through multiple DeliveryProfileItems.
"""
type DeliveryProfileItemConnection {
  """
  A list of edges.
  """
  edges: [DeliveryProfileItemEdge!]!

  """
  A list of the nodes contained in DeliveryProfileItemEdge.
  """
  nodes: [DeliveryProfileItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.
"""
type DeliveryProfileItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of DeliveryProfileItemEdge.
  """
  node: DeliveryProfileItem!
}

"""
Links a location group with zones. Both are associated to a delivery profile.
"""
type DeliveryProfileLocationGroup {
  """
  The countries already selected in any zone for the specified location group.
  """
  countriesInAnyZone: [DeliveryCountryAndZone!]!

  """
  The collection of locations that make up the specified location group.
  """
  locationGroup: DeliveryLocationGroup!

  """
  The applicable zones associated to the specified location group.
  """
  locationGroupZones(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeliveryLocationGroupZoneConnection!
}

"""
A region that is used to define a shipping zone.
"""
type DeliveryProvince implements Node {
  """
  The code of the region.
  """
  code: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The full name of the region.
  """
  name: String!

  """
  The translated name of the region. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""
The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition).
"""
type DeliveryRateDefinition implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The price of this rate.
  """
  price: MoneyV2!
}

"""
Information regarding a rate item.
"""
type DeliveryRateItem {
  """
  Code of the rate item.
  """
  code: DeliveryRateItemCode!

  """
  Human readable name of the rate item.
  """
  name: String!
}

"""
The valid values of the different codes for shipping rate items.
"""
enum DeliveryRateItemCode {
  """
  Notify the mailer about delivery information.
  """
  DELIVERY_CONFIRMATION

  """
  Arrange a pickup with the carrier.
  """
  PACKAGE_PICKUP

  """
  Require a signature from the recipients.
  """
  SIGNATURE_REQUIRED
}

"""
A rate provided by a merchant-defined rate or a participant.
"""
union DeliveryRateProvider = DeliveryParticipant | DeliveryRateDefinition

"""
The optional return label for an order.
"""
type DeliveryReturnLabel implements Node {
  """
  User-friendly name of the carrier that will handle this return label.
  """
  carrierName: String

  """
  Address that the packaging is going to.
  """
  destinationAddress: MailingAddress!

  """
  Represents whether a return label is a draft.
  """
  draft: Boolean!

  """
  The preview of the email that contains a link to print this return label.
  """
  emailPreview: DeliveryReturnLabelEmailPreview

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Errors resulting from the last purchase request.
  """
  lastPurchaseRequestErrors: [DeliveryLabelPurchaseError!]

  """
  Errors resulting from the last rate request.
  """
  lastRateRequestErrors: [DeliveryLabelPurchaseError!]

  """
  Unique identifier for the return label.
  For example, _#1001-RL1_ or _#1001-RL2_.
  This value is not necessarily unique across multiple stores.
  """
  name: String!

  """
  Sequential number scoped by order that provides a user friendly identifier for the return label.
  """
  number: Int!

  """
  Address that the packaging is coming from.
  """
  originAddress: MailingAddress!

  """
  Represents whether or not this return label can be printed.
  """
  printable: Boolean!

  """
  A public link that can be used to download the label image. The value will be
  null if the label has not yet been purchased.
  """
  publicFileUrl: URL

  """
  Name of the service purchased for this return label.
  """
  serviceName: String

  """
  The shipping package that this return label will be affixed to.
  """
  shippingPackage: ShippingPackageV2!

  """
  The shipping packaging that this return label will be affixed to.
  """
  shippingPackaging: DeliveryShippingPackaging! @deprecated(reason: "Use `shippingPackage` instead.")

  """
  The shipping rates for a draft return label. If return label is not a draft it returns an empty array.
  """
  shippingRates: [ShippingRate!]!

  """
  Total weight of the returned items including packaging.
  """
  totalWeight: Weight!

  """
  Tracking number for the purchased return label.
  """
  trackingNumber: String

  """
  URL pointing to the website where you can see tracking information about this label.
  """
  trackingUrl: URL
}

"""
An auto-generated type for paginating through multiple DeliveryReturnLabels.
"""
type DeliveryReturnLabelConnection {
  """
  A list of edges.
  """
  edges: [DeliveryReturnLabelEdge!]!

  """
  A list of the nodes contained in DeliveryReturnLabelEdge.
  """
  nodes: [DeliveryReturnLabel!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DeliveryReturnLabel and a cursor during pagination.
"""
type DeliveryReturnLabelEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of DeliveryReturnLabelEdge.
  """
  node: DeliveryReturnLabel!
}

"""
The optional preview of the email that contains a link to print a return label.
"""
type DeliveryReturnLabelEmailPreview {
  """
  The HTML preview of the email body.
  """
  body: HTML!

  """
  The email address of the sender.
  """
  from: String!

  """
  The email subject.
  """
  subject: String!
}

"""
Shipping packaging used to pack shipment.
"""
interface DeliveryShippingPackaging {
  """
  The default packaging is the one used to calculate shipping costs on checkout.
  """
  default: Boolean!

  """
  Outside dimensions of the empty shipping packaging.
  """
  dimensions: BoxDimensions!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Descriptive name for the packaging.
  """
  name: String!

  """
  Type of packaging.
  """
  type: ShippingPackaging!

  """
  Weight of the empty shipping packaging.
  """
  weight: Weight!
}

"""
A scheduled pickup by a shipping carrier.
"""
type DeliveryShippingPickup implements Node {
  """
  Date and time when the shipping pickup was cancelled.
  """
  cancelledAt: DateTime

  """
  The name of the carrier for the pickup.
  """
  carrierName: String!

  """
  The name the carrier uses to describe the pickup, e.g., 'DHL Express Pickup'.
  """
  carrierPickupLabel: String!

  """
  Date and time of the end of the window for a pickup.
  """
  endWindowTime: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The location where the pickup is taking place.
  """
  location: Location @deprecated(reason: "Use `pickupAddress` instead.")

  """
  The price of the pickup.
  """
  price: MoneyV2

  """
  Date and time of the start of the window for a pickup.
  """
  startWindowTime: DateTime!
}

"""
A zone is a group of countries that have the same shipping rates. Customers can
order products from a store only if they choose a shipping destination that's
included in one of the store's zones.
"""
type DeliveryZone implements Node {
  """
  The list of countries within the zone.
  """
  countries: [DeliveryCountry!]!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The name of the zone.
  """
  name: String!
}

"""
Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
"""
enum DigitalWallet {
  """
  Android Pay.
  """
  ANDROID_PAY

  """
  Apple Pay.
  """
  APPLE_PAY

  """
  Google Pay.
  """
  GOOGLE_PAY

  """
  Shopify Pay.
  """
  SHOPIFY_PAY
}

"""
A discount.
"""
union Discount = DiscountAutomaticApp | DiscountAutomaticBasic | DiscountAutomaticBxgy | DiscountCodeApp | DiscountCodeBasic | DiscountCodeBxgy | DiscountCodeFreeShipping

"""
An amount that's allocated to a line based on an associated discount application.
"""
type DiscountAllocation {
  """
  The money amount that's allocated to a line based on the associated discount application.
  """
  allocatedAmount: MoneyV2! @deprecated(reason: "Use `allocatedAmountSet` instead.")

  """
  The money amount that's allocated to a line based on the associated discount
  application in shop and presentment currencies.
  """
  allocatedAmountSet: MoneyBag!

  """
  The discount application that the allocated amount originated from.
  """
  discountApplication: DiscountApplication!
}

"""
The fixed amount value of a discount, and whether the amount is applied to each
entitled item or spread evenly across the entitled items.
"""
type DiscountAmount {
  """
  The value of the discount.
  """
  amount: MoneyV2!

  """
  If true, then the discount is applied to each of the entitled items. If false,
  then the amount is split across all of the entitled items.
  """
  appliesOnEachItem: Boolean!

  """
  If true, then the discount is applied to each of the entitled items. If false,
  then the amount is split across all of the entitled items.
  """
  each: Boolean! @deprecated(reason: "Use `appliesOnEachItem` instead.")
}

"""
Discount applications capture the intentions of a discount source at
the time of application on an order's line items or shipping lines.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
interface DiscountApplication {
  """
  The allocated amount of the discount that was applied to the order.
  """
  allocatedAmount: DiscountApplicationAllocationAmount!

  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
The amount allocated by the discount application.
"""
type DiscountApplicationAllocationAmount {
  """
  The amount allocated by the discount application to the order.
  """
  presentmentMoney: MoneyV2!
}

"""
The method by which the discount's value is allocated onto its entitled lines.
"""
enum DiscountApplicationAllocationMethod {
  """
  The value is spread across all entitled lines.
  """
  ACROSS

  """
  The value is applied onto every entitled line.
  """
  EACH

  """
  The value is specifically applied onto a particular line.
  """
  ONE @deprecated(reason: "Use ACROSS instead.")
}

"""
An auto-generated type for paginating through multiple DiscountApplications.
"""
type DiscountApplicationConnection {
  """
  A list of edges.
  """
  edges: [DiscountApplicationEdge!]!

  """
  A list of the nodes contained in DiscountApplicationEdge.
  """
  nodes: [DiscountApplication!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DiscountApplication and a cursor during pagination.
"""
type DiscountApplicationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of DiscountApplicationEdge.
  """
  node: DiscountApplication!
}

"""
The level at which the discount's value is applied.
"""
enum DiscountApplicationLevel {
  """
  The discount is applied at the line level.
  Line level discounts are factored into the discountedUnitPriceSet on line items.
  """
  LINE

  """
  The discount is applied at the order level.
  Order level discounts are not factored into the discountedUnitPriceSet on line items.
  """
  ORDER
}

"""
The lines on the order to which the discount is applied, of the type defined by
the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of
`LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.
"""
enum DiscountApplicationTargetSelection {
  """
  The discount is allocated onto all the lines.
  """
  ALL

  """
  The discount is allocated onto only the lines that it's entitled for.
  """
  ENTITLED

  """
  The discount is allocated onto explicitly chosen lines.
  """
  EXPLICIT
}

"""
The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.
"""
enum DiscountApplicationTargetType {
  """
  The discount applies onto line items.
  """
  LINE_ITEM

  """
  The discount applies onto shipping lines.
  """
  SHIPPING_LINE
}

"""
The type of discount associated to the automatic discount. For example, the
automatic discount might offer a basic discount using a fixed percentage, or a
fixed amount, on specific products from the order. The automatic discount may
also be a BXGY discount, which offers customer discounts on select products if
they add a specific product to their order.
"""
union DiscountAutomatic = DiscountAutomaticApp | DiscountAutomaticBasic | DiscountAutomaticBxgy

"""
An automatic app discount.
"""
type DiscountAutomaticApp {
  """
  The app discount type providing the discount type.
  """
  appDiscountType: AppDiscountType!

  """
  The number of times the discount has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!

  """
  Determines which discount classes the discount can combine with.
  """
  combinesWith: DiscountCombinesWith!

  """
  Determines whether the discount may be combined with other discounts on a single line.
  """
  combiningBehavior: DiscountCombiningBehavior!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The class of the discount for combining purposes.
  """
  discountClass: DiscountClass!

  """
  The ID for the discount.
  """
  discountId: ID!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """
  The error history on the most recent version of the app discount.
  """
  errorHistory: FunctionsErrorHistory

  """
  The date and time when the discount starts.
  """
  startsAt: DateTime!

  """
  The status of the discount.
  """
  status: DiscountStatus!

  """
  The title of the discount.
  """
  title: String!

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!
}

"""
An automatic discount that offers customers a percentage discount, or fixed
amount discount, on specific products, collections, or the entire order.
"""
type DiscountAutomaticBasic {
  """
  The number of times the discount has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!

  """
  Determines which discount classes the discount can combine with.
  """
  combinesWith: DiscountCombinesWith!

  """
  Determines whether the discount may be combined with other discounts on a single line.
  """
  combiningBehavior: DiscountCombiningBehavior!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """
  The class of the discount for combining purposes.
  """
  discountClass: MerchandiseDiscountClass!

  """
  A unique identifier for the discount.
  """
  discountId: ID!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """
  A list of the discount's features.
  """
  features: [DiscountFeature!]!

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirement!

  """
  A short summary of the discount.
  """
  shortSummary: String!

  """
  The date and time when the discount starts.
  """
  startsAt: DateTime!

  """
  The status of the discount.
  """
  status: DiscountStatus!

  """
  A detailed summary of the discount.
  """
  summary: String!

  """
  The title of the discount.
  """
  title: String!

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The number of times that the discount has been used.
  """
  usageCount: Int! @deprecated(reason: "Use `asyncUsageCount` instead.")
}

"""
An automatic discount that offers customers a Buy X, Get Y (BXGY) discount.
"""
type DiscountAutomaticBxgy implements HasEvents & Node {
  """
  The number of times the discount has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!

  """
  Determines which discount classes the discount can combine with.
  """
  combinesWith: DiscountCombinesWith!

  """
  Determines whether the discount may be combined with other discounts on a single line.
  """
  combiningBehavior: DiscountCombiningBehavior!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: DiscountCustomerBuys!

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """
  The class of the discount for combining purposes.
  """
  discountClass: MerchandiseDiscountClass!

  """
  A unique identifier for the discount.
  """
  discountId: ID!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!

  """
  A list of the discount's features.
  """
  features: [DiscountFeature!]!

  """
  A legacy unique identifier for the discount.
  """
  id: ID! @deprecated(reason: "Use DiscountAutomaticNode.id instead.")

  """
  The date and time when the discount starts.
  """
  startsAt: DateTime!

  """
  The status of the discount.
  """
  status: DiscountStatus!

  """
  A detailed summary of the discount.
  """
  summary: String!

  """
  The title of the discount.
  """
  title: String!

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The number of times that the discount has been used.
  """
  usageCount: Int! @deprecated(reason: "Use `asyncUsageCount` instead.")

  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
}

"""
A node containing an automatic discount and its related events.
"""
type DiscountAutomaticNode implements HasEvents & HasMetafieldDefinitions & HasMetafields & Node {
  """
  The automatic discount object.
  """
  automaticDiscount: DiscountAutomatic!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!
}

"""
The class of the discount for combining purposes.
"""
enum DiscountClass {
  """
  Combined as an order discount.
  """
  ORDER

  """
  Combined as a product discount.
  """
  PRODUCT

  """
  Combined as a shipping discount.
  """
  SHIPPING
}

"""
The type of discount associated with the discount code. For example, the
discount code might offer a basic discount of a fixed percentage, or a fixed
amount, on specific products or the order. Alternatively, the discount might
offer the customer free shipping on their order. A third option is a Buy X, Get
Y (BXGY) discount, which offers a customer discounts on select products if they
add a specific product to their order.
"""
union DiscountCode = DiscountCodeApp | DiscountCodeBasic | DiscountCodeBxgy | DiscountCodeFreeShipping

"""
A code app discount.
"""
type DiscountCodeApp {
  """
  The app discount type providing the discount type.
  """
  appDiscountType: AppDiscountType!

  """
  Whether the discount can be applied only once per customer.
  """
  appliesOncePerCustomer: Boolean!

  """
  The number of times that the discount has been used.
  """
  asyncUsageCount: Int!

  """
  The number of redeem codes for the discount.
  """
  codeCount: Int!

  """
  A list of redeem codes for the discount.
  """
  codes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscountRedeemCodeConnection!

  """
  Determines which discount classes the discount can combine with.
  """
  combinesWith: DiscountCombinesWith!

  """
  Determines whether the discount may be combined with other discounts on a single line.
  """
  combiningBehavior: DiscountCombiningBehavior!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The app that created the discount.
  """
  createdBy: [App!]

  """
  The customers that can use the discount.
  """
  customerSelection: DiscountCustomerSelection!

  """
  The class of the discount for combining purposes.
  """
  discountClass: DiscountClass!

  """
  The ID for the discount.
  """
  discountId: ID!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """
  The error history on the most recent version of the discount.
  """
  errorHistory: FunctionsErrorHistory

  """
  A list of the discount's features.
  """
  features: [DiscountFeature!]!

  """
  Whether the discount code has at least one segment created through tag migration.
  """
  hasTagMigratedSegment: Boolean!

  """
  Indicates whether there are any timeline comments on the discount.
  """
  hasTimelineComment: Boolean!

  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int

  """
  URLs that can be used to share the discount.
  """
  shareableUrls: [DiscountShareableUrl!]!

  """
  The date and time when the discount starts.
  """
  startsAt: DateTime!

  """
  The status of the discount.
  """
  status: DiscountStatus!

  """
  The title of the discount.
  """
  title: String!

  """
  The total sales from orders where the discount was used.
  """
  totalSales: MoneyV2

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The maximum number of times that the discount can be used.
  """
  usageLimit: Int
}

"""
Discount code applications capture the intentions of a discount code at
the time that it is applied onto an order.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type DiscountCodeApplication implements DiscountApplication {
  """
  The allocated amount of the discount that was applied to the order.
  """
  allocatedAmount: DiscountApplicationAllocationAmount!

  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
A code discount that offers customers a percentage or fixed amount discount on
specific products, collections, or the entire order.
"""
type DiscountCodeBasic {
  """
  Whether the discount can be applied only once per customer.
  """
  appliesOncePerCustomer: Boolean!

  """
  The number of times that the discount has been used.
  """
  asyncUsageCount: Int!

  """
  The number of redeem codes for the discount.
  """
  codeCount: Int!

  """
  A list of redeem codes for the discount.
  """
  codes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscountRedeemCodeConnection!

  """
  Determines which discount classes the discount can combine with.
  """
  combinesWith: DiscountCombinesWith!

  """
  Determines whether the discount may be combined with other discounts on a single line.
  """
  combiningBehavior: DiscountCombiningBehavior!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The app that created the discount.
  """
  createdBy: [App!]

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """
  The customers that can use the discount.
  """
  customerSelection: DiscountCustomerSelection!

  """
  The class of the discount for combining purposes.
  """
  discountClass: MerchandiseDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """
  A list of the discount's features.
  """
  features: [DiscountFeature!]!

  """
  Whether the discount code has at least one segment created through tag migration.
  """
  hasTagMigratedSegment: Boolean!

  """
  Indicates whether there are any timeline comments on the discount.
  """
  hasTimelineComment: Boolean!

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirement

  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int

  """
  URLs that can be used to share the discount.
  """
  shareableUrls: [DiscountShareableUrl!]!

  """
  A short summary of the discount.
  """
  shortSummary: String!

  """
  The date and time when the discount starts.
  """
  startsAt: DateTime!

  """
  The status of the discount.
  """
  status: DiscountStatus!

  """
  A detailed summary of the discount.
  """
  summary: String!

  """
  The title of the discount.
  """
  title: String!

  """
  The total sales from orders where the discount was used.
  """
  totalSales: MoneyV2

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The maximum number of times that the discount can be used.
  """
  usageLimit: Int
}

"""
A code discount that offers customers a Buy X, Get Y (BXGY) discount.
"""
type DiscountCodeBxgy {
  """
  Whether the discount can be applied only once per customer.
  """
  appliesOncePerCustomer: Boolean!

  """
  The number of times that the discount has been used.
  """
  asyncUsageCount: Int!

  """
  The number of redeem codes for the discount.
  """
  codeCount: Int!

  """
  A list of redeem codes for the discount.
  """
  codes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscountRedeemCodeConnection!

  """
  Determines which discount classes the discount can combine with.
  """
  combinesWith: DiscountCombinesWith!

  """
  Determines whether the discount may be combined with other discounts on a single line.
  """
  combiningBehavior: DiscountCombiningBehavior!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The app that created the discount.
  """
  createdBy: [App!]

  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: DiscountCustomerBuys!

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """
  The customers that can use the discount.
  """
  customerSelection: DiscountCustomerSelection!

  """
  The class of the discount for combining purposes.
  """
  discountClass: MerchandiseDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """
  A list of the discount's features.
  """
  features: [DiscountFeature!]!

  """
  Whether the discount code has at least one segment created through tag migration.
  """
  hasTagMigratedSegment: Boolean!

  """
  Indicates whether there are any timeline comments on the discount.
  """
  hasTimelineComment: Boolean!

  """
  URLs that can be used to share the discount.
  """
  shareableUrls: [DiscountShareableUrl!]!

  """
  The date and time when the discount starts.
  """
  startsAt: DateTime!

  """
  The status of the discount.
  """
  status: DiscountStatus!

  """
  A detailed summary of the discount.
  """
  summary: String!

  """
  The title of the discount.
  """
  title: String!

  """
  The total sales from orders where the discount was used.
  """
  totalSales: MoneyV2

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The maximum number of times that the discount can be used.
  """
  usageLimit: Int

  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
}

"""
A code discount that offers customers free shipping on their order.
"""
type DiscountCodeFreeShipping {
  """
  Whether the discount applies on regular one-time-purchase shipping lines.
  """
  appliesOnOneTimePurchase: Boolean!

  """
  Whether the discount applies on subscription shipping lines.
  """
  appliesOnSubscription: Boolean!

  """
  Whether the discount can be applied only once per customer.
  """
  appliesOncePerCustomer: Boolean!

  """
  The number of times that the discount has been used.
  """
  asyncUsageCount: Int!

  """
  The number of redeem codes for the discount.
  """
  codeCount: Int!

  """
  A list of redeem codes for the discount.
  """
  codes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscountRedeemCodeConnection!

  """
  Determines which discount classes the discount can combine with.
  """
  combinesWith: DiscountCombinesWith!

  """
  Determines whether the discount may be combined with other discounts on a single line.
  """
  combiningBehavior: DiscountCombiningBehavior!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The app that created the discount.
  """
  createdBy: [App!]

  """
  The customers that can use the discount.
  """
  customerSelection: DiscountCustomerSelection!

  """
  A shipping destination that qualifies for the discount.
  """
  destinationSelection: DiscountShippingDestinationSelection!

  """
  The class of the discount for combining purposes.
  """
  discountClass: ShippingDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """
  A list of the discount's features.
  """
  features: [DiscountFeature!]!

  """
  Whether the discount code has at least one segment created through tag migration.
  """
  hasTagMigratedSegment: Boolean!

  """
  Indicates whether there are any timeline comments on the discount.
  """
  hasTimelineComment: Boolean!

  """
  The maximum shipping price amount accepted to qualify for the discount.
  """
  maximumShippingPrice: MoneyV2

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirement

  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int

  """
  URLs that can be used to share the discount.
  """
  shareableUrls: [DiscountShareableUrl!]!

  """
  A short summary of the discount.
  """
  shortSummary: String!

  """
  The date and time when the discount starts.
  """
  startsAt: DateTime!

  """
  The status of the discount.
  """
  status: DiscountStatus!

  """
  A detailed summary of the discount.
  """
  summary: String!

  """
  The title of the discount.
  """
  title: String!

  """
  The total sales from orders where the discount was used.
  """
  totalSales: MoneyV2

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The maximum number of times that the discount can be used.
  """
  usageLimit: Int
}

"""
A node containing a code discount and its related events.
"""
type DiscountCodeNode implements HasEvents & HasMetafieldDefinitions & HasMetafields & Node {
  """
  The underlying code discount object.
  """
  codeDiscount: DiscountCode!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!
}

"""
A list of collections that the discount can have as a prerequisite or a list of
collections to which the discount can be applied.
"""
type DiscountCollections {
  """
  The list of collections that the discount can have as a prerequisite or the
  list of collections to which the discount can be applied.
  """
  collections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CollectionConnection!
}

"""
Determines which discount classes the discount can combine with.
"""
type DiscountCombinesWith {
  """
  Combines with order discounts.
  """
  orderDiscounts: Boolean!

  """
  Combines with product discounts.
  """
  productDiscounts: Boolean!

  """
  Combines with shipping discounts.
  """
  shippingDiscounts: Boolean!
}

"""
The type of discount combination allowed.
"""
enum DiscountCombiningBehavior {
  """
  Must be the only discount on the order.
  """
  EXCLUSIVE

  """
  Combinable with other discounts within a line.
  """
  LINE_COMBINABLE

  """
  Combinable with other discounts within an order.
  """
  ORDER_COMBINABLE
}

"""
The shipping destinations where the discount can be applied.
"""
type DiscountCountries {
  """
  The codes for the countries where the discount can be applied.
  """
  countries: [CountryCode!]!

  """
  Whether the discount is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean!
}

"""
The `DiscountCountryAll` object lets you target all countries as shipping destination for discount eligibility.
"""
type DiscountCountryAll {
  """
  Whether the discount can be applied to all countries as shipping destination. This value is always `true`.
  """
  allCountries: Boolean!
}

"""
The `DiscountCustomerAll` object lets you target all customers for discount eligibility.
"""
type DiscountCustomerAll {
  """
  Whether the discount can be applied by all customers. This value is always `true`.
  """
  allCustomers: Boolean!
}

"""
The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable.
"""
type DiscountCustomerBuys {
  """
  The items required for the discount to be applicable.
  """
  items: DiscountItems!

  """
  The prerequisite value.
  """
  value: DiscountCustomerBuysValue!
}

"""
The prerequisite for the discount to be applicable. For example, the discount
might require a customer to buy a minimum quantity of select items.
Alternatively, the discount might require a customer to spend a minimum amount
on select items.
"""
union DiscountCustomerBuysValue = DiscountPurchaseAmount | DiscountQuantity

"""
The qualifying items in an order, the quantity of each one, and the total value of the discount.
"""
type DiscountCustomerGets {
  """
  Whether the discount applies on regular one-time-purchase items.
  """
  appliesOnOneTimePurchase: Boolean!

  """
  Whether the discount applies on subscription items.
  """
  appliesOnSubscription: Boolean!

  """
  The items to which the discount applies.
  """
  items: DiscountItems!

  """
  Entitled quantity and the discount value.
  """
  value: DiscountCustomerGetsValue!
}

"""
The type of the discount value and how it will be applied. For example, it might
be a percentage discount on a fixed number of items. Alternatively, it might be
a fixed amount evenly distributed across all items or on each individual item. A
third example is a percentage discount on all items.
"""
union DiscountCustomerGetsValue = DiscountAmount | DiscountOnQuantity | DiscountPercentage

"""
A list of customer saved searches that contain the customers to whom the discount applies.
"""
type DiscountCustomerSavedSearches {
  """
  A list of customer saved searches that contain the customers who can use the discount.
  """
  savedSearches: [SavedSearch!]! @deprecated(reason: "Use `DiscountCustomerSegments.segments` instead.")
}

"""
A list of customer segments that contain the customers that the discount applies to.
"""
type DiscountCustomerSegments {
  """
  A list of customer segments that contain the customers who can use the discount.
  """
  segments: [Segment!]!
}

"""
The type used for targeting a set of customers who are eligible for the
discount. For example, the discount might be available to all customers or it
might only be available to a specific set of customers. You can define the set
of customers by targeting a list of customer segments, or by targeting a list of
specific customers.
"""
union DiscountCustomerSelection = DiscountCustomerAll | DiscountCustomerSavedSearches | DiscountCustomerSegments | DiscountCustomers

"""
A list of customers eligible for the discount.
"""
type DiscountCustomers {
  """
  The list of customers eligible for the discount.
  """
  customers: [Customer!]!
}

"""
The type of discount that will be applied. Currently, only a percentage discount is supported.
"""
union DiscountEffect = DiscountPercentage

"""
Possible error codes that can be returned by `DiscountUserError`.
"""
enum DiscountErrorCode {
  """
  The active period overlaps with other automatic discounts. At any given time, only one automatic discount can be active.
  """
  ACTIVE_PERIOD_OVERLAP

  """
  The input value is blank.
  """
  BLANK

  """
  Cannot select collections if a product or variants are selected.
  """
  CANNOT_COMBINE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  The attribute selection contains conflicting settings.
  """
  CONFLICT

  """
  The input value is already present.
  """
  DUPLICATE

  """
  A duplicate collection ID is present.
  """
  DUPLICATE_COLLECTION @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  A duplicate product ID is present.
  """
  DUPLICATE_PRODUCT @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  A duplicate variant ID is present.
  """
  DUPLICATE_VARIANT @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  Cannot target each item when all items are selected.
  """
  EACH_MUST_BE_FALSE @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  The end date should be after the start date.
  """
  END_DATE_BEFORE_START_DATE @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  The input value should be equal to the value allowed.
  """
  EQUAL_TO

  """
  The value exceeded the maximum allowed value.
  """
  EXCEEDED_MAX

  """
  The exceeded maximum number of collections for this discount.
  """
  EXCEEDED_MAX_COLLECTION @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  The exceeded maximum number of discounts for this shop.
  """
  EXCEEDED_MAX_NUMBER_OF_DISCOUNT @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  The exceeded maximum number of products for this discount.
  """
  EXCEEDED_MAX_PRODUCT @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  The exceeded maximum number of variants for this discount.
  """
  EXCEEDED_MAX_VARIANT @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  The input value should be greater than the minimum allowed value.
  """
  GREATER_THAN

  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO

  """
  The value is already present through another selection.
  """
  IMPLICIT_DUPLICATE

  """
  The input value isn't included in the list.
  """
  INCLUSION

  """
  Unexpected internal error happened.
  """
  INTERNAL_ERROR

  """
  The input value is invalid.
  """
  INVALID

  """
  An invalid collection ID is present.
  """
  INVALID_COLLECTION @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  The `combinesWith` settings are invalid for the discount class.
  """
  INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS

  """
  The discountClass is invalid for the price rule.
  """
  INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE

  """
  An invalid product ID is present.
  """
  INVALID_PRODUCT @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  An invalid variant ID is present.
  """
  INVALID_VARIANT @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")

  """
  The input value should be less than the maximum value allowed.
  """
  LESS_THAN

  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO

  """
  The active period overlaps with too many other app-provided discounts. There's
  a limit on the number of app discounts that can be active at any given time.
  """
  MAX_APP_DISCOUNTS

  """
  Specify a minimum subtotal or a quantity, but not both.
  """
  MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT

  """
  Missing a required argument.
  """
  MISSING_ARGUMENT

  """
  The input value needs to be blank.
  """
  PRESENT

  """
  The input value is already taken.
  """
  TAKEN

  """
  The input value is too long.
  """
  TOO_LONG

  """
  Too many arguments provided.
  """
  TOO_MANY_ARGUMENTS

  """
  The input value is too short.
  """
  TOO_SHORT

  """
  The value is outside of the allowed range.
  """
  VALUE_OUTSIDE_RANGE

  """
  The variant is already selected through product.
  """
  VARIANT_ALREADY_SELECTED_THROUGH_PRODUCT @deprecated(reason: "This error code has been deprecated to a generic one. See https://docs.google.com/spreadsheets/d/1avBWJUj-2kB19aVQuEbAqcy2BmgyVPudZv9aqss9nDM/edit#gid=0")
}

"""
The features implemented by the discount.
"""
enum DiscountFeature {
  """
  The discount supports base features.
  """
  BASE

  """
  The discount supports purchase BXGY.
  """
  PURCHASE_BXGY
}

"""
The type used to target the items required for discount eligibility, or the
items to which the application of a discount might apply. For example, for a
customer to be eligible for a discount, they're required to add an item from a
specified collection to their order. Alternatively, a customer might be required
to add a specific product or product variant. When using this type to target
which items the discount will apply to, the discount might apply to all items on
the order, or to specific products and product variants, or items in a given collection.
"""
union DiscountItems = AllDiscountItems | DiscountCollections | DiscountProducts

"""
The minimum quantity of items required for the discount to apply.
"""
type DiscountMinimumQuantity {
  """
  The minimum quantity of items that's required for the discount to be applied.
  """
  greaterThanOrEqualToQuantity: UnsignedInt64!
}

"""
The type of mimumum requirement that must be met for the discount to be applied.
For example, a customer must spend a minimum subtotal to be eligible for the
discount. Alternatively, a customer must purchase a minimum quantity of items to
be eligible for the discount.
"""
union DiscountMinimumRequirement = DiscountMinimumQuantity | DiscountMinimumSubtotal

"""
The minimum subtotal required for the discount to apply.
"""
type DiscountMinimumSubtotal {
  """
  The minimum subtotal that's required for the discount to be applied.
  """
  greaterThanOrEqualToSubtotal: MoneyV2!
}

"""
A discount wrapper node.
"""
type DiscountNode implements HasEvents & HasMetafieldDefinitions & HasMetafields & Node {
  """
  A discount.
  """
  discount: Discount!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!
}

"""
The quantity of items discounted, the discount value, and how the discount will be applied.
"""
type DiscountOnQuantity {
  """
  The discount's effect on qualifying items.
  """
  effect: DiscountEffect!

  """
  The number of items being discounted. The customer must have at least this
  many items of specified products or product variants in their order to be
  eligible for the discount.
  """
  quantity: DiscountQuantity!
}

"""
A discount effect that gives customers a percentage off of specified items on their order.
"""
type DiscountPercentage {
  """
  The percentage value of the discount.
  """
  percentage: Float!
}

"""
A list of products and product variants that the discount can have as a
prerequisite or a list of products and product variants to which the discount
can be applied.
"""
type DiscountProducts {
  """
  The list of product variants that the discount can have as a prerequisite or
  the list of product variants to which the discount can be applied.
  """
  productVariants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductVariantConnection!

  """
  The list of products that the discount can have as a prerequisite or the list
  of products to which the discount can be applied.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductConnection!
}

"""
A purchase amount in the context of a discount. This object can be used to
define the minimum purchase amount required for a discount to be applicable.
"""
type DiscountPurchaseAmount {
  """
  The purchase amount in decimal format.
  """
  amount: Decimal!
}

"""
A quantity of items in the context of a discount. This object can be used to
define the minimum quantity of items required to apply a discount.
Alternatively, it can be used to define the quantity of items that can be discounted.
"""
type DiscountQuantity {
  """
  The quantity of items.
  """
  quantity: UnsignedInt64!
}

"""
A code that a customer can use at checkout to receive a discount. For example, a
customer can use the redeem code 'SUMMER20' at checkout to receive a 20%
discount on their entire order.
"""
type DiscountRedeemCode {
  """
  The number of times that the discount redeem code has been used. This value is
  updated asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!

  """
  The code that a customer can use at checkout to receive a discount.
  """
  code: String!

  """
  The application that created the discount redeem code.
  """
  createdBy: App

  """
  A globally-unique identifier of the discount redeem code.
  """
  id: ID!
}

"""
The properties and status of a bulk discount redeem code creation operation.
"""
type DiscountRedeemCodeBulkCreation implements Node {
  """
  The result of each code creation operation associated with the bulk creation
  operation including any errors that might have occurred during the operation.
  """
  codes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscountRedeemCodeBulkCreationCodeConnection!

  """
  The number of codes to create.
  """
  codesCount: Int!

  """
  The date and time when the bulk creation was created.
  """
  createdAt: DateTime!

  """
  The code discount associated with the created codes.
  """
  discountCode: DiscountCodeNode

  """
  Whether the bulk creation is still queued (`false`) or has been run (`true`).
  """
  done: Boolean!

  """
  The number of codes that weren't created successfully.
  """
  failedCount: Int!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The number of codes created successfully.
  """
  importedCount: Int!
}

"""
A result of a discount redeem code creation operation created by a bulk creation.
"""
type DiscountRedeemCodeBulkCreationCode {
  """
  The code to use in the discount redeem code creation operation.
  """
  code: String!

  """
  The successfully created discount redeem code.

  If the discount redeem code couldn't be created, then this field is `null``.
  """
  discountRedeemCode: DiscountRedeemCode

  """
  A list of errors that occurred during the creation operation of the discount redeem code.
  """
  errors: [DiscountUserError!]!
}

"""
An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes.
"""
type DiscountRedeemCodeBulkCreationCodeConnection {
  """
  A list of edges.
  """
  edges: [DiscountRedeemCodeBulkCreationCodeEdge!]!

  """
  A list of the nodes contained in DiscountRedeemCodeBulkCreationCodeEdge.
  """
  nodes: [DiscountRedeemCodeBulkCreationCode!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.
"""
type DiscountRedeemCodeBulkCreationCodeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of DiscountRedeemCodeBulkCreationCodeEdge.
  """
  node: DiscountRedeemCodeBulkCreationCode!
}

"""
An auto-generated type for paginating through multiple DiscountRedeemCodes.
"""
type DiscountRedeemCodeConnection {
  """
  A list of edges.
  """
  edges: [DiscountRedeemCodeEdge!]!

  """
  A list of the nodes contained in DiscountRedeemCodeEdge.
  """
  nodes: [DiscountRedeemCode!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.
"""
type DiscountRedeemCodeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of DiscountRedeemCodeEdge.
  """
  node: DiscountRedeemCode!
}

"""
A shareable URL for a discount code.
"""
type DiscountShareableUrl {
  """
  The image URL of the item (product or collection) to which the discount applies.
  """
  targetItemImage: Image

  """
  The type of page that's associated with the URL.
  """
  targetType: DiscountShareableUrlTargetType!

  """
  The title of the page that's associated with the URL.
  """
  title: String!

  """
  The URL for the discount code.
  """
  url: URL!
}

"""
The type of page where a shareable discount URL lands.
"""
enum DiscountShareableUrlTargetType {
  """
  The URL lands on a collection page.
  """
  COLLECTION

  """
  The URL lands on a home page.
  """
  HOME

  """
  The URL lands on a product page.
  """
  PRODUCT
}

"""
The type used to target the eligible countries of an order's shipping
destination for which the discount applies. For example, the discount might be
applicable when shipping to all countries, or only to a set of countries.
"""
union DiscountShippingDestinationSelection = DiscountCountries | DiscountCountryAll

"""
The status of the discount.
"""
enum DiscountStatus {
  """
  The discount is active.
  """
  ACTIVE

  """
  The discount is expired.
  """
  EXPIRED

  """
  The discount is scheduled.
  """
  SCHEDULED
}

"""
The type of line (line item or shipping line) on an order that the subscription discount is applicable towards.
"""
enum DiscountTargetType {
  """
  The discount applies onto line items.
  """
  LINE_ITEM

  """
  The discount applies onto shipping lines.
  """
  SHIPPING_LINE
}

"""
The type of the subscription discount.
"""
enum DiscountType {
  """
  Code discount type.
  """
  CODE_DISCOUNT

  """
  Manual discount type.
  """
  MANUAL
}

"""
An error that occurs during the execution of a discount mutation.
"""
type DiscountUserError implements DisplayableError {
  """
  The error code.
  """
  code: DiscountErrorCode

  """
  Extra information about this error.
  """
  extraInfo: String

  """
  The path to the input field that caused the error.
  """
  field: [String!]

  """
  The error message.
  """
  message: String!
}

"""
Represents an error in the input of a mutation.
"""
interface DisplayableError {
  """
  The path to the input field that caused the error.
  """
  field: [String!]

  """
  The error message.
  """
  message: String!
}

"""
The possible statuses of a dispute.
"""
enum DisputeStatus {
  ACCEPTED
  CHARGE_REFUNDED
  LOST
  NEEDS_RESPONSE
  UNDER_REVIEW
  WON
}

"""
The possible types for a dispute.
"""
enum DisputeType {
  """
  The dispute has turned into a chargeback.
  """
  CHARGEBACK

  """
  The dispute is in the inquiry phase.
  """
  INQUIRY
}

"""
A unique string that represents the address of a Shopify store on the Internet.
"""
type Domain implements Node {
  """
  The host name of the domain. For example, `example.com`.
  """
  host: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The localization of the domain, if the domain doesn't redirect.
  """
  localization: DomainLocalization

  """
  The web presence of the domain.
  """
  marketWebPresence: MarketWebPresence

  """
  Whether SSL is enabled.
  """
  sslEnabled: Boolean!

  """
  The URL of the domain (for example, `https://example.com`).
  """
  url: URL!
}

"""
The country and language settings assigned to a domain.
"""
type DomainLocalization {
  """
  The ISO codes for the domain’s alternate locales. For example, `["en"]`.
  """
  alternateLocales: [String!]!

  """
  The ISO code for the country assigned to the domain. For example, `"CA"` or "*" for a domain set to "Rest of world".
  """
  country: String

  """
  The ISO code for the domain’s default locale. For example, `"en"`.
  """
  defaultLocale: String!
}

"""
An order that a merchant creates on behalf of a customer. Draft orders are
useful for merchants that need to do the following tasks:

- Create new orders for sales made by phone, in person, by chat, or elsewhere.
When a merchant accepts payment for a draft order, an order is created.
- Send invoices to customers to pay with a secure checkout link.
- Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
- Re-create orders manually from active sales channels.
- Sell products at discount or wholesale rates.
- Take pre-orders.
- Save an order as a draft and resume working on it later.

For Draft orders in multiple currencies `presentment_money` is the source of
truth for what a customer is going to be charged and `shop_money` is an estimate
of what the merchant might receive in their local currency.

**Caution:** Only use this data if it's required for your app's functionality.
Shopify will restrict [access to
scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
legitimate use for the associated data.
"""
type DraftOrder implements CommentEventSubject & HasEvents & HasLocalizationExtensions & HasMetafields & LegacyInteroperability & Navigable & Node {
  """
  The checkout associated with this draft order, if applicable.
  """
  activeCheckout: Checkout

  """
  The order-level discount applied to the draft order.
  """
  appliedDiscount: DraftOrderAppliedDiscount

  """
  The billing address of the customer.
  """
  billingAddress: MailingAddress

  """
  Whether the billing address matches the shipping address.
  """
  billingAddressMatchesShippingAddress: Boolean!

  """
  The date and time when the draft order converted to a new order,
  and the draft order's status changed to **Completed**.
  """
  completedAt: DateTime

  """
  The date and time when the draft order was created in Shopify.
  """
  createdAt: DateTime!

  """
  The three letter code for the currency of the store at the time of the most recent update to the draft order.
  """
  currencyCode: CurrencyCode!

  """
  The custom information added to the draft order on behalf of the customer.
  """
  customAttributes: [Attribute!]!

  """
  The customer who will be sent an invoice for the draft order, if there is one.
  """
  customer: Customer

  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  The email address of the customer, which is used to send notifications.
  """
  email: String

  """
  The list of events associated with the draft order.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!

  """
  Whether the merchant has added timeline comments to the draft order.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The subject defined for the draft invoice email template.
  """
  invoiceEmailTemplateSubject: String!

  """
  The date and time when the invoice was last emailed to the customer.
  """
  invoiceSentAt: DateTime

  """
  The link to the checkout, which is sent to the customer in the invoice email.
  """
  invoiceUrl: URL

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The list of the line items in the draft order.
  """
  lineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DraftOrderLineItemConnection!

  """
  The subtotal of the line items and corresponding discounts. The subtotal
  doesn't include shipping charges, shipping discounts, taxes, or order discounts.
  """
  lineItemsSubtotalPrice: MoneyBag!

  """
  List of localization extensions for the resource.
  """
  localizationExtensions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LocalizationExtensionConnection!

  """
  The name of the selected market.
  """
  marketName: String!

  """
  The selected market region country code for the draft order.
  """
  marketRegionCountryCode: CountryCode!

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  The identifier for the draft order, which is unique within the store. For example, _#D1223_.
  """
  name: String!

  """
  The text from an optional note attached to the draft order.
  """
  note2: String

  """
  The order that was created from this draft order.
  """
  order: Order

  """
  The associated payment terms for this draft order.
  """
  paymentTerms: PaymentTerms

  """
  The phone number assigned to the draft order.
  """
  phone: String

  """
  The payment currency of the customer for this draft order.
  """
  presentmentCurrencyCode: CurrencyCode!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  The purchasing entity for the draft order.
  """
  purchasingEntity: PurchasingEntity

  """
  Whether the Draft Order is ready and can be completed. Draft Orders
          might have asynchronous operations that can take time to finish.
  """
  ready: Boolean!

  """
  Whether at least one of the line items in the draft order requires shipping.
  """
  requiresShipping: Boolean!

  """
  The time after which inventory will automatically be restocked.
  """
  reserveInventoryUntil: DateTime

  """
  The shipping address of the customer.
  """
  shippingAddress: MailingAddress

  """
  The line item that contains the shipping costs.
  """
  shippingLine: ShippingLine

  """
  Status of the draft order.
  """
  status: DraftOrderStatus!

  """
  The subtotal of the line items and their discounts. The subtotal doesn't
  include shipping charges, shipping discounts, or taxes.
  """
  subtotalPrice: Money!

  """
  A subtotal of the line items and corresponding discounts. The subtotal doesn't
  include shipping charges, shipping discounts, or taxes.
  """
  subtotalPriceSet: MoneyBag!

  """
  A comma separated list of tags associated with the draft order. Updating `tags` overwrites
  any existing tags that were previously added to the draft order. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!

  """
  Whether the draft order is tax exempt.
  """
  taxExempt: Boolean!

  """
  Total amount of taxes charged for each line item and shipping line.
  """
  taxLines: [TaxLine!]!

  """
  Whether the line item prices include taxes.
  """
  taxesIncluded: Boolean!

  """
  The total discounts for this draft order.
  """
  totalDiscountsSet: MoneyBag!

  """
  The total price of line items for this draft order.
  """
  totalLineItemsPriceSet: MoneyBag!

  """
  The total amount of the draft order, including taxes, shipping charges, and discounts.
  """
  totalPrice: Money!

  """
  The total amount of the draft order including taxes, shipping charges, and discounts.
  """
  totalPriceSet: MoneyBag!

  """
  The total shipping charge for the draft order.
  """
  totalShippingPrice: Money!

  """
  The total shipping charge for the draft order.
  """
  totalShippingPriceSet: MoneyBag!

  """
  The total amount of taxes for the draft order.
  """
  totalTax: Money!

  """
  The total amount of taxes for the draft order.
  """
  totalTaxSet: MoneyBag!

  """
  The total weight in grams of the draft order.
  """
  totalWeight: UnsignedInt64!

  """
  The date and time when the draft order was last changed.
  The format is YYYY-MM-DD HH:mm:ss. For example, 2016-02-05 17:04:01.
  """
  updatedAt: DateTime!

  """
  Whether the draft order will be visible to the customer on the self-serve portal.
  """
  visibleToCustomer: Boolean!
}

"""
The order-level discount applied to a draft order.
"""
type DraftOrderAppliedDiscount {
  """
  Amount of the order-level discount that is applied to the draft order.
  """
  amount: Money! @deprecated(reason: "Use `amountV2` instead.")

  """
  The amount of money discounted, with values shown in both shop currency and presentment currency.
  """
  amountSet: MoneyBag!

  """
  Amount of money discounted.
  """
  amountV2: MoneyV2!

  """
  Description of the order-level discount.
  """
  description: String!

  """
  Name of the order-level discount.
  """
  title: String

  """
  The order level discount amount. If `valueType` is `"percentage"`,
  then `value` is the percentage discount.
  """
  value: Float!

  """
  Type of the order-level discount.
  """
  valueType: DraftOrderAppliedDiscountType!
}

"""
The valid discount types that can be applied to a draft order.
"""
enum DraftOrderAppliedDiscountType {
  """
  A fixed amount in the store's currency.
  """
  FIXED_AMOUNT

  """
  A percentage of the order subtotal.
  """
  PERCENTAGE
}

"""
An auto-generated type for paginating through multiple DraftOrders.
"""
type DraftOrderConnection {
  """
  A list of edges.
  """
  edges: [DraftOrderEdge!]!

  """
  A list of the nodes contained in DraftOrderEdge.
  """
  nodes: [DraftOrder!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DraftOrder and a cursor during pagination.
"""
type DraftOrderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of DraftOrderEdge.
  """
  node: DraftOrder!
}

"""
A line item included in a draft order.
"""
type DraftOrderLineItem implements Node {
  """
  The discount that will be applied to the line item or the overall order.
  """
  appliedDiscount: DraftOrderAppliedDiscount

  """
  Whether the line item is a custom line item (`true`) or a product variant line item (`false`).
  """
  custom: Boolean!

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  Additional information (metafields) about the line item with the associated types.
  """
  customAttributesV2: [TypedAttribute!]!

  """
  The line item price after discounts are applied.
  """
  discountedTotal: Money!

  """
  The line item price after discounts are applied.
  """
  discountedTotalSet: MoneyBag!

  """
  The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
  """
  discountedUnitPrice: Money!

  """
  The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
  """
  discountedUnitPriceSet: MoneyBag!

  """
  Name of the service provider who fulfilled the order.

  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.

  Deleted fulfillment services will return null.
  """
  fulfillmentService: FulfillmentService

  """
  The weight of the line item in grams. The weight can only be specified if the line item is a custom
  line item.
  """
  grams: Int @deprecated(reason: "Use `weight` instead.")

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The image associated with the draft order line item.
  """
  image(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  Whether the line item is a gift card.
  """
  isGiftCard: Boolean!

  """
  The name of the product.
  """
  name: String!

  """
  The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
  """
  originalTotal: Money!

  """
  The total price (without discounts) of the line item,based on the original unit price of the variant x quantity.
  """
  originalTotalSet: MoneyBag!

  """
  The variant price without any discounts applied.
  """
  originalUnitPrice: Money!

  """
  The variant price without any discounts applied.
  """
  originalUnitPriceSet: MoneyBag!

  """
  The product corresponding to the line item’s product variant.
  """
  product: Product

  """
  The number of product variants that are requested in the draft order.
  """
  quantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  The SKU number of the product variant.
  """
  sku: String

  """
  A list of tax line objects, each of which details the total taxes applicable to the order.
  """
  taxLines: [TaxLine!]!

  """
  Whether the variant is taxable.
  """
  taxable: Boolean!

  """
  The title of the product or variant. This field only applies to custom line items.
  """
  title: String!

  """
  The total value of the discount that is applied to the line item.
  """
  totalDiscount: Money!

  """
  The total value of the discount that is applied to the line item.
  """
  totalDiscountSet: MoneyBag!

  """
  The associated variant for the line item.
  """
  variant: ProductVariant

  """
  The name of the variant.
  """
  variantTitle: String

  """
  The name of the vendor who created the product variant.
  """
  vendor: String

  """
  The weight unit and value for a draft order line item.
  """
  weight: Weight
}

"""
An auto-generated type for paginating through multiple DraftOrderLineItems.
"""
type DraftOrderLineItemConnection {
  """
  A list of edges.
  """
  edges: [DraftOrderLineItemEdge!]!

  """
  A list of the nodes contained in DraftOrderLineItemEdge.
  """
  nodes: [DraftOrderLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.
"""
type DraftOrderLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of DraftOrderLineItemEdge.
  """
  node: DraftOrderLineItem!
}

"""
The valid statuses for a draft order.
"""
enum DraftOrderStatus {
  """
  The draft order has been paid.
  """
  COMPLETED

  """
  An invoice for the draft order has been sent to the customer.
  """
  INVOICE_SENT

  """
  The draft order is open. It has not been paid, and an invoice hasn't been sent.
  """
  OPEN
}

"""
Represents a draft order tag.
"""
type DraftOrderTag implements Node {
  """
  Handle of draft order tag.
  """
  handle: String!

  """
  ID of draft order tag.
  """
  id: ID!

  """
  Title of draft order tag.
  """
  title: String!
}

"""
The duty details for a line item.
"""
type Duty implements Node {
  """
  The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
  """
  countryCodeOfOrigin: CountryCode

  """
  The harmonized system code of the item used in calculating the duty.
  """
  harmonizedSystemCode: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The amount of the duty.
  """
  price: MoneyBag!

  """
  A list of taxes charged on the duty.
  """
  taxLines: [TaxLine!]!
}

"""
A sale associated with a duty charge.
"""
type DutySale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The duty for the associated sale.
  """
  duty: Duty!

  """
  The unique identifier for the sale.
  """
  id: ID!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
The attribute editable information.
"""
type EditableProperty {
  """
  Whether the attribute is locked for editing.
  """
  locked: Boolean!

  """
  The reason the attribute is locked for editing.
  """
  reason: FormattedString
}

"""
Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
addition of a product.
"""
interface Event {
  """
  The name of the app that created the event.
  """
  appTitle: String

  """
  Whether the event was created by an app.
  """
  attributeToApp: Boolean!

  """
  Whether the event was caused by an admin user.
  """
  attributeToUser: Boolean!

  """
  The date and time when the event was created.
  """
  createdAt: DateTime!

  """
  Whether the event is critical.
  """
  criticalAlert: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Human readable text that describes the event.
  """
  message: FormattedString!
}

"""
An auto-generated type for paginating through multiple Events.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge!]!

  """
  A list of the nodes contained in EventEdge.
  """
  nodes: [Event!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Event and a cursor during pagination.
"""
type EventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of EventEdge.
  """
  node: Event!
}

"""
An exchanges represents the refund of one order for a checkout of a new order.
"""
type Exchange implements Node {
  """
  The amount of funds that must be transferred during the exchange.
  """
  balance: MoneyV2!

  """
  The checkout associated with the exchange.
  """
  checkout: ExchangeCheckout!

  """
  The order created as a result of the exchange.
  """
  childOrder: Order

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The refund that will be created upon completing the exchange.
  """
  intendedRefund: IntendedExchangeRefund

  """
  The order which initiated the exchange.
  """
  parentOrder: Order!

  """
  The refund associated with the exchange.
  """
  refund: Refund

  """
  Staff member who processed the exchange.
  """
  staffMember: StaffMember!

  """
  Specifies the flow of the balance on the exchange.
  """
  type: ExchangeType!
}

"""
An exchange checkout represents the checkout associated to an exchange.
"""
type ExchangeCheckout implements Node {
  """
  Customer of exchange.
  """
  customer: Customer

  """
  The discount amounts that have been applied to the checkout.
  """
  discountAllocations: [DiscountAllocation!]!

  """
  Discounts that have been applied on the checkout.
  """
  discountApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscountApplicationConnection!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Line items on the exchange checkout.
  """
  lineItems: [ExchangeCheckoutLineItem!]!

  """
  Whether or not the Checkout is ready and can be completed.
  Checkouts may have asynchronous operations that can take time to finish.
  If you want to complete a checkout or ensure all the fields are populated and up to date,
  polling is required until the value is true.
  """
  ready: Boolean!

  """
  Shipping address for the exchange checkout.
  """
  shippingAddress: MailingAddress

  """
  Shipping line for the exchange checkout.
  """
  shippingLine: ExchangeCheckoutShippingLine

  """
  Subtotal price for the exchange checkout.
  """
  subtotalPrice: MoneyV2!

  """
  Tax lines belonging to an exchange checkout.
  """
  taxLines: [ExchangeCheckoutTaxLine!]!

  """
  A unique identifier for the checkout.
  """
  token: String!

  """
  Total discounts for the exchange checkout.
  """
  totalDiscounts: MoneyV2!

  """
  Total line items price for the exchange checkout.
  """
  totalLineItemsPrice: MoneyV2!

  """
  Total price for the exchange checkout.
  """
  totalPrice: MoneyV2!

  """
  Total tax for the exchange checkout.
  """
  totalTax: MoneyV2!
}

"""
Specifies the input fields for disabling an exchange checkout tax.
"""
input ExchangeCheckoutDisabledTaxInput {
  """
  The tax rate of the tax.
  """
  rate: Decimal!

  """
  The name of the tax.
  """
  title: String!
}

"""
An exchange checkout line item contains information about an item in the checkout.
"""
type ExchangeCheckoutLineItem {
  """
  The original selling price of the product, if applicable.
  """
  compareAtPrice: MoneyV2

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The discount amounts that have been applied to the line item by associated discount applications.
  """
  discountAllocations: [DiscountAllocation!]!

  """
  The price multiplied by quantity, taking into account discounts.
  """
  discountedTotalPrice: MoneyV2!

  """
  Name of the service provider who fulfilled the order.

  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.

  Deleted fulfillment services will return null.
  """
  fulfillmentService: FulfillmentService

  """
  Indiciates if this line item is a gift card.
  """
  giftCard: Boolean!

  """
  The name of the product.
  """
  name: String!

  """
  The product price.
  """
  price: MoneyV2!

  """
  The number of products that were purchased.
  """
  quantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  The SKU number of the product variant.
  """
  sku: String

  """
  The staff member attributed to this checkout line item.
  """
  staffMember: StaffMember

  """
  Tax lines belonging to the line item.
  """
  taxLines: [ExchangeCheckoutTaxLine!]!

  """
  Whether the variant is taxable.
  """
  taxable: Boolean!

  """
  The title of the product or variant. This field only applies to custom line items.
  """
  title: String!

  """
  The price multiplied by quantity.
  """
  totalPrice: MoneyV2!

  """
  The product variant of the line item.
  """
  variant: ProductVariant

  """
  The name of the variant.
  """
  variantTitle: String

  """
  The name of the vendor who created the product variant.
  """
  vendor: String
}

"""
An input that represents a line item.
"""
input ExchangeCheckoutLineItemInput {
  """
  Extra information in the form of an array of Key-Value pairs about the line item.
  """
  customAttributes: [AttributeInput!]

  """
  Line item containing a gift card with a custom amount.
  """
  customGiftCard: CustomGiftCardLineItemInput

  """
  Tax lines to be disabled.
  """
  disabledTaxes: [ExchangeCheckoutDisabledTaxInput!]

  """
  Service provider who is fulfilling the line item.
  """
  fulfillmentService: String

  """
  The manual discount applied to the line item.
  """
  manualDiscount: ExchangeDiscountInput

  """
  Quantity of items on the line item.
  """
  quantity: Int!

  """
  Line item containing a quick sale.
  """
  quickSale: QuickSaleLineItemInput

  """
  The ID of the staff member attributed to this checkout line item.
  """
  staffMemberId: ID

  """
  Whether the line item is taxable.
  """
  taxable: Boolean

  """
  Line item containing a product with variant.
  """
  variant: VariantLineItemInput
}

"""
The shipping line associated with an exchange checkout.
"""
type ExchangeCheckoutShippingLine {
  """
  Handle of the shipping line.
  """
  handle: String!

  """
  Price of the shipping line.
  """
  price: MoneyV2!

  """
  Title of the shipping line.
  """
  title: String!
}

"""
Specifies the input fields for an exchange shipping line.
"""
input ExchangeCheckoutShippingLineInput {
  """
  Custom tax lines of the shipping line.
  """
  customTaxLines: [ExchangeCheckoutTaxLineInput!]

  """
  Price of the shipping line.
  """
  price: Decimal!

  """
  Title of the shipping line.
  """
  title: String!
}

"""
A tax line on an exchange checkout.
"""
type ExchangeCheckoutTaxLine {
  """
  The amount of tax to be charged.
  """
  price: MoneyV2!

  """
  The tax rate to be applied.
  """
  rate: Decimal!

  """
  The name of the tax.
  """
  title: String!
}

"""
Specifies the input fields for an exchange checkout tax line.
"""
input ExchangeCheckoutTaxLineInput {
  """
  The amount of tax to be charged.
  """
  price: Decimal!

  """
  The tax rate to be applied.
  """
  rate: Decimal!

  """
  The name of the tax.
  """
  title: String!
}

"""
An input that represents a discount.
"""
input ExchangeDiscountInput {
  """
  Description of the discount.
  """
  description: String!

  """
  The value of the discount.
  """
  value: Decimal!
}

"""
Represents an error in the input of a mutation.
"""
type ExchangeError implements DisplayableError {
  """
  The error code.
  """
  code: ExchangeErrorCode

  """
  The path to the input field that caused the error.
  """
  field: [String!]

  """
  The error message.
  """
  message: String!
}

"""
Possible error codes that can be returned by `ExchangeError`.
"""
enum ExchangeErrorCode {
  """
  ExchangeError where an error occurs in checkout. Usually a catch-all error case.
  """
  CHECKOUT

  """
  ExchangeError where the checkout's billing address is blank.
  """
  CHECKOUT_BILLING_ADDRESS_BLANK

  """
  ExchangeError where an error occurs on the discount. Usually a catch-all error case.
  """
  CHECKOUT_DISCOUNT

  """
  ExchangeError where the discount code on checkout is depleted.
  """
  CHECKOUT_DISCOUNT_CODE_DEPLETED

  """
  ExchangeError where the discount code on checkout is not applicable (does not meet conditions).
  """
  CHECKOUT_DISCOUNT_CODE_NOT_APPLICABLE

  """
  ExchangeError where the discount code on checkout is not found.
  """
  CHECKOUT_DISCOUNT_CODE_NOT_FOUND

  """
  ExchangeError where an error occurs on the checkout line item.
  """
  CHECKOUT_LINE_ITEM

  """
  Gift card service must be activated on a shop before processing returns to a gift card.
  """
  CHECKOUT_LINE_ITEM_GIFT_CARD_SERVICE_NOT_ACTIVATED

  """
  ExchangeError where a checkout line item has an invalid specification (variant, number of items).
  """
  CHECKOUT_LINE_ITEM_INVALID_SPECIFICATION

  """
  ExchangeError where a checkout order contains both a discount code and a manual discount.
  """
  CHECKOUT_ORDER_CONTAINS_DISCOUNT_CODE_AND_MANUAL_DISCOUNT

  """
  ExchangeError where exchange is already completed.
  """
  EXCHANGE_ALREADY_COMPLETED

  """
  ExchangeError where exchange related checkout is already completed.
  """
  EXCHANGE_CHECKOUT_ALREADY_COMPLETED

  """
  ExchangeError where exchange credit amount is greater than checkout price.
  """
  EXCHANGE_CREDIT_GREATER_THAN_CHECKOUT_PRICE

  """
  ExchangeError where exchange is not found.
  """
  EXCHANGE_NOT_FOUND

  """
  ExchangeError where exchange is not ready to be completed.
  """
  EXCHANGE_NOT_READY_TO_COMPLETE

  """
  ExchangeError where the parent order is locked and exchange cannot be completed.
  """
  EXCHANGE_PARENT_ORDER_IS_LOCKED

  """
  ExchangeError where an error occurs with the exchange credit payment.
  """
  PAYMENT_EXCHANGE_CREDIT

  """
  ExchangeError where the payment's unique token is not specified.
  """
  PAYMENT_UNIQUE_TOKEN_NOT_SPECIFIED

  """
  ExchangeError where the receipt recipient's email address is invalid.
  """
  RECEIPT_RECIPIENT_INVALID_EMAIL_ADDRESS

  """
  ExchangeError where the receipt recipient's phone number is invalid.
  """
  RECEIPT_RECIPIENT_INVALID_PHONE_NUMBER

  """
  ExchangeError where the exchange receipt recipient is unreachable.
  """
  RECEIPT_RECIPIENT_UNREACHABLE

  """
  ExchangeError where the exchange receipt requires either an email or phone number.
  """
  RECEIPT_REQUIRES_EMAIL_OR_PHONE

  """
  ExchangeError where an error occurs on the refund. Usually a catch-all error case.
  """
  REFUND

  """
  ExchangeError where an error occurs on a refund line item.
  """
  REFUND_LINE_ITEM

  """
  ExchangeError where a refund line item is blank.
  """
  REFUND_LINE_ITEM_BLANK

  """
  ExchangeError where a refund line item being exchanged is not fulfilled.
  """
  REFUND_LINE_ITEM_NOT_FULFILLED

  """
  ExchangeError where the refund is missing transactions.
  """
  REFUND_MISSING_TRANSACTIONS

  """
  ExchangeError where an error occurs when refunding shipping. Usually a catch-all error case.
  """
  REFUND_SHIPPING

  """
  ExchangeError when refund shipping amount is less than 0.
  """
  REFUND_SHIPPING_CANNOT_BE_NEGATIVE

  """
  ExchangeError when refund shipping amount is greater than remaining shipping.
  """
  REFUND_SHIPPING_MORE_THAN_REMAINING

  """
  ExchangeError where an error occurs with a refund transaction.
  """
  REFUND_TRANSACTION

  """
  ExchangeError where the refund transactions are nil.
  """
  REFUND_TRANSACTIONS_NIL
}

"""
Specifies the input fields for an exchange.
"""
input ExchangeInput {
  """
  Whether the child order is marked as fulfilled or not.
  """
  autoFulfill: Boolean

  """
  An input that represents a line item.
  """
  checkoutLineItems: [ExchangeCheckoutLineItemInput!]!

  """
  Customer to be associated with the new order.
  """
  customerId: ID

  """
  The ID of the point of sale device the exchange was performed on.
  """
  deviceId: ID

  """
  The discount code that is applied to the checkout.
  """
  discountCode: String

  """
  ID of the retail location where the exchange was performed.
  """
  locationId: ID

  """
  The manual discount applied to the checkout.
  """
  manualDiscount: ExchangeDiscountInput

  """
  An optional note attached to a refund.
  """
  note: String

  """
  An input that specifies line items on a refund.
  """
  refundLineItems: [RefundLineItemInput!]!

  """
  Shipping to be refunded.
  """
  refundShipping: ShippingRefundInput

  """
  Transactions to process as a refund.
  """
  refundTransactions: [OrderTransactionInput!]

  """
  Whether the refunded line items were added back to the store inventory.
  """
  restock: Boolean @deprecated(reason: "refundLineItems.locationId and refundLineItems.restockType should be used instead.")

  """
  Shipping address to be associated with the new order.
  """
  shippingAddress: MailingAddressInput

  """
  Shipping line to be associated with the new order.
  """
  shippingLine: ExchangeCheckoutShippingLineInput

  """
  Client assigned identifier to be associated with an exchange's child order.
  """
  sourceIdentifier: String

  """
  Staff member that is processing the exchange. Only POS will respect this field input.
  """
  staffMemberId: ID

  """
  The ID of the transaction group that is used for the exchange.
  """
  transactionGroupId: ID
}

"""
The type of the exchange, in relation to the flow of the exchange balance.
"""
enum ExchangeType {
  """
  An exchange where the new purchase is less than the value of the refund.
  """
  BALANCE_OWED_TO_CUSTOMER

  """
  An exchange where the new purchase is more that the value of the refund.
  """
  BALANCE_OWED_TO_MERCHANT

  """
  An exchange where the new purchase is equal in value to the refund.
  """
  LIKE_FOR_LIKE
}

"""
Represents a video hosted outside of Shopify.
"""
type ExternalVideo implements Media & Node {
  """
  A word or phrase to share the nature or contents of a media.
  """
  alt: String

  """
  The embed URL of the video for the respective host.
  """
  embedUrl: URL!

  """
  The URL.
  """
  embeddedUrl: URL! @deprecated(reason: "Use `originUrl` instead.")

  """
  The host of the external video.
  """
  host: MediaHost!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The media content type.
  """
  mediaContentType: MediaContentType!

  """
  Any errors which have occurred on the media.
  """
  mediaErrors: [MediaError!]!

  """
  The warnings attached to the media.
  """
  mediaWarnings: [MediaWarning!]!

  """
  The origin URL of the video on the respective host.
  """
  originUrl: URL!

  """
  The position of the media object.
  """
  position: Int!

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  The preview image for the media.
  """
  previewImage: Image @deprecated(reason: "Use `preview` instead.")

  """
  Current status of the media.
  """
  status: MediaStatus!
}

"""
Specifies the sorting order for the facts of an assessment.
"""
enum FactSortKeys {
  """
  The default value for the sort key returns the facts unsorted.
  """
  DEFAULT

  """
  Facts are sorted by sentiment according to the assessment result.
  For a low assessment they are sorted in ascending order of sentiment: positve, neutral, negative.
  For any other assessment they are sorted in descending order of sentiment negative, neutral, positive.
  """
  RESULT
}

"""
Requirements that must be met before an app can be installed.
"""
type FailedRequirement {
  """
  Action to be taken to resolve a failed requirement, including URL link.
  """
  action: NavigationItem

  """
  A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
  encounters when trying to make use of their Shop and its resources.
  """
  message: String!
}

"""
A file interface.
"""
interface File {
  """
  A word or phrase to describe the contents or the function of a file.
  """
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """
  The display name of the file created.
  """
  displayName: String

  """
  Any errors that have occurred on the file.
  """
  fileErrors: [FileError!]!

  """
  The status of the file.
  """
  fileStatus: FileStatus!

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage
}

"""
A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.
Check the file before attempting to upload again.
"""
type FileError {
  """
  Code representing the type of error.
  """
  code: FileErrorCode!

  """
  Additional details regarding the error.
  """
  details: String

  """
  Translated error message.
  """
  message: String!
}

"""
The error types for a file.
"""
enum FileErrorCode {
  """
  File could not be created because embed permissions are disabled for this video.
  """
  EXTERNAL_VIDEO_EMBED_DISABLED

  """
  File could not be created because video is either not found or still transcoding.
  """
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING

  """
  File could not be created because the external video has an invalid aspect ratio.
  """
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO

  """
  File could not be created because the external video could not be found.
  """
  EXTERNAL_VIDEO_NOT_FOUND

  """
  File could not be created because the external video is not listed or is private.
  """
  EXTERNAL_VIDEO_UNLISTED

  """
  File could not be created because the cumulative file storage limit would be exceeded.
  """
  FILE_STORAGE_LIMIT_EXCEEDED

  """
  File could not be processed because the source could not be downloaded.
  """
  GENERIC_FILE_DOWNLOAD_FAILURE

  """
  File could not be created because the size is too large.
  """
  GENERIC_FILE_INVALID_SIZE

  """
  File could not be processed because the image could not be downloaded.
  """
  IMAGE_DOWNLOAD_FAILURE

  """
  File could not be processed because the image could not be processed.
  """
  IMAGE_PROCESSING_FAILURE

  """
  File could not be created because the image has an invalid aspect ratio.
  """
  INVALID_IMAGE_ASPECT_RATIO

  """
  File could not be created because the image size is too large.
  """
  INVALID_IMAGE_FILE_SIZE

  """
  File could not be created because the image's resolution exceeds the max limit.
  """
  INVALID_IMAGE_RESOLUTION

  """
  File could not be processed because the signed URL was invalid.
  """
  INVALID_SIGNED_URL

  """
  File timed out because it is currently being modified by another operation.
  """
  MEDIA_TIMEOUT_ERROR

  """
  File could not be created because the model file failed processing.
  """
  MODEL3D_GLB_OUTPUT_CREATION_ERROR

  """
  File could not be created because the model can't be converted to USDZ format.
  """
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR

  """
  File could not be created because the model file failed processing.
  """
  MODEL3D_PROCESSING_FAILURE

  """
  File could not be created because the model's thumbnail generation failed.
  """
  MODEL3D_THUMBNAIL_GENERATION_ERROR

  """
  Model failed validation.
  """
  MODEL3D_VALIDATION_ERROR

  """
  File error has occurred for an unknown reason.
  """
  UNKNOWN

  """
  File could not be created because the image is an unsupported file type.
  """
  UNSUPPORTED_IMAGE_FILE_TYPE

  """
  File could not be created because it has an invalid file type.
  """
  VIDEO_INVALID_FILETYPE_ERROR

  """
  File could not be created because it does not meet the maximum duration requirement.
  """
  VIDEO_MAX_DURATION_ERROR

  """
  File could not be created because it does not meet the maximum height requirement.
  """
  VIDEO_MAX_HEIGHT_ERROR

  """
  File could not be created because it does not meet the maximum width requirement.
  """
  VIDEO_MAX_WIDTH_ERROR

  """
  File could not be created because the metadata could not be read.
  """
  VIDEO_METADATA_READ_ERROR

  """
  File could not be created because it does not meet the minimum duration requirement.
  """
  VIDEO_MIN_DURATION_ERROR

  """
  File could not be created because it does not meet the minimum height requirement.
  """
  VIDEO_MIN_HEIGHT_ERROR

  """
  File could not be created because it does not meet the minimum width requirement.
  """
  VIDEO_MIN_WIDTH_ERROR

  """
  Video failed validation.
  """
  VIDEO_VALIDATION_ERROR
}

"""
The possible statuses for a file object.
"""
enum FileStatus {
  """
  File processing has failed.
  """
  FAILED

  """
  File is being processed.
  """
  PROCESSING

  """
  File is ready to be displayed.
  """
  READY

  """
  File has been uploaded but hasn't been processed.
  """
  UPLOADED
}

"""
A filter option is one possible value in a search filter.
"""
type FilterOption {
  """
  The filter option's label for display purposes.
  """
  label: String!

  """
  The filter option's value.
  """
  value: String!
}

"""
The Flow action definition registered by app developers. Partners configure these to receive data from Shopify.
"""
type FlowActionDefinition {
  """
  The app that created this Flow action definition.
  """
  app: App!

  """
  A brief description of what this Flow action definition does.
  """
  description: String!

  """
  The unique identifier of the Flow action definition.
  """
  id: ID!

  """
  The lifecycle state of the Flow action definition.
  """
  lifecycleState: LifecycleState!

  """
  The schema for the Flow action definition in JSON serialized as a string.
  """
  schema: String!

  """
  The URL to which the payload will be sent.
  """
  targetUrl: URL!

  """
  The title of the Flow action definition.
  """
  title: String!
}

"""
The Flow trigger definition registered by app developers. Partners configure
these to have events triggered when specific conditions are met.
"""
type FlowTriggerDefinition {
  """
  The app that created this Flow trigger definition.
  """
  app: App!

  """
  A brief description of what this Flow trigger definition does.
  """
  description: String!

  """
  The unique identifier of the Flow trigger definition.
  """
  id: ID!

  """
  The lifecycle state of the Flow trigger definition.
  """
  lifecycleState: LifecycleState!

  """
  The schema for the Flow trigger definition in JSON serialized as a string.
  """
  schema: String!

  """
  The title of the Flow trigger definition.
  """
  title: String!
}

"""
The Flow trigger discovery webhook registered by app developers. Partners configure this to have flow send them
trigger discovery webhooks whenever a particular flow trigger definition starts to be used or unused by a
merchant.
"""
type FlowTriggerDiscoveryWebhook {
  """
  The unique identifier of the Flow trigger discovery webhook.
  """
  id: ID!

  """
  The url of the Flow trigger discovery webhook.
  """
  url: URL!
}

"""
A string containing a strict subset of HTML code. Non-allowed tags will be stripped out.
Allowed tags:
* `a` (allowed attributes: `href`, `target`)
* `b`
* `br`
* `em`
* `i`
* `strong`
* `u`
Use [HTML](https://shopify.dev/api/admin-graphql/latest/scalars/HTML) instead if you need to
include other HTML tags.

Example value: `"Your current domain is <strong>johns-apparel.myshopify.com</strong>."`
"""
scalar FormattedString

"""
Shop's eligibility to enable Fraud Protect.
"""
enum FraudProtectEligibility {
  """
  Shop is eligible to enable Fraud Protect.
  """
  ELIGIBLE

  """
  Shop is not eligible to enable Fraud Protect.
  """
  INELIGIBLE

  """
  Shop would be eligible for Fraud Protect if Shopify Payments were enabled on the shop.
  """
  NEEDS_SHOPIFY_PAYMENTS
}

"""
Fraud Protect shop-level settings.
"""
type FraudProtectSettings {
  """
  Whether Fraud Protect is enabled on a store.
  """
  enabled: Boolean!

  """
  The rate applied to orders when Fraud Protect is enabled.
  """
  rate: Float!

  """
  Action taken for unprotected orders if Fraud Protect is enabled.
  """
  unprotectedOrderAction: UnprotectedOrderAction!
}

"""
Represents the protection of an order from receiving fraudulent chargebacks.
"""
type FraudProtection {
  """
  The extent to which an order is protected from fraudulent chargebacks.
  """
  level: FraudProtectionLevel!
}

"""
The level of protection against fraudulent chargebacks.
"""
enum FraudProtectionLevel {
  FULLY_PROTECTED
  NOT_AVAILABLE
  NOT_ELIGIBLE
  NOT_PROTECTED
  PARTIALLY_PROTECTED
  PENDING
}

"""
Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one
or more items in an order. When an order has been completely fulfilled, it means
that all the items that are included in the order have been sent to the
customer. There can be more than one fulfillment for an order.
"""
type Fulfillment implements LegacyInteroperability & Node {
  """
  The date and time when the fulfillment was created.
  """
  createdAt: DateTime!

  """
  The date that this fulfillment was delivered.
  """
  deliveredAt: DateTime

  """
  Human readable display status for this fulfillment.
  """
  displayStatus: FulfillmentDisplayStatus

  """
  The estimated date that this fulfillment will arrive.
  """
  estimatedDeliveryAt: DateTime

  """
  The history of events associated with this fulfillment.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FulfillmentEventConnection!

  """
  List of the fulfillment's line items.
  """
  fulfillmentLineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FulfillmentLineItemConnection!

  """
  A paginated list of fulfillment orders for the fulfillment.
  """
  fulfillmentOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FulfillmentOrderConnection!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The date and time when the fulfillment went into transit.
  """
  inTransitAt: DateTime

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The location that the fulfillment was processed at.
  """
  location: Location

  """
  Whether the merchant is permitted to cancel this fulfillment.
  """
  merchantCancellable: Boolean!

  """
  Whether the merchant is permitted to print packing slips for this fulfillment.
  """
  merchantPackingSlipPrintable: Boolean!

  """
  Human readable reference identifier for this fulfillment.
  """
  name: String!

  """
  The order for which the fulfillment was created.
  """
  order: Order!

  """
  The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
  """
  originAddress: FulfillmentOriginAddress

  """
  Whether any of the line items in the fulfillment require shipping.
  """
  requiresShipping: Boolean!

  """
  Fulfillment service associated with the fulfillment.
  """
  service: FulfillmentService

  """
  The optional shipping label for this fulfillment.
  """
  shippingLabel: ShippingLabel

  """
  The status of the fulfillment.
  """
  status: FulfillmentStatus!

  """
  Sum of all line item quantities for the fulfillment.
  """
  totalQuantity: Int!

  """
  Tracking information associated with the fulfillment,
  such as the tracking company, tracking number, and tracking URL.
  """
  trackingInfo(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [FulfillmentTrackingInfo!]!

  """
  The date and time when the fulfillment was last modified.
  """
  updatedAt: DateTime!
}

"""
The actions that can be taken on a fulfillment.
"""
enum FulfillmentAction {
  """
  Create a fulfillment.
  """
  CREATE_FULFILLMENT

  """
  Purchase a shipping label.
  """
  PURCHASE_LABEL
}

"""
An auto-generated type for paginating through multiple Fulfillments.
"""
type FulfillmentConnection {
  """
  A list of edges.
  """
  edges: [FulfillmentEdge!]!

  """
  A list of the nodes contained in FulfillmentEdge.
  """
  nodes: [Fulfillment!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
The display status of a fulfillment.
"""
enum FulfillmentDisplayStatus {
  """
  Displayed as **Attempted delivery**.
  """
  ATTEMPTED_DELIVERY

  """
  Displayed as **Canceled**.
  """
  CANCELED

  """
  Displayed as **Confirmed**.
  """
  CONFIRMED

  """
  Displayed as **Delivered**.
  """
  DELIVERED

  """
  Displayed as **Failure**.
  """
  FAILURE

  """
  Displayed as **Fulfilled**.
  """
  FULFILLED

  """
  Displayed as **In transit**.
  """
  IN_TRANSIT

  """
  Displayed as **Label printed**.
  """
  LABEL_PRINTED

  """
  Displayed as **Label purchased**.
  """
  LABEL_PURCHASED

  """
  Displayed as **Label voided**.
  """
  LABEL_VOIDED

  """
  Displayed as **Marked as fulfilled**.
  """
  MARKED_AS_FULFILLED

  """
  Displayed as **Not delivered**.
  """
  NOT_DELIVERED

  """
  Displayed as **Out for delivery**.
  """
  OUT_FOR_DELIVERY

  """
  Displayed as **Picked up**.
  """
  PICKED_UP

  """
  Displayed as **Ready for pickup**.
  """
  READY_FOR_PICKUP

  """
  Displayed as **Submitted**.
  """
  SUBMITTED
}

"""
An auto-generated type which holds one Fulfillment and a cursor during pagination.
"""
type FulfillmentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of FulfillmentEdge.
  """
  node: Fulfillment!
}

"""
The fulfillment event that describes the fulfilllment status at a particular time.
"""
type FulfillmentEvent implements Node {
  """
  The street address where this fulfillment event occurred.
  """
  address1: String

  """
  The city where this fulfillment event occurred.
  """
  city: String

  """
  The country where this fulfillment event occurred.
  """
  country: String

  """
  The estimated delivery date and time of the fulfillment.
  """
  estimatedDeliveryAt: DateTime

  """
  The time at which this fulfillment event happened.
  """
  happenedAt: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The latitude where this fulfillment event occurred.
  """
  latitude: Float

  """
  The longitude where this fulfillment event occurred.
  """
  longitude: Float

  """
  A message associated with this fulfillment event.
  """
  message: String

  """
  The province where this fulfillment event occurred.
  """
  province: String

  """
  The status of this fulfillment event.
  """
  status: FulfillmentEventStatus!

  """
  The zip code of the location where this fulfillment event occurred.
  """
  zip: String
}

"""
An auto-generated type for paginating through multiple FulfillmentEvents.
"""
type FulfillmentEventConnection {
  """
  A list of edges.
  """
  edges: [FulfillmentEventEdge!]!

  """
  A list of the nodes contained in FulfillmentEventEdge.
  """
  nodes: [FulfillmentEvent!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.
"""
type FulfillmentEventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of FulfillmentEventEdge.
  """
  node: FulfillmentEvent!
}

"""
The status that describes a fulfillment or delivery event.
"""
enum FulfillmentEventStatus {
  """
  A delivery was attempted.
  """
  ATTEMPTED_DELIVERY

  """
  The fulfillment is confirmed. This is the default value when no other information is available.
  """
  CONFIRMED

  """
  The fulfillment was successfully delivered.
  """
  DELIVERED

  """
  The fulfillment request failed.
  """
  FAILURE

  """
  The fulfillment is in transit.
  """
  IN_TRANSIT

  """
  A purchased shipping label has been printed.
  """
  LABEL_PRINTED

  """
  A shipping label has been purchased.
  """
  LABEL_PURCHASED

  """
  The fulfillment is out for delivery.
  """
  OUT_FOR_DELIVERY

  """
  The fulfillment is ready to be picked up.
  """
  READY_FOR_PICKUP
}

"""
A fulfillment hold currently applied on a fulfillment order.
"""
type FulfillmentHold {
  """
  The reason for the fulfillment hold.
  """
  reason: FulfillmentHoldReason!

  """
  Additional information about the fulfillment hold reason.
  """
  reasonNotes: String
}

"""
The reason for a fulfillment hold.
"""
enum FulfillmentHoldReason {
  """
  The fulfillment hold is applied because payment is pending.
  """
  AWAITING_PAYMENT

  """
  The fulfillment hold is applied because of a high risk of fraud.
  """
  HIGH_RISK_OF_FRAUD

  """
  The fulfillment hold is applied because of an incorrect address.
  """
  INCORRECT_ADDRESS

  """
  The fulfillment hold is applied because inventory is out of stock.
  """
  INVENTORY_OUT_OF_STOCK

  """
  The fulfillment hold is applied because of a contractual agreement with a partner.
  """
  MARKETPLACE_PARTNER

  """
  The fulfillment hold is applied because of a post purchase upsell offer.
  """
  ONLINE_STORE_POST_PURCHASE_CROSS_SELL

  """
  The fulfillment hold is applied for another reason.
  """
  OTHER

  """
  The fulfillment hold is applied because of an unknown delivery date.
  """
  UNKNOWN_DELIVERY_DATE
}

"""
Represents a line item from an order that's included in a fulfillment.
"""
type FulfillmentLineItem implements Node {
  """
  The total price after discounts are applied.
  """
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead.")

  """
  The total price after discounts are applied in shop and presentment currencies.
  """
  discountedTotalSet: MoneyBag!

  """
  The effective fulfilled quantity of a line item, excluding returned or refunded quantities.
  """
  effectiveQuantity: Int!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The associated order's line item.
  """
  lineItem: LineItem!

  """
  The total price before discounts are applied.
  """
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead.")

  """
  The total price before discounts are applied in shop and presentment currencies.
  """
  originalTotalSet: MoneyBag!

  """
  Number of line items in the fulfillment.
  """
  quantity: Int
}

"""
An auto-generated type for paginating through multiple FulfillmentLineItems.
"""
type FulfillmentLineItemConnection {
  """
  A list of edges.
  """
  edges: [FulfillmentLineItemEdge!]!

  """
  A list of the nodes contained in FulfillmentLineItemEdge.
  """
  nodes: [FulfillmentLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
"""
type FulfillmentLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of FulfillmentLineItemEdge.
  """
  node: FulfillmentLineItem!
}

"""
Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items
in an order that are to be fulfilled from the same location. There can be more than one fulfillment order
for an order at a given location. Fulfillment orders are created automatically when an order is created.
To learn how to build a fulfillment app, refer to [Fulfillment apps](https://shopify.dev/apps/fulfillment).
"""
type FulfillmentOrder implements Node {
  """
  An alert regarding the fulfillment service's latest interaction with the fulfillment order.
  """
  alert: FulfillmentOrderAlert

  """
  The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.

  The fulfillment order's assigned location might change in the following cases:

  - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
    ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
    ) field within the mutation's response.
  - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
      [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
      [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
      [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
      status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
  """
  assignedLocation: FulfillmentOrderAssignedLocation!

  """
  Date and time when the fulfillment order was created.
  """
  createdAt: DateTime!

  """
  Delivery method of this fulfillment order.
  """
  deliveryMethod: DeliveryMethod

  """
  The destination where the items should be sent.
  """
  destination: FulfillmentOrderDestination

  """
  The fulfillment order's location name to be displayed to the merchant. If the shop only has one location,
  the returned string will be empty.
  """
  displayLocationName: String

  """
  Fulfillment status for this fulfillment order that can be shown to the merchant.
  This field does not capture all the possible details of a fulfillment order's state.
  It should only be used for display summary purposes.
  """
  displayStatus: FulfillmentOrderDisplayStatus!

  """
  The date and time at which the fulfillment order will be fulfillable. When
  this date and time is reached, the scheduled fulfillment order is
  automatically transitioned to open. For example, the `fulfill_at` date for a
  subscription order might be the 1st of each month, a pre-order `fulfill_at`
  date would be `nil`, and a standard order `fulfill_at` date would be the order creation date.
  """
  fulfillAt: DateTime

  """
  The latest date and time by which all items in the fulfillment order need to be fulfilled.
  """
  fulfillBy: DateTime

  """
  The fulfillment holds applied on the fulfillment order.
  """
  fulfillmentHolds: [FulfillmentHold!]!

  """
  The fulfillment service that the fulfillment order is assigned to.
  """
  fulfillmentService: FulfillmentService

  """
  A list of fulfillments for the fulfillment order.
  """
  fulfillments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FulfillmentConnection!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The duties delivery method of this fulfillment order.
  """
  internationalDuties: FulfillmentOrderInternationalDuties

  """
  A list of the fulfillment order's line items.
  """
  lineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FulfillmentOrderLineItemConnection!

  """
  A list of locations that the fulfillment order can potentially move to.
  """
  locationsForMove(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FulfillmentOrderLocationForMoveConnection!

  """
  A list of requests sent by the merchant or an order management app to the fulfillment service for the fulfillment order.
  """
  merchantRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FulfillmentOrderMerchantRequestConnection!

  """
  The order that's associated with the fulfillment order.
  """
  order: Order!

  """
  The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.

  The fulfillment order's origin might change in the following cases:

  - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
    ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
    ) field within the mutation's response.
  - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
      [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
      [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
      [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
      status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
  """
  origin: FulfillmentOrderOrigin! @deprecated(reason: "Use `assignedLocation` instead.")

  """
  The request status of the fulfillment order.
  """
  requestStatus: FulfillmentOrderRequestStatus!

  """
  The status of the fulfillment order.
  """
  status: FulfillmentOrderStatus!

  """
  The actions that can be performed on this fulfillment order.
  """
  supportedActions: [FulfillmentOrderSupportedAction!]!

  """
  Sum of remaining quantities for all fulfillment order line items.
  """
  totalLineItemRemainingQuantity: Int!

  """
  The date and time when the fulfillment order was last updated.
  """
  updatedAt: DateTime!
}

"""
The actions that can be taken on a fulfillment order.
"""
enum FulfillmentOrderAction {
  """
  Cancels a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderCancel`.
  """
  CANCEL_FULFILLMENT_ORDER

  """
  Creates a fulfillment for selected line items in the fulfillment order. The
  corresponding mutation for this action is `fulfillmentCreateV2`.
  """
  CREATE_FULFILLMENT

  """
  Opens an external URL to initiate the fulfillment process outside Shopify.
  This action should be paired with
  `FulfillmentOrderSupportedAction.externalUrl`.
  """
  EXTERNAL

  """
  Applies a fulfillment hold on an open fulfillment order. The corresponding
  mutation for this action is `fulfillmentOrderHold`.
  """
  HOLD

  """
  Marks the fulfillment order as open. The corresponding mutation for this action is `fulfillmentOrderOpen`.
  """
  MARK_AS_OPEN

  """
  Marks the fulfillment order as picked up.
  """
  MARK_AS_PICKED_UP

  """
  Moves a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMove`.
  """
  MOVE

  """
  Marks the fulfillment order as ready for pickup.
  """
  PREPARE_FOR_PICKUP

  """
  Prints a packing slip for selected line items in the fulfillment order.
  """
  PRINT_PACKING_SLIP

  """
  Purchase a shipping label.
  """
  PURCHASE_LABEL

  """
  Releases the fulfillment hold on the fulfillment order. The corresponding
  mutation for this action is `fulfillmentOrderReleaseHold`.
  """
  RELEASE_HOLD

  """
  Sends a cancellation request to the fulfillment service of a fulfillment
  order. The corresponding mutation for this action is
  `fulfillmentOrderSubmitCancellationRequest`.
  """
  REQUEST_CANCELLATION

  """
  Sends a request for fulfilling selected line items in a fulfillment order to a
  fulfillment service. The corresponding mutation for this action is
  `fulfillmentOrderSubmitFulfillmentRequest`.
  """
  REQUEST_FULFILLMENT
}

"""
Actions with high (FIRST) priority are recommended to perform.
Actions with low (SECOND) priority are possible to perform.
"""
enum FulfillmentOrderActionPriority {
  """
  A high priority fulfillment action, this action is recommended.
  """
  FIRST

  """
  A lower priority fulfillment action, this action is possible to be performed on the fulfillment.
  """
  SECOND
}

"""
An alert regarding the fulfillment service's latest interaction with the fulfillment order.
"""
type FulfillmentOrderAlert {
  """
  The details of the alert.
  """
  message: String!

  """
  The status of the alert.
  """
  status: FulfillmentOrderAlertStatus!
}

"""
The status of an alert for a fulfillment order.
"""
enum FulfillmentOrderAlertStatus {
  """
  This status indicates general information.
  """
  INFO

  """
  This status indicates information that needs merchant attention.
  """
  WARNING
}

"""
The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.

 The fulfillment order's assigned location might change in the following cases:

  - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
    ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
    ) field within the mutation's response.

  - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
      [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
      [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
      [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
      status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).

If the [fulfillmentOrderMove](
https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
) mutation has moved the fulfillment order's line items to a new location,
but hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location
doesn't change.
This happens if the fulfillment order is being split during the move, or if all line items can be moved
to an existing fulfillment order at a new location.

Once the fulfillment order has been taken into work or canceled,
which means that the fulfillment order has the
[IN_PROGRESS](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-inprogress),
[CLOSED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-closed),
[CANCELLED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-cancelled), or
[INCOMPLETE](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-incomplete)
status, `FulfillmentOrderAssignedLocation` acts as a snapshot of the shop's location content.
Up-to-date shop's location data may be queried through [location](
  https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderAssignedLocation#field-fulfillmentorderassignedlocation-location
) connection.
"""
type FulfillmentOrderAssignedLocation {
  """
  The first line of the address for the location.
  """
  address1: String

  """
  The second line of the address for the location.
  """
  address2: String

  """
  The city of the location.
  """
  city: String

  """
  The two-letter country code of the location.
  """
  countryCode: CountryCode!

  """
  A formatted version of the address of the location, customized by the provided arguments.
  """
  formatted(
    """
    Whether to include the location name in the formatted address.
    """
    withName: Boolean
  ): [String!]!

  """
  The location where the fulfillment is expected to happen. This value might be different from
  `FulfillmentOrderAssignedLocation` if the location's attributes were updated
  after the fulfillment order was taken into work of canceled.
  """
  location: Location

  """
  The name of the location.
  """
  name: String!

  """
  The phone number of the location.
  """
  phone: String

  """
  The province of the location.
  """
  province: String

  """
  The ZIP code of the location.
  """
  zip: String
}

"""
An auto-generated type for paginating through multiple FulfillmentOrders.
"""
type FulfillmentOrderConnection {
  """
  A list of edges.
  """
  edges: [FulfillmentOrderEdge!]!

  """
  A list of the nodes contained in FulfillmentOrderEdge.
  """
  nodes: [FulfillmentOrder!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Represents the destination where the items should be sent upon fulfillment.
"""
type FulfillmentOrderDestination implements Node {
  """
  The first line of the address of the destination.
  """
  address1: String

  """
  The second line of the address of the destination.
  """
  address2: String

  """
  The city of the destination.
  """
  city: String

  """
  The company of the destination.
  """
  company: String

  """
  The two-letter country code of the destination.
  """
  countryCode: CountryCode

  """
  The email of the customer at the destination.
  """
  email: String

  """
  The first name of the customer at the destination.
  """
  firstName: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The last name of the customer at the destination.
  """
  lastName: String

  """
  The phone number of the customer at the destination.
  """
  phone: String

  """
  The province of the destination.
  """
  province: String

  """
  The ZIP code of the destination.
  """
  zip: String
}

"""
Represents possible fulfillment statuses for a fulfillment order.
"""
enum FulfillmentOrderDisplayFulfillmentStatus {
  """
  Displayed as **Fulfillment in progress**.
  """
  FULFILLMENT_IN_PROGRESS

  """
  Displayed as **On hold**.
  """
  ON_HOLD

  """
  Displayed as **Scheduled**.
  """
  SCHEDULED

  """
  Displayed as **Unfulfilled**.
  """
  UNFULFILLED
}

"""
Represents a fulfillment order's fulfillment status to be displayed to the merchant.
"""
type FulfillmentOrderDisplayStatus {
  """
  The fulfillment status value.
  """
  status: FulfillmentOrderDisplayFulfillmentStatus!

  """
  Localized fulfillment status to be displayed as-is to the merchant.
  """
  title: String!
}

"""
An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.
"""
type FulfillmentOrderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of FulfillmentOrderEdge.
  """
  node: FulfillmentOrder!
}

"""
The international duties relevant to a fulfillment order.
"""
type FulfillmentOrderInternationalDuties {
  """
  The method of duties payment. Example values: `DDP`, `DAP`.
  """
  incoterm: String!
}

"""
Associates an order line item with quantities requiring fulfillment from the respective fulfillment order.
"""
type FulfillmentOrderLineItem implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The image associated to the line item's variant.
  """
  image: Image

  """
  The associated order line item.
  """
  lineItem: LineItem! @deprecated(reason: "          As of API version 2023-01, this field has been deprecated. The order line item associated with a `FulfillmentOrderLineItem`\n          shouldn't be used to determine what to fulfill. Use the `FulfillmentOrderLineItem` and `FulfillmentOrder` objects\n          instead. An order `LineItem` represents a single line item on an order, but it doesn't represent what should be fulfilled.\n")

  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: MoneyBag!

  """
  The title of the product.
  """
  productTitle: String!

  """
  The number of units remaining to be fulfilled.
  """
  remainingQuantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  The variant SKU number.
  """
  sku: String

  """
  The total number of units to be fulfilled.
  """
  totalQuantity: Int!

  """
  The name of the variant.
  """
  variantTitle: String

  """
  The name of the vendor who made the variant.
  """
  vendor: String

  """
  Warning messages for a fulfillment order line item.
  """
  warnings: [FulfillmentOrderLineItemWarning!]!

  """
  The weight of a line item unit.
  """
  weight: Weight
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
"""
type FulfillmentOrderLineItemConnection {
  """
  A list of edges.
  """
  edges: [FulfillmentOrderLineItemEdge!]!

  """
  A list of the nodes contained in FulfillmentOrderLineItemEdge.
  """
  nodes: [FulfillmentOrderLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.
"""
type FulfillmentOrderLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of FulfillmentOrderLineItemEdge.
  """
  node: FulfillmentOrderLineItem!
}

"""
A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected.
"""
type FulfillmentOrderLineItemWarning {
  """
  The description of warning.
  """
  description: String

  """
  The title of warning.
  """
  title: String
}

"""
A location that a fulfillment order can potentially move to.
"""
type FulfillmentOrderLocationForMove {
  """
  The location being considered as the fulfillment order's new assigned location.
  """
  location: Location!

  """
  The name of the location being considered as the fulfillment order's new assigned location.
  """
  locationName: String!

  """
  A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
  moved to the location.
  """
  message: String

  """
  Whether the fulfillment order can be moved to the location.
  """
  movable: Boolean!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.
"""
type FulfillmentOrderLocationForMoveConnection {
  """
  A list of edges.
  """
  edges: [FulfillmentOrderLocationForMoveEdge!]!

  """
  A list of the nodes contained in FulfillmentOrderLocationForMoveEdge.
  """
  nodes: [FulfillmentOrderLocationForMove!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.
"""
type FulfillmentOrderLocationForMoveEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of FulfillmentOrderLocationForMoveEdge.
  """
  node: FulfillmentOrderLocationForMove!
}

"""
A request made by the merchant or an order management app to a fulfillment service
for a fulfillment order.
"""
type FulfillmentOrderMerchantRequest implements Node {
  """
  The fulfillment order associated with the merchant request.
  """
  fulfillmentOrder: FulfillmentOrder!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The kind of request made.
  """
  kind: FulfillmentOrderMerchantRequestKind!

  """
  The optional message that the merchant included in the request.
  """
  message: String

  """
  Additional options requested by the merchant. These depend on the `kind` of the request.
  For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
  merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
  `notifyCustomer` when making calls to `FulfillmentCreateV2`.
  """
  requestOptions: JSON

  """
  The response from the fulfillment service.
  """
  responseData: JSON

  """
  The timestamp when the request was made.
  """
  sentAt: DateTime!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.
"""
type FulfillmentOrderMerchantRequestConnection {
  """
  A list of edges.
  """
  edges: [FulfillmentOrderMerchantRequestEdge!]!

  """
  A list of the nodes contained in FulfillmentOrderMerchantRequestEdge.
  """
  nodes: [FulfillmentOrderMerchantRequest!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.
"""
type FulfillmentOrderMerchantRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of FulfillmentOrderMerchantRequestEdge.
  """
  node: FulfillmentOrderMerchantRequest!
}

"""
The kinds of request merchants can make to a fulfillment service.
"""
enum FulfillmentOrderMerchantRequestKind {
  """
  The merchant requests cancellation of an `IN_PROGRESS` fulfillment order.
  """
  CANCELLATION_REQUEST

  """
  The merchant requests fulfillment for an `OPEN` fulfillment order.
  """
  FULFILLMENT_REQUEST
}

"""
The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.

  The fulfillment order's origin might change in the following cases:

  - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
    ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
    ) field within the mutation's response.

  - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
      [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
      [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
      [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
      status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).

If the [fulfillmentOrderMove](
https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
) mutation has moved the fulfillment order's line items to a new location,
but hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location
doesn't change.
This happens if the fulfillment order is being split during the move, or if all line items can be moved
to an existing fulfillment order at a new location.

Once the fulfillment order has been taken into work or canceled,
which means that the fulfillment order has the
[IN_PROGRESS](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-inprogress),
[CLOSED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-closed),
[CANCELLED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-cancelled), or
[INCOMPLETE](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-incomplete)
status, `FulfillmentOrderOrigin` acts as a snapshot of the shop's location content.
Up-to-date shop's location data may be queried through [location](
  https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderAssignedLocation#field-fulfillmentorderassignedlocation-location
) connection.
"""
type FulfillmentOrderOrigin implements Node {
  """
  The first line of the address for the location.
  """
  address1: String

  """
  The second line of the address for the location.
  """
  address2: String

  """
  The city of the location.
  """
  city: String

  """
  The two-letter country code of the location.
  """
  countryCode: CountryCode!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The location where the fulfillment is expected to happen. This value might be different from
  `FulfillmentOrderAssignedLocation` if the location's attributes were updated
  after the fulfillment order was taken into work of canceled.
  """
  location: Location

  """
  The name of the location.
  """
  name: String!

  """
  The phone number of the location.
  """
  phone: String

  """
  The province of the location.
  """
  province: String

  """
  The ZIP code of the location.
  """
  zip: String
}

"""
The request status of a fulfillment order.
"""
enum FulfillmentOrderRequestStatus {
  """
  The fulfillment service accepted the merchant's fulfillment request.
  """
  ACCEPTED

  """
  The fulfillment service accepted the merchant's fulfillment cancellation request.
  """
  CANCELLATION_ACCEPTED

  """
  The fulfillment service rejected the merchant's fulfillment cancellation request.
  """
  CANCELLATION_REJECTED

  """
  The merchant requested a cancellation of the fulfillment request for this fulfillment order.
  """
  CANCELLATION_REQUESTED

  """
  The fulfillment service closed the fulfillment order without completing it.
  """
  CLOSED

  """
  The fulfillment service rejected the merchant's fulfillment request.
  """
  REJECTED

  """
  The merchant requested fulfillment for this fulfillment order.
  """
  SUBMITTED

  """
  The initial request status for the newly-created fulfillment orders. This is the only valid
  request status for fulfillment orders that aren't assigned to a fulfillment service.
  """
  UNSUBMITTED
}

"""
The status of a fulfillment order.
"""
enum FulfillmentOrderStatus {
  """
  The fulfillment order has been cancelled by the merchant.
  """
  CANCELLED

  """
  The fulfillment order has been completed and closed.
  """
  CLOSED

  """
  The fulfillment order cannot be completed as requested.
  """
  INCOMPLETE

  """
  The fulfillment order is being processed.
  """
  IN_PROGRESS

  """
  The fulfillment order is on hold. The fulfillment process can't be initiated
  until the hold on the fulfillment order is released.
  """
  ON_HOLD

  """
  The fulfillment order is ready for fulfillment.
  """
  OPEN

  """
  The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`.
  """
  SCHEDULED
}

"""
One of the actions that the fulfillment order supports in its current state.
"""
type FulfillmentOrderSupportedAction {
  """
  The action value.
  """
  action: FulfillmentOrderAction!

  """
  The external URL to be used to initiate the fulfillment process outside Shopify.
  Applicable only when the `action` value is `EXTERNAL`.
  """
  externalUrl: URL

  """
  The priority of the action.
  """
  priority: FulfillmentOrderActionPriority!

  """
  A human-readable name for the action.
  """
  title: String!
}

"""
The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
"""
type FulfillmentOriginAddress {
  """
  The street address of the fulfillment location.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The city in which the fulfillment location is located.
  """
  city: String

  """
  The country code of the fulfillment location.
  """
  countryCode: String!

  """
  The province code of the fulfillment location.
  """
  provinceCode: String

  """
  The zip code of the fulfillment location.
  """
  zip: String
}

"""
A **Fulfillment Service** is a third party warehouse that prepares and ships orders
on behalf of the store owner. Fulfillment services charge a fee to package and ship items
and update product inventory levels. Some well known fulfillment services with Shopify integrations
include: Amazon, Shipwire, and Rakuten. When an app registers a new `FulfillmentService` on a store,
Shopify automatically creates a `Location` that's associated to the fulfillment service.
To learn more about fulfillment services, refer to
[Manage fulfillments as a fulfillment service app](https://shopify.dev/apps/fulfillment/fulfillment-service-apps)
guide.

## Mutations

You can work with the `FulfillmentService` object with the
[fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate),
[fulfillmentServiceUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceUpdate),
and [fulfillmentServiceDelete](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceDelete)
mutations.

## Hosted endpoints

Fulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that
Shopify can query on certain conditions.
These endpoints must have a common prefix, and this prefix should be supplied in the `callbackUrl` parameter
in the
[fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate)
mutation.

- Shopify sends POST requests to the `<callbackUrl>/fulfillment_order_notification` endpoint
  to notify the fulfillment service about fulfillment requests and fulfillment cancellation requests,
  if `fulfillment_orders_opt_in` is set to `true`.

  [As of the 2022-07 API version](https://shopify.dev/changelog/legacy-fulfillment-api-deprecation),
  it's mandatory for a fulfillment service to follow a fulfillment order based workflow by
  having `fulfillment_orders_opt_in` set to `true`,
  hosting the `<callbackUrl>/fulfillment_order_notification` endpoint, and acting on fulfillment requests and cancellations.

  For more information, refer to
  [Receive fulfillment requests and cancellations](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
- Shopify sends GET requests to the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers for orders,
  if `trackingSupport` is set to `true`.

  For more information, refer to
  [Enable tracking support](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-8-enable-tracking-support-optional).

  Fulfillment services can also update tracking information with the
  [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2) mutation,
  rather than waiting for Shopify to ask for tracking numbers.
- Shopify sends GET requests to the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
  if `inventoryManagement` is set to `true`.

  For more information, refer to
  [Sharing inventory levels with Shopify](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-9-share-inventory-levels-with-shopify-optional).

To make sure you have everything set up correctly, you can test the `callbackUrl`-prefixed endpoints
in your development store.

## Resources and webhooks

There are a variety of objects and webhooks that enable a fulfillment service to work.
To exchange fulfillment information with Shopify, fulfillment services use the
[FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder),
[Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment) and
[Order](https://shopify.dev/api/admin-graphql/latest/objects/Order) objects and related mutations.
To act on fulfillment process events that happen on the Shopify side,
besides awaiting calls to `callbackUrl`-prefixed endpoints,
fulfillment services can subscribe to the
[fulfillment order](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
and [order](https://shopify.dev/api/admin-rest/latest/resources/webhook)
webhooks.
"""
type FulfillmentService {
  """
  The callback URL that the fulfillment service has registered for requests. The following considerations apply:

  - Shopify queries the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers
      for orders, if `trackingSupport` is set to `true`.
  - Shopify queries the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
      if `inventoryManagement` is set to `true`.
  - Shopify uses the `<callbackUrl>/fulfillment_order_notification` endpoint to send
      [fulfillment and cancellation requests](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations),
      if the fulfillment service has opted in to the fulfillment order based workflow for managing fulfillments
      (`fulfillmentOrdersOptIn` is set to `true`).
  """
  callbackUrl: URL

  """
  Whether the fulfillment service uses the [fulfillment order based workflow](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments)
  for managing fulfillments.
  """
  fulfillmentOrdersOptIn: Boolean!

  """
  Human-readable unique identifier for this fulfillment service.
  """
  handle: String!

  """
  The ID of the fulfillment service.
  """
  id: ID!

  """
  Whether the fulfillment service tracks product inventory and provides updates to Shopify.
  """
  inventoryManagement: Boolean!

  """
  Whether the fulfillment service does hourly fetches to sync inventory.
  """
  inventorySyncEnabled: Boolean!

  """
  Location associated with the fulfillment service.
  """
  location: Location

  """
  Whether the fulfillment service can stock inventory alongside other locations.
  """
  permitsSkuSharing: Boolean!

  """
  Whether the fulfillment service supports local deliveries.
  """
  productBased: Boolean!

  """
  The name of the fulfillment service as seen by merchants.
  """
  serviceName: String!

  """
  Shipping methods associated with the fulfillment service provider. Applies only to Fulfill By Amazon fulfillment service.
  """
  shippingMethods: [ShippingMethod!]! @deprecated(reason: "The Fulfillment by Amazon feature will no longer be supported from March 30, 2023. To continue using Amazon fulfillment, merchants need to set up a Multi-Channel Fulfillment solution recommended by Amazon: https://help.shopify.com/manual/shipping/fulfillment-services/amazon#activate-fulfillment-by-amazon")

  """
  Type associated with the fulfillment service.
  """
  type: FulfillmentServiceType!
}

"""
The type of a fulfillment service.
"""
enum FulfillmentServiceType {
  """
  Fulfillment by gift card.
  """
  GIFT_CARD

  """
  Manual fulfillment by the merchant.
  """
  MANUAL

  """
  Fullfillment by a third-party fulfillment service.
  """
  THIRD_PARTY
}

"""
The status of a fulfillment.
"""
enum FulfillmentStatus {
  """
  The fulfillment was canceled.
  """
  CANCELLED

  """
  There was an error with the fulfillment request.
  """
  ERROR

  """
  The fulfillment request failed.
  """
  FAILURE

  """
  The third-party fulfillment service has acknowledged the fulfillment and is processing it.
  """
  OPEN @deprecated(reason: "This is a legacy status and is due to be deprecated.")

  """
  Shopify has created the fulfillment and is waiting for the third-party
  fulfillment service to transition it to `open` or `success`.
  """
  PENDING @deprecated(reason: "This is a legacy status and is due to be deprecated.")

  """
  The fulfillment was completed successfully.
  """
  SUCCESS
}

"""
Represents the tracking information for a fulfillment.
"""
type FulfillmentTrackingInfo {
  """
  The name of the tracking company.
  """
  company: String

  """
  The tracking number of the fulfillment.
  """
  number: String

  """
  The URLs to track the fulfillment.
  """
  url: URL
}

"""
The App Bridge information for a Shopify Function.
"""
type FunctionsAppBridge {
  """
  The relative path for creating a customization.
  """
  createPath: String!

  """
  The relative path for viewing a customization.
  """
  detailsPath: String!
}

"""
The error history from running a Shopify Function.
"""
type FunctionsErrorHistory {
  """
  The date and time that the first error occurred.
  """
  errorsFirstOccurredAt: DateTime!

  """
  The date and time that the first error occurred.
  """
  firstOccurredAt: DateTime!

  """
  Whether the merchant has shared all the recent errors with the developer.
  """
  hasBeenSharedSinceLastError: Boolean!

  """
  Whether the merchant has shared all the recent errors with the developer.
  """
  hasSharedRecentErrors: Boolean!
}

"""
Represents any file other than HTML.
"""
type GenericFile implements File & Node {
  """
  A word or phrase to describe the contents or the function of a file.
  """
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """
  The display name of the file created.
  """
  displayName: String

  """
  Any errors that have occurred on the file.
  """
  fileErrors: [FileError!]!

  """
  The status of the file.
  """
  fileStatus: FileStatus!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The generic file's MIME type.
  """
  mimeType: String

  """
  The generic file's size in bytes.
  """
  originalFileSize: Int

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  The generic file's size in bytes.
  """
  size: Int @deprecated(reason: "Use `originalFileSize` instead.")

  """
  The generic file's URL.
  """
  url: URL
}

"""
Represents an issued gift card.
"""
type GiftCard implements Node {
  """
  The gift card's remaining balance.
  """
  balance: MoneyV2!

  """
  The date and time at which the gift card was created.
  """
  createdAt: DateTime!

  """
  The customer who will receive the gift card.
  """
  customer: Customer

  """
  The date and time at which the gift card was disabled.
  """
  disabledAt: DateTime

  """
  Whether the gift card is enabled.
  """
  enabled: Boolean!

  """
  The date at which the gift card will expire.
  """
  expiresOn: Date

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The initial value of the gift card.
  """
  initialValue: MoneyV2!

  """
  The final four characters of the gift card code.
  """
  lastCharacters: String!

  """
  The gift card code. Everything but the final four characters is masked.
  """
  maskedCode: String!

  """
  The note associated with the gift card, which is not visible to the customer.
  """
  note: String

  """
  The order associated with the gift card. This value is `null` if the gift card was issued manually.
  """
  order: Order
}

"""
A sale associated with a gift card.
"""
type GiftCardSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique identifier for the sale.
  """
  id: ID!

  """
  The line item for the associated sale.
  """
  lineItem: LineItem!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
A string containing HTML code. Refer to the [HTML spec](https://html.spec.whatwg.org/#elements-3) for a
complete list of HTML elements.

Example value: `"<p>Grey cotton knit sweater.</p>"`
"""
scalar HTML

"""
Represents an object that has a list of events.
"""
interface HasEvents {
  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
}

"""
Localization extensions associated with the specified resource. For example, the tax id for government invoice.
"""
interface HasLocalizationExtensions {
  """
  List of localization extensions for the resource.
  """
  localizationExtensions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LocalizationExtensionConnection!
}

"""
Resources that metafield definitions can be applied to.
"""
interface HasMetafieldDefinitions {
  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!
}

"""
Represents information about the metafields associated to the specified resource.
"""
interface HasMetafields {
  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!
}

"""
Published translations associated with the resource.
"""
interface HasPublishedTranslations {
  """
  The translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [PublishedTranslation!]!
}

"""
Card denoting an action to be performed by the merchant.
"""
type HomeActionCard implements HomeCard {
  """
  Short label describing the purpose of the card’s action.
  """
  actionLabel: String!

  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  String identifier for the Polaris icon to be used with the card.
  """
  iconKey: String!

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  Indicates if the card has been interacted with or not.
  """
  isRead: Boolean!

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
Card containing a description and tabular information with actionable rows.
"""
type HomeActionListCard implements HomeCard {
  """
  A list of rows contained in the action list.
  """
  actionRows: [HomeActionRow!]!

  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
Holds the contents of an individual row in an action list card.
"""
type HomeActionRow {
  """
  A button that launches the action associated with the row.
  """
  button: HomeButton!

  """
  A more detailed description of the row, typically containing the actual messaging to the merchant.
  """
  description: String!

  """
  An image displayed in the row.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  A label displayed on the row.
  """
  label: String!
}

"""
The types of badges that can apply to a card.
"""
enum HomeBadge {
  BFCM
  HOLIDAYS
}

"""
Card containing a link to a blog.
"""
type HomeBlogCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Estimate of how long it takes to read the blog content.
  """
  readTime: String

  """
  Reason why this card has been presented to the user.
  """
  reason: String!

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
Holds the contents of any card using the bookmark card layout view template.
"""
type HomeBookmarkCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  The url to bookmark.
  """
  bookmarkUrl: URL!

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
Label and action data for the button.
"""
type HomeButton {
  """
  Action the button performs when clicked.
  """
  action: HomeCardAction!

  """
  String identifier. Not globally unique.
  """
  id: String! @deprecated(reason: "Use `rawId` instead.")

  """
  String identifier. Not globally unique.
  """
  rawId: String!

  """
  Display text for the button.
  """
  text: String!

  """
  URL the button opens on interaction.
  """
  url: URL!
}

"""
A summary of Shopify Capital information for this shop; this is a cached value, updated frequently.
"""
type HomeCapitalSummary {
  """
  Percentage progress on paying back the Capital advance.
  """
  balanceProgress: Int!

  """
  Balance remaining on a Shop's Capital advance.
  """
  balanceRemaining: MoneyV2!

  """
  Amount remaining to pay back the Capital advance.
  """
  paybackAmount: MoneyV2!
}

"""
Base information for all card layouts.
"""
interface HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
Describes all the actions a card's buttons can do.
"""
enum HomeCardAction {
  """
  CardAction of type disclosure.
  """
  DISCLOSURE

  """
  CardAction of type dismiss.
  """
  DISMISS

  """
  CardAction of type email.
  """
  EMAIL

  """
  CardAction of type open_support_chat.
  """
  OPEN_SUPPORT_CHAT

  """
  CardAction of type patch.
  """
  PATCH

  """
  CardAction of type post.
  """
  POST

  """
  CardAction of type share.
  """
  SHARE

  """
  CardAction of type submit_feedback.
  """
  SUBMIT_FEEDBACK

  """
  CardAction of type telephone.
  """
  TELEPHONE

  """
  CardAction of type visit.
  """
  VISIT
}

"""
Display message and intent data for a card feedback item.
"""
type HomeCardFeedback {
  """
  Intent of the feedback item.
  """
  intent: HomeCardFeedbackIntent!

  """
  Key for the feedback item, invariant of locale.
  """
  key: String!

  """
  Display text for the feedback item.
  """
  message: String!
}

"""
Specifies the intent of a card feedback.
"""
enum HomeCardFeedbackIntent {
  NEGATIVE
  NEUTRAL
  POSITIVE
}

"""
Supported card layouts.
"""
enum HomeCardLayout {
  ACHIEVEMENT @deprecated(reason: "achievement layout is no longer supported")
  ACTION
  ACTION_LIST
  ANNOUNCEMENT
  BFCM_COUNTDOWN
  BLOG
  BOOKMARK_CARD
  COMPARISON
  CONTENT @deprecated(reason: "content layout is no longer supported")
  COUNTDOWN @deprecated(reason: "countdown layout is no longer supported")
  FEATURED_ANNOUNCEMENT
  GOAL_COMPLETE
  GOAL_INTRO
  GOAL_PROGRESS
  GOAL_TRACKING
  LINE_GRAPH
  PROGRESS
  SIMPLE
  STACKABLE_TABLE
  TABLE
  VIDEO
}

"""
Holds the contents of any card using the comparison layout view template.
"""
type HomeComparisonCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  Feedback information on the industry classification.
  """
  industryFeedback: HomeComparisonCardIndustryFeedback

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  A list of metrics contained in the comparison card.
  """
  metrics: [HomeComparisonMetric!]!

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
Information required to present the industry feedback form.
"""
type HomeComparisonCardIndustryFeedback {
  """
  Label for the button to display feedback information.
  """
  buttonTitle: String!

  """
  Byline text of the feedback form.
  """
  byline: FormattedString

  """
  The current industry the store is classified as.
  """
  currentIndustry: String!

  """
  Placeholder text for custom input.
  """
  inputPlaceholder: String!

  """
  Message text of the feedback form.
  """
  message: FormattedString

  """
  A complete list of industries.
  """
  options: [String!]! @deprecated(reason: "Use `suggestions` instead.")

  """
  Label for the submission button.
  """
  submitTitle: String!

  """
  Message text for submitted feedback.
  """
  submittedMessage: FormattedString!

  """
  A list of suggested industries for guiding user input.
  """
  suggestions: [String!]!

  """
  Title for the feedback form.
  """
  title: FormattedString!

  """
  A list of industries the user can select from when sending feedback about the Industry.
  """
  topOptions: [String!]!

  """
  A list indicating which of the `topOptions` are pre-selected.
  """
  topOptionsSelected: [Boolean!]!
}

"""
A metric used for comparison to another value.
"""
type HomeComparisonMetric {
  """
  An additional description of the value.
  """
  hint: String

  """
  The type of the metric's value. Can be used to style the value.
  """
  metricType: HomeMetricType!

  """
  Description of the value.
  """
  title: String!

  """
  Value used in comparison.
  """
  value: Float!
}

"""
Card containing an image and a link to useful content like an article or blog.
"""
type HomeContentCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The humanized category for the card content (Facebook marketing, web design, copywriting).
  """
  category: String!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  The text for the header of the card.
  """
  title: FormattedString!

  """
  The URL location of the content.
  """
  url: URL!
}

"""
Specifies which file type a requested image should have.
"""
enum HomeContentType {
  PNG
  SVG
}

"""
Additional information for the list of Home Cards. Can be used to present a
header above the feed and pull featured cards into that header.
"""
type HomeFeedTheme {
  """
  A timestamp to help displaying a countdown. If null then no countdown should be displayed.
  """
  countdownEndsAt: DateTime

  """
  Text for a button to allow a user to opt out of the tag of the theme. If null then no button should be displayed.
  """
  dismissButtonMessage: String

  """
  A message displayed after the user dismisses the tag of the theme.
  """
  dismissMessage: String

  """
  A title displayed above the dismiss message after the user dismisses the tag of the theme.
  """
  dismissTitle: String

  """
  Message to display when there are no cards in the spotlight section.
  """
  emptyStateMessage: String!

  """
  A label displayed above a text area for the user to provide free text feedback.
  """
  feedbackMessage: String

  """
  More detailed information about the feed theme.
  """
  message: FormattedString!

  """
  Additional tab used with theme in metrics section.
  """
  occasionTab: HomeFeedThemeTab

  """
  Heading for rest of feed section.
  """
  restOfFeedHeading: HomeFeedThemeSectionHeading!

  """
  Heading for spotlight section.
  """
  spotlightHeading: HomeFeedThemeSectionHeading!

  """
  The tag name this theme is associated with. Use as argument for HomeTagInteraction.
  """
  tagName: String!

  """
  Text for the header of the feed theme.
  """
  title: FormattedString!
}

"""
Header and byline combination to be shown above a part of the feed.
"""
type HomeFeedThemeSectionHeading {
  """
  A message to be paired with header appearing above a part of the feed.
  """
  byline: FormattedString!

  """
  A header displayed above a part of the feed.
  """
  header: FormattedString!
}

"""
Parameters to be used in additional tabs in the metrics section.
"""
type HomeFeedThemeTab {
  """
  DateTime until which the metrics should be queried.
  """
  endTime: DateTime!

  """
  DateTime since which the metrics should be queried.
  """
  startTime: DateTime!

  """
  Title used for the tab.
  """
  title: String!
}

"""
Breakdown stats for the tracking stage of a goal.
"""
type HomeGoalBreakdown {
  """
  List of breakdown rows.
  """
  rows: [HomeGoalBreakdownRow!]!

  """
  Title for the breakdown set.
  """
  title: String!
}

"""
A single row of `HomeGoalBreakdown`.
"""
type HomeGoalBreakdownRow {
  """
  Description for the breakdown row.
  """
  description: String!

  """
  Icon for the breakdown row.
  """
  icon(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image!
}

"""
Card for the final stage of a goal.
"""
type HomeGoalCompleteCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  Short call-out text.
  """
  callout: String

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  Additional information about the status of the goal.
  """
  description: FormattedString!

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  The name of the goal the card is referencing.
  """
  goalName: String!

  """
  Indicates the final status of the goal.
  """
  goalStatus: HomeGoalCompleteCardGoalStatus!

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Comparison metrics between the before and after state of the goal.
  """
  metrics: HomeGoalMetrics!

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  List of tactics associated with the goal of the card.
  """
  tactics: [HomeTactic!]!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
Indicates the final status of a goal.
"""
enum HomeGoalCompleteCardGoalStatus {
  """
  Indicates that the target of the goal was not achieved.
  """
  NEGATIVE

  """
  Indicates that it cannot be determined with statistical significance if the goal was achieved.
  """
  NEUTRAL

  """
  Indicates that the target of the goal was achieved.
  """
  POSITIVE
}

"""
Card for the introductory stage of a goal.
"""
type HomeGoalIntroCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  The name of the goal the card is introducing.
  """
  goalName: String!

  """
  String identifier for the Polaris icon to be used with the card.
  """
  iconKey: String!

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  List of tactics associated with the goal of the card.
  """
  tactics: [HomeTactic!]!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
Encapsulation of a set of metrics being compared to each other.
"""
type HomeGoalMetrics {
  """
  The metric representing the after state.
  """
  after: HomeGoalMetricsItem!

  """
  The metric representing the before state.
  """
  before: HomeGoalMetricsItem!

  """
  Message to display when data isn’t available.
  """
  emptyStateMessage: String!

  """
  Name for the metrics section.
  """
  title: String!
}

"""
A single metric with its related context.
"""
type HomeGoalMetricsItem {
  """
  The label for this element of the metric.
  """
  label: String!

  """
  The tooltip for this element of the metric.
  """
  tooltip: HomeGoalMetricsItemTooltip

  """
  The value for this element of the metric.
  """
  value: String
}

"""
The tooltip used for `HomeGoalMetricsItem` values.
"""
type HomeGoalMetricsItemTooltip {
  """
  The date range the value was calculated for.
  """
  dateRange: String!

  """
  List of elements in this tooltip.
  """
  elements: [HomeGoalMetricsItemTooltipElement!]!
}

"""
An element in the tooltip.
"""
type HomeGoalMetricsItemTooltipElement {
  """
  Description for this element.
  """
  description: String!

  """
  Icon for the element.
  """
  icon: Image!

  """
  Key for the Polaris icon for this element.
  """
  iconKey: String!
}

"""
Card for the progress stage of a goal.
"""
type HomeGoalProgressCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  The name of the goal the card is introducing.
  """
  goalName: String!

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Comparison metrics between the before and after state of the goal.
  """
  metrics: HomeGoalMetrics!

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  List of tactics associated with the goal of the card.
  """
  tactics: [HomeTactic!]!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
Card for the tracking stage of a goal.
"""
type HomeGoalTrackingCard implements HomeCard {
  """
  Affirmation for merchants when they are on track to meet the goal.
  """
  affirmation: HomeGoalTrackingCardAffirmation

  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  Breakdown statistics for the goal.
  """
  breakdown: HomeGoalBreakdown!

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  The name of the goal the card is introducing.
  """
  goalName: String!

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Comparison metrics between the before and after state of the goal.
  """
  metrics: HomeGoalMetrics!

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  List of tactics associated with the goal of the card.
  """
  tactics: [HomeTactic!]!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
An affirmative message for merchants on track to meet their goal.
"""
type HomeGoalTrackingCardAffirmation {
  """
  Icon to go along with the message.
  """
  icon(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image!

  """
  Short affirmative message.
  """
  message: String!
}

"""
Personalized greeting message for the merchant.
"""
type HomeGreeting {
  """
  Personalized message for the greeting.
  """
  body: String!

  """
  Personalized title for the greeting.
  """
  heading: String!
}

"""
Supported image types.
"""
enum HomeImageType {
  CUSTOMER
  DEFAULT
  LOGO
  PRODUCT
}

"""
Card with data to plot a multi-series line graph.
"""
type HomeLineGraphCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  Information for each data point to display on a line graph.
  """
  lineGraphData: [HomeLineGraphData!]!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
All required data to display a single series in a line graph.
"""
type HomeLineGraphData {
  """
  Color identifier of the line. For example, primary_color.
  """
  color: String!

  """
  X values representing the line.
  """
  data: [Int!]!

  """
  Style modifier of the line. For example, solid.
  """
  lineStyle: String!

  """
  Line label text for graph’s legend.
  """
  title: String!

  """
  Whether to display labels for the graph on the x-axis.
  """
  useEndLabels: Boolean! @deprecated(reason: "End labels are no longer part of the new graph designs.")
}

"""
Specifies the type of value the metric is. Used for styling the value.
"""
enum HomeMetricType {
  """
  The "black" UI metric type for home cards.
  """
  BLACK

  """
  The "negative" UI metric type for home cards.
  """
  NEGATIVE

  """
  The "positive" UI metric type for home cards.
  """
  POSITIVE

  """
  The "primary" UI metric type for home cards.
  """
  PRIMARY

  """
  The "secondary" UI metric type for home cards.
  """
  SECONDARY
}

"""
Home item to display a notification.
"""
type HomeNotification {
  """
  A single interactable button for the notification.
  """
  button: HomeButton!

  """
  Message being displayed after dismissing the notification.
  """
  dismissMessage: FormattedString

  """
  Indicates if the notification can be dismissed or not.
  """
  dismissible: Boolean!

  """
  Unique identifier for use in analytics.
  """
  id: ID!

  """
  A more detailed description of the notification.
  """
  message: FormattedString

  """
  Indicates severity of the notification for styling and grouping.
  """
  severity: HomeNotificationSeverity!

  """
  Text for the header of the notification.
  """
  title: FormattedString!
}

"""
Indicates notification severity level, from low severity events such as missing
bank information to high severity events such as a chargeback.
"""
enum HomeNotificationSeverity {
  ALERT
  INFO @deprecated(reason: "info is no longer supported, use warning instead")
  POSITIVE @deprecated(reason: "positive is no longer in use, you may remove support for it")
  TRIAL
  WARNING
}

"""
Card showing progress towards a target.
"""
type HomeProgressCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The value `currentValue` is being compared to.
  """
  comparisonValue: Int!

  """
  The label for the `comparisonValue` metric.
  """
  comparisonValueLabel: String!

  """
  Current point of progress towards target. Cannot be more than the `targetValue`.
  """
  currentValue: Int!

  """
  The label for the `currentValue` metric.
  """
  currentValueLabel: String!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  Details about the target being tracked.
  """
  description: String!

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  The value needed to meet the target.
  """
  targetValue: Int!

  """
  The label for the `targetValue` metric.
  """
  targetValueLabel: String! @deprecated(reason: "The `targetValue` metric no longer has an associated label. Please look at `comparisonValueLabel` instead. This field will return the same value as `comparisonValueLabel`.")

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
A card with text, image, and one or more buttons.
"""
type HomeSimpleCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
Card containing a description and multiple rows of tabular data.
"""
type HomeTableCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  Headings for each column of the table.
  """
  headings: [String!]!

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  List of rows and values to display in the table body.
  """
  tableRows: [HomeTableRow!]!

  """
  The text for the header of the card.
  """
  title: FormattedString!
}

"""
Single row of data in a HomeTableCard.
"""
type HomeTableRow {
  """
  A thumbnail image to show at the start of the row.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  A URL to open when the row has been clicked.
  """
  url: URL

  """
  The list of values for each cell. Defines as many cell values as there are headings in the HomeTableCard element.
  """
  values: [FormattedString!]!
}

"""
Group of related suggestions for achieving a goal.
"""
type HomeTactic {
  """
  List of actions in this tactic.
  """
  actions: [HomeActionCard!]!

  """
  Short description of the tactic.
  """
  byline: String

  """
  Icon for the tactic.
  """
  icon: Image!

  """
  String identifier for the Polaris icon for the tactic.
  """
  iconKey: String!

  """
  The ID for the tactic.
  """
  id: ID!

  """
  Title for the tactic.
  """
  title: String!
}

"""
A HomeTask represents an actionable task for the merchant to complete.
"""
type HomeTask {
  """
  A badge which contains a title and status type.
  """
  badge: HomeTaskBadge

  """
  Unique name used for analytics and identifying the task.
  """
  handle: String!

  """
  Image of the tasks icon.
  """
  icon(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image!

  """
  The ID of the task. A unique identifier used for analytics.
  """
  id: ID!

  """
  Title text for the task.
  """
  title: FormattedString!

  """
  URL to the location of the actionable task.
  """
  url: URL!
}

"""
A badge which contains a title and status type.
"""
type HomeTaskBadge {
  """
  The status type of the badge.
  """
  status: HomeTaskBadgeStatus!

  """
  Title for the badge.
  """
  title: String!
}

"""
The status type for the HomeTaskBadge.
"""
enum HomeTaskBadgeStatus {
  ATTENTION
  INFO
  SUCCESS
  WARNING
}

"""
Card containing a video and description.
"""
type HomeVideoCard implements HomeCard {
  """
  The badge that applies to the card.
  """
  badge: HomeBadge

  """
  A list of buttons displayed on the card.
  """
  buttons: [HomeButton!]!

  """
  The time window that the contents of the card applies to.
  """
  dateRange: FormattedString

  """
  A message displayed when the user dismisses the card.
  """
  dismissMessage: String!

  """
  A title displayed when the user dismisses the card.
  """
  dismissTitle: String!

  """
  Whether this card should be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead.")

  """
  ID of the card.
  """
  id: ID!

  """
  An image displayed on the card.
  """
  image(
    """
    Converts image file type from SVG to PNG, or leaves as original SVG.
    """
    contentType: HomeContentType

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` on `Image.transformedSrc` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on `Image.transformedSrc` instead.")
  ): Image

  """
  The semantic type of a Home Card image. This type can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """
  The view template to use when rendering the card.
  """
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """
  Whether this card can be voted on.
  """
  showVote: Boolean!

  """
  Whether this card can be dismissed temporarily.
  """
  snoozable: Boolean!

  """
  A message displayed when the user snoozes the card.
  """
  snoozeMessage: String!

  """
  A title displayed when the user snoozes the card.
  """
  snoozeTitle: String!

  """
  Whether this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """
  The text for the header of the card.
  """
  title: FormattedString!

  """
  The YouTube URL of the video.
  """
  video: URL!
}

"""
Represents an image resource.
"""
type Image implements HasMetafields {
  """
  A word or phrase to share the nature or contents of an image.
  """
  altText: String

  """
  The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  height: Int

  """
  A unique identifier for the image.
  """
  id: ID

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  The location of the original image as a URL.

  If there are any existing transformations in the original source URL, they will remain and not be stripped.
  """
  originalSrc: URL! @deprecated(reason: "Use `url` instead.")

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  The location of the image as a URL.
  """
  src: URL! @deprecated(reason: "Use `url` instead.")

  """
  The location of the transformed image as a URL.

  All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
  Otherwise any transformations which an image type does not support will be ignored.
  """
  transformedSrc(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion

    """
    Image height in pixels between 1 and 5760.
    """
    maxHeight: Int

    """
    Image width in pixels between 1 and 5760.
    """
    maxWidth: Int

    """
    Best effort conversion of image into content type (SVG -> PNG, Anything -> JPG, Anything -> WEBP are supported).
    """
    preferredContentType: ImageContentType

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int
  ): URL! @deprecated(reason: "Use `url(transform:)` instead")

  """
  The location of the image as a URL.

  If no transform options are specified, then the original image will be preserved including any pre-applied transforms.

  All transformation options are considered "best-effort". Any transformation
  that the original image type doesn't support will be ignored.

  If you need multiple variations of the same image, then you can use [GraphQL
  aliases](https://graphql.org/learn/queries/#aliases).
  """
  url(
    """
    A set of options to transform the original image.
    """
    transform: ImageTransformInput
  ): URL!

  """
  The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  width: Int
}

"""
An auto-generated type for paginating through multiple Images.
"""
type ImageConnection {
  """
  A list of edges.
  """
  edges: [ImageEdge!]!

  """
  A list of the nodes contained in ImageEdge.
  """
  nodes: [Image!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
List of supported image content types.
"""
enum ImageContentType {
  """
  A JPG image.
  """
  JPG

  """
  A PNG image.
  """
  PNG

  """
  A WEBP image.
  """
  WEBP
}

"""
An auto-generated type which holds one Image and a cursor during pagination.
"""
type ImageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ImageEdge.
  """
  node: Image!
}

"""
The available options for transforming an image.

All transformation options are considered best effort. Any transformation that
the original image type doesn't support will be ignored.
"""
input ImageTransformInput {
  """
  The region of the image to remain after cropping.
  Must be used in conjunction with the `maxWidth` and/or `maxHeight` fields,
  where the `maxWidth` and `maxHeight` aren't equal.
  The `crop` argument should coincide with the smaller value. A smaller `maxWidth` indicates a `LEFT` or `RIGHT` crop, while
  a smaller `maxHeight` indicates a `TOP` or `BOTTOM` crop. For example, `{
  maxWidth: 5, maxHeight: 10, crop: LEFT }` will result
  in an image with a width of 5 and height of 10, where the right side of the image is removed.
  """
  crop: CropRegion

  """
  Image height in pixels between 1 and 5760.
  """
  maxHeight: Int

  """
  Image width in pixels between 1 and 5760.
  """
  maxWidth: Int

  """
  Convert the source image into the preferred content type.
  Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
  """
  preferredContentType: ImageContentType

  """
  Image size multiplier for high-resolution retina displays. Must be within 1..3.
  """
  scale: Int
}

"""
Represents whether the duties and international taxes are paid at the time of purchase or to be paid upon delivery.
"""
type IncotermInformation {
  """
  The reason why the incoterm was used for the order.
  """
  reason: IncotermReason
}

"""
A string representing the reason for an incoterm configuration on an order.
"""
enum IncotermReason {
  """
  The incoterm was selected by the buyer during checkout.
  """
  BUYER_CONFIGURED

  """
  The incoterm followed its default value of DDP, no configuration was specified.
  """
  DEFAULT_DUTIES_AND_TAXES

  """
  Duties and import taxes are included in the product price.
  """
  DUTY_AND_TAX_INCLUSIVE_PRICING

  """
  Duties are included in the product price.
  """
  DUTY_INCLUSIVE_PRICING

  """
  An error occured while attempting to calculate duties and taxes.
  """
  ERROR_OCCURED

  """
  The incoterm was configured by Flow.
  """
  FLOW_CONFIGURED

  """
  The incoterm was determined by the Low Value Goods Tax fallback.
  """
  LOW_VALUE_GOODS_TAXES_APPLY

  """
  The incoterm is the result of a merchant configuration.
  """
  PRE_CONFIGURED

  """
  The destination country is unsupported.
  """
  UNSUPPORTED @deprecated(reason: "Use UNSUPPORTED_REGION instead")

  """
  The destination country is unsupported.
  """
  UNSUPPORTED_REGION
}

"""
Represents the metadata that Shopify's internal algorithms have inferred about the product.
"""
type InferredProductMetadata {
  """
  The inferred standard product type for the product.
  """
  standardProductType: StandardProductType
}

"""
Label and URL for an action.
"""
type InsightAction {
  """
  ID of this action.
  """
  id: ID!

  """
  The text associated with the action.
  """
  text: String!

  """
  A type that describes how to take this action.
  """
  type: InsightActionType!

  """
  The URL to visit.
  """
  url: URL!
}

"""
A type of Action.
"""
enum InsightActionType {
  """
  Visit a web location.
  """
  VISIT
}

"""
The period in which the shop insights were gathered.
"""
type InsightDateRange {
  """
  End date of insight gathering period.
  """
  endDate: DateTime!

  """
  Start date of insight gathering period.
  """
  startDate: DateTime!
}

"""
A group of insights for a range of time.
"""
interface InsightGroup {
  """
  The period in which the shop insights were gathered.
  """
  insightDateRange: InsightDateRange!
}

"""
Insight aggregation period.
"""
enum InsightPeriod {
  """
  The latest 7 day period.
  """
  SEVEN_DAYS

  """
  The latest 30 day period.
  """
  THIRTY_DAYS
}

"""
Metrics and product information for an individual product.
"""
interface InsightProductInfoMetric {
  """
  A product.
  """
  product: Product!
}

"""
An item that has suggestions.
"""
interface InsightSuggestible {
  """
  A list of suggestions the user can take.
  """
  suggestions: [InsightSuggestion!]!
}

"""
A suggestion.
"""
type InsightSuggestion {
  """
  Actions associated with this suggestion.
  """
  actions: [InsightAction!]!

  """
  Long-form content.
  """
  content: FormattedString!

  """
  A Polaris icon key.
  """
  iconKey: String!

  """
  ID of this suggestion.
  """
  id: ID!

  """
  Suggestion title.
  """
  title: FormattedString!

  """
  A type that characterizes what kind of suggestion this is.
  """
  type: InsightSuggestionType!
}

"""
A type of Suggestion.
"""
enum InsightSuggestionType {
  """
  Represents a suggestion with actionable links.
  """
  ACTION

  """
  Represents a suggestion with reading material.
  """
  RESOURCE
}

"""
Insights for this shop.
"""
type Insights {
  """
  Product performance insights for this shop.
  """
  productInsights(
    """
    The aggregation period for this insight.
    """
    period: InsightPeriod!
  ): ProductInsights
}

"""
A refund that will be created upon completing an exchange.
"""
type IntendedExchangeRefund {
  """
  Amount for the exchange refund.
  """
  amount: MoneyV2!

  """
  Note associated with the exchange refund.
  """
  note: String

  """
  Refund line times for the exchange refund.
  """
  refundLineItems: [RefundLineItem!]!

  """
  Shipping refund amount for the exchange refund.
  """
  shipping: ShippingRefund!

  """
  Subtotal for the exchange refund.
  """
  subtotal: MoneyV2!

  """
  Total taxes for the exchange refund.
  """
  totalTaxes: MoneyV2!
}

"""
Represents a group of adjustments made as part of the same operation.
"""
type InventoryAdjustmentGroup implements Node {
  """
  The app that triggered the inventory event, if one exists.
  """
  app: App

  """
  The set of inventory quantity changes that occurred in the inventory event.
  """
  changes(
    """
    The IDs of the inventory items to filter changes by.
    """
    inventoryItemIds: [ID!]

    """
    The IDs of the locations to filter changes by.
    """
    locationIds: [ID!]

    """
    The names of the requested inventory quantities.
    """
    quantityNames: [String!]
  ): [InventoryChange!]!

  """
  The date and time the inventory adjustment group was created.
  """
  createdAt: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The reason for the group of adjustments.
  """
  reason: String!

  """
  The reference document URI for the changes. Denotes what is causing the change.
  """
  referenceDocumentUri: String

  """
  The staff member associated with the inventory event.
  """
  staffMember: StaffMember
}

"""
Represents a change in an inventory quantity of an inventory item at a location.
"""
type InventoryChange {
  """
  The amount by which the inventory quantity was changed.
  """
  delta: Int!

  """
  The inventory item associated with this inventory change.
  """
  item: InventoryItem

  """
  The ledger document URI for the change. Denotes who the change is applied to.
  """
  ledgerDocumentUri: String

  """
  The location associated with this inventory change.
  """
  location: Location

  """
  The name of the inventory quantity that was changed.
  """
  name: String!

  """
  The quantity of named inventory after the change.
  """
  quantityAfterChange: Int
}

"""
Represents the goods available to be shipped to a customer.
It holds essential information about the goods, including SKU and whether it is tracked.
"""
type InventoryItem implements LegacyInteroperability & Node {
  """
  The ISO 3166-1 alpha-2 country code of where the item originated from.
  """
  countryCodeOfOrigin: CountryCode

  """
  A list of country specific harmonized system codes.
  """
  countryHarmonizedSystemCodes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CountryHarmonizedSystemCodeConnection!

  """
  The date and time when the inventory item was created.
  """
  createdAt: DateTime!

  """
  The number of inventory items that share the same SKU with this item.
  """
  duplicateSkuCount: Int!

  """
  The harmonized system code of the item.
  """
  harmonizedSystemCode: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The URL that points to the inventory history for the item.
  """
  inventoryHistoryUrl: URL

  """
  The inventory item's quantities at the specified location.
  """
  inventoryLevel(
    """
    ID of the location for which the inventory level is requested.
    """
    locationId: ID!
  ): InventoryLevel

  """
  A list of the inventory item's quantities for each location that the inventory item can be stocked at.
  """
  inventoryLevels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InventoryLevelConnection!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The number of locations where this inventory item is stocked.
  """
  locationsCount: Int!

  """
  The ISO 3166-2 alpha-2 province code of where the item originated from.
  """
  provinceCodeOfOrigin: String

  """
  Whether the inventory item requires shipping.
  """
  requiresShipping: Boolean!

  """
  Inventory item SKU.
  """
  sku: String

  """
  Whether inventory levels are tracked for the item.
  """
  tracked: Boolean!

  """
  Whether the value of the `tracked` field for the inventory item can be changed.
  """
  trackedEditable: EditableProperty!

  """
  Unit cost associated with the inventory item. Note: the user must have "View
  product costs" permission granted in order to access this field once product
  granular permissions are enabled.
  """
  unitCost: MoneyV2

  """
  The date and time when the inventory item was updated.
  """
  updatedAt: DateTime!

  """
  The variant that owns this inventory item.
  """
  variant: ProductVariant!
}

"""
An auto-generated type for paginating through multiple InventoryItems.
"""
type InventoryItemConnection {
  """
  A list of edges.
  """
  edges: [InventoryItemEdge!]!

  """
  A list of the nodes contained in InventoryItemEdge.
  """
  nodes: [InventoryItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one InventoryItem and a cursor during pagination.
"""
type InventoryItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of InventoryItemEdge.
  """
  node: InventoryItem!
}

"""
The quantities of an inventory item that are related to a specific location.
"""
type InventoryLevel implements Node {
  """
  Active transfer line items to the inventory level.
  """
  activeTransfers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InventoryLevelTransferLineItemConnection!

  """
  The quantity of inventory items that are available at the inventory level's associated location.
  """
  available: Int!

  """
  Whether the inventory items associated with the inventory level can be deactivated.
  """
  canDeactivate: Boolean!

  """
  The date and time when the inventory level was created.
  """
  createdAt: DateTime!

  """
  Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated.
  """
  deactivationAlert: String

  """
  Describes, in HTML with embedded URLs, either the impact of deactivating the
  inventory level or why the inventory level can't be deactivated.
  """
  deactivationAlertHtml: FormattedString

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The quantity of inventory items that are going to the inventory level's associated location.
  """
  incoming: Int!

  """
  Inventory item associated with the inventory level.
  """
  item: InventoryItem!

  """
  The location associated with the inventory level.
  """
  location: Location!

  """
  Quantities for the requested names.
  """
  quantities(
    """
    The names of the requested inventory quantities.
    """
    names: [String!]!
  ): [InventoryQuantity!]!

  """
  The date and time when the inventory level was updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple InventoryLevels.
"""
type InventoryLevelConnection {
  """
  A list of edges.
  """
  edges: [InventoryLevelEdge!]!

  """
  A list of the nodes contained in InventoryLevelEdge.
  """
  nodes: [InventoryLevel!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one InventoryLevel and a cursor during pagination.
"""
type InventoryLevelEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of InventoryLevelEdge.
  """
  node: InventoryLevel!
}

"""
Represents active inventory transfer line items with this inventory level as destination.
"""
type InventoryLevelTransferLineItem implements Node {
  """
  Accepted quantity.
  """
  acceptedQuantity: Int!

  """
  Canceled quantity.
  """
  canceledQuantity: Int!

  """
  Expected arrival date of inventory transfer.
  """
  expectedArrival: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Received quantity.
  """
  receivedQuantity: Int!

  """
  Rejected quantity.
  """
  rejectedQuantity: Int!

  """
  Total quantity.
  """
  totalQuantity: Int!

  """
  Name of inventory transfer.
  """
  transferName: String!

  """
  URL for inventory transfer web page.
  """
  transferUrl: URL!
}

"""
An auto-generated type for paginating through multiple InventoryLevelTransferLineItems.
"""
type InventoryLevelTransferLineItemConnection {
  """
  A list of edges.
  """
  edges: [InventoryLevelTransferLineItemEdge!]!

  """
  A list of the nodes contained in InventoryLevelTransferLineItemEdge.
  """
  nodes: [InventoryLevelTransferLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one InventoryLevelTransferLineItem and a cursor during pagination.
"""
type InventoryLevelTransferLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of InventoryLevelTransferLineItemEdge.
  """
  node: InventoryLevelTransferLineItem!
}

"""
Represents a quantity of an inventory item at a specific location, for a specific name.
"""
type InventoryQuantity {
  """
  The name that identifies the inventory quantity.
  """
  name: String!

  """
  The quantity for the quantity name.
  """
  quantity: Int!

  """
  When the quantity was last updated.
  """
  updatedAt: DateTime
}

"""
A [JSON](https://www.json.org/json-en.html) object.

Example value:
`{
  "product": {
    "id": "gid://shopify/Product/1346443542550",
    "title": "White T-shirt",
    "options": [{
      "name": "Size",
      "values": ["M", "L"]
    }]
  }
}`
"""
scalar JSON

"""
A job corresponds to some long running task that the client should poll for status.
"""
interface JobResult {
  """
  This indicates if the job is still queued or has been run.
  """
  done: Boolean!

  """
  A globally-unique identifier that's returned when running an asynchronous mutation.
  """
  id: ID!
}

"""
Shipment options for a shipping label.
"""
type LabelShipmentOption {
  """
  Human readable option name.
  """
  name: String!
}

"""
An auto-generated type for paginating through multiple LabelShipmentOptions.
"""
type LabelShipmentOptionConnection {
  """
  A list of edges.
  """
  edges: [LabelShipmentOptionEdge!]!

  """
  A list of the nodes contained in LabelShipmentOptionEdge.
  """
  nodes: [LabelShipmentOption!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one LabelShipmentOption and a cursor during pagination.
"""
type LabelShipmentOptionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of LabelShipmentOptionEdge.
  """
  node: LabelShipmentOption!
}

"""
Interoperability metadata for types that directly correspond to a REST Admin API resource.
For example, on the Product type, LegacyInteroperability returns metadata for
the corresponding [Product
object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the
REST Admin API.
"""
interface LegacyInteroperability {
  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!
}

"""
Units of measurement for length.
"""
enum LengthUnit {
  """
  100 centimeters equals 1 meter.
  """
  CENTIMETERS

  """
  Imperial system unit of length.
  """
  FEET

  """
  12 inches equals 1 foot.
  """
  INCHES

  """
  Metric system unit of length.
  """
  METERS

  """
  1000 millimeters equals 1 meter.
  """
  MILLIMETERS

  """
  1 yard equals 3 feet.
  """
  YARDS
}

"""
The possible states of an app extension. The default state is ENABLED.
"""
enum LifecycleState {
  """
  The lifecycle state DISABLED.
  """
  DISABLED

  """
  The lifecycle state ENABLED.
  """
  ENABLED

  """
  The lifecycle state HIDDEN.
  """
  HIDDEN
}

"""
The total number of pending orders on a shop if less then a maximum, or that maximum.
The atMax field indicates when this maximum has been reached.
"""
type LimitedPendingOrderCount {
  """
  This is set when the number of pending orders has reached the maximum.
  """
  atMax: Boolean!

  """
  The number of pendings orders on the shop.
  Limited to a maximum of 10000.
  """
  count: Int!
}

"""
Represents individual products and quantities purchased in the associated order.
"""
type LineItem implements Node {
  """
  Whether the line item can be restocked.
  """
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead.")

  """
  The subscription contract associated with this line item.
  """
  contract: SubscriptionContract

  """
  The line item's quantity, minus the removed quantity.
  """
  currentQuantity: Int!

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [DiscountAllocation!]!

  """
  The total line price after discounts are applied, in shop currency.
  """
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead.")

  """
  The total line price after discounts are applied, in shop and presentment currencies.
  """
  discountedTotalSet: MoneyBag!

  """
  The approximate split price of a line item unit, in shop currency. This value
  doesn't include discounts applied to the entire order.
  """
  discountedUnitPrice: Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead.")

  """
  The approximate split price of a line item unit, in shop and presentment
  currencies. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPriceSet: MoneyBag!

  """
  The duties associated with the line item.
  """
  duties: [Duty!]!

  """
  The total number of units to fulfill.
  """
  fulfillableQuantity: Int! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead.")

  """
  The service provider that fulfills the line item.

  Deleted fulfillment services will return null.
  """
  fulfillmentService: FulfillmentService @deprecated(reason: "Multi-managed inventory introduced a [breaking change](https://shopify.dev/api/release-notes/2022-07#shipping-and-fulfillment) to this field, therefore this field will no longer be supported. Fulfillment services will all be opted into SKU sharing in 2023-04. Use [FulfillmentOrder#assignedLocation](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder#field-fulfillmentorder-assignedlocation) instead.")

  """
  The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
  'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
  """
  fulfillmentStatus: String! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead")

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The image associated to the line item's variant.
  """
  image(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  Whether the line item can be edited or not.
  """
  merchantEditable: Boolean!

  """
  The name of the product.
  """
  name: String!

  """
  The total number of units that can't be fulfilled.
          For example, if items have been refunded, or the item is not something that can be fulfilled,
          like a tip.Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder)
  object for more fulfillment details.
  """
  nonFulfillableQuantity: Int!

  """
  The total price without discounts applied, in shop currency.
  This value is based on the unit price of the variant x quantity.
  """
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead.")

  """
  The total price in shop and presentment currencies, without discounts applied.
  This value is based on the unit price of the variant x quantity.
  """
  originalTotalSet: MoneyBag!

  """
  The variant unit price without discounts applied, in shop currency.
  """
  originalUnitPrice: Money! @deprecated(reason: "Use `originalUnitPriceSet` instead.")

  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: MoneyBag!

  """
  The Product object associated with this line item's variant.
  """
  product: Product

  """
  The number of variant units ordered.
  """
  quantity: Int!

  """
  The line item's quantity, minus the removed quantity.
  """
  refundableQuantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  Whether the line item can be restocked.
  """
  restockable: Boolean!

  """
  The selling plan details associated with the line item.
  """
  sellingPlan: LineItemSellingPlan

  """
  The variant SKU number.
  """
  sku: String

  """
  Staff attributed to the initial sale of the line item.
  """
  staffMember: StaffMember

  """
  The taxes charged for this line item.
  """
  taxLines(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [TaxLine!]!

  """
  Whether the variant is taxable.
  """
  taxable: Boolean!

  """
  The payment gateway used to process the transaction for the tip line item.
  """
  tipPaymentGateway: String

  """
  The name of the credit card brand (if available), or the gateway, for the tip line item transaction.
  """
  tipPaymentMethod: String

  """
  The title of the product.
  """
  title: String!

  """
  The total amount of the discount allocated to the line item in the shop currency.
  """
  totalDiscount: Money! @deprecated(reason: "Use `totalDiscountSet` instead.")

  """
  The total amount of the discount that's allocated to the line item, in the
  shop and presentment currencies. This field must be explicitly set using draft
  orders, Shopify scripts, or the API.
  """
  totalDiscountSet: MoneyBag!

  """
  The total discounted value of unfulfilled units, in shop currency.
  """
  unfulfilledDiscountedTotal: Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead.")

  """
  The total discounted value of unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledDiscountedTotalSet: MoneyBag!

  """
  The total price, without any discounts applied. This value is based on the
  unit price of the variant x quantity of all unfulfilled units, in shop currency.
  """
  unfulfilledOriginalTotal: Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead.")

  """
  The total price, without any discounts applied. This value is based on the
  unit price of the variant x quantity of all unfulfilled units, in shop and
  presentment currencies.
  """
  unfulfilledOriginalTotalSet: MoneyBag!

  """
  The number of units not yet fulfilled.
  """
  unfulfilledQuantity: Int!

  """
  The Variant object associated with this line item.
  """
  variant: ProductVariant

  """
  The name of the variant.
  """
  variantTitle: String

  """
  The name of the vendor who made the variant.
  """
  vendor: String
}

"""
An auto-generated type for paginating through multiple LineItems.
"""
type LineItemConnection {
  """
  A list of edges.
  """
  edges: [LineItemEdge!]!

  """
  A list of the nodes contained in LineItemEdge.
  """
  nodes: [LineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one LineItem and a cursor during pagination.
"""
type LineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of LineItemEdge.
  """
  node: LineItem!
}

"""
Represents a single line item on an order.
"""
type LineItemMutable implements Node {
  """
  Whether the line item can be restocked.
  """
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead.")

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [DiscountAllocation!]!

  """
  The total line price after discounts are applied, in shop currency.
  """
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead.")

  """
  The total line price after discounts are applied, in shop and presentment currencies.
  """
  discountedTotalSet: MoneyBag!

  """
  The approximate split price of a line item unit, in shop currency. This value
  doesn't include discounts applied to the entire order.
  """
  discountedUnitPrice: Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead.")

  """
  The approximate split price of a line item unit, in shop and presentment
  currencies. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPriceSet: MoneyBag!

  """
  The total number of units to fulfill.
  """
  fulfillableQuantity: Int!

  """
  The service provider that fulfills the line item.

  Deleted fulfillment services will return null.
  """
  fulfillmentService: FulfillmentService

  """
  The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
  'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
  """
  fulfillmentStatus: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The image associated to the line item's variant.
  """
  image(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  Whether the line item can be edited or not.
  """
  merchantEditable: Boolean!

  """
  The name of the product.
  """
  name: String!

  """
  The total number of units that can't be fulfilled. For example, if items have
  been refunded, or the item is not something that can be fulfilled, like a tip.
  """
  nonFulfillableQuantity: Int!

  """
  The total price without any discounts applied, in shop currency. ""This value
  is based on the unit price of the variant x quantity.
  """
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead.")

  """
  The total price in shop and presentment currencies, without discounts applied.
  This value is based on the unit price of the variant x quantity.
  """
  originalTotalSet: MoneyBag!

  """
  The variant unit price without discounts applied, in shop currency.
  """
  originalUnitPrice: Money! @deprecated(reason: "Use `originalUnitPriceSet` instead.")

  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: MoneyBag!

  """
  The Product object associated with this line item's variant.
  """
  product: Product

  """
  The number of variant units ordered.
  """
  quantity: Int!

  """
  The line item's quantity, minus the removed quantity.
  """
  refundableQuantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  Whether the line item can be restocked.
  """
  restockable: Boolean!

  """
  The variant SKU number.
  """
  sku: String

  """
  Staff attributed to the initial sale of the line item.
  """
  staffMember: StaffMember

  """
  The TaxLine object connected to this line item.
  """
  taxLines(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [TaxLine!]!

  """
  Whether the variant is taxable.
  """
  taxable: Boolean!

  """
  The payment gateway used to process the transaction for the tip line item.
  """
  tipPaymentGateway: String

  """
  The name of the credit card brand (if available), or the gateway, for the tip line item transaction.
  """
  tipPaymentMethod: String

  """
  The title of the product.
  """
  title: String!

  """
  The total amount of the discount allocated to the line item in the shop
  currency. This field must be explicitly set using draft orders, Shopify
  scripts, or the API. Instead of using this field, Shopify recommends using
  `discountAllocations`, which provides the same information.
  """
  totalDiscount: Money! @deprecated(reason: "Use `totalDiscountSet` instead.")

  """
  The total amount of the discount allocated to the line item in the presentment
  currency. This field must be explicitly set using draft orders, Shopify
  scripts, or the API. Instead of using this field, Shopify recommends using
  `discountAllocations`, which provides the same information.
  """
  totalDiscountSet: MoneyBag!

  """
  The total discounted value of unfulfilled units, in shop currency.
  """
  unfulfilledDiscountedTotal: Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead.")

  """
  The total discounted value of unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledDiscountedTotalSet: MoneyBag!

  """
  The total price without any discounts applied. This value is based on the unit
  price of the variant x quantity of all unfulfilled units, in shop currency.
  """
  unfulfilledOriginalTotal: Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead.")

  """
  The total price without any discounts applied. This value is based on the unit
  price of the variant x quantity of all unfulfilled units, in shop and
  presentment currencies.
  """
  unfulfilledOriginalTotalSet: MoneyBag!

  """
  The number of units not yet fulfilled.
  """
  unfulfilledQuantity: Int!

  """
  The Variant object associated with this line item.
  """
  variant: ProductVariant

  """
  The name of the variant.
  """
  variantTitle: String

  """
  The name of the vendor who made the variant.
  """
  vendor: String
}

"""
An auto-generated type for paginating through multiple LineItemMutables.
"""
type LineItemMutableConnection {
  """
  A list of edges.
  """
  edges: [LineItemMutableEdge!]!

  """
  A list of the nodes contained in LineItemMutableEdge.
  """
  nodes: [LineItemMutable!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one LineItemMutable and a cursor during pagination.
"""
type LineItemMutableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of LineItemMutableEdge.
  """
  node: LineItemMutable!
}

"""
Represents details of a non-refundable line item, including title and quantity.
"""
type LineItemRefundWarningDetails {
  """
  The non-refundable quantity.
  """
  quantity: Int!

  """
  The title of the non-refundable line item.
  """
  title: String!
}

"""
Represents the selling plan for a line item.
"""
type LineItemSellingPlan {
  """
  The name of the selling plan for display purposes.
  """
  name: String!

  """
  The ID of the selling plan associated with the line item.
  """
  sellingPlanId: ID
}

"""
A link to direct users to.
"""
type Link implements HasPublishedTranslations {
  """
  A context-sensitive label for the link.
  """
  label: String!

  """
  The translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [PublishedTranslation!]!

  """
  The URL that the link visits.
  """
  url: URL!
}

"""
Represents the value captured by a localization extension. Localization
extensions are additional fields required by certain countries on international
orders. For example, some countries require additional fields for customs
information or tax identification numbers.
"""
type LocalizationExtension {
  """
  Country ISO 3166-1 alpha-2 code.
  """
  countryCode: CountryCode!

  """
  The localized extension keys that are allowed.
  """
  key: LocalizationExtensionKey!

  """
  The purpose of this localization extension.
  """
  purpose: LocalizationExtensionPurpose!

  """
  The localized extension title.
  """
  title: String!

  """
  The value of the field.
  """
  value: String!
}

"""
An auto-generated type for paginating through multiple LocalizationExtensions.
"""
type LocalizationExtensionConnection {
  """
  A list of edges.
  """
  edges: [LocalizationExtensionEdge!]!

  """
  A list of the nodes contained in LocalizationExtensionEdge.
  """
  nodes: [LocalizationExtension!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one LocalizationExtension and a cursor during pagination.
"""
type LocalizationExtensionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of LocalizationExtensionEdge.
  """
  node: LocalizationExtension!
}

"""
The key of a localization extension.
"""
enum LocalizationExtensionKey {
  """
  Extension key 'shipping_credential_br' for country BR.
  """
  SHIPPING_CREDENTIAL_BR

  """
  Extension key 'shipping_credential_cn' for country CN.
  """
  SHIPPING_CREDENTIAL_CN

  """
  Extension key 'shipping_credential_kr' for country KR.
  """
  SHIPPING_CREDENTIAL_KR

  """
  Extension key 'tax_credential_br' for country BR.
  """
  TAX_CREDENTIAL_BR

  """
  Extension key 'tax_credential_it' for country IT.
  """
  TAX_CREDENTIAL_IT

  """
  Extension key 'tax_email_it' for country IT.
  """
  TAX_EMAIL_IT
}

"""
The purpose of a localization extension.
"""
enum LocalizationExtensionPurpose {
  """
  Extensions that are used for shipping purposes, for example, customs clearance.
  """
  SHIPPING

  """
  Extensions that are used for taxes purposes, for example, invoicing.
  """
  TAX
}

"""
Represents the location where the physical good resides.
"""
type Location implements HasMetafieldDefinitions & HasMetafields & LegacyInteroperability & Node {
  """
  Whether this location can be reactivated.
  """
  activatable: Boolean!

  """
  The address of this location.
  """
  address: LocationAddress!

  """
  Whether the location address has been verified.
  """
  addressVerified: Boolean!

  """
  Whether this location can be deactivated.
  """
  deactivatable: Boolean!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  that the location was deactivated at. For example, 3:30 pm on September 7,
  2019 in the time zone of UTC (Universal Time Coordinated) is represented as
  `"2019-09-07T15:50:00Z`".
  """
  deactivatedAt: String

  """
  Whether this location can be deleted.
  """
  deletable: Boolean!

  """
  Name of the service provider that fulfills from this location.
  """
  fulfillmentService: FulfillmentService

  """
  Whether this location can fulfill online orders.
  """
  fulfillsOnlineOrders: Boolean!

  """
  Whether this location has active inventory.
  """
  hasActiveInventory: Boolean!

  """
  Whether this location has incoming inventory transfers.
  """
  hasIncomingTransfers: Boolean!

  """
  Whether this location has orders that need to be fulfilled.
  """
  hasUnfulfilledOrders: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The quantities of an inventory item at this location.
  """
  inventoryLevel(
    """
    The ID of the inventory item to obtain the inventory level for.
    """
    inventoryItemId: ID!
  ): InventoryLevel

  """
  A list of the quantities of the inventory items that can be stocked at this location.
  """
  inventoryLevels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InventoryLevelConnection!

  """
  Whether the location is active.
  """
  isActive: Boolean!

  """
  Whether the location is your primary location for shipping inventory.
  """
  isPrimary: Boolean! @deprecated(reason: "The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location")

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  Local pickup settings for the location.
  """
  localPickupSettingsV2: DeliveryLocalPickupSettings

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  The name of the location.
  """
  name: String!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  Whether the available inventory at this location is being calculated.
  """
  restrictionInProgress: Boolean!

  """
  Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored.
  """
  shipsInventory: Boolean!

  """
  List of suggested addresses for this location (empty if none).
  """
  suggestedAddresses: [LocationSuggestedAddress!]!
}

"""
Represents the address of a location.
"""
type LocationAddress {
  """
  The first line of the address for the location.
  """
  address1: String

  """
  The second line of the address for the location.
  """
  address2: String

  """
  The city of the location.
  """
  city: String

  """
  The country of the location.
  """
  country: String

  """
  The country code of the location.
  """
  countryCode: String

  """
  A formatted version of the address for the location.
  """
  formatted: [String!]!

  """
  The latitude coordinates of the location.
  """
  latitude: Float

  """
  The longitude coordinates of the location.
  """
  longitude: Float

  """
  The phone number of the location.
  """
  phone: String

  """
  The province of the location.
  """
  province: String

  """
  The code for the province, state, or district of the address of the location.
  """
  provinceCode: String

  """
  The ZIP code of the location.
  """
  zip: String
}

"""
An auto-generated type for paginating through multiple Locations.
"""
type LocationConnection {
  """
  A list of edges.
  """
  edges: [LocationEdge!]!

  """
  A list of the nodes contained in LocationEdge.
  """
  nodes: [Location!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Location and a cursor during pagination.
"""
type LocationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of LocationEdge.
  """
  node: Location!
}

"""
Represents a suggested address for a location.
"""
type LocationSuggestedAddress {
  """
  The first line of the suggested address.
  """
  address1: String

  """
  The second line of the suggested address.
  """
  address2: String

  """
  The city of the suggested address.
  """
  city: String

  """
  The country of the suggested address.
  """
  country: String

  """
  The country code of the suggested address.
  """
  countryCode: CountryCode

  """
  A formatted version of the suggested address.
  """
  formatted: [String!]!

  """
  The province of the suggested address.
  """
  province: String

  """
  The code for the province, state, or district of the suggested address.
  """
  provinceCode: String

  """
  The ZIP code of the suggested address.
  """
  zip: String
}

"""
Represents groups of reassignable and non-reassignable line items for a given location.
"""
type LocationsForLineItemsReassignment {
  """
  The intended location for line items reassignment.
  """
  location: Location!

  """
  A human-readable string regarding line item reassignment possibility for the location.
  """
  message: String

  """
  The line items that cannot be reassigned to this location.
  """
  nonReassignableLineItems: [LineItem!]!

  """
  The line items that can be reassigned to this location.
  """
  reassignableLineItems: [LineItem!]!
}

"""
An auto-generated type for paginating through multiple LocationsForLineItemsReassignments.
"""
type LocationsForLineItemsReassignmentConnection {
  """
  A list of edges.
  """
  edges: [LocationsForLineItemsReassignmentEdge!]!

  """
  A list of the nodes contained in LocationsForLineItemsReassignmentEdge.
  """
  nodes: [LocationsForLineItemsReassignment!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one LocationsForLineItemsReassignment and a cursor during pagination.
"""
type LocationsForLineItemsReassignmentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of LocationsForLineItemsReassignmentEdge.
  """
  node: LocationsForLineItemsReassignment!
}

"""
Represents a customer mailing address.

For example, a customer's default address and an order's billing address are both mailling addresses.
"""
type MailingAddress implements Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the customer's company or organization.
  """
  company: String

  """
  Whether the address coordinates are valid.
  """
  coordinatesValidated: Boolean!

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.

  For example, US.
  """
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead.")

  """
  The two-letter code for the country of the address.

  For example, US.
  """
  countryCodeV2: CountryCode

  """
  The first name of the customer.
  """
  firstName: String

  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """
    Whether to include the customer's company in the formatted address.
    """
    withCompany: Boolean

    """
    Whether to include the customer's name in the formatted address.
    """
    withName: Boolean
  ): [String!]!

  """
  A comma-separated list of the values for city, province, and country.
  """
  formattedArea: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The last name of the customer.
  """
  lastName: String

  """
  The latitude coordinate of the customer address.
  """
  latitude: Float

  """
  The longitude coordinate of the customer address.
  """
  longitude: Float

  """
  The full name of the customer, based on firstName and lastName.
  """
  name: String

  """
  A unique phone number for the customer.

  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The two-letter code for the region.

  For example, ON.
  """
  provinceCode: String

  """
  Whether the address was geolocated and it is a valid address. The field
  returns `false` if the verification failed, or if the job to verify this
  address was never started.
  """
  verified: Boolean!

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
An auto-generated type for paginating through multiple MailingAddresses.
"""
type MailingAddressConnection {
  """
  A list of edges.
  """
  edges: [MailingAddressEdge!]!

  """
  A list of the nodes contained in MailingAddressEdge.
  """
  nodes: [MailingAddress!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MailingAddress and a cursor during pagination.
"""
type MailingAddressEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of MailingAddressEdge.
  """
  node: MailingAddress!
}

"""
The fields used to create or update a mailing address.
"""
input MailingAddressInput {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the customer's company or organization.
  """
  company: String

  """
  The name of the country.
  """
  country: String @deprecated(reason: "Use `countryCode` instead.")

  """
  The two-letter code for the country of the address.
  """
  countryCode: CountryCode

  """
  The first name of the customer.
  """
  firstName: String
  id: ID @deprecated(reason: "Not needed for 90% of mutations, and provided separately where it is needed.")

  """
  The last name of the customer.
  """
  lastName: String

  """
  A unique phone number for the customer.

  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String @deprecated(reason: "Use `provinceCode` instead.")

  """
  The code for the region of the address, such as the province, state, or district.
  For example QC for Quebec, Canada.
  """
  provinceCode: String

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
Manual discount applications capture the intentions of a discount that was manually created for an order.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type ManualDiscountApplication implements DiscountApplication {
  """
  The allocated amount of the discount that was applied to the order.
  """
  allocatedAmount: DiscountApplicationAllocationAmount!

  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The description of the discount application.
  """
  description: String

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The title of the discount application.
  """
  title: String!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
A market is a group of one or more regions that you want to target for international sales.
By creating a market, you can configure a distinct, localized shopping experience for
customers from a specific area of the world. For example, you can
[change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
[configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
"""
type Market implements Node {
  """
  The market’s currency settings.
  """
  currencySettings: MarketCurrencySettings!

  """
  Whether the market is enabled to receive visitors and sales. **Note**: Regions in inactive
  markets cannot be selected on the storefront or in checkout.
  """
  enabled: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The name of the market. Not shown to customers.
  """
  name: String!

  """
  The market’s price list, which specifies a percentage-based price adjustment as well as
  fixed price overrides for specific variants.
  """
  priceList: PriceList

  """
  Whether the market is the shop’s primary market.
  """
  primary: Boolean!

  """
  The regions that comprise the market.
  """
  regions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MarketRegionConnection!

  """
  The market’s web presence, which defines its SEO strategy. This can be a different domain,
  subdomain, or subfolders of the primary domain. Each web presence comprises one or more
  language variants. If a market doesn't have its own web presence, then the market is accessible on the
  shop’s primary domain using [country
  selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
  """
  webPresence: MarketWebPresence
}

"""
A market's currency settings.
"""
type MarketCurrencySettings {
  """
  The currency which this market's prices are defined in, and the
  currency which its customers must use if local currencies are disabled.
  """
  baseCurrency: CurrencySetting!

  """
  Whether or not local currencies are enabled. If enabled, then prices will
  be converted to give each customer the best experience based on their
  region. If disabled, then all customers in this market will see prices
  in the market's base currency.
  """
  localCurrencies: Boolean!
}

"""
A geographic region which comprises a market.
"""
interface MarketRegion {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The name of the region.
  """
  name: String!
}

"""
An auto-generated type for paginating through multiple MarketRegions.
"""
type MarketRegionConnection {
  """
  A list of edges.
  """
  edges: [MarketRegionEdge!]!

  """
  A list of the nodes contained in MarketRegionEdge.
  """
  nodes: [MarketRegion!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A country which comprises a market.
"""
type MarketRegionCountry implements MarketRegion & Node {
  """
  The ISO code identifying the country.
  """
  code: CountryCode!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The name of the region.
  """
  name: String!
}

"""
An auto-generated type which holds one MarketRegion and a cursor during pagination.
"""
type MarketRegionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of MarketRegionEdge.
  """
  node: MarketRegion!
}

"""
The market’s web presence, which defines its SEO strategy. This can be a different domain
(e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary
domain (e.g. `example.com/en-ca`). Each web presence comprises one or more language
variants. If a market does not have its own web presence, it is accessible on the shop’s
primary domain via [country
selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).

Note: while the domain/subfolders defined by a market’s web presence are not applicable to
custom storefronts, which must manage their own domains and routing, the languages chosen
here do govern [the languages available on the Storefront
API](https://shopify.dev/custom-storefronts/internationalization/multiple-languages) for the countries in
this market.
"""
type MarketWebPresence implements Node {
  """
  The ISO codes for the alternate locales. When a domain is used, these locales will be
  available as language-specific subfolders. For example, if English is an
  alternate locale, and `example.ca` is the market’s domain, then
  `example.ca/en` will load in English.
  """
  alternateLocales: [String!]!

  """
  The ISO code for the default locale. When a domain is used, this is the locale that will
  be used when the domain root is accessed. For example, if French is the default locale,
  and `example.ca` is the market’s domian, then `example.ca` will load in French.
  """
  defaultLocale: String!

  """
  The web presence’s domain.
  This field will be null if `subfolderSuffix` isn't null.
  """
  domain: Domain

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The associated market.
  """
  market: Market!

  """
  The list of root URLs for each of the web presence’s locales.
  """
  rootUrls: [MarketWebPresenceRootUrl!]!

  """
  The market-specific suffix of the subfolders defined by the web presence.
  Example: in `/en-us` the subfolder suffix is `us`. This field will be null if
  `domain` isn't null.
  """
  subfolderSuffix: String
}

"""
The URL for the homepage of the online store in the context of a particular market and a
particular locale.
"""
type MarketWebPresenceRootUrl {
  """
  The locale that the storefront loads in.
  """
  locale: String!

  """
  The URL.
  """
  url: URL!
}

"""
The marketing activity resource represents marketing that a
        merchant created through an app.
"""
type MarketingActivity implements Node {
  """
  The URL of the marketing activity listing page in the marketing section.
  """
  activityListUrl: URL

  """
  The amount spent on the marketing activity.
  """
  adSpend: MoneyV2

  """
  The admin URL used to view marketing activity report.
  """
  adminDashboardUrl: URL @deprecated(reason: "Use `adminReportUrl` instead.")

  """
  The admin url used to edit this activity.
  """
  adminEditUrl: URL!

  """
  The admin URL used to view marketing activity report.
  """
  adminReportUrl: URL

  """
  The app which created this marketing activity.
  """
  app: App!

  """
  The errors generated when an app publishes the marketing activity.
  """
  appErrors: MarketingActivityExtensionAppErrors

  """
  The allocated budget for the marketing activity.
  """
  budget: MarketingBudget

  """
  The date and time when the marketing activity was created.
  """
  createdAt: DateTime!

  """
  The global editable property indicates whether the form is editable or not.
  """
  editable: Boolean!

  """
  The external editor URL if the marketing activity is created from external editor.
  """
  externalEditorUrl: URL

  """
  The completed content in the marketing activity creation form.
  """
  formData: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Whether the marketing activity is in the main workflow version of
            the marketing automation.
  """
  inMainWorkflowVersion: Boolean!

  """
  The marketing activity extension used to create this marketing activity.
  """
  marketingActivityExtension: MarketingActivityExtension

  """
  Campaign this marketing activity belongs to.
  """
  marketingCampaign: MarketingCampaign

  """
  The available marketing channels for a marketing activity.
  """
  marketingChannel: MarketingChannel!

  """
  Associated marketing event of this marketing activity.
  """
  marketingEvent: MarketingEvent

  """
  A contextual description of the marketing activity based on the platform and tactic used.
  """
  sourceAndMedium: String!

  """
  The current state of the marketing activity.
  """
  status: MarketingActivityStatus!

  """
  The severity of the marketing activity's status.
  """
  statusBadgeType: MarketingActivityStatusBadgeType @deprecated(reason: "Use `statusBadgeTypeV2` instead.")

  """
  The severity of the marketing activity's status.
  """
  statusBadgeTypeV2: BadgeType

  """
  The rendered status of the marketing activity.
  """
  statusLabel: String!

  """
  The [date and time](
            https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
            ) when the activity's status last changed.
  """
  statusTransitionedAt: DateTime

  """
  The method of marketing used for this marketing activity.
  """
  tactic: MarketingTactic!

  """
  The status to which the marketing activity is currently transitioning.
  """
  targetStatus: MarketingActivityStatus

  """
  The marketing activity's title, which is rendered on the marketing listing page.
  """
  title: String!

  """
  The date and time when the marketing activity was updated.
  """
  updatedAt: DateTime!

  """
  The set of [Urchin Tracking Module](
            https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
            ) used in the URL for tracking this marketing activity.
  """
  utmParameters: UTMParameters
}

"""
An auto-generated type for paginating through multiple MarketingActivities.
"""
type MarketingActivityConnection {
  """
  A list of edges.
  """
  edges: [MarketingActivityEdge!]!

  """
  A list of the nodes contained in MarketingActivityEdge.
  """
  nodes: [MarketingActivity!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MarketingActivity and a cursor during pagination.
"""
type MarketingActivityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of MarketingActivityEdge.
  """
  node: MarketingActivity!
}

"""
The marketing activity extension registered by app developers. Partners configure these to receive data from Shopify.
"""
type MarketingActivityExtension {
  """
  The admin url used to launch the app extension form.
  """
  adminLaunchUrl(
    """
    The marketing campaign which the activity created by the extension will be associated to.
    """
    campaignId: ID
  ): URL!

  """
  The app that created this marketing activity extension.
  """
  app: App!

  """
  Url for default preview image for the marketing activity.
  """
  defaultPreviewUrl: URL

  """
  Default recommendation preview image.
  """
  defaultRecommendationPreviewImage: Image

  """
  Whether the marketing activity created using this extension is deletable.
  """
  deletable: Boolean!

  """
  The description of what the marketing activity extension does.
  """
  description: String!

  """
  Whether the marketing activity created using this extension is editable.
  """
  editable: Boolean!

  """
  The current state of the marketing extension for the current shop.
  """
  extensionState: MarketingExtensionState!

  """
  The funnel categories for the marketing extension.
  """
  funnelCategories: [MarketingActivityExtensionFunnelCategory!]!

  """
  The unique identifier of the marketing activity extension.
  """
  id: ID!

  """
  The schema object for the marketing activity extension.
  """
  marketingActivityExtensionSchema(
    """
    The form data in JSON serialized as a string.
    """
    formData: String

    """
    The ID of a marketing activity created by the app using this extension.
    """
    marketingActivityId: ID

    """
    The ID of the marketing recommendation being used to prefill the activity extension form.
    """
    marketingRecommendationId: ID
  ): MarketingActivityExtensionSchema!

  """
  The preview of the marketing activity.
  """
  marketingActivityPreview(
    """
    The form data in JSON serialized as a string.
    """
    formData: String!

    """
    The ID of the marketing activity being previewed.
    """
    marketingActivityId: ID

    """
    The preview types which we want to retrieve the preview for.
    """
    previewTypes: [MarketingActivityPreviewType!]!
  ): MarketingActivityPreviewPayload! @deprecated(reason: "Use `marketingActivityPreviewV2` instead.")

  """
  Whether the marketing activity created using this extension is pausable.
  """
  pausable: Boolean!

  """
  The payment type of the marketing activity that is created using this extension.
  """
  paymentType: MarketingActivityExtensionPaymentType!

  """
  The marketing platform which will host the marketing activity.
  """
  platform: MarketingPlatform

  """
  The marketing tactic implemented by the marketing activity.
  """
  tactic: MarketingTactic!

  """
  The title of the marketing activity.
  """
  title: String!

  """
  The typeahead field data given a field name and field value argument.
  """
  typeaheadFieldData(
    """
    The field name on which we want to retrieve the typeahead field data.
    """
    fieldName: String!

    """
    The related field value which typeahead field data is based on.
    """
    fieldValue: String!
  ): MarketingActivityTypeaheadFieldData!
}

"""
The error code resulted from the marketing activity extension integration.
"""
enum MarketingActivityExtensionAppErrorCode {
  """
  The app is either not responding or returning unexpected data.
  """
  API_ERROR

  """
  The app needs to be installed.
  """
  INSTALL_REQUIRED_ERROR

  """
  The shop/user must be onboarded to use the app.
  """
  NOT_ONBOARDED_ERROR

  """
  The app has returned an error when invoking the platform.
  """
  PLATFORM_ERROR

  """
  The app has returned validation errors.
  """
  VALIDATION_ERROR
}

"""
Represents errors returned from apps when using the marketing activity extension.
"""
type MarketingActivityExtensionAppErrors {
  """
  The app error type.
  """
  code: MarketingActivityExtensionAppErrorCode!

  """
  The list of errors returned by the app.
  """
  userErrors: [UserError!]!
}

"""
Funnel category of the marketing activity.
"""
enum MarketingActivityExtensionFunnelCategory {
  """
  Converting sessions into revenue.
  """
  CONVERSION

  """
  Finding the right audience for the merchant's store.
  """
  ENGAGEMENT
}

"""
Payment of the marketing activity created using this marketing activity extension.
"""
enum MarketingActivityExtensionPaymentType {
  """
  It is free to create a marketing activity using this extension.
  """
  FREE

  """
  Payment is required to create a marketing activity using this extension.
  """
  PAID
}

"""
The response object for the schema of the marketing activity extension.
"""
type MarketingActivityExtensionSchema {
  """
  The app alerts to be displayed on the activity detail page.
  """
  appAlerts: [ResourceAlert!]

  """
  The errors returned by the app when loading the schema.
  """
  appErrors: MarketingActivityExtensionAppErrors

  """
  The schema for the marketing activity extension merged with dynamic data from the app.
  """
  schema: String
}

"""
The preview of the marketing activity.
"""
type MarketingActivityPreview {
  """
  The MIME type for the marketing activity preview.
  """
  contentType: MarketingActivityPreviewMimeType!

  """
  The iFrame height of the marketing activity preview.
  """
  height: Int!

  """
  The preview type of the marketing activity preview.
  """
  previewType: MarketingActivityPreviewType! @deprecated(reason: "Use `previewTypeV2` instead.")

  """
  The preview type of the marketing activity preview.
  """
  previewTypeV2: String!

  """
  The URL to the marketing activity preview.
  """
  previewUrl: URL!

  """
  The iFrame width of the marketing activity preview.
  """
  width: Int!
}

"""
The MIME type of marketing activity preview.
"""
enum MarketingActivityPreviewMimeType {
  """
  A JPG image.
  """
  IMAGE_JPEG

  """
  A PNG image.
  """
  IMAGE_PNG

  """
  HTML content.
  """
  TEXT_HTML
}

"""
The response object for the preview of the marketing activity.
"""
type MarketingActivityPreviewPayload {
  """
  The errors returned by the app when loading the preview.
  """
  appErrors: MarketingActivityExtensionAppErrors

  """
  The previews of the marketing activity by preview type.
  """
  marketingActivityPreviews: [MarketingActivityPreview!]
}

"""
Preview type of the marketing activity.
"""
enum MarketingActivityPreviewType {
  """
  A desktop view.
  """
  DESKTOP

  """
  A mobile view.
  """
  MOBILE
}

"""
Status helps to identify if this marketing activity has been completed, queued, failed etc.
"""
enum MarketingActivityStatus {
  """
  This marketing activity is currently running.
  """
  ACTIVE

  """
  This marketing activity is permanently unavailable.
  """
  DELETED

  """
  This marketing activity was deleted and it was triggered from outside of Shopify.
  """
  DELETED_EXTERNALLY

  """
  This marketing activity is disconnected and no longer editable.
  """
  DISCONNECTED

  """
  This marketing activity has been edited, but it is not yet created.
  """
  DRAFT

  """
  This marketing activity is unable to run.
  """
  FAILED

  """
  This marketing activity has completed running.
  """
  INACTIVE

  """
  This marketing activity is currently not running.
  """
  PAUSED

  """
  This marketing activity is pending creation on the app's marketing platform.
  """
  PENDING

  """
  This marketing activity is scheduled to run.
  """
  SCHEDULED

  """
  The marketing activity's status is unknown.
  """
  UNDEFINED
}

"""
StatusBadgeType helps to identify the color of the status badge.
"""
enum MarketingActivityStatusBadgeType {
  """
  This status badge has type attention.
  """
  ATTENTION

  """
  This status badge has type default.
  """
  DEFAULT

  """
  This status badge has type info.
  """
  INFO

  """
  This status badge has type success.
  """
  SUCCESS

  """
  This status badge has type warning.
  """
  WARNING
}

"""
The response object for the type ahead options of a marketing activity form field.
"""
type MarketingActivityTypeaheadFieldData {
  """
  The errors returned by the app when loading the type ahead options.
  """
  appErrors: MarketingActivityExtensionAppErrors

  """
  The list of field options given the field name and field value.
  """
  options: [MarketingActivityTypeaheadFieldOption!]
}

"""
Field label and field value pair representing user selectable option.
"""
type MarketingActivityTypeaheadFieldOption {
  """
  The field label to be displayed in the user selectable option.
  """
  label: String!

  """
  The representative field value of the user selectable option.
  """
  value: String!
}

"""
This type combines budget amount and its marketing budget type.
"""
type MarketingBudget {
  """
  The budget type for a marketing activity.
  """
  budgetType: MarketingBudgetBudgetType!

  """
  The amount of budget for marketing activity.
  """
  total: MoneyV2!
}

"""
The budget type for a marketing activity.
"""
enum MarketingBudgetBudgetType {
  """
  A daily budget.
  """
  DAILY

  """
  A budget for the lifetime of a marketing activity.
  """
  LIFETIME
}

"""
Marketing campaign is a group of marketing activities.
"""
type MarketingCampaign implements Node {
  """
  The date and time when the Marketing campaign was created.
  """
  createdAt: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  List of a campaign's marketing activities.
  """
  marketingActivities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MarketingActivityConnection!

  """
  The number of marketing activities in the Marketing campaign.
  """
  marketingActivitiesCount: Int!

  """
  List of all marketing event IDs associated to this marketing campaign's activities.
  """
  reportifyMarketingEventIds: [UnsignedInt64!]!

  """
  The current status of the marketing campaign.
  """
  status: MarketingCampaignStatus!

  """
  The title of the Marketing campaign.
  """
  title: String!
}

"""
The current status of the marketing campaign.
"""
enum MarketingCampaignStatus {
  """
  This marketing campaign is currently running.
  """
  ACTIVE

  """
  This marketing campaign is archived.
  """
  ARCHIVED
}

"""
The available marketing channels for a marketing activity or event. A marketing
channel is broad category of marketing, used for reporting aggregation.
"""
enum MarketingChannel {
  """
  Displayed ads.
  """
  DISPLAY

  """
  Email.
  """
  EMAIL

  """
  Referral links.
  """
  REFERRAL

  """
  Paid search.
  """
  SEARCH

  """
  One to one message via text messaging service.
  """
  SMS

  """
  Social media.
  """
  SOCIAL
}

"""
Represents actions that market a merchant's store or products.
"""
type MarketingEvent implements LegacyInteroperability & Node {
  """
  The app that the marketing event is attributed to.
  """
  app: App!

  """
  The marketing channel used by the marketing event.
  """
  channel: MarketingChannel

  """
  A human-readable description of the marketing event.
  """
  description: String

  """
  The date and time when the marketing event ended.
  """
  endedAt: DateTime

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The URL where the marketing event can be managed.
  """
  manageUrl: URL

  """
  The URL where the marketing event can be previewed.
  """
  previewUrl: URL

  """
  An optional ID that helps Shopify validate engagement data.
  """
  remoteId: String

  """
  The date and time when the marketing event is scheduled to end.
  """
  scheduledToEndAt: DateTime

  """
  Where the `MarketingEvent` occurred and what kind of content was used.
  Because `utmSource` and `utmMedium` are often used interchangeably, this is
  based on a combination of `marketingChannel`, `referringDomain`, and `type` to
  provide a consistent representation for any given piece of marketing
  regardless of the app that created it.
  """
  sourceAndMedium: String!

  """
  The date and time when the marketing event started.
  """
  startedAt: DateTime!

  """
  The display text for the marketing event type.
  """
  targetTypeDisplayText: String! @deprecated(reason: "Use `sourceAndMedium` instead.")

  """
  The marketing event type.
  """
  type: MarketingTactic!

  """
  The name of the marketing campaign.
  """
  utmCampaign: String

  """
  The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
  """
  utmMedium: String

  """
  The referrer of the marketing event. Example values: `google`, `newsletter`.
  """
  utmSource: String
}

"""
An auto-generated type for paginating through multiple MarketingEvents.
"""
type MarketingEventConnection {
  """
  A list of edges.
  """
  edges: [MarketingEventEdge!]!

  """
  A list of the nodes contained in MarketingEventEdge.
  """
  nodes: [MarketingEvent!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MarketingEvent and a cursor during pagination.
"""
type MarketingEventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of MarketingEventEdge.
  """
  node: MarketingEvent!
}

"""
The state of the marketing activity extension.
"""
type MarketingExtensionState {
  """
  The state type of the marketing activity extension.
  """
  state: MarketingExtensionStateType!
}

"""
The state type of the marketing activity extension.
"""
enum MarketingExtensionStateType {
  """
  The App needs to be installed before the extension can be used.
  """
  INSTALL_REQUIRED

  """
  The extension is ready to be used.
  """
  ONBOARDING_REQUIRED

  """
  The Shop has onboarded and the extension is ready to be used.
  """
  READY
}

"""
List of supported marketing platforms surfaced on the marketing section.
"""
enum MarketingPlatform {
  """
  Bing.
  """
  BING

  """
  Email.
  """
  EMAIL

  """
  Facebook.
  """
  FACEBOOK

  """
  Google.
  """
  GOOGLE

  """
  Instagram.
  """
  INSTAGRAM

  """
  Pinterest.
  """
  PINTEREST

  """
  SMS.
  """
  SMS

  """
  Snapchat.
  """
  SNAPCHAT

  """
  TikTok.
  """
  TIKTOK
}

"""
The available types of marketing event.
"""
enum MarketingTactic {
  """
  An abandoned cart recovery email.
  """
  ABANDONED_CART

  """
  An ad, such as a Facebook ad.
  """
  AD

  """
  An affiliate link.
  """
  AFFILIATE

  """
  A direct visit to the online store.
  """
  DIRECT

  """
  A display ad.
  """
  DISPLAY @deprecated(reason: "`DISPLAY` is deprecated. Use `AD` instead.")

  """
  A follow-up email.
  """
  FOLLOW_UP @deprecated(reason: "'FOLLOW_UP' is deprecated. Use 'TRANSACTIONAL' instead.")

  """
  A link.
  """
  LINK

  """
  A loyalty program.
  """
  LOYALTY

  """
  A messaging app, such as Facebook Messenger.
  """
  MESSAGE

  """
  A newsletter.
  """
  NEWSLETTER

  """
  A notification in the Shopify admin.
  """
  NOTIFICATION

  """
  A blog post.
  """
  POST

  """
  A promotional receipt.
  """
  RECEIPT @deprecated(reason: "'RECEIPT' is deprecated. Use 'TRANSACTIONAL' instead.")

  """
  A retargeting ad.
  """
  RETARGETING

  """
  Paid search.
  """
  SEARCH @deprecated(reason: "`SEARCH` is deprecated. Use `AD` instead.")

  """
  Search engine optimization.
  """
  SEO

  """
  A popup on the online store.
  """
  STOREFRONT_APP

  """
  A transactional email.
  """
  TRANSACTIONAL
}

"""
Represents a media interface.
"""
interface Media {
  """
  A word or phrase to share the nature or contents of a media.
  """
  alt: String

  """
  The media content type.
  """
  mediaContentType: MediaContentType!

  """
  Any errors which have occurred on the media.
  """
  mediaErrors: [MediaError!]!

  """
  The warnings attached to the media.
  """
  mediaWarnings: [MediaWarning!]!

  """
  The position of the media object.
  """
  position: Int!

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  The preview image for the media.
  """
  previewImage: Image @deprecated(reason: "Use `preview` instead.")

  """
  Current status of the media.
  """
  status: MediaStatus!
}

"""
An auto-generated type for paginating through multiple Media.
"""
type MediaConnection {
  """
  A list of edges.
  """
  edges: [MediaEdge!]!

  """
  A list of the nodes contained in MediaEdge.
  """
  nodes: [Media!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
The possible content types for a media object.
"""
enum MediaContentType {
  """
  An externally hosted video.
  """
  EXTERNAL_VIDEO

  """
  A Shopify-hosted image.
  """
  IMAGE

  """
  A 3d model.
  """
  MODEL_3D

  """
  A Shopify-hosted video.
  """
  VIDEO
}

"""
An auto-generated type which holds one Media and a cursor during pagination.
"""
type MediaEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of MediaEdge.
  """
  node: Media!
}

"""
Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.
Check the media before attempting to upload again.
"""
type MediaError {
  """
  Code representing the type of error.
  """
  code: MediaErrorCode!

  """
  Additional details regarding the error.
  """
  details: String

  """
  Translated error message.
  """
  message: String!
}

"""
Error types for media.
"""
enum MediaErrorCode {
  """
  Media could not be created because embed permissions are disabled for this video.
  """
  EXTERNAL_VIDEO_EMBED_DISABLED

  """
  Media could not be created because video is either not found or still transcoding.
  """
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING

  """
  Media could not be created because the external video has an invalid aspect ratio.
  """
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO

  """
  Media could not be created because the external video could not be found.
  """
  EXTERNAL_VIDEO_NOT_FOUND

  """
  Media could not be created because the external video is not listed or is private.
  """
  EXTERNAL_VIDEO_UNLISTED

  """
  Media could not be created because the cumulative file storage limit would be exceeded.
  """
  FILE_STORAGE_LIMIT_EXCEEDED

  """
  File could not be processed because the source could not be downloaded.
  """
  GENERIC_FILE_DOWNLOAD_FAILURE

  """
  File could not be created because the size is too large.
  """
  GENERIC_FILE_INVALID_SIZE

  """
  Media could not be processed because the image could not be downloaded.
  """
  IMAGE_DOWNLOAD_FAILURE

  """
  Media could not be processed because the image could not be processed.
  """
  IMAGE_PROCESSING_FAILURE

  """
  Media could not be created because the image has an invalid aspect ratio.
  """
  INVALID_IMAGE_ASPECT_RATIO

  """
  Media could not be created because the image size is too large.
  """
  INVALID_IMAGE_FILE_SIZE

  """
  Media could not be created because the image's resolution exceeds the max limit.
  """
  INVALID_IMAGE_RESOLUTION

  """
  Media could not be processed because the signed URL was invalid.
  """
  INVALID_SIGNED_URL

  """
  Media timed out because it is currently being modified by another operation.
  """
  MEDIA_TIMEOUT_ERROR

  """
  Media could not be created because the model file failed processing.
  """
  MODEL3D_GLB_OUTPUT_CREATION_ERROR

  """
  Media could not be created because the model can't be converted to USDZ format.
  """
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR

  """
  Media could not be created because the model file failed processing.
  """
  MODEL3D_PROCESSING_FAILURE

  """
  Media could not be created because the model's thumbnail generation failed.
  """
  MODEL3D_THUMBNAIL_GENERATION_ERROR

  """
  Model failed validation.
  """
  MODEL3D_VALIDATION_ERROR

  """
  Media error has occured for unknown reason.
  """
  UNKNOWN

  """
  Media could not be created because the image is an unsupported file type.
  """
  UNSUPPORTED_IMAGE_FILE_TYPE

  """
  Media could not be created because it has an invalid file type.
  """
  VIDEO_INVALID_FILETYPE_ERROR

  """
  Media could not be created because it does not meet the maximum duration requirement.
  """
  VIDEO_MAX_DURATION_ERROR

  """
  Media could not be created because it does not meet the maximum height requirement.
  """
  VIDEO_MAX_HEIGHT_ERROR

  """
  Media could not be created because it does not meet the maximum width requirement.
  """
  VIDEO_MAX_WIDTH_ERROR

  """
  Media could not be created because the metadata could not be read.
  """
  VIDEO_METADATA_READ_ERROR

  """
  Media could not be created because it does not meet the minimum duration requirement.
  """
  VIDEO_MIN_DURATION_ERROR

  """
  Media could not be created because it does not meet the minimum height requirement.
  """
  VIDEO_MIN_HEIGHT_ERROR

  """
  Media could not be created because it does not meet the minimum width requirement.
  """
  VIDEO_MIN_WIDTH_ERROR

  """
  Video failed validation.
  """
  VIDEO_VALIDATION_ERROR
}

"""
Host for a Media Resource.
"""
enum MediaHost {
  """
  Host for Vimeo embedded videos.
  """
  VIMEO

  """
  Host for YouTube embedded videos.
  """
  YOUTUBE
}

"""
An image hosted on Shopify.
"""
type MediaImage implements File & Media & Node {
  """
  A word or phrase to share the nature or contents of a media.
  """
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """
  The display name of the file created.
  """
  displayName: String

  """
  Any errors that have occurred on the file.
  """
  fileErrors: [FileError!]!

  """
  The status of the file.
  """
  fileStatus: FileStatus!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The image for the media. Returns `null` until `status` is `READY`.
  """
  image: Image

  """
  The media content type.
  """
  mediaContentType: MediaContentType!

  """
  Any errors which have occurred on the media.
  """
  mediaErrors: [MediaError!]!

  """
  The warnings attached to the media.
  """
  mediaWarnings: [MediaWarning!]!

  """
  The MIME type of the image.
  """
  mimeType: String

  """
  The original source of the image.
  """
  originalSource: MediaImageOriginalSource

  """
  The position of the media object.
  """
  position: Int!

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  The preview image for the media.
  """
  previewImage: Image @deprecated(reason: "Use `preview` instead.")

  """
  The size of the original uploaded image in bytes.
  """
  size: Int @deprecated(reason: "Use `originalSource.fileSize` instead.")

  """
  Current status of the media.
  """
  status: MediaStatus!
}

"""
The original source for an image.
"""
type MediaImageOriginalSource {
  """
  The size of the original file in bytes.
  """
  fileSize: Int
}

"""
Represents the preview image for a media.
"""
type MediaPreviewImage {
  """
  The preview image for the media. Returns `null` until `status` is `READY`.
  """
  image: Image

  """
  Current status of the preview image.
  """
  status: MediaPreviewImageStatus!
}

"""
The possible statuses for a media preview image.
"""
enum MediaPreviewImageStatus {
  """
  Preview image processing has failed.
  """
  FAILED

  """
  Preview image is being processed.
  """
  PROCESSING

  """
  Preview image is ready to be displayed.
  """
  READY

  """
  Preview image is uploaded but not yet processed.
  """
  UPLOADED
}

"""
The possible statuses for a media object.
"""
enum MediaStatus {
  """
  Media processing has failed.
  """
  FAILED

  """
  Media is being processed.
  """
  PROCESSING

  """
  Media is ready to be displayed.
  """
  READY

  """
  Media has been uploaded but not yet processed.
  """
  UPLOADED
}

"""
Represents a media warning. This occurs when there is a non-blocking concern regarding your media.
Consider reviewing your media to ensure it is correct and its parameters are as expected.
"""
type MediaWarning {
  """
  The code representing the type of warning.
  """
  code: MediaWarningCode!

  """
  Translated warning message.
  """
  message: String
}

"""
Warning types for media.
"""
enum MediaWarningCode {
  """
  3D model physical size might be invalid. The dimensions of your model are very
  large. Consider reviewing your model to ensure they are correct.
  """
  MODEL_LARGE_PHYSICAL_SIZE

  """
  3D model physical size might be invalid. The dimensions of your model are very
  small. Consider reviewing your model to ensure they are correct.
  """
  MODEL_SMALL_PHYSICAL_SIZE
}

"""
The class of the discount for combining purposes.
"""
enum MerchandiseDiscountClass {
  """
  Combined as an order discount.
  """
  ORDER

  """
  Combined as a product discount.
  """
  PRODUCT
}

"""
Merchant approval for accelerated onboarding to channel integration apps.
"""
type MerchantApprovalSignals {
  """
  Whether the shop's Shopify Payments account identity is verified. Returns
  `false` if the identity is unverified or if the shop doesn't have a Shopify
  Payments account.
  """
  identityVerified: Boolean!

  """
  Whether Shopify has pre-verified the merchant's business for onboarding to
  channel integration apps. Returns `false` if the shop is not marked for verification.
  """
  verifiedByShopify: Boolean!
}

"""
A container for all the information required to checkout items and pay.
"""
type MerchantCheckout implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The URL that the customer should follow to complete their checkout.
  """
  toUrl(
    """
    The type of checkout URL.
    """
    area: CheckoutToUrlState!

    """
    Optional query parameters that are passed as JSON when generating the URL.
    """
    queryParams: JSON
  ): URL

  """
  URL that merchant should follow to complete the checkout.
  """
  url: URL

  """
  Checkout URL including an iframe protection token.
  """
  urlWithIframeProtectionToken: URL
}

"""
Requests for feedback about Shopify to Merchants.
Feedback forms are created and submitted to an external app at "merchant-feedback.shopifycloud.com".
"""
type MerchantFeedback {
  """
  The URL of the feedback form to open with signed payload.
  """
  url: URL
}

"""
Metafields enable you to attach additional information to a Shopify resource, such
as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or
a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
Some examples of the data that metafields enable you to store are
specifications, size charts, downloadable documents, release dates, images, or part numbers.
Metafields are identified by an owner resource, namespace, and key. and store a
value along with type information for that value.
"""
type Metafield implements LegacyInteroperability & Node {
  """
  The date and time when the metafield was created.
  """
  createdAt: DateTime!

  """
  The optional, associated metafield definition that maps to this metafield's namespace and key pair.
  """
  definition: MetafieldDefinition

  """
  The description of the metafield.
  """
  description: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The unique identifier for the metafield in its namespace.
  """
  key: String!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  A container for a group of metafields.
  Grouping metafields within a namespace prevents your metafields from
  conflicting with other metafields that have the same key name.
  """
  namespace: String!

  """
  The resource that the metafield is attached to.
  """
  owner: HasMetafields!

  """
  The resource that the metafield is attached to.
  """
  ownerType: MetafieldOwnerType!

  """
  Returns a reference object if the metafield definition's type is a resource reference.
  """
  reference: MetafieldReference

  """
  A list of reference objects if the metafield's type is a resource reference list.
  """
  references(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldReferenceConnection

  """
  The type of data that the metafield stores in the `value` field.
  See the list of [supported types](https://shopify.dev/apps/metafields/types).
  """
  type: String!

  """
  The date and time when the metafield was updated.
  """
  updatedAt: DateTime!

  """
  The data to store in the metafield. The data is always stored as a string, regardless of the metafield's type.
  """
  value: String!
}

"""
The access settings for this metafield definition.
"""
type MetafieldAccess {
  """
  The admin access setting used for the metafields under this definition.
  """
  admin: MetafieldAdminAccess
}

"""
Possible metafield access levels.
"""
enum MetafieldAccessLevel {
  """
  Full metafield access.
  """
  FULL

  """
  No metafield access.
  """
  NONE

  """
  Read metafield access.
  """
  READ

  """
  Read and write metafield access.
  """
  READ_WRITE
}

"""
Possible admin access settings for metafields.
"""
enum MetafieldAdminAccess {
  """
  Owner gets full access. The merchant has read-only access. No one else has access rights.
  """
  MERCHANT_READ

  """
  Owner gets full access. The merchant has read and write access. No one else has access rights.
  """
  MERCHANT_READ_WRITE

  """
  Owner gets full access. No one else has access rights.
  """
  PRIVATE
}

"""
An auto-generated type for paginating through multiple Metafields.
"""
type MetafieldConnection {
  """
  A list of edges.
  """
  edges: [MetafieldEdge!]!

  """
  A list of the nodes contained in MetafieldEdge.
  """
  nodes: [Metafield!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Metafield definitions enable you to define additional validation constraints for metafields, and enable the
merchant to edit metafield values in context.
"""
type MetafieldDefinition implements Node {
  """
  The access settings associated with a metafield definition.
  """
  access: MetafieldAccess!

  """
  The description of a metafield definition.
  """
  description: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The key name used to identify a metafield definition within a namespace.
  """
  key: String!

  """
  The merchant access level associated with a metafield definition.
  """
  merchantAccess: MetafieldAccessLevel!

  """
  The list of metafields associated with a metafield definition.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  The count of metafields under a metafield definition.
  """
  metafieldsCount(
    """
    The current validation status.
    """
    validationStatus: MetafieldValidationStatus
  ): Int!

  """
  The human-readable name for the metafield definition.
  """
  name: String!

  """
  The namespace of the metafield definition. You can use a namespace to group related metafields.
  """
  namespace: String!

  """
  The resource type that the metafield definition is attached to. For example, `Product` or `Collection`.
  """
  ownerType: MetafieldOwnerType!

  """
  The position of the metafield definition in the pinned list.
  """
  pinnedPosition: Int

  """
  The standard metafield definition template associated with a metafield definition.
  """
  standardTemplate: StandardMetafieldDefinitionTemplate

  """
  The type of data that the metafield will store.
  """
  type: MetafieldDefinitionType!

  """
  Whether the metafield definition can be used as a collection condition.
  """
  useAsCollectionCondition: Boolean!

  """
  The validation status for the existing metafields within a metafield definition.
  """
  validationStatus: MetafieldDefinitionValidationStatus!

  """
  A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
  the metafield. For example, for a metafield with the type `date`, you can set a minimum date validation, so
  that the metafield will only store dates after the specific minimum date.
  """
  validations: [MetafieldDefinitionValidation!]!

  """
  Whether metafields for the metafield definition are visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean!
}

"""
An auto-generated type for paginating through multiple MetafieldDefinitions.
"""
type MetafieldDefinitionConnection {
  """
  A list of edges.
  """
  edges: [MetafieldDefinitionEdge!]!

  """
  A list of the nodes contained in MetafieldDefinitionEdge.
  """
  nodes: [MetafieldDefinition!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.
"""
type MetafieldDefinitionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of MetafieldDefinitionEdge.
  """
  node: MetafieldDefinition!
}

"""
The type and name for the optional validation configuration of a metafield.

For example, a supported validation might consist of a `max` name and a `number_integer` type.
This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
"""
type MetafieldDefinitionSupportedValidation {
  """
  The name of the metafield definition validation.
  """
  name: String!

  """
  The type of input for the validation.
  """
  type: String!
}

"""
A metafield definition type provides basic foundation and validation for a metafield.
"""
type MetafieldDefinitionType {
  """
  The category associated with the metafield definition type.
  """
  category: String!

  """
  The name of the type for the metafield definition.
  See the list of [supported types](https://shopify.dev/apps/metafields/types).
  """
  name: String!

  """
  The supported validations for a metafield definition type.
  """
  supportedValidations: [MetafieldDefinitionSupportedValidation!]!

  """
  Whether metafields without a definition can be migrated to a definition of this type.
  """
  supportsDefinitionMigrations: Boolean!

  """
  The value type for a metafield created with this definition type.
  """
  valueType: MetafieldValueType! @deprecated(reason: "`valueType` is deprecated and `name` should be used for type information.")
}

"""
A configured metafield definition validation.

For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.

Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
"""
type MetafieldDefinitionValidation {
  """
  The validation name.
  """
  name: String!

  """
  The name for the metafield type of this validation.
  """
  type: String!

  """
  The validation value.
  """
  value: String
}

"""
Possible metafield definition validation statuses.
"""
enum MetafieldDefinitionValidationStatus {
  """
  All of this definition's metafields are valid.
  """
  ALL_VALID

  """
  Asynchronous validation of this definition's metafields is in progress.
  """
  IN_PROGRESS

  """
  Some of this definition's metafields are invalid.
  """
  SOME_INVALID
}

"""
An auto-generated type which holds one Metafield and a cursor during pagination.
"""
type MetafieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of MetafieldEdge.
  """
  node: Metafield!
}

"""
Possible types of a metafield's owner resource.
"""
enum MetafieldOwnerType {
  """
  The Api Permission metafield owner type.
  """
  API_PERMISSION

  """
  The Article metafield owner type.
  """
  ARTICLE

  """
  The Blog metafield owner type.
  """
  BLOG

  """
  The Collection metafield owner type.
  """
  COLLECTION

  """
  The Company metafield owner type.
  """
  COMPANY

  """
  The Company Location metafield owner type.
  """
  COMPANY_LOCATION

  """
  The Customer metafield owner type.
  """
  CUSTOMER

  """
  The Discount metafield owner type.
  """
  DISCOUNT

  """
  The Draft Order metafield owner type.
  """
  DRAFTORDER

  """
  The Location metafield owner type.
  """
  LOCATION

  """
  The Order metafield owner type.
  """
  ORDER

  """
  The Page metafield owner type.
  """
  PAGE

  """
  The Product metafield owner type.
  """
  PRODUCT

  """
  The Product Image metafield owner type.
  """
  PRODUCTIMAGE

  """
  The Product Variant metafield owner type.
  """
  PRODUCTVARIANT

  """
  The Shop metafield owner type.
  """
  SHOP
}

"""
The resource referenced by the metafield value.
"""
union MetafieldReference = Collection | GenericFile | MediaImage | Metaobject | OnlineStorePage | Product | ProductVariant | Video

"""
An auto-generated type for paginating through multiple MetafieldReferences.
"""
type MetafieldReferenceConnection {
  """
  A list of edges.
  """
  edges: [MetafieldReferenceEdge!]!

  """
  A list of the nodes contained in MetafieldReferenceEdge.
  """
  nodes: [MetafieldReference]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MetafieldReference and a cursor during pagination.
"""
type MetafieldReferenceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of MetafieldReferenceEdge.
  """
  node: MetafieldReference
}

"""
Types of resources that may use metafields to reference other resources.
"""
union MetafieldReferencer = AppInstallation | Collection | Customer | DiscountAutomaticNode | DiscountCodeNode | DiscountNode | DraftOrder | FulfillmentOrder | Location | Metaobject | OnlineStoreArticle | OnlineStoreBlog | OnlineStorePage | Order | Product | ProductVariant | Shop

"""
Defines a relation between two resources via a reference metafield.
The referencer owns the joining field with a given namespace and key,
while the target is referenced by the field.
"""
type MetafieldRelation {
  """
  The key of the field making the reference.
  """
  key: String!

  """
  The name of the field making the reference.
  """
  name: String!

  """
  The namespace of the metafield making the reference, or type of the metaobject.
  """
  namespace: String!

  """
  The resource making the reference.
  """
  referencer: MetafieldReferencer!

  """
  The referenced resource.
  """
  target: MetafieldReference!
}

"""
An auto-generated type for paginating through multiple MetafieldRelations.
"""
type MetafieldRelationConnection {
  """
  A list of edges.
  """
  edges: [MetafieldRelationEdge!]!

  """
  A list of the nodes contained in MetafieldRelationEdge.
  """
  nodes: [MetafieldRelation!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MetafieldRelation and a cursor during pagination.
"""
type MetafieldRelationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of MetafieldRelationEdge.
  """
  node: MetafieldRelation!
}

"""
By default, the Storefront API can't read metafields. To make specific metafields visible in the Storefront API,
you need to create a `MetafieldStorefrontVisibility` record. A `MetafieldStorefrontVisibility` record is a list
of the metafields, defined by the `owner_type`, `namespace`, and `key`, to make visible in the Storefront API.

Learn about [exposing metafields in the Storefront API]
(https://shopify.dev/custom-storefronts/products-collections/metafields)
for more details.
"""
type MetafieldStorefrontVisibility implements LegacyInteroperability & Node {
  """
  The date and time when the metafield was set to visible in the Storefront API.
  """
  createdAt: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The key of a metafield to make visible in the Storefront API.
  """
  key: String!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The namespace of a metafield to make visible in the Storefront API.
  """
  namespace: String!

  """
  The owner type of a metafield to make visible in the Storefront API.
  """
  ownerType: MetafieldOwnerType!

  """
  The date and time when the `MetafieldStorefrontVisilibty` record was updated.
  """
  updatedAt: DateTime!
}

"""
Possible metafield validation statuses.
"""
enum MetafieldValidationStatus {
  """
  Any validation status (valid or invalid).
  """
  ANY

  """
  Invalid (according to definition).
  """
  INVALID

  """
  Valid (according to definition).
  """
  VALID
}

"""
Legacy type information for the stored value.
Replaced by `type`.
"""
enum MetafieldValueType {
  """
  A `true` or `false` value.
  """
  BOOLEAN

  """
  A whole number.
  """
  INTEGER

  """
  A JSON string.
  """
  JSON_STRING

  """
  A text field.
  """
  STRING
}

"""
Provides an object instance represented by a MetaobjectDefinition.
"""
type Metaobject implements Node {
  """
  Metaobject capabilities for this Metaobject.
  """
  capabilities: MetaobjectCapabilityData!

  """
  The MetaobjectDefinition that models this object type.
  """
  definition: MetaobjectDefinition!

  """
  The preferred display name field value of the metaobject.
  """
  displayName: String!

  """
  The field for an object key, or null if the key has no field definition.
  """
  field(
    """
    The metaobject key to access.
    """
    key: String!
  ): MetaobjectField

  """
  All ordered fields of the metaobject with their definitions and values.
  """
  fields: [MetaobjectField!]!

  """
  The unique handle of the object, useful as a custom ID.
  """
  handle: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  List of back references metafields that belong to the resource.
  """
  referencedBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldRelationConnection!

  """
  The staff member who created the metaobject.
  """
  staffMember: StaffMember

  """
  The type of the metaobject.
  """
  type: String!

  """
  When the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Provides metaobject definition's access configuration.
"""
type MetaobjectAccess {
  """
  Access configuration for Admin API surface areas, including the GraphQL Admin API.
  """
  admin: MetaobjectAdminAccess!

  """
  Access configuration for Storefront surface areas, including the GraphQL Storefront API and Liquid.
  """
  storefront: MetaobjectStorefrontAccess!
}

"""
Defines how the metaobjects of a definition can be accessed in admin API surface areas.
"""
enum MetaobjectAdminAccess {
  """
  Applications that act on behalf of merchants can read metaobjects.
  Only the owning application can write metaobjects.
  """
  MERCHANT_READ

  """
  The owning application, as well as applications that act on behalf of merchants can read and write metaobjects.
  No other applications can read or write metaobjects.
  """
  MERCHANT_READ_WRITE

  """
  Only the application that owns a metaobject can read and write to it.
  """
  PRIVATE

  """
  All applications with the `metaobjects` access scope can read metaobjects.
  Only the owning application can write metaobjects.
  """
  PUBLIC_READ

  """
  All applications with the `metaobjects` access scope can read and write metaobjects.
  """
  PUBLIC_READ_WRITE
}

"""
Provides the capabilities of a metaobject definition.
"""
type MetaobjectCapabilities {
  """
  Indicate whether a metaobject definition is publishable.
  """
  publishable: MetaobjectCapabilitiesPublishable!
}

"""
The publishable capability of a metaobject definition.
"""
type MetaobjectCapabilitiesPublishable {
  """
  Indicates if the capability is enabled.
  """
  enabled: Boolean!
}

"""
Provides the capabilities of a metaobject.
"""
type MetaobjectCapabilityData {
  """
  The publishable capability for this metaobject.
  """
  publishable: MetaobjectCapabilityDataPublishable
}

"""
The publishable capability for the parent metaobject.
"""
type MetaobjectCapabilityDataPublishable {
  """
  The visibility status of this metaobject across all channels.
  """
  status: MetaobjectStatus!
}

"""
An auto-generated type for paginating through multiple Metaobjects.
"""
type MetaobjectConnection {
  """
  A list of edges.
  """
  edges: [MetaobjectEdge!]!

  """
  A list of the nodes contained in MetaobjectEdge.
  """
  nodes: [Metaobject!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Provides the definition of a generic object structure composed of metafields.
"""
type MetaobjectDefinition implements Node {
  """
  Access configuration for the metaobject definition.
  """
  access: MetaobjectAccess!

  """
  The capabilities of the metaobject definition.
  """
  capabilities: MetaobjectCapabilities!

  """
  The administrative description.
  """
  description: String

  """
  The key of a field to reference as the display name for each object.
  """
  displayNameKey: String

  """
  The fields defined for this object type.
  """
  fieldDefinitions: [MetaobjectFieldDefinition!]!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  A paginated connection to the metaobjects associated with the definition.
  """
  metaobjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetaobjectConnection!

  """
  The count of metaobjects created for the definition.
  """
  metaobjectsCount: Int!

  """
  The human-readable name.
  """
  name: String!

  """
  The type of the object definition. Defines the namespace of associated metafields.
  """
  type: String!
}

"""
An auto-generated type which holds one Metaobject and a cursor during pagination.
"""
type MetaobjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of MetaobjectEdge.
  """
  node: Metaobject!
}

"""
Provides a field definition and the data value assigned to it.
"""
type MetaobjectField {
  """
  The field definition for this object key.
  """
  definition: MetaobjectFieldDefinition!

  """
  The object key of this field.
  """
  key: String!

  """
  For resource reference fields, provides the referenced object.
  """
  reference: MetafieldReference

  """
  For resource reference list fields, provides the list of referenced objects.
  """
  references(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldReferenceConnection

  """
  The type of the field.
  """
  type: String!

  """
  The assigned field value, always stored as a string regardless of the field type.
  """
  value: String
}

"""
Defines a field for a MetaobjectDefinition with properties
such as the field's data type and validations.
"""
type MetaobjectFieldDefinition {
  """
  The administrative description.
  """
  description: String

  """
  A key name used to identify the field within the metaobject composition.
  """
  key: String!

  """
  The human-readable name.
  """
  name: String!

  """
  Required status of the field within the metaobject composition.
  """
  required: Boolean!

  """
  The type of data that the field stores.
  """
  type: MetafieldDefinitionType!

  """
  A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
  the field. For example, a field with the type `date` can set a minimum date requirement.
  """
  validations: [MetafieldDefinitionValidation!]!
}

"""
Defines visibility status for metaobjects.
"""
enum MetaobjectStatus {
  """
  The metaobjects is active for public use.
  """
  ACTIVE

  """
  The metaobjects is an internal record.
  """
  DRAFT
}

"""
Defines how the metaobjects of a definition can be accessed in Storefront API
surface areas, including Liquid and the GraphQL Storefront API.
"""
enum MetaobjectStorefrontAccess {
  """
  Metaobjects are not accessible in any Storefront API surface area.
  """
  NONE

  """
  Metaobjects are accessible in the GraphQL Storefront API by any application
  with the `unauthenticated_read_metaobjects` access scope.
  Metaobjects are accessible in online store Liquid templates.
  """
  PUBLIC_READ
}

"""
A merchant's mobile device.
"""
type MobileDevice implements Node {
  badgeEnabled: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!
  notificationSubscriptions: [NotificationSubscription!]!
}

"""
Represents a Shopify hosted 3D model.
"""
type Model3d implements Media & Node {
  """
  A word or phrase to share the nature or contents of a media.
  """
  alt: String

  """
  The 3d model's bounding box information.
  """
  boundingBox: Model3dBoundingBox

  """
  The 3d model's filename.
  """
  filename: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The media content type.
  """
  mediaContentType: MediaContentType!

  """
  Any errors which have occurred on the media.
  """
  mediaErrors: [MediaError!]!

  """
  The warnings attached to the media.
  """
  mediaWarnings: [MediaWarning!]!

  """
  The 3d model's original source.
  """
  originalSource: Model3dSource

  """
  The position of the media object.
  """
  position: Int!

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  The preview image for the media.
  """
  previewImage: Image @deprecated(reason: "Use `preview` instead.")

  """
  The 3d model's sources.
  """
  sources: [Model3dSource!]!

  """
  Current status of the media.
  """
  status: MediaStatus!
}

"""
Bounding box information of a 3d model.
"""
type Model3dBoundingBox {
  """
  Size in meters of the smallest volume which contains the 3d model.
  """
  size: Vector3!
}

"""
A source for a Shopify-hosted 3d model.

Types of sources include GLB and USDZ formatted 3d models, where the former
is an original 3d model and the latter has been converted from the original.

If the original source is in GLB format and over 15 MBs in size, then both the
original and the USDZ formatted source are optimized to reduce the file size.
"""
type Model3dSource {
  """
  The 3d model source's filesize.
  """
  filesize: Int!

  """
  The 3d model source's format.
  """
  format: String!

  """
  The 3d model source's MIME type.
  """
  mimeType: String!

  """
  The 3d model source's URL.
  """
  url: String!
}

"""
A monetary value string without a currency symbol or code. Example value: `"100.57"`.
"""
scalar Money

"""
A collection of monetary values in their respective currencies. Typically used
in the context of multi-currency pricing and transactions,
when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
"""
type MoneyBag {
  """
  Amount in presentment currency.
  """
  presentmentMoney: MoneyV2!

  """
  Amount in shop currency.
  """
  shopMoney: MoneyV2!
}

"""
Specifies the fields for a monetary value with currency.
"""
input MoneyInput {
  """
  Decimal money amount.
  """
  amount: Decimal!

  """
  Currency of the money.
  """
  currencyCode: CurrencyCode!
}

"""
A monetary value with currency.
"""
type MoneyV2 {
  """
  Decimal money amount.
  """
  amount: Decimal!

  """
  Currency of the money.
  """
  currencyCode: CurrencyCode!
}

"""
Summary of an order's multi-currency state.
"""
type MultiCurrencyStatus {
  """
  Description of an order's multi-currency state.
  """
  message: String!
}

"""
A default cursor that you can use in queries to paginate your results. Each edge in a connection can
return a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as
the starting point to retrieve the nodes before or after it in a connection.

To learn more about using cursor-based pagination, refer to
[Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).
"""
interface Navigable {
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
}

"""
A navigation item, holding basic link attributes.
"""
type NavigationItem {
  """
  The unique identifier of the navigation item.
  """
  id: String!

  """
  The name of the navigation item.
  """
  title: String!

  """
  The URL of the page that the navigation item links to.
  """
  url: URL!
}

"""
A navigation item, holding basic link attributes, extra configuration, and nested navigation items.
"""
type NavigationItemV2 {
  """
  Sub-navigation items for this navigation.
  """
  children: [NavigationItemV2!]!

  """
  Flag that indicates if the navigation is disabled or not.
  """
  disabled: Boolean!

  """
  Extra paths that should be used to not highlight the navigation as selected.
  """
  excludePaths: [String!]!

  """
  Flag indicating that the store front link must be shown within this navigation.
  """
  hasStorefrontLink: Boolean!

  """
  The SVG icon body to be displayed as the navigation's icon.
  """
  iconBody: String!

  """
  The navigation's label to be displayed.
  """
  label: String!

  """
  Flag indicating that an exact match of the path is required to highlight the navigation.
  """
  matchExactPath: Boolean!

  """
  Extra paths that should be used to highlight the navigation as selected.
  """
  matchPaths: [String!]!

  """
  The URL that the navigation points to.
  """
  url: URL!
}

"""
Types for navigation item.
"""
enum NavigationItemV2Type {
  """
  Primary navigation items for apps.
  """
  PRIMARY_NAVIGATION

  """
  Navigation items for sales channels.
  """
  SALES_CHANNEL
}

"""
An object with an ID field to support global identification, in accordance with the
[Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
"""
interface Node {
  """
  A globally-unique identifier.
  """
  id: ID!
}

type NotificationSubscription {
  """
  Whether the subscription is enabled.
  """
  enabled: Boolean!

  """
  ID of the subscription.
  """
  id: ID!

  """
  Title of the subscription.
  """
  title: String!

  """
  Subscription type.
  """
  type: String!
}

"""
The shop's online store channel.
"""
type OnlineStore {
  """
  Available template options based on the published theme.
  """
  availableTemplateOptions(
    """
    The template resource type to filter by.
    """
    resourceType: OnlineStoreTemplateResourceType!
  ): [String!]!

  """
  The currently published theme.
  """
  currentTheme: Theme

  """
  Whether the storefront password is enabled.
  """
  passwordEnabled: Boolean! @deprecated(reason: "Use `passwordProtection` instead.")

  """
  The URL of the shop's storefront with the password bypass associated.
  """
  urlWithPasswordBypass: URL!

  """
  The URL of the shop's storefront with storefront digest.
  """
  urlWithStorefrontDigest: URL!
}

"""
An article in the blogging system. You can query articles from
[the REST API](https://shopify.dev/api/admin-rest/latest/resources/article)
if you need to access more information about an article. Currently, `OnlineStoreArticle` is
only useful to pass an article `id` to the `tagsAdd` mutation. For more information, refer to
the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
"""
type OnlineStoreArticle implements HasPublishedTranslations & Navigable & Node {
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [PublishedTranslation!]!
}

"""
Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
to be used as a type of magazine or newsletter for the shop, with content that changes over time.
"""
type OnlineStoreBlog implements HasPublishedTranslations & Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [PublishedTranslation!]!
}

"""
A custom page on the Online Store.
"""
type OnlineStorePage implements HasPublishedTranslations & Navigable & Node {
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [PublishedTranslation!]!
}

"""
Online Store preview URL of the object.
"""
interface OnlineStorePreviewable {
  """
  The online store preview URL.
  """
  onlineStorePreviewUrl: URL
}

"""
Possible resource type of a template.
"""
enum OnlineStoreTemplateResourceType {
  ARTICLE
  BLOG
  COLLECTION
  GIFT_CARD
  PAGE
  PRODUCT
}

"""
An order is a customer's request to purchase one or more products from a shop.
You can retrieve and update orders using the `Order` object.
Learn more about
[editing an existing order with the GraphQL Admin
API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).

Only the last 60 days' worth of orders from a store are accessible from the
`Order` object by default. If you want to access older orders,
then you need to [request access to all
orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
[Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by
this change and are automatically granted the scope.

**Caution:** Only use this data if it's required for your app's functionality.
Shopify will restrict [access to
scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
legitimate use for the associated data.
"""
type Order implements CommentEventSubject & HasEvents & HasLocalizationExtensions & HasMetafieldDefinitions & HasMetafields & LegacyInteroperability & Node {
  """
  A list of sales agreements associated with the order.
  """
  agreements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SalesAgreementConnection!

  """
  A list of messages that appear on the order page in the Shopify admin.
  """
  alerts: [ResourceAlert!]!

  """
  The application that created the order.
  """
  app: OrderApp

  """
  The billing address of the customer.
  """
  billingAddress: MailingAddress

  """
  Whether the billing address matches the shipping address.
  """
  billingAddressMatchesShippingAddress: Boolean!

  """
  A calculated exchange.
  """
  calculatedExchange(
    """
    The input params for calculating the exchange.
    """
    input: ExchangeInput!
  ): CalculatedExchangePayload!

  """
  Whether the order can be manually marked as paid.
  """
  canMarkAsPaid: Boolean!

  """
  Whether a customer email exists for the order.
  """
  canNotifyCustomer: Boolean!

  """
  Whether fulfillment notifications can be sent to the customer.
  """
  canNotifyCustomerOfFulfillment: Boolean!

  """
  The reason provided when the order was canceled.
  Returns `null` if the order wasn't canceled.
  """
  cancelReason: OrderCancelReason

  """
  The date and time when the order was canceled.
  Returns `null` if the order wasn't canceled.
  """
  cancelledAt: DateTime

  """
  Whether payment for the order can be captured.
  """
  capturable: Boolean!

  """
  The total order-level discount amount, before returns, in shop currency.
  """
  cartDiscountAmount: Money @deprecated(reason: "Use `cartDiscountAmountSet` instead.")

  """
  The total order-level discount amount, before returns, in shop and presentment currencies.
  """
  cartDiscountAmountSet: MoneyBag

  """
  The channel that created the order.
  """
  channel: Channel @deprecated(reason: "Use `publication` instead.")

  """
  Details about the channel that created the order.
  """
  channelInformation: ChannelInformation

  """
  The IP address of the API client that created the order.
  """
  clientIp: String

  """
  Whether the order is closed.
  """
  closed: Boolean!

  """
  The date and time when the order was closed.
  Returns `null` if the order is not closed.
  """
  closedAt: DateTime

  """
  Whether inventory has been reserved for the order.
  """
  confirmed: Boolean!

  """
  Date and time when the order was created in Shopify.
  """
  createdAt: DateTime!

  """
  The shop currency when the order was placed.
  """
  currencyCode: CurrencyCode!

  """
  The current order-level discount amount after all order updates, in shop and presentment currencies.
  """
  currentCartDiscountAmountSet: MoneyBag!

  """
  The sum of the quantities for all line items that contribute to the order's current subtotal price.
  """
  currentSubtotalLineItemsQuantity: Int!

  """
  The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  currentSubtotalPriceSet: MoneyBag!

  """
  A list of all tax lines applied to line items on the order, after returns.
  Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
  """
  currentTaxLines: [TaxLine!]!

  """
  The total amount discounted on the order after returns, in shop and presentment currencies.
  This includes both order and line level discounts.
  """
  currentTotalDiscountsSet: MoneyBag!

  """
  The total amount of duties after returns, in shop and presentment currencies.
  Returns `null` if duties aren't applicable.
  """
  currentTotalDutiesSet: MoneyBag

  """
  The total price of the order, after returns, in shop and presentment currencies.
  This includes taxes and discounts.
  """
  currentTotalPriceSet: MoneyBag!

  """
  The sum of the prices of all tax lines applied to line items on the order,
  after returns, in shop and presentment currencies.
  """
  currentTotalTaxSet: MoneyBag!

  """
  The total weight of the order after returns, in grams.
  """
  currentTotalWeight: UnsignedInt64!

  """
  A list of the custom attributes added to the order.
  """
  customAttributes: [Attribute!]!

  """
  The customer that placed the order.
  """
  customer: Customer

  """
  Whether the customer agreed to receive marketing materials.
  """
  customerAcceptsMarketing: Boolean!

  """
  The customer's visits and interactions with the online store before placing the order.
  """
  customerJourney: CustomerJourney @deprecated(reason: "Use `customerJourneySummary` instead.")

  """
  The customer's visits and interactions with the online store before placing the order.
  """
  customerJourneySummary: CustomerJourneySummary

  """
  A two-letter or three-letter language code, optionally followed by a region modifier.
  """
  customerLocale: String

  """
  A list of discounts that are applied to the order, not including order edits and refunds.
  """
  discountApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscountApplicationConnection!

  """
  The discount code used for the order.
  """
  discountCode: String

  """
  The discount codes used for the order.
  """
  discountCodes: [String!]!

  """
  The primary address of the customer.
  Returns `null` if neither the shipping address nor the billing address was provided.
  """
  displayAddress: MailingAddress

  """
  The financial status of the order that can be shown to the merchant.
  This field does not capture all the details of an order's financial state. It
  should only be used for display summary purposes.
  """
  displayFinancialStatus: OrderDisplayFinancialStatus

  """
  The fulfillment status for the order that can be shown to the merchant.
  This field does not capture all the details of an order's fulfillment state.
  It should only be used for display summary purposes.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  displayFulfillmentStatus: OrderDisplayFulfillmentStatus!

  """
  A list of the disputes associated with the order.
  """
  disputes: [OrderDisputeSummary!]!

  """
  Whether the order has had any edits applied.
  """
  edited: Boolean!

  """
  Whether the merchant can attempt to purchase return labels for the order.
  """
  eligibleForReturnLabelPurchase(
    """
    The ID of the destination location. Defaults to the primary location for the shop.
    """
    destinationLocationId: ID
  ): Boolean!

  """
  The email address associated with the customer.
  """
  email: String

  """
  Whether taxes on the order are estimated.
  This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
  """
  estimatedTaxes: Boolean!

  """
  A list of events associated with the order.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!

  """
  Whether the order has any authorizations that are close to expiring.
  """
  expiringAuthorization: Boolean!

  """
  The fraud protection for the order.
  """
  fraudProtection: FraudProtection!

  """
  Whether there are line items that can be fulfilled.
  This field returns `false` when the order has no fulfillable line items.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  fulfillable: Boolean!

  """
  A list of fulfillment orders for the order.
  """
  fulfillmentOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FulfillmentOrderConnection!

  """
  List of shipments for the order.
  """
  fulfillments(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [Fulfillment!]!

  """
  A list of fulfillments for the order.
  """
  fulfillmentsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FulfillmentConnection!

  """
  Whether the order has been paid in full.
  """
  fullyPaid: Boolean!

  """
  Whether the order has any associated shipping labels with the `purchased` status.
  """
  hasPurchasedShippingLabels: Boolean!

  """
  Whether the merchant added a timeline comment to the order.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The URL of the first page of the online store that the customer visited before they submitted the order.
  """
  landingPageDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPageHtml` instead")

  """
  The first page of the online store that the customer visited before they submitted the order.
  """
  landingPageUrl: URL @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPage` instead")

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  A list of the order's line items.
  """
  lineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LineItemConnection!

  """
  A list of the order's line items.
  """
  lineItemsMutable(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LineItemMutableConnection! @deprecated(reason: "Use `lineItems` instead.")

  """
  List of localization extensions for the resource.
  """
  localizationExtensions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LocalizationExtensionConnection!

  """
  The fulfillment location that was assigned when the order was created.
  Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up-to-date fulfillment location information.
  """
  location: String @deprecated(reason: "Use `physicalLocation` instead.")

  """
  A list of all active locations for the provided line items, sorted by whether they can be reassigned to that location.
  """
  locationsForLineItemsReassignment(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LocationsForLineItemsReassignmentConnection!

  """
  Whether the order can be duplicated by the merchant.
  Orders that have line items associated with selling plans are not duplicable.
  """
  merchantDuplicable: Boolean!

  """
  Whether the order can be edited by the merchant. For example, canceled orders can’t be edited.
  """
  merchantEditable: Boolean!

  """
  A list of reasons why the order can't be edited. For example, "Canceled orders can’t be edited".
  """
  merchantEditableErrors: [String!]!

  """
  The application acting as the Merchant of Record for the order.
  """
  merchantOfRecordApp: OrderApp

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  Whether duties calculations are missing from the order.
  """
  missingDuties: Boolean

  """
  The order's multi currency status.
  Returns `null` unless the presentment currency is different from the shop
  currency, or the order currency was converted during the creation of the order.
  """
  multiCurrencyStatus: MultiCurrencyStatus

  """
  The unique identifier for the order that appears on the order page in the Shopify admin and the order status page.
  For example, "#1001", "EN1001", or "1001-A".
  This value isn't unique across multiple stores.
  """
  name: String!

  """
  The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
  """
  netPayment: Money! @deprecated(reason: "Use `netPaymentSet` instead.")

  """
  The net payment for the order, based on the total amount received minus the
  total amount refunded, in shop and presentment currencies.
  """
  netPaymentSet: MoneyBag!

  """
  A list of line items that can't be fulfilled.
  For example, tips and fully refunded line items can't be fulfilled.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  nonFulfillableLineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LineItemConnection!

  """
  The contents of the note associated with the order.
  """
  note: String

  """
  The total amount of duties before returns, in shop and presentment currencies.
  Returns `null` if duties aren't applicable.
  """
  originalTotalDutiesSet: MoneyBag

  """
  The total price of the order at the time of order creation, in shop and presentment currencies.
  """
  originalTotalPriceSet: MoneyBag!

  """
  The payment collection details for the order.
  """
  paymentCollectionDetails: OrderPaymentCollectionDetails!

  """
  A list of the names of all payment gateways used for the order.
  For example, "Shopify Payments" and "Cash on Delivery (COD)".
  """
  paymentGatewayNames: [String!]!

  """
  The payment terms associated with the order.
  """
  paymentTerms: PaymentTerms

  """
  The phone number associated with the customer.
  """
  phone: String

  """
  The fulfillment location that was assigned when the order was created.
  Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up to date fulfillment location information.
  """
  physicalLocation: Location

  """
  The payment `CurrencyCode` of the customer for the order.
  """
  presentmentCurrencyCode: CurrencyCode!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  The date and time when the order was processed.
  This date and time might not match the date and time when the order was created.
  """
  processedAt: DateTime!

  """
  The publication that the order was created from.
  """
  publication: Publication

  """
  The purchasing entity for the order.
  """
  purchasingEntity: PurchasingEntity

  """
  The unique identifier for a POS order that appears on the customer receipt.
  For example, _12-1000_ or _98567-54_.
  This value isn't unique across multiple stores.
  """
  receiptNumber: String

  """
  The marketing referral code from the link that the customer clicked to visit the store.
  Supports the following URL attributes: "ref", "source", or "r".
  For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
  """
  referralCode: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralCode` instead")

  """
  A web domain or short description of the source that sent the customer to your
  online store. For example, "shopify.com" or "email".
  """
  referrerDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralInfoHtml` instead")

  """
  The URL of the webpage where the customer clicked a link that sent them to your online store.
  """
  referrerUrl: URL @deprecated(reason: "Use `customerJourneySummary.lastVisit.referrerUrl` instead")

  """
  The difference between the suggested and actual refund amount of all refunds
  that have been applied to the order. A positive value indicates a difference
  in the merchant's favor, and a negative value indicates a difference in the
  customer's favor.
  """
  refundDiscrepancySet: MoneyBag!

  """
  Whether the order can be refunded.
  """
  refundable: Boolean!

  """
  A list of refunds that have been applied to the order.
  """
  refunds(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [Refund!]!

  """
  The URL of the source that the order originated from, if found in the domain registry.
  """
  registeredSourceUrl: URL

  """
  Whether the order has shipping lines or at least one line item on the order that requires shipping.
  """
  requiresShipping: Boolean!

  """
  Whether any line item on the order can be restocked.
  """
  restockable: Boolean!

  """
  A list of return labels for the order.
  """
  returnLabelsTemp(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeliveryReturnLabelConnection!

  """
  A list of returns for the order.
  """
  returns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReturnConnection!

  """
  The fraud risk level of the order.
  """
  riskLevel: OrderRiskLevel!

  """
  The risk recommendation for the order.
  """
  riskRecommendation: OrderRiskRecommendation!

  """
  A list of risks associated with the order.
  """
  risks(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [OrderRisk!]!

  """
  A list of scheduled fulfillments for the order.
  """
  scheduledFulfillmentOrderGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderScheduledFulfillmentOrderGroupConnection!

  """
  The mailing address of the customer.
  """
  shippingAddress: MailingAddress

  """
  A summary of all shipping costs on the order.
  """
  shippingLine: ShippingLine

  """
  A list of the order's shipping lines.
  """
  shippingLines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ShippingLineConnection!

  """
  A unique POS or third party order identifier.
  For example, "1234-12-1000" or "111-98567-54". The `receipt_number` field is derived from this value for POS orders.
  """
  sourceIdentifier: String

  """
  The staff member associated with the order.
  """
  staffMember: StaffMember

  """
  The sum of the quantities for all line items that contribute to the order's subtotal price.
  """
  subtotalLineItemsQuantity: Int!

  """
  The sum of the prices for all line items after discounts and before returns, in shop currency.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  subtotalPrice: Money @deprecated(reason: "Use `subtotalPriceSet` instead.")

  """
  The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  subtotalPriceSet: MoneyBag

  """
  A suggested refund for the order.
  """
  suggestedRefund(
    """
    The duties from the order to include in the refund.
    """
    refundDuties: [RefundDutyInput!]

    """
    The line items from the order to include in the refund.
    """
    refundLineItems: [RefundLineItemInput!]

    """
    Whether to refund the full shipping amount.
    """
    refundShipping: Boolean

    """
    The amount to refund for shipping. Overrides the `refundShipping` argument.
    Use the `shippingAmountV2` argument for multi-currency orders.
    """
    shippingAmount: Money

    """
    The amount to refund for shipping, in either shop or presentment currency. This overrides the `refundShipping` argument.
    """
    shippingAmountV2: MoneyInput

    """
    Whether the suggested refund should be created from all refundable line items on the order.
    If `true`, the `refundLineItems` argument will be ignored.
    """
    suggestFullRefund: Boolean
  ): SuggestedRefund

  """
  A comma separated list of tags associated with the order. Updating `tags` overwrites
  any existing tags that were previously added to the order. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!

  """
  A list of all tax lines applied to line items on the order, before returns.
  Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
  """
  taxLines: [TaxLine!]!

  """
  Whether taxes are included in the subtotal price of the order.
  """
  taxesIncluded: Boolean!

  """
  Whether the order is a test.
  Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
  A test order cannot be converted into a real order and vice versa.
  """
  test: Boolean!

  """
  The authorized amount that is uncaptured or undercaptured, in shop currency.
  This amount isn't adjusted for returns.
  """
  totalCapturable: Money! @deprecated(reason: "Use `totalCapturableSet` instead.")

  """
  The authorized amount that is uncaptured or undercaptured, in shop and presentment currencies.
  This amount isn't adjusted for returns.
  """
  totalCapturableSet: MoneyBag!

  """
  The total amount discounted on the order before returns, in shop currency.
  This includes both order and line level discounts.
  """
  totalDiscounts: Money @deprecated(reason: "Use `totalDiscountsSet` instead.")

  """
  The total amount discounted on the order before returns, in shop and presentment currencies.
  This includes both order and line level discounts.
  """
  totalDiscountsSet: MoneyBag

  """
  The total amount not yet transacted for the order, in shop and presentment currencies.
  A positive value indicates a difference in the merchant's favor (payment from
  customer to merchant) and a negative value indicates a difference in the
  customer's favor (refund from merchant to customer).
  """
  totalOutstandingSet: MoneyBag!

  """
  The total price of the order, before returns, in shop currency.
  This includes taxes and discounts.
  """
  totalPrice: Money! @deprecated(reason: "Use `totalPriceSet` instead.")

  """
  The total price of the order, before returns, in shop and presentment currencies.
  This includes taxes and discounts.
  """
  totalPriceSet: MoneyBag!

  """
  The total amount received from the customer before returns, in shop currency.
  """
  totalReceived: Money! @deprecated(reason: "Use `totalReceivedSet` instead.")

  """
  The total amount received from the customer before returns, in shop and presentment currencies.
  """
  totalReceivedSet: MoneyBag!

  """
  The total amount that was refunded, in shop currency.
  """
  totalRefunded: Money! @deprecated(reason: "Use `totalRefundedSet` instead.")

  """
  The total amount that was refunded, in shop and presentment currencies.
  """
  totalRefundedSet: MoneyBag!

  """
  The total amount of shipping that was refunded, in shop and presentment currencies.
  """
  totalRefundedShippingSet: MoneyBag!

  """
  The total shipping amount before discounts and returns, in shop currency.
  """
  totalShippingPrice: Money! @deprecated(reason: "Use `totalShippingPriceSet` instead.")

  """
  The total shipping amount before discounts and returns, in shop and presentment currencies.
  """
  totalShippingPriceSet: MoneyBag!

  """
  The total tax amount before returns, in shop currency.
  """
  totalTax: Money @deprecated(reason: "Use `totalTaxSet` instead.")

  """
  The total tax amount before returns, in shop and presentment currencies.
  """
  totalTaxSet: MoneyBag

  """
  The sum of all tip amounts for the order, in shop currency.
  """
  totalTipReceived: MoneyV2! @deprecated(reason: "Use `totalTipReceivedSet` instead.")

  """
  The sum of all tip amounts for the order, in shop and presentment currencies.
  """
  totalTipReceivedSet: MoneyBag!

  """
  The total weight of the order before returns, in grams.
  """
  totalWeight: UnsignedInt64

  """
  A list of transactions associated with the order.
  """
  transactions(
    """
    Filter transactions by whether they are capturable.
    """
    capturable: Boolean

    """
    Truncate the array result to this size.
    """
    first: Int

    """
    Filter transactions by whether they can be resolved manually.
    For example, fully captured or voided transactions aren't manually resolvable.
    """
    manuallyResolvable: Boolean
  ): [OrderTransaction!]!

  """
  A list of unfulfilled line items for the order.
  """
  unfulfilledLineItemsByLocations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UnfulfilledLineItemsByLocationConnection!

  """
  Whether no payments have been made for the order.
  """
  unpaid: Boolean!

  """
  The date and time when the order was modified last.
  """
  updatedAt: DateTime!
}

"""
The possible order action types for a
[sales agreement](https://shopify.dev/api/admin-graphql/latest/interfaces/salesagreement).
"""
enum OrderActionType {
  """
  An order with a purchase or charge.
  """
  ORDER

  """
  An edit to the order.
  """
  ORDER_EDIT

  """
  A refund on the order.
  """
  REFUND

  """
  An unknown agreement action. Represents new actions that may be added in future versions.
  """
  UNKNOWN
}

"""
An agreement associated with an order placement.
"""
type OrderAgreement implements SalesAgreement {
  """
  The application that created the agreement.
  """
  app: App

  """
  The date and time at which the agreement occured.
  """
  happenedAt: DateTime!

  """
  The unique identifier for the agreement.
  """
  id: ID!

  """
  The order associated with the agreement.
  """
  order: Order!

  """
  The reason the agremeent was created.
  """
  reason: OrderActionType!

  """
  The sales associated with the agreement.
  """
  sales(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SaleConnection!

  """
  The staff member associated with the agreement.
  """
  user: StaffMember
}

"""
The [application](https://shopify.dev/apps) that created the order.
"""
type OrderApp {
  """
  The application icon.
  """
  icon: Image!

  """
  The application ID.
  """
  id: ID!

  """
  The name of the application.
  """
  name: String!
}

"""
Represents the reason that the order is being canceled. Valid values are: customer, fraud, inventory, declined, other.
"""
enum OrderCancelReason {
  """
  The customer wanted to cancel the order.
  """
  CUSTOMER

  """
  Payment was declined.
  """
  DECLINED

  """
  The order was fraudulent.
  """
  FRAUD

  """
  There was insufficient inventory.
  """
  INVENTORY

  """
  The order was canceled for an unlisted reason.
  """
  OTHER
}

"""
The type of order confirmation.
"""
enum OrderConfirmationInfoType {
  """
  Orders are automatically approved.
  """
  AUTO_APPROVE

  """
  Orders are created as draft orders, requiring approval.
  """
  DRAFT_AT_CHECKOUT

  """
  Order confirmation has mixed approval types.
  """
  MIXED_ORDER_CONFIRMATION
}

"""
An auto-generated type for paginating through multiple Orders.
"""
type OrderConnection {
  """
  A list of edges.
  """
  edges: [OrderEdge!]!

  """
  A list of the nodes contained in OrderEdge.
  """
  nodes: [Order!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Represents the order's current financial status.
"""
enum OrderDisplayFinancialStatus {
  """
  Displayed as **Authorized**.
  """
  AUTHORIZED

  """
  Displayed as **Expired**.
  """
  EXPIRED

  """
  Displayed as **Paid**.
  """
  PAID

  """
  Displayed as **Partially paid**.
  """
  PARTIALLY_PAID

  """
  Displayed as **Partially refunded**.
  """
  PARTIALLY_REFUNDED

  """
  Displayed as **Pending**.
  """
  PENDING

  """
  Displayed as **Refunded**.
  """
  REFUNDED

  """
  Displayed as **Voided**.
  """
  VOIDED
}

"""
Represents the order's aggregated fulfillment status for display purposes.
"""
enum OrderDisplayFulfillmentStatus {
  """
  Displayed as **Fulfilled**. All the items in the order have been fulfilled.
  """
  FULFILLED

  """
  Displayed as **In progress**. Some of the items in the order have been
  fulfilled, or a request for fulfillment has been sent to the fulfillment service.
  """
  IN_PROGRESS

  """
  Displayed as **On hold**. All of the unfulfilled items in this order are on hold.
  """
  ON_HOLD

  """
  Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status.
  """
  OPEN

  """
  Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
  """
  PARTIALLY_FULFILLED

  """
  Displayed as **Pending fulfillment**. A request for fulfillment of some items
  awaits a response from the fulfillment service. Replaced by the "IN_PROGRESS" status.
  """
  PENDING_FULFILLMENT

  """
  Displayed as **Restocked**. All the items in the order have been restocked. Replaced by the "UNFULFILLED" status.
  """
  RESTOCKED

  """
  Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time.
  """
  SCHEDULED

  """
  Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
  """
  UNFULFILLED
}

"""
A summary of the important details for a dispute on an order.
"""
type OrderDisputeSummary implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The type that the dispute was initiated as.
  """
  initiatedAs: DisputeType!

  """
  Whether Fraud Protect is protecting chargebacks on the dispute.
  """
  protectedByFraudProtect: Boolean!

  """
  The current status of the dispute.
  """
  status: DisputeStatus!
}

"""
An auto-generated type which holds one Order and a cursor during pagination.
"""
type OrderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of OrderEdge.
  """
  node: Order!
}

"""
An agreement associated with an edit to the order.
"""
type OrderEditAgreement implements SalesAgreement {
  """
  The application that created the agreement.
  """
  app: App

  """
  The date and time at which the agreement occured.
  """
  happenedAt: DateTime!

  """
  The unique identifier for the agreement.
  """
  id: ID!

  """
  The reason the agremeent was created.
  """
  reason: OrderActionType!

  """
  The sales associated with the agreement.
  """
  sales(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SaleConnection!

  """
  The staff member associated with the agreement.
  """
  user: StaffMember
}

"""
The payment collection details for an order that requires additional payment following an edit to the order.
"""
type OrderPaymentCollectionDetails {
  """
  The URL to use for collecting an additional payment on the order.
  """
  additionalPaymentCollectionUrl: URL

  """
  The list of vaulted payment methods for the order with their permissions.
  """
  vaultedPaymentMethods: [PaymentMandate!]
}

"""
Represents a fraud check on an order.
"""
type OrderRisk {
  """
  Whether the risk level is shown in the Shopify admin. If false, then this
  order risk is ignored when Shopify determines the overall risk level for the order.
  """
  display: Boolean!

  """
  The likelihood that an order is fraudulent, based on this order risk.

  The level can be set by Shopify risk analysis or by an app.
  """
  level: OrderRiskLevel

  """
  The risk message that's shown to the merchant in the Shopify admin.
  """
  message: String
}

"""
The likelihood that an order is fraudulent.
"""
enum OrderRiskLevel {
  """
  There is a high level of risk that this order is fraudulent.
  """
  HIGH

  """
  There is a low level of risk that this order is fraudulent.
  """
  LOW

  """
  There is a medium level of risk that this order is fraudulent.
  """
  MEDIUM
}

"""
The risk recommendation for an order. An order has a single overall risk
recommendation which is the result of one of more risk assessments. The
recommendation suggests the action one should take for an order with regards to
its risk of fraud.
"""
type OrderRiskRecommendation {
  """
  The assessments used to create this recommendation.
  """
  assessments: [RiskAssessment!]!

  """
  The recommendation.
  """
  recommendation: OrderRiskRecommendationResult!
}

"""
List of possible values for an OrderRiskRecommendation recommendation.
"""
enum OrderRiskRecommendationResult {
  ACCEPT
  CANCEL
  INVESTIGATE
  NONE
}

"""
Represents a group of the next scheduled fulfillment order with the count of the remaining scheduled
fulfillment orders at an assigned location.
"""
type OrderScheduledFulfillmentOrderGroup {
  """
  The scheduled fulfillment order with the earliest fulfill at date in the group.
  """
  nextFulfillmentOrder: FulfillmentOrder!

  """
  The total number of remaining scheduled fulfillment orders in the group.
  """
  totalRemaining: Int!
}

"""
An auto-generated type for paginating through multiple OrderScheduledFulfillmentOrderGroups.
"""
type OrderScheduledFulfillmentOrderGroupConnection {
  """
  A list of edges.
  """
  edges: [OrderScheduledFulfillmentOrderGroupEdge!]!

  """
  A list of the nodes contained in OrderScheduledFulfillmentOrderGroupEdge.
  """
  nodes: [OrderScheduledFulfillmentOrderGroup!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one OrderScheduledFulfillmentOrderGroup and a cursor during pagination.
"""
type OrderScheduledFulfillmentOrderGroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of OrderScheduledFulfillmentOrderGroupEdge.
  """
  node: OrderScheduledFulfillmentOrderGroup!
}

"""
A change that has been applied to an order.
"""
union OrderStagedChange = OrderStagedChangeAddCustomItem | OrderStagedChangeAddLineItemDiscount | OrderStagedChangeAddShippingLine | OrderStagedChangeAddVariant | OrderStagedChangeDecrementItem | OrderStagedChangeIncrementItem

"""
A change to the order representing the addition of a
custom line item. For example, you might want to add gift wrapping service
as a custom line item.
"""
type OrderStagedChangeAddCustomItem {
  """
  The price of an individual item without any discounts applied. This value cannot be negative.
  """
  originalUnitPrice: MoneyV2!

  """
  The quantity of the custom item to add to the order. This value must be greater than zero.
  """
  quantity: Int!

  """
  The title of the custom item.
  """
  title: String!
}

"""
The discount applied to an item that was added during the current order edit.
"""
type OrderStagedChangeAddLineItemDiscount {
  """
  The description of the discount.
  """
  description: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The pricing value of the discount.
  """
  value: PricingValue!
}

"""
A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)
added as part of an order edit.
"""
type OrderStagedChangeAddShippingLine {
  """
  The phone number at the shipping address.
  """
  phone: String

  """
  The shipping line's title that is shown to the buyer.
  """
  presentmentTitle: String

  """
  The price that applies to the shipping line.
  """
  price: MoneyV2!

  """
  The title of the shipping line.
  """
  title: String
}

"""
A change to the order representing the addition of an existing product variant.
"""
type OrderStagedChangeAddVariant {
  """
  The quantity of the product variant that was added.
  """
  quantity: Int!

  """
  The product variant that was added.
  """
  variant: ProductVariant!
}

"""
An auto-generated type for paginating through multiple OrderStagedChanges.
"""
type OrderStagedChangeConnection {
  """
  A list of edges.
  """
  edges: [OrderStagedChangeEdge!]!

  """
  A list of the nodes contained in OrderStagedChangeEdge.
  """
  nodes: [OrderStagedChange!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An removal of items from an existing line item on the order.
"""
type OrderStagedChangeDecrementItem {
  """
  The number of items removed.
  """
  delta: Int!

  """
  The original line item.
  """
  lineItem: LineItem!

  """
  The intention to restock the removed items.
  """
  restock: Boolean!
}

"""
An auto-generated type which holds one OrderStagedChange and a cursor during pagination.
"""
type OrderStagedChangeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of OrderStagedChangeEdge.
  """
  node: OrderStagedChange!
}

"""
An addition of items to an existing line item on the order.
"""
type OrderStagedChangeIncrementItem {
  """
  The number of items added.
  """
  delta: Int!

  """
  The original line item.
  """
  lineItem: LineItem!
}

"""
A payment transaction in the context of an order.
"""
type OrderTransaction implements Node {
  """
  The masked account number associated with the payment method.
  """
  accountNumber: String

  """
  The amount of money.
  """
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The amount and currency of the transaction in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The amount and currency of the transaction.
  """
  amountV2: MoneyV2! @deprecated(reason: "Use `amountSet` instead.")

  """
  Authorization code associated with the transaction.
  """
  authorizationCode: String

  """
  The time when the authorization expires. This field is available only to
  stores on a Shopify Plus plan and is populated only for Shopify Payments
  authorizations.
  """
  authorizationExpiresAt: DateTime

  """
  Date and time when the transaction was created.
  """
  createdAt: DateTime!

  """
  A standardized error code, independent of the payment provider.
  """
  errorCode: OrderTransactionErrorCode

  """
  Whether the authorization was extended and there will be a fee to capture past the standard authorization length.
  """
  extendedAuthorization: Boolean!

  """
  The transaction fees charged on the order transaction. Only present for Shopify Payments transactions.
  """
  fees: [TransactionFee!]!

  """
  The human-readable payment gateway name used to process the transaction.
  """
  formattedGateway: String

  """
  The payment gateway used to process the transaction.
  """
  gateway: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The kind of transaction.
  """
  kind: OrderTransactionKind!

  """
  Whether the transaction can be manually captured.
  """
  manuallyCapturable: Boolean!

  """
  Specifies the available amount to refund on the gateway.
  This value is only available for transactions of type `SuggestedRefund`.
  """
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableV2` instead.")

  """
  Specifies the available amount with currency to refund on the gateway.
  This value is only available for transactions of type `SuggestedRefund`.
  """
  maximumRefundableV2: MoneyV2

  """
  The associated order.
  """
  order: Order

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: OrderTransaction

  """
  The payment details for the transaction.
  """
  paymentDetails: PaymentDetails

  """
  The payment icon to display for the transaction.
  """
  paymentIcon(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  The payment ID associated with the transaction.
  """
  paymentId: String

  """
  The payment method used for the transaction. This value is `null` if the payment method is unknown.
  """
  paymentMethod: PaymentMethods @deprecated(reason: "Use `paymentIcon` instead.")

  """
  The payment provider for the transaction.
  """
  paymentProvider: PaymentProvider

  """
  Date and time when the transaction was processed.
  """
  processedAt: DateTime

  """
  The transaction receipt that the payment gateway attaches to the transaction.
  The value of this field depends on which payment gateway processed the transaction.
  """
  receipt: String @deprecated(reason: "Use `receiptJson` instead.")

  """
  The transaction receipt that the payment gateway attaches to the transaction.
  The value of this field depends on which payment gateway processed the transaction.
  """
  receiptJson: JSON

  """
  The settlement currency.
  """
  settlementCurrency: CurrencyCode

  """
  The rate used when converting the transaction amount to settlement currency.
  """
  settlementCurrencyRate: Decimal

  """
  Contains all Shopify Payments information related to an order transaction.
  This field is available only to stores on a Shopify Plus plan.
  """
  shopifyPaymentsSet: ShopifyPaymentsTransactionSet

  """
  The status of this transaction.
  """
  status: OrderTransactionStatus!

  """
  Whether the transaction is a test transaction.
  """
  test: Boolean!

  """
  Specifies the available amount to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettled: Money @deprecated(reason: "Use `totalUnsettledSet` instead.")

  """
  Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettledSet: MoneyBag

  """
  Specifies the available amount with currency to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettledV2: MoneyV2 @deprecated(reason: "Use `totalUnsettledSet` instead.")

  """
  Staff member who was logged into the Shopify POS device when the transaction was processed.
  """
  user: StaffMember
}

"""
An auto-generated type for paginating through multiple OrderTransactions.
"""
type OrderTransactionConnection {
  """
  A list of edges.
  """
  edges: [OrderTransactionEdge!]!

  """
  A list of the nodes contained in OrderTransactionEdge.
  """
  nodes: [OrderTransaction!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one OrderTransaction and a cursor during pagination.
"""
type OrderTransactionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of OrderTransactionEdge.
  """
  node: OrderTransaction!
}

"""
A standardized error code, independent of the payment provider.
"""
enum OrderTransactionErrorCode {
  """
  The payment method was invalid.
  """
  AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD

  """
  The maximum amount has been captured.
  """
  AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED

  """
  The maximum amount has been refunded.
  """
  AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED

  """
  The maximum of 10 authorizations has been captured for an order.
  """
  AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED

  """
  The maximum of 10 refunds has been processed for an order.
  """
  AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED

  """
  The order was canceled, which canceled all open authorizations.
  """
  AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED

  """
  The order was not confirmed within three hours.
  """
  AMAZON_PAYMENTS_STALE

  """
  Call the card issuer.
  """
  CALL_ISSUER

  """
  The card was declined.
  """
  CARD_DECLINED

  """
  There is an error in the gateway or merchant configuration.
  """
  CONFIG_ERROR

  """
  The card is expired.
  """
  EXPIRED_CARD

  """
  There was an unknown error with processing the payment.
  """
  GENERIC_ERROR

  """
  The address does not match the card number.
  """
  INCORRECT_ADDRESS

  """
  The CVC does not match the card number.
  """
  INCORRECT_CVC

  """
  The card number is incorrect.
  """
  INCORRECT_NUMBER

  """
  The entered PIN is incorrect.
  """
  INCORRECT_PIN

  """
  The ZIP or postal code does not match the card number.
  """
  INCORRECT_ZIP

  """
  The amount is either too high or too low for the provider.
  """
  INVALID_AMOUNT

  """
  The payment method is not available in the customer's country.
  """
  INVALID_COUNTRY

  """
  The format of the CVC is incorrect.
  """
  INVALID_CVC

  """
  The format of the expiry date is incorrect.
  """
  INVALID_EXPIRY_DATE

  """
  The format of the card number is incorrect.
  """
  INVALID_NUMBER

  """
  The payment method is momentarily unavailable.
  """
  PAYMENT_METHOD_UNAVAILABLE

  """
  The card has been reported as lost or stolen, and the card issuer has
  requested that the merchant keep the card and call the number on the back.
  """
  PICK_UP_CARD

  """
  There was an error while processing the payment.
  """
  PROCESSING_ERROR

  """
  A real card was used but the gateway was in test mode.
  """
  TEST_MODE_LIVE_CARD

  """
  The gateway or merchant configuration doesn't support a feature, such as network tokenization.
  """
  UNSUPPORTED_FEATURE
}

"""
Specifies the information needed to create an order transaction.
"""
input OrderTransactionInput {
  """
  The amount of money for this transaction.
  """
  amount: Money!

  """
  The payment gateway to use for this transaction.
  """
  gateway: String!

  """
  The kind of transaction.
  """
  kind: OrderTransactionKind!

  """
  The ID of the order associated with the transaction.
  """
  orderId: ID!

  """
  The ID of the optional parent transaction, for example the authorization of a capture.
  """
  parentId: ID

  """
  The time at which the transaction occurred.
  """
  processedAt: DateTime

  """
  The source of the transaction. For example, 'external'.
  """
  source: String
}

"""
The different kinds of order transactions.
"""
enum OrderTransactionKind {
  """
  An amount reserved against the cardholder's funding source.
  Money does not change hands until the authorization is captured.
  """
  AUTHORIZATION

  """
  A transfer of the money that was reserved by an authorization.
  """
  CAPTURE

  """
  The money returned to the customer when they've paid too much during a cash transaction.
  """
  CHANGE

  """
  An authorization for a payment taken with an EMV credit card reader.
  """
  EMV_AUTHORIZATION

  """
  A partial or full return of captured funds to the cardholder.
  A refund can happen only after a capture is processed.
  """
  REFUND

  """
  An authorization and capture performed together in a single step.
  """
  SALE

  """
  A suggested refund transaction that can be used to create a refund.
  """
  SUGGESTED_REFUND

  """
  A cancelation of an authorization transaction.
  """
  VOID
}

"""
The different states that an `OrderTransaction` can have.
"""
enum OrderTransactionStatus {
  """
  Awaiting a response.
  """
  AWAITING_RESPONSE

  """
  There was an error while processing the transaction.
  """
  ERROR

  """
  The transaction failed.
  """
  FAILURE

  """
  The transaction is pending.
  """
  PENDING

  """
  The transaction succeeded.
  """
  SUCCESS

  """
  The transaction status is unknown.
  """
  UNKNOWN
}

"""
Returns information about pagination in a connection, in accordance with the
[Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
"""
type PageInfo {
  """
  The cursor corresponding to the last node in edges.
  """
  endCursor: String

  """
  Whether there are more pages to fetch following the current page.
  """
  hasNextPage: Boolean!

  """
  Whether there are any pages prior to the current page.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first node in edges.
  """
  startCursor: String
}

"""
Page size for a printable asset (eg: shipping label).
"""
enum PageSize {
  """
  Thermal (4 × 6 inch / 100 × 150 mm / A6) for label printers.
  """
  PAGE_4_X_6

  """
  Letter (8.5 × 11 inch) for desktop printers.
  """
  PAGE_8_X_11
}

"""
Holds all the payment authorization settings for the shop.
"""
type PaymentAuthorizationSettings implements Node {
  """
  Email notifications are enabled when authorizations are close to expiring.
  """
  enableExpiryNotifications: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The processing method for all payments.
  """
  processingMethod: PaymentProcessingMethod!
}

"""
Payment details related to a transaction.
"""
union PaymentDetails = CardPaymentDetails

"""
Represents whether the payment gateway can be used for vaulting on a shop.
"""
type PaymentGatewayVaultingStatus {
  """
  Whether the gateway has been rejected.
  """
  rejected: Boolean!

  """
  A status representing whether the gateway can be used for vaulting.
  """
  status: PaymentGatewayVaultingStatusStatus!
}

"""
Represents a valid payment gateway vaulting status.
"""
enum PaymentGatewayVaultingStatusStatus {
  """
  The status is disabled.
  """
  DISABLED

  """
  The status is enabled.
  """
  ENABLED
}

"""
All possible instrument outputs for Payment Mandates.
"""
union PaymentInstrument = VaultCreditCard | VaultPaypalBillingAgreement

"""
A payment instrument and the permission
the owner of the instrument gives to the merchant to debit it.
"""
type PaymentMandate implements Node {
  """
  The unique identifier of a payment mandate.
  """
  id: ID!

  """
  The outputs details of the payment instrument.
  """
  paymentInstrument: PaymentInstrument!
}

"""
Represents details of a payment method.
"""
type PaymentMethod {
  """
  The name of the payment method.
  """
  name: String!

  """
  The credit card rates.
  """
  rates: [PaymentMethodRate!] @deprecated(reason: "Use `QueryRoot.shopifyPaymentsRates` instead.")

  """
  The type of payment method.
  """
  type: PaymentMethodType!
}

"""
Represents details of a payment method configuration.
"""
type PaymentMethodConfiguration {
  """
  The onboarding state of a payment method.
  """
  capabilityParams: CapabilityParams

  """
  Whether the payment method is enabled.
  """
  enabled: Boolean!

  """
  Identifier for the payment method.
  """
  name: String!

  """
  The id of the payment experience configuration.
  """
  paymentExperienceConfigurationId: UnsignedInt64

  """
  The type of payment method.
  """
  type: PaymentMethodType!
}

"""
Payment method disabled reason.
"""
enum PaymentMethodConfigurationMessage {
  """
  The disabled reason is: pending.onboarding.
  """
  PENDING_ONBOARDING

  """
  The disabled reason is: pending.review.
  """
  PENDING_REVIEW

  """
  The disabled reason is: rejected.fraud.
  """
  REJECTED_FRAUD

  """
  The disabled reason is: rejected.other.
  """
  REJECTED_OTHER

  """
  The disabled reason is: requirements.fields_needed.
  """
  REQUIREMENTS_FIELDS_NEEDED
}

"""
All the available credit card rate types and values.
"""
type PaymentMethodRate {
  """
  The type or differentiator of the rate.
  """
  differentiator: RateDifferentiator!

  """
  The credit card flat fee.
  """
  flatFee: MoneyV2!

  """
  The credit card rate.
  """
  rate: Float!
}

"""
Type of payment method.
"""
enum PaymentMethodType {
  """
  Credit card.
  """
  CREDIT_CARD

  """
  Crypto currencies like Bitcoin.
  """
  CRYPTOCURRENCY

  """
  Local payment method Klarna pay later.
  """
  KLARNA_PAY_LATER @deprecated(reason: "Not supported anymore.")

  """
  Local Payment Method.
  """
  LOCAL_PAYMENT_METHOD

  """
  Other payment types like for instance Paypal.
  """
  OTHER

  """
  Local payment method Sofort.
  """
  SOFORT @deprecated(reason: "Not supported anymore.")

  """
  Accelerated Checkout.
  """
  WALLET
}

"""
Some of the payment methods used in Shopify.
"""
enum PaymentMethods {
  AMERICAN_EXPRESS
  BITCOIN
  BOGUS
  DANKORT
  DINERS_CLUB
  DISCOVER
  DOGECOIN

  """
  The payment method for eftpos_au payment.
  """
  EFTPOS

  """
  The payment method for Elo payment.
  """
  ELO
  FORBRUGSFORENINGEN

  """
  The payment method for Interac payment.
  """
  INTERAC
  JCB
  LITECOIN
  MAESTRO
  MASTERCARD
  PAYPAL

  """
  The payment method for UnionPay payment.
  """
  UNIONPAY
  VISA
}

"""
The available payment processing methods.
"""
enum PaymentProcessingMethod {
  """
  Automatically capture payment for orders.
  """
  AUTO

  """
  Manually capture payment for orders.
  """
  MANUAL
}

"""
Represents payment providers.
"""
type PaymentProvider implements Node {
  """
  Label for the attachment field.
  """
  attachment: String

  """
  Is the provider available in the shop's country.
  """
  available: Boolean!

  """
  Whether the provider accepts refunds.
  """
  canRefund: Boolean!

  """
  Provider configuration for this shop.
  """
  configuration: PaymentProviderConfiguration

  """
  Supported countries of the provider.
  """
  countries: [CountryCode!]!

  """
  Labels for credentials fields.
  """
  credentials: [PaymentProviderCredentialLabel!]!

  """
  Discounted transaction fee while the shop is in trial.
  """
  discountedTransactionFee: Float!

  """
  Discount transaction fee end date for the shop on trial.
  """
  discountedTransactionFeeEndAt: DateTime! @deprecated(reason: "Not supported anymore.")

  """
  Is the shop eligible for the provider.
  """
  eligible: Boolean!

  """
  The group of the provider.
  """
  group: ProviderGroup!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The kind of provider.
  """
  kind: String!

  """
  The display name of the provider.
  """
  name: String!

  """
  Onboarding key-value parameters for the onboarding flow for this provider.
  """
  onboardingParams: JSON

  """
  The payment methods of the provider.
  """
  paymentMethods: [PaymentMethod!]!

  """
  Does the provider offer a test mode.
  """
  testModeAvailable: Boolean!

  """
  Transaction fee for the provider.
  """
  transactionFee: Float!

  """
  The URL of the provider.
  """
  url: URL
}

"""
Holds all payment provider configuration information.
"""
type PaymentProviderConfiguration implements Node {
  """
  The attachment for the gateway.
  """
  attachment: String

  """
  Payment provider credentials provided by the merchant.
  """
  credentials: [PaymentProviderCredential!]!

  """
  The enabled presentment currency settings.
  """
  currencies: [CurrencySetting!]!

  """
  The status of the gateway.
  """
  enabled: Boolean!

  """
  Extra settings for the gateway such as checkboxes or radio buttons.
  """
  extraSettings: [Attribute!]!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The instructions for the manual or custom gateway.
  """
  instructions: String

  """
  The message for the manual or custom gateway.
  """
  message: String

  """
  Whether or not multi currency is supported.
  """
  multiCurrencySupported: Boolean!

  """
  Status representing whether the gateway can be used for vaulting.
  """
  paymentGatewayVaultingStatus: PaymentGatewayVaultingStatus

  """
  Payment methods that are active.
  """
  paymentMethods: [PaymentMethodConfiguration!]!

  """
  Status of test mode for the gateway.
  """
  testModeEnabled: Boolean!

  """
  3D Secure cardinal credentials.
  """
  threeDSecureCardinalCredential: ThreeDSecureCardinalCredential

  """
  3D Secure setting for the gateway.
  """
  threeDSecureSetting: ThreeDSecureSetting
}

"""
Payment gateway credentials.
"""
type PaymentProviderCredential {
  """
  Credential identifier.
  """
  index: Int!

  """
  Check if this credential is sensitive, like passwords or private tokens.
  """
  sensitive: Boolean!

  """
  Credential value. Note that sensitive credentials are returned null.
  """
  value: String
}

"""
Represents the description of each credential.
"""
type PaymentProviderCredentialLabel {
  """
  Credential identifier.
  """
  index: Int!

  """
  Credential label.
  """
  label: String!

  """
  Check if this credential is sensitive, like passwords or private tokens.
  """
  sensitive: Boolean!
}

"""
Represents the payment schedule for a single payment defined in the payment terms.
"""
type PaymentSchedule implements Node {
  """
  Amount owed for this payment schedule.
  """
  amount: MoneyV2!

  """
  Date and time when the payment schedule is paid or fulfilled.
  """
  completedAt: DateTime

  """
  Date and time when the payment schedule is due.
  """
  dueAt: DateTime

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Date and time when the invoice is sent.
  """
  issuedAt: DateTime

  """
  The payment terms the payment schedule belongs to.
  """
  paymentTerms: PaymentTerms!
}

"""
An auto-generated type for paginating through multiple PaymentSchedules.
"""
type PaymentScheduleConnection {
  """
  A list of edges.
  """
  edges: [PaymentScheduleEdge!]!

  """
  A list of the nodes contained in PaymentScheduleEdge.
  """
  nodes: [PaymentSchedule!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one PaymentSchedule and a cursor during pagination.
"""
type PaymentScheduleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of PaymentScheduleEdge.
  """
  node: PaymentSchedule!
}

"""
Settings related to payments.
"""
type PaymentSettings {
  """
  List of the digital wallets which the shop supports.
  """
  supportedDigitalWallets: [DigitalWallet!]!
}

"""
Represents the payment terms for an order or draft order.
"""
type PaymentTerms implements Node {
  """
  The draft order associated with the payment terms.
  """
  draftOrder: DraftOrder

  """
  Duration of payment terms in days based on the payment terms template used to create the payment terms.
  """
  dueInDays: Int

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The order associated with the payment terms.
  """
  order: Order

  """
  Whether the payment terms have overdue payment schedules.
  """
  overdue: Boolean!

  """
  List of schedules for the payment terms.
  """
  paymentSchedules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PaymentScheduleConnection!

  """
  The name of the payment terms template used to create the payment terms.
  """
  paymentTermsName: String!

  """
  The payment terms template type used to create the payment terms.
  """
  paymentTermsType: PaymentTermsType!

  """
  The payment terms name, translated into the shop admin's preferred language.
  """
  translatedName: String!
}

"""
How the payment terms are configured across the locations for this company.
"""
enum PaymentTermsInfoType {
  """
  The payment is due on receipt.
  """
  DUE_ON_RECEIPT

  """
  The payment is due on a fixed date.
  """
  FIXED_DATE

  """
  The payment terms are mixed.
  """
  MIXED_PAYMENT_TERMS

  """
  The payment is due within 15 days.
  """
  NET_15

  """
  The payment is due within 30 days.
  """
  NET_30

  """
  The payment is due within 45 days.
  """
  NET_45

  """
  The payment is due within 60 days.
  """
  NET_60

  """
  The payment is due within 7 days.
  """
  NET_7

  """
  The payment is due within 90 days.
  """
  NET_90

  """
  The payment terms are not set.
  """
  NO_PAYMENT_TERMS
}

"""
Represents the payment terms template object.
"""
type PaymentTermsTemplate implements Node {
  """
  The description of the payment terms template.
  """
  description: String!

  """
  The number of days between the issued date and due date if this is the net type of payment terms.
  """
  dueInDays: Int

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The name of the payment terms template.
  """
  name: String!

  """
  The type of the payment terms template.
  """
  paymentTermsType: PaymentTermsType!

  """
  The translated payment terms template name.
  """
  translatedName: String!
}

"""
The type of a payment terms or a payment terms template.
"""
enum PaymentTermsType {
  """
  The payment terms or payment terms template is a fixed type. It's due on a specified date.
  """
  FIXED

  """
  The payment terms or payment terms template is due on fulfillment.
  """
  FULFILLMENT

  """
  The payment terms or payment terms template is a net type. It's due a number of days after issue.
  """
  NET

  """
  The payment terms or payment terms template is due on receipt.
  """
  RECEIPT

  """
  The type of the payment terms or payment terms template is unknown.
  """
  UNKNOWN
}

"""
Represents a valid PayPal Express subscriptions gateway status.
"""
enum PaypalExpressSubscriptionsGatewayStatus {
  """
  The status is disabled.
  """
  DISABLED

  """
  The status is enabled.
  """
  ENABLED

  """
  The status is pending.
  """
  PENDING
}

"""
Ping message callbacks allow app developers to configure URLs to receive a
webhook when a message is sent from the Ping application,
and to receive a webhook when global Ping settings are modified.
"""
type PingMessageCallback {
  """
  The app that registered this link.
  """
  app: App!

  """
  The unique identifier of the Ping Message callback.
  """
  id: ID!

  """
  The URL used for Ping message delivery to Shopify applications.
  """
  url: URL!
}

"""
A POS link registered by an app.
"""
type PosLink {
  """
  The app that registered this link.
  """
  app: App!

  """
  The layout of the displayed link.
  """
  layout: PosLinkLayout!

  """
  The text displayed by the link.
  """
  text: String!

  """
  The URL the link points to.
  """
  url: URL!
}

"""
Available layouts for a POS link.
"""
enum PosLinkLayout {
  FULLSCREEN
  MODAL
}

"""
Resource locations for a POS link.
"""
enum PosLinkResourceLocation {
  COMPLETE
  EDIT
}

"""
Resource types for a POS link.
"""
enum PosLinkResourceType {
  CARTS
  ORDERS
}

"""
Represents a price list, including information about related prices and eligibility rules.
You can use price lists to specify either fixed prices or adjusted relative prices that
override initial product variant prices. Price lists are applied to customers
using context rules, which determine price list eligibility.

  For more information on price lists, refer to
  [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
"""
type PriceList implements Node {
  """
  A set of facts about the customer, used to determine price list eligibility.
  """
  contextRule: PriceListContextRule

  """
  The currency for fixed prices associated with this price list.
  """
  currency: CurrencyCode!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The unique name of the price list, used as a human-readable identifier.
  """
  name: String!

  """
  Relative adjustments to other prices.
  """
  parent: PriceListParent

  """
  A list of prices associated with the price list.
  """
  prices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PriceListPriceConnection!
}

"""
The type and value of a price list adjustment.

For more information on price lists, refer to
[Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
"""
type PriceListAdjustment {
  """
  The type of price adjustment, such as percentage increase or decrease.
  """
  type: PriceListAdjustmentType!

  """
  The value of price adjustment, where positive numbers reduce the prices and negative numbers
  increase them.
  """
  value: Float!
}

"""
Represents a percentage price adjustment type.
"""
enum PriceListAdjustmentType {
  """
  Percentage decrease type. Prices will have a lower value.
  """
  PERCENTAGE_DECREASE

  """
  Percentage increase type. Prices will have a higher value.
  """
  PERCENTAGE_INCREASE
}

"""
An auto-generated type for paginating through multiple PriceLists.
"""
type PriceListConnection {
  """
  A list of edges.
  """
  edges: [PriceListEdge!]!

  """
  A list of the nodes contained in PriceListEdge.
  """
  nodes: [PriceList!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Facts about the customer that was used to determine the price list eligibility.
For example, if the `PriceListContextRule` is for a US market, then the price
list will be eligible to all customers in the US.
For more information on price lists, refer to
[Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
"""
type PriceListContextRule {
  """
  A list of two letter country codes that determines price list eligibility.
  """
  countries: [CountryCode!]!

  """
  The associated market.
  """
  market: Market
}

"""
An auto-generated type which holds one PriceList and a cursor during pagination.
"""
type PriceListEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of PriceListEdge.
  """
  node: PriceList!
}

"""
Represents relative adjustments from one price list to other prices.
  You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based
  adjustment. Adjusted prices work in conjunction with exchange rules and rounding.

  [Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)
  support both percentage increases and decreases.
"""
type PriceListParent {
  """
  A price list adjustment.
  """
  adjustment: PriceListAdjustment!
}

"""
Represents information about pricing for a product variant
        as defined on a price list, such as the price, compare at price, and
origin type. You can use a PriceListPrice to specify a fixed price for a
specific product variant.
"""
type PriceListPrice {
  """
  The compare-at price of the product variant on this price list.
  """
  compareAtPrice: MoneyV2

  """
  The origin of a price, either fixed (defined on the price list) or relative
  (calculated using a price list adjustment configuration).
  """
  originType: PriceListPriceOriginType!

  """
  The price of the product variant on this price list.
  """
  price: MoneyV2!

  """
  The product variant associated with this price.
  """
  variant: ProductVariant!
}

"""
An auto-generated type for paginating through multiple PriceListPrices.
"""
type PriceListPriceConnection {
  """
  A list of edges.
  """
  edges: [PriceListPriceEdge!]!

  """
  A list of the nodes contained in PriceListPriceEdge.
  """
  nodes: [PriceListPrice!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one PriceListPrice and a cursor during pagination.
"""
type PriceListPriceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of PriceListPriceEdge.
  """
  node: PriceListPrice!
}

"""
Represents the origin of a price, either fixed (defined on the price list) or
relative (calculated using a price list adjustment configuration).
"""
enum PriceListPriceOriginType {
  """
  The price is defined on the price list.
  """
  FIXED

  """
  The price is relative to the adjustment type and value.
  """
  RELATIVE
}

"""
Price rules are a set of conditions, including entitlements and prerequisites,
that must be met in order for a discount code to apply.

We recommend using the types and queries detailed at [Manage existing
discounts](https://shopify.dev/apps/discounts/existing) instead. These will
replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and
`DiscountCode` resources.
"""
type PriceRule implements CommentEventSubject & HasEvents & LegacyInteroperability & Node {
  """
  The maximum number of times that the price rule can be allocated onto an order.
  """
  allocationLimit: Int

  """
  The method by which the price rule's value is allocated to its entitled items.
  """
  allocationMethod: PriceRuleAllocationMethod!

  """
  The application that created the price rule.
  """
  app: App

  """
  Determines which discount classes the discount can combine with.
  """
  combinesWith: DiscountCombinesWith!

  """
  Determines whether the discount may be combined with other discounts on a single line.
  """
  combiningBehavior: DiscountCombiningBehavior!

  """
  The date and time when the price rule was created.
  """
  createdAt: DateTime!

  """
  The customers that can use this price rule.
  """
  customerSelection: PriceRuleCustomerSelection!

  """
  The class of the discount for combining purposes.
  """
  discountClass: DiscountClass!

  """
  List of the price rule's discount codes.
  """
  discountCodes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PriceRuleDiscountCodeConnection!

  """
  How many discount codes associated with the price rule.
  """
  discountCodesCount: Int!

  """
  The date and time when the price rule ends. For open-ended price rules, use `null`.
  """
  endsAt: DateTime

  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  entitlementToPrerequisiteQuantityRatio: PriceRuleEntitlementToPrerequisiteQuantityRatio @deprecated(reason: "Use `prerequisiteToEntitlementQuantityRatio` instead.")

  """
  The paginated list of events associated with the price rule.
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!

  """
  A list of the price rule's features.
  """
  features: [PriceRuleFeature!]!

  """
  A full summary of the price rule.
  """
  fullSummary: String

  """
  Indicates whether there are any timeline comments on the price rule.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The items to which the price rule applies.
  """
  itemEntitlements: PriceRuleItemEntitlements!

  """
  The items required for the price rule to be applicable.
  """
  itemPrerequisites: PriceRuleLineItemPrerequisites!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  Whether the price rule can be applied only once per customer.
  """
  oncePerCustomer: Boolean!

  """
  The number of the entitled items must fall within this range for the price rule to be applicable.
  """
  prerequisiteQuantityRange: PriceRuleQuantityRange

  """
  The shipping cost must fall within this range for the price rule to be applicable.
  """
  prerequisiteShippingPriceRange: PriceRuleMoneyRange

  """
  The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
  """
  prerequisiteSubtotalRange: PriceRuleMoneyRange

  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  prerequisiteToEntitlementQuantityRatio: PriceRulePrerequisiteToEntitlementQuantityRatio

  """
  URLs that can be used to share the discount.
  """
  shareableUrls: [PriceRuleShareableUrl!]!

  """
  The shipping lines to which the price rule applies.
  """
  shippingEntitlements: PriceRuleShippingLineEntitlements!

  """
  The date and time when the price rule starts.
  """
  startsAt: DateTime!

  """
  The status of the price rule.
  """
  status: PriceRuleStatus!

  """
  A detailed summary of the price rule.
  """
  summary: String

  """
  The type of lines (line_item or shipping_line) to which the price rule applies.
  """
  target: PriceRuleTarget!

  """
  The title of the price rule.
  """
  title: String!

  """
  The total sales from orders where the price rule was used.
  """
  totalSales: MoneyV2

  """
  A list of the price rule's features.
  """
  traits: [PriceRuleTrait!]! @deprecated(reason: "Use `features` instead.")

  """
  The number of times that the price rule has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  usageCount: Int!

  """
  The maximum number of times that the price rule can be used in total.
  """
  usageLimit: Int

  """
  A time period during which a price rule is applicable.
  """
  validityPeriod: PriceRuleValidityPeriod!

  """
  The value of the price rule.
  """
  value: PriceRuleValue! @deprecated(reason: "Use `valueV2` instead.")

  """
  The value of the price rule.
  """
  valueV2: PricingValue!
}

"""
The method by which the price rule's value is allocated to its entitled items.
"""
enum PriceRuleAllocationMethod {
  """
  The value will be applied once across the entitled items.
  """
  ACROSS

  """
  The value will be applied to each of the entitled items.
  """
  EACH
}

"""
An auto-generated type for paginating through multiple PriceRules.
"""
type PriceRuleConnection {
  """
  A list of edges.
  """
  edges: [PriceRuleEdge!]!

  """
  A list of the nodes contained in PriceRuleEdge.
  """
  nodes: [PriceRule!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A selection of customers for whom the price rule applies.
"""
type PriceRuleCustomerSelection {
  """
  List of customers to whom the price rule applies.
  """
  customers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CustomerConnection!

  """
  Whether the price rule applies to all customers.
  """
  forAllCustomers: Boolean!

  """
  A list of customer segments that contain the customers who can use the price rule.
  """
  segments: [Segment!]!
}

"""
A discount code of a price rule.
"""
type PriceRuleDiscountCode implements Node {
  """
  The application that created the discount code.
  """
  app: App

  """
  The code to apply the discount.
  """
  code: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The number of times that the price rule has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  usageCount: Int!
}

"""
An auto-generated type for paginating through multiple PriceRuleDiscountCodes.
"""
type PriceRuleDiscountCodeConnection {
  """
  A list of edges.
  """
  edges: [PriceRuleDiscountCodeEdge!]!

  """
  A list of the nodes contained in PriceRuleDiscountCodeEdge.
  """
  nodes: [PriceRuleDiscountCode!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.
"""
type PriceRuleDiscountCodeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of PriceRuleDiscountCodeEdge.
  """
  node: PriceRuleDiscountCode!
}

"""
An auto-generated type which holds one PriceRule and a cursor during pagination.
"""
type PriceRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of PriceRuleEdge.
  """
  node: PriceRule!
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type PriceRuleEntitlementToPrerequisiteQuantityRatio {
  """
  The quantity of entitled items in the ratio.
  """
  entitlementQuantity: Int!

  """
  The quantity of prerequisite items in the ratio.
  """
  prerequisiteQuantity: Int!
}

"""
The list of features that can be supported by a price rule.
"""
enum PriceRuleFeature {
  """
  The price rule supports bulk discounts.
  """
  BULK

  """
  The price rule supports Buy X, Get Y (BXGY) discounts.
  """
  BUY_ONE_GET_ONE

  """
  The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
  """
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT

  """
  The price rule supports discounts that require a quantity.
  """
  QUANTITY_DISCOUNTS

  """
  The price rule targets specific customers.
  """
  SPECIFIC_CUSTOMERS
}

"""
The value of a fixed amount price rule.
"""
type PriceRuleFixedAmountValue {
  """
  The monetary value of the price rule.
  """
  amount: Money!
}

"""
The items to which this price rule applies. This may be multiple products,
product variants, collections or combinations of the aforementioned.
"""
type PriceRuleItemEntitlements {
  """
  The collections to which the price rule applies.
  """
  collections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CollectionConnection!

  """
  The product variants to which the price rule applies.
  """
  productVariants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductVariantConnection!

  """
  The products to which the price rule applies.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductConnection!

  """
  Whether the price rule applies to all line items.
  """
  targetAllLineItems: Boolean!
}

"""
Single or multiple line item products, product variants or collections required
for the price rule to be applicable, can also be provided in combination.
"""
type PriceRuleLineItemPrerequisites {
  """
  The collections required for the price rule to be applicable.
  """
  collections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CollectionConnection!

  """
  The product variants required for the price rule to be applicable.
  """
  productVariants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductVariantConnection!

  """
  The products required for the price rule to be applicable.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductConnection!
}

"""
A money range within which the price rule is applicable.
"""
type PriceRuleMoneyRange {
  """
  The lower bound of the money range.
  """
  greaterThan: Money

  """
  The lower bound or equal of the money range.
  """
  greaterThanOrEqualTo: Money

  """
  The upper bound of the money range.
  """
  lessThan: Money

  """
  The upper bound or equal of the money range.
  """
  lessThanOrEqualTo: Money
}

"""
The value of a percent price rule.
"""
type PriceRulePercentValue {
  """
  The percent value of the price rule.
  """
  percentage: Float!
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type PriceRulePrerequisiteToEntitlementQuantityRatio {
  """
  The quantity of entitled items in the ratio.
  """
  entitlementQuantity: Int!

  """
  The quantity of prerequisite items in the ratio.
  """
  prerequisiteQuantity: Int!
}

"""
A quantity range within which the price rule is applicable.
"""
type PriceRuleQuantityRange {
  """
  The lower bound of the quantity range.
  """
  greaterThan: Int

  """
  The lower bound or equal of the quantity range.
  """
  greaterThanOrEqualTo: Int

  """
  The upper bound of the quantity range.
  """
  lessThan: Int

  """
  The upper bound or equal of the quantity range.
  """
  lessThanOrEqualTo: Int
}

"""
Shareable URL for the discount code associated with the price rule.
"""
type PriceRuleShareableUrl {
  """
  The image URL of the item (product or collection) to which the discount applies.
  """
  targetItemImage: Image

  """
  The type of page that's associated with the URL.
  """
  targetType: PriceRuleShareableUrlTargetType!

  """
  The title of the page that's associated with the URL.
  """
  title: String!

  """
  The URL for the discount code.
  """
  url: URL!
}

"""
The type of page where a shareable price rule URL lands.
"""
enum PriceRuleShareableUrlTargetType {
  """
  The URL lands on a collection page.
  """
  COLLECTION

  """
  The URL lands on a home page.
  """
  HOME

  """
  The URL lands on a product page.
  """
  PRODUCT
}

"""
The shipping lines to which the price rule applies to.
"""
type PriceRuleShippingLineEntitlements {
  """
  The codes for the countries to which the price rule applies to.
  """
  countryCodes: [CountryCode!]!

  """
  Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean!

  """
  Whether the price rule applies to all shipping lines.
  """
  targetAllShippingLines: Boolean!
}

"""
The status of the price rule.
"""
enum PriceRuleStatus {
  """
  The price rule is active.
  """
  ACTIVE

  """
  The price rule is expired.
  """
  EXPIRED

  """
  The price rule is scheduled.
  """
  SCHEDULED
}

"""
The type of lines (line_item or shipping_line) to which the price rule applies.
"""
enum PriceRuleTarget {
  """
  The price rule applies to line items.
  """
  LINE_ITEM

  """
  The price rule applies to shipping lines.
  """
  SHIPPING_LINE
}

"""
The list of features that can be supported by a price rule.
"""
enum PriceRuleTrait {
  """
  The price rule supports bulk discounts.
  """
  BULK

  """
  The price rule supports Buy X, Get Y (BXGY) discounts.
  """
  BUY_ONE_GET_ONE

  """
  The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
  """
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT

  """
  The price rule supports discounts that require a quantity.
  """
  QUANTITY_DISCOUNTS

  """
  The price rule targets specific customers.
  """
  SPECIFIC_CUSTOMERS
}

"""
A time period during which a price rule is applicable.
"""
type PriceRuleValidityPeriod {
  """
  The time after which the price rule becomes invalid.
  """
  end: DateTime

  """
  The time after which the price rule is valid.
  """
  start: DateTime!
}

"""
The type of the price rule value. The price rule value might be a percentage value, or a fixed amount.
"""
union PriceRuleValue = PriceRuleFixedAmountValue | PriceRulePercentValue

"""
One type of value given to a customer when a discount is applied to an order.
The application of a discount with this value gives the customer the specified percentage off a specified item.
"""
type PricingPercentageValue {
  """
  The percentage value of the object. This is a number between -100 (free) and 0 (no discount).
  """
  percentage: Float!
}

"""
The type of value given to a customer when a discount is applied to an order.
For example, the application of the discount might give the customer a
percentage off a specified item. Alternatively, the application of the discount
might give the customer a monetary value in a given currency off an order.
"""
union PricingValue = MoneyV2 | PricingPercentageValue

"""
Private metafields represent custom metadata that is attached to a resource.
Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.

An application can create a maximum of 10 private metafields per shop resource.
"""
type PrivateMetafield implements Node {
  """
  The api permission id that owns the private metafield.
  """
  apiPermissionId: Int!

  """
  The date and time when the private metafield was created.
  """
  createdAt: DateTime!

  """
  The id of the private metafield.
  """
  id: ID!

  """
  The key name of the private metafield.
  """
  key: String!

  """
  The namespace of the private metafield.
  """
  namespace: String!

  """
  The date and time when the private metafield was updated.
  """
  updatedAt: DateTime!

  """
  The value of a private metafield.
  """
  value: String!

  """
  Represents the private metafield value type.
  """
  valueType: PrivateMetafieldValueType!
}

"""
An auto-generated type for paginating through multiple PrivateMetafields.
"""
type PrivateMetafieldConnection {
  """
  A list of edges.
  """
  edges: [PrivateMetafieldEdge!]!

  """
  A list of the nodes contained in PrivateMetafieldEdge.
  """
  nodes: [PrivateMetafield!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one PrivateMetafield and a cursor during pagination.
"""
type PrivateMetafieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of PrivateMetafieldEdge.
  """
  node: PrivateMetafield!
}

"""
Supported private metafield value types.
"""
enum PrivateMetafieldValueType {
  """
  An integer metafield.
  """
  INTEGER

  """
  A JSON string metafield.
  """
  JSON_STRING

  """
  A string metafield.
  """
  STRING
}

"""
The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant)
to create or update different versions of the same product. You can also add or update
product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media).
Products can be organized by grouping them into a
[Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
"""
type Product implements HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & LegacyInteroperability & Navigable & Node & OnlineStorePreviewable & Publishable {
  """
  Count of the aggregated selling plan groups associated to the product.
  """
  aggregatedSellingPlanGroupCount: Int!

  """
  A list of all selling plan groups defined in the current shop associated with
  the product either directly, through any of its variants or through an
  association with the shop.
  """
  aggregatedSellingPlanGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SellingPlanGroupConnection!

  """
  The number of publications a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!

  """
  The description of the product, complete with HTML formatting.
  """
  bodyHtml: String @deprecated(reason: "Use `descriptionHtml` instead.")
  brands: [Brand!]!

  """
  A list of the collections that include the product.
  """
  collections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CollectionConnection!

  """
  The pricing that applies for a customer in a given context.
  """
  contextualPricing(
    """
    The context used to generate contextual pricing for the variant.
    """
    context: ContextualPricingContext!
  ): ProductContextualPricing!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
  """
  createdAt: DateTime!

  """
  The custom product type specified by the merchant.
  """
  customProductType: String @deprecated(reason: "Deprecated in API version 2022-10. Use `productType` instead.")

  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  A stripped description of the product, single line with HTML tags removed.
  """
  description(
    """
    Truncates string after the given length.
    """
    truncateAt: Int
  ): String!

  """
  The description of the product, complete with HTML formatting.
  """
  descriptionHtml: HTML!

  """
  Stripped description of the product, single line with HTML tags removed.
  Truncated to 60 characters.
  """
  descriptionPlainSummary: String! @deprecated(reason: "Use `description` instead.")

  """
  The featured image for the product.
  """
  featuredImage: Image

  """
  The featured media for the product.
  """
  featuredMedia: Media

  """
  Information about the product that's provided through resource feedback.
  """
  feedback: ResourceFeedback

  """
  The theme template used when viewing the gift card in a store.
  """
  giftCardTemplateSuffix: String

  """
  A unique human-friendly string of the product's title.
  """
  handle: String!

  """
  Whether the product has only a single variant with the default option and value.
  """
  hasOnlyDefaultVariant: Boolean!

  """
  Whether the product has out of stock variants.
  """
  hasOutOfStockVariants: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The images associated with the product.
  """
  images(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ImageConnection!

  """
  Whether the product is in a given collection.
  """
  inCollection(
    """
    The ID of the collection to check.
    """
    id: ID!
  ): Boolean!

  """
  Metadata about the product that our internal algorithms have determined.
  """
  inferredProductMetadata: InferredProductMetadata

  """
  Whether the product is a gift card.
  """
  isGiftCard: Boolean!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The media associated with the product. This can include images, 3D models, or videos.
  """
  media(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MediaConnection!

  """
  Total count of media belonging to a product.
  """
  mediaCount: Int!

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  The online store preview URL.
  """
  onlineStorePreviewUrl: URL

  """
  The online store URL for the product.
  A value of `null` indicates that the product is not published to the Online Store sales channel.
  """
  onlineStoreUrl: URL

  """
  A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions.
  """
  options(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [ProductOption!]!

  """
  The price range of the product.
  """
  priceRange: ProductPriceRange! @deprecated(reason: "Deprecated in API version 2020-10. Use `priceRangeV2` instead.")

  """
  The price range of the product with prices formatted as decimals.
  """
  priceRangeV2: ProductPriceRangeV2!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  The product category specified by the merchant.
  """
  productCategory: ProductCategory

  """
  A list of the channels where the product is published.
  """
  productPublications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead.")

  """
  The product type specified by the merchant.
  """
  productType: String!

  """
  The number of publications a resource is published on.
  """
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean
  ): Int!

  """
  A list of the channels where the product is published.
  """
  publications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead.")

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  when the product was published to the Online Store.
  """
  publishedAt: DateTime

  """
  Check to see whether the resource is published to a given channel.
  """
  publishedOnChannel(
    """
    The ID of the channel to check.
    """
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")

  """
  Check to see whether the resource is published to the calling app's channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead.")

  """
  Check to see whether the resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!

  """
  Check to see whether the resource is published to a given publication.
  """
  publishedOnPublication(
    """
    The ID of the publication to check.
    """
    publicationId: ID!
  ): Boolean!

  """
  Whether the product can only be purchased with a selling plan (subscription).
  Products that are sold on subscription (`requiresSellingPlan: true`) can be
  updated only for online stores. If you update a product to be subscription
  only, then the product is unpublished from all channels except the online store.
  """
  requiresSellingPlan: Boolean!

  """
  The resource that is either published or staged to be published to the calling
  app's publication. Requires the `read_product_listings` scope.
  """
  resourcePublicationOnCurrentPublication: ResourcePublicationV2

  """
  The list of resources that are published to a publication.
  """
  resourcePublications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ResourcePublicationConnection!

  """
  The list of resources that are either published or staged to be published to a publication.
  """
  resourcePublicationsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ResourcePublicationV2Connection!

  """
  Count of selling plan groups associated with the product.
  """
  sellingPlanGroupCount: Int!

  """
  A list of all selling plan groups defined in the current shop associated with
  the product either directly or through any of its variants.
  """
  sellingPlanGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SellingPlanGroupConnection!

  """
  SEO information of the product.
  """
  seo: SEO!

  """
  The standard product type in the Shopify product taxonomy.
  """
  standardProductType: StandardProductType

  """
  The standardized product type in the Shopify product taxonomy.
  """
  standardizedProductType: StandardizedProductType @deprecated(reason: "Deprecated in API version 2022-10. Use `productCategory` instead.")

  """
  The product status. This controls visibility across all channels.
  """
  status: ProductStatus!

  """
  The Storefront GraphQL API ID of the `Product`.

  As of the `2022-04` version release, the Storefront GraphQL API will no longer
  return Base64 encoded IDs to match the behavior of the Admin GraphQL API.
  Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontID! @deprecated(reason: "Use `id` instead.")

  """
  A comma separated list of tags associated with the product. Updating `tags` overwrites
  any existing tags that were previously added to the product. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!

  """
  The theme template used when viewing the product in a store.
  """
  templateSuffix: String

  """
  The title of the product.
  """
  title: String!

  """
  The quantity of inventory in stock.
  """
  totalInventory: Int!

  """
  The number of variants that are associated with the product.
  """
  totalVariants: Int!

  """
  Whether inventory tracking has been enabled for the product.
  """
  tracksInventory: Boolean!

  """
  The translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [PublishedTranslation!]!

  """
  The list of channels that the resource is not published to.
  """
  unpublishedChannels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead.")

  """
  The list of publications that the resource is not published to.
  """
  unpublishedPublications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PublicationConnection!

  """
  The date and time when the product was last modified.
  A product's `updatedAt` value can change for different reasons. For example, if an order
  is placed for a product that has inventory tracking set up, then the inventory adjustment
  is counted as an update.
  """
  updatedAt: DateTime!

  """
  A list of variants associated with the product.
  """
  variants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductVariantConnection!

  """
  The name of the product's vendor.
  """
  vendor: String!
}

"""
The details of a specific product category within the [Shopify product
taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
"""
type ProductCategory {
  """
  The full name of the product taxonomy node. For example,  `Animals & Pet
  Supplies > Pet Supplies > Dog Supplies > Dog Beds`.
  """
  fullName: String!

  """
  Whether the product taxonomy node is a leaf node.
  """
  isLeaf: Boolean!

  """
  Whether the product taxonomy node is a root node.
  """
  isRoot: Boolean!

  """
  The level of the node in the taxonomy tree.
  """
  level: Int!

  """
  The name of the product taxonomy node. For example, `Dog Beds`.
  """
  name: String!

  """
  The ID of the parent of the product taxonomy node.
  """
  parentProductTaxonomyNodeId: ID

  """
  The product taxonomy node associated with the product category.
  """
  productTaxonomyNode: ProductTaxonomyNode

  """
  The ID of the product taxonomy node for the product's category.
  """
  productTaxonomyNodeId: ID!
}

"""
An auto-generated type for paginating through multiple Products.
"""
type ProductConnection {
  """
  A list of edges.
  """
  edges: [ProductEdge!]!

  """
  A list of the nodes contained in ProductEdge.
  """
  nodes: [Product!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
The price of a product in a specific country.
Prices vary between countries.
"""
type ProductContextualPricing {
  """
  The pricing of the variant with the highest price in the given context.
  """
  maxVariantPricing: ProductVariantContextualPricing

  """
  The pricing of the variant with the lowest price in the given context.
  """
  minVariantPricing: ProductVariantContextualPricing

  """
  The price range of the product with prices formatted as decimals.
  """
  priceRange: ProductPriceRangeV2!
}

"""
An auto-generated type which holds one Product and a cursor during pagination.
"""
type ProductEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ProductEdge.
  """
  node: Product!
}

"""
Products that are frequently abandoned.
"""
type ProductInsightFrequentlyAbandoned implements InsightSuggestible {
  """
  ID of this insight.
  """
  id: ID!

  """
  Paginated list of product metrics.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductInsightFrequentlyAbandonedProductInfoMetricsConnection!

  """
  The number of product metrics.
  """
  productsCount: Int!

  """
  A list of suggestions the user can take.
  """
  suggestions: [InsightSuggestion!]!
}

"""
Metrics and product information for an individual product.
"""
type ProductInsightFrequentlyAbandonedProductInfoMetrics implements InsightProductInfoMetric {
  """
  Percentage of carts in which this product has been abandoned.
  """
  cartAbandonRate: Float!

  """
  Number of time this product has been added to cart.
  """
  carts: Int!

  """
  Number of orders in which this product has been added to.
  """
  orders: Int!

  """
  A product.
  """
  product: Product!
}

"""
An auto-generated type for paginating through multiple ProductInsightFrequentlyAbandonedProductInfoMetrics.
"""
type ProductInsightFrequentlyAbandonedProductInfoMetricsConnection {
  """
  A list of edges.
  """
  edges: [ProductInsightFrequentlyAbandonedProductInfoMetricsEdge!]!

  """
  A list of the nodes contained in ProductInsightFrequentlyAbandonedProductInfoMetricsEdge.
  """
  nodes: [ProductInsightFrequentlyAbandonedProductInfoMetrics!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductInsightFrequentlyAbandonedProductInfoMetrics and a cursor during pagination.
"""
type ProductInsightFrequentlyAbandonedProductInfoMetricsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ProductInsightFrequentlyAbandonedProductInfoMetricsEdge.
  """
  node: ProductInsightFrequentlyAbandonedProductInfoMetrics!
}

"""
Products that have high potential.
"""
type ProductInsightHighPotential implements InsightSuggestible {
  """
  ID of this insight.
  """
  id: ID!

  """
  Paginated list of product metrics.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductInsightHighPotentialProductInfoMetricsConnection!

  """
  The number of product metrics.
  """
  productsCount: Int!

  """
  A list of suggestions the user can take.
  """
  suggestions: [InsightSuggestion!]!
}

"""
Metrics and product information for an individual product.
"""
type ProductInsightHighPotentialProductInfoMetrics implements InsightProductInfoMetric {
  """
  The rate of sessions that converted to checkouts for this product.
  """
  conversionRate: Float!

  """
  A product.
  """
  product: Product!

  """
  Number of sessions this product has been viewed in.
  """
  sessions: Int!
}

"""
An auto-generated type for paginating through multiple ProductInsightHighPotentialProductInfoMetrics.
"""
type ProductInsightHighPotentialProductInfoMetricsConnection {
  """
  A list of edges.
  """
  edges: [ProductInsightHighPotentialProductInfoMetricsEdge!]!

  """
  A list of the nodes contained in ProductInsightHighPotentialProductInfoMetricsEdge.
  """
  nodes: [ProductInsightHighPotentialProductInfoMetrics!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductInsightHighPotentialProductInfoMetrics and a cursor during pagination.
"""
type ProductInsightHighPotentialProductInfoMetricsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ProductInsightHighPotentialProductInfoMetricsEdge.
  """
  node: ProductInsightHighPotentialProductInfoMetrics!
}

"""
Products that need improvement.
"""
type ProductInsightNotSelling implements InsightSuggestible {
  """
  ID of this insight.
  """
  id: ID!

  """
  Paginated list of product metrics.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductInsightNotSellingProductInfoMetricsConnection!

  """
  The number of product metrics.
  """
  productsCount: Int!

  """
  A list of suggestions the user can take.
  """
  suggestions: [InsightSuggestion!]!
}

"""
Metrics and product information for an individual product.
"""
type ProductInsightNotSellingProductInfoMetrics implements InsightProductInfoMetric {
  """
  A product.
  """
  product: Product!

  """
  Number of sessions this product has been viewed in.
  """
  sessions: Int!

  """
  Number of units sold growth delta between periods.
  """
  unitsSoldGrowthNet: Int!

  """
  Number of units this product has sold during the current period.
  """
  unitsSoldThisPeriod: Int!
}

"""
An auto-generated type for paginating through multiple ProductInsightNotSellingProductInfoMetrics.
"""
type ProductInsightNotSellingProductInfoMetricsConnection {
  """
  A list of edges.
  """
  edges: [ProductInsightNotSellingProductInfoMetricsEdge!]!

  """
  A list of the nodes contained in ProductInsightNotSellingProductInfoMetricsEdge.
  """
  nodes: [ProductInsightNotSellingProductInfoMetrics!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductInsightNotSellingProductInfoMetrics and a cursor during pagination.
"""
type ProductInsightNotSellingProductInfoMetricsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ProductInsightNotSellingProductInfoMetricsEdge.
  """
  node: ProductInsightNotSellingProductInfoMetrics!
}

"""
Products that need improvement.
"""
type ProductInsightToImprove implements InsightSuggestible {
  """
  ID of this insight.
  """
  id: ID!

  """
  Paginated list of product metrics.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductInsightToImproveProductInfoMetricsConnection!

  """
  The number of product metrics.
  """
  productsCount: Int!

  """
  A list of suggestions the user can take.
  """
  suggestions: [InsightSuggestion!]!
}

"""
Metrics and product information for an individual product.
"""
type ProductInsightToImproveProductInfoMetrics implements InsightProductInfoMetric {
  """
  The rate of sessions that converted to checkouts for this product.
  """
  conversionRate: Float!

  """
  A product.
  """
  product: Product!

  """
  Number of sessions in which this product has been viewed.
  """
  sessions: Int!
}

"""
An auto-generated type for paginating through multiple ProductInsightToImproveProductInfoMetrics.
"""
type ProductInsightToImproveProductInfoMetricsConnection {
  """
  A list of edges.
  """
  edges: [ProductInsightToImproveProductInfoMetricsEdge!]!

  """
  A list of the nodes contained in ProductInsightToImproveProductInfoMetricsEdge.
  """
  nodes: [ProductInsightToImproveProductInfoMetrics!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductInsightToImproveProductInfoMetrics and a cursor during pagination.
"""
type ProductInsightToImproveProductInfoMetricsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ProductInsightToImproveProductInfoMetricsEdge.
  """
  node: ProductInsightToImproveProductInfoMetrics!
}

"""
Top selling products.
"""
type ProductInsightTopSelling implements InsightSuggestible {
  """
  ID of this insight.
  """
  id: ID!

  """
  Paginated list of product metrics.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductInsightTopSellingProductInfoMetricsConnection!

  """
  The number of product metrics.
  """
  productsCount: Int!

  """
  A list of suggestions the user can take.
  """
  suggestions: [InsightSuggestion!]!
}

"""
Metrics and product information for an individual product.
"""
type ProductInsightTopSellingProductInfoMetrics implements InsightProductInfoMetric {
  """
  A product.
  """
  product: Product!

  """
  Number of units of this product that have been sold.
  """
  unitsSold: Int!
}

"""
An auto-generated type for paginating through multiple ProductInsightTopSellingProductInfoMetrics.
"""
type ProductInsightTopSellingProductInfoMetricsConnection {
  """
  A list of edges.
  """
  edges: [ProductInsightTopSellingProductInfoMetricsEdge!]!

  """
  A list of the nodes contained in ProductInsightTopSellingProductInfoMetricsEdge.
  """
  nodes: [ProductInsightTopSellingProductInfoMetrics!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductInsightTopSellingProductInfoMetrics and a cursor during pagination.
"""
type ProductInsightTopSellingProductInfoMetricsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ProductInsightTopSellingProductInfoMetricsEdge.
  """
  node: ProductInsightTopSellingProductInfoMetrics!
}

"""
Products that are trending up in sales.
"""
type ProductInsightTrendingUp implements InsightSuggestible {
  """
  ID of this insight.
  """
  id: ID!

  """
  Paginated list of product metrics.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductInsightTrendingUpProductInfoMetricsConnection!

  """
  The number of product metrics.
  """
  productsCount: Int!

  """
  A list of suggestions the user can take.
  """
  suggestions: [InsightSuggestion!]!
}

"""
Metrics and product information for an individual product.
"""
type ProductInsightTrendingUpProductInfoMetrics implements InsightProductInfoMetric {
  """
  A product.
  """
  product: Product!

  """
  Number of units sold.
  """
  unitsSold: Int!

  """
  Units sold growth delta between periods.
  """
  unitsSoldGrowthNet: Int!

  """
  Units sold delta between periods.
  """
  unitsSoldGrowthRate: Float!
}

"""
An auto-generated type for paginating through multiple ProductInsightTrendingUpProductInfoMetrics.
"""
type ProductInsightTrendingUpProductInfoMetricsConnection {
  """
  A list of edges.
  """
  edges: [ProductInsightTrendingUpProductInfoMetricsEdge!]!

  """
  A list of the nodes contained in ProductInsightTrendingUpProductInfoMetricsEdge.
  """
  nodes: [ProductInsightTrendingUpProductInfoMetrics!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductInsightTrendingUpProductInfoMetrics and a cursor during pagination.
"""
type ProductInsightTrendingUpProductInfoMetricsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ProductInsightTrendingUpProductInfoMetricsEdge.
  """
  node: ProductInsightTrendingUpProductInfoMetrics!
}

"""
Product performance insights for this shop.
"""
type ProductInsights implements InsightGroup {
  """
  Products that are frequently abandoned.
  """
  frequentlyAbandoned: ProductInsightFrequentlyAbandoned!

  """
  Products that have high potential.
  """
  highPotential: ProductInsightHighPotential!

  """
  The period in which the shop insights were gathered.
  """
  insightDateRange: InsightDateRange!

  """
  Products that are not selling.
  """
  notSelling: ProductInsightNotSelling!

  """
  Products that need improvement.
  """
  toImprove: ProductInsightToImprove!

  """
  Top selling products.
  """
  topSelling: ProductInsightTopSelling!

  """
  Products that are trending up in sales.
  """
  trendingUp: ProductInsightTrendingUp!
}

"""
The product property names. For example, "Size", "Color", and "Material".
Variants are selected based on permutations of these options.
The limit for each product property name is 255 characters.
"""
type ProductOption implements HasPublishedTranslations & Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The product option’s name.
  """
  name: String!

  """
  The product option's position.
  """
  position: Int!

  """
  The translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [PublishedTranslation!]!

  """
  The corresponding value to the product option name.
  """
  values: [String!]!
}

"""
The price range of the product.
"""
type ProductPriceRange {
  """
  The highest variant's price.
  """
  maxVariantPrice: MoneyV2!

  """
  The lowest variant's price.
  """
  minVariantPrice: MoneyV2!
}

"""
The price range of the product.
"""
type ProductPriceRangeV2 {
  """
  The highest variant's price.
  """
  maxVariantPrice: MoneyV2!

  """
  The lowest variant's price.
  """
  minVariantPrice: MoneyV2!
}

"""
Represents the channels where a product is published.
"""
type ProductPublication {
  """
  The channel where the product was or is published.
  """
  channel: Channel!

  """
  Whether the publication is published or not.
  """
  isPublished: Boolean!

  """
  The product that was or is going to be published on the channel.
  """
  product: Product!

  """
  The date that the product was or is going to be published on the channel.
  """
  publishDate: DateTime
}

"""
An auto-generated type for paginating through multiple ProductPublications.
"""
type ProductPublicationConnection {
  """
  A list of edges.
  """
  edges: [ProductPublicationEdge!]!

  """
  A list of the nodes contained in ProductPublicationEdge.
  """
  nodes: [ProductPublication!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductPublication and a cursor during pagination.
"""
type ProductPublicationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ProductPublicationEdge.
  """
  node: ProductPublication!
}

"""
A sale associated with a product.
"""
type ProductSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique identifier for the sale.
  """
  id: ID!

  """
  The line item for the associated sale.
  """
  lineItem: LineItem!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
The possible product statuses.
"""
enum ProductStatus {
  """
  The product is ready to sell and can be published to sales channels and apps.
  Products with an active status aren't automatically published to sales
  channels, such as the online store, or apps. By default, existing products are set to active.
  """
  ACTIVE

  """
  The product is no longer being sold and isn't available to customers on sales channels and apps.
  """
  ARCHIVED

  """
  The product isn't ready to sell and is unavailable to customers on sales
  channels and apps. By default, duplicated and unarchived products are set to draft.
  """
  DRAFT
}

"""
Represents a [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) node.
"""
type ProductTaxonomyNode implements Node {
  """
  The IDs of the node's ancestor nodes.
  """
  ancestorIds: [ID!]!

  """
  The IDs of the node's children nodes.
  """
  childrenIds: [ID!]!

  """
  The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
  """
  fullName: String!

  """
  The ID of the product taxonomy node.
  """
  id: ID!

  """
  Whether the node is a leaf node.
  """
  isLeaf: Boolean!

  """
  Whether the node is a root node.
  """
  isRoot: Boolean!

  """
  The name of the product taxonomy node. For example, Dog Beds.
  """
  name: String!

  """
  The ID of the node's parent node.
  """
  parentId: ID

  """
  The type of the product taxonomy node.
  """
  type: String! @deprecated(reason: "Use `name` instead.")

  """
  The full type of a product taxonomy node.
  """
  typePath: String! @deprecated(reason: "Use `fullName` instead.")
}

"""
Represents a product variant.
"""
type ProductVariant implements HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & LegacyInteroperability & Navigable & Node {
  """
  Count of the aggregated selling plan groups associated to the product variant.
  """
  aggregatedSellingPlanGroupCount: Int!

  """
  A list of selling plan groups defined in the current shop associated with the
  variant either directly, through the product or through an association with the shop.
  """
  aggregatedSellingPlanGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SellingPlanGroupConnection!

  """
  Whether the product variant is available for sale.
  """
  availableForSale: Boolean!

  """
  The value of the barcode associated with the product.
  """
  barcode: String

  """
  The compare-at price of the variant in the default shop currency.
  """
  compareAtPrice: Money

  """
  The pricing that applies for a customer in a given context.
  """
  contextualPricing(
    """
    The context used to generate contextual pricing for the variant.
    """
    context: ContextualPricingContext!
  ): ProductVariantContextualPricing!

  """
  The date and time when the variant was created.
  """
  createdAt: DateTime!

  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  The total sellable quantity of the variant for online sales channels.
  """
  delayedSellableOnlineQuantity: Int! @deprecated(reason: "Use `sellableOnlineQuantity` instead.")

  """
  The delivery profile for the variant.
  """
  deliveryProfile: DeliveryProfile

  """
  Display name of the variant, based on product's title + variant's title.
  """
  displayName: String!

  """
  The fulfillment service associated with the product.
  """
  fulfillmentService: FulfillmentService @deprecated(reason: "Multi-managed inventory introduced a [breaking change](https://shopify.dev/api/release-notes/2022-07#shipping-and-fulfillment) to this field, therefore this field will no longer be supported. Fulfillment services will all be opted into SKU sharing in 2023-04. To see all associated fulfillment services use [InventoryLevelConnection](https://shopify.dev/api/admin-graphql/latest/connections/InventoryLevelConnection#field-location-inventorylevels) and [InventoryLevel#location](https://shopify.dev/api/admin-graphql/latest/objects/InventoryLevel#field-inventorylevel-location).")

  """
  Whether changes to the fulfillment service for the product variant are allowed.
  """
  fulfillmentServiceEditable: EditableProperty!

  """
  The Harmonized System Code (or HS Tariff Code) for the variant.
  """
  harmonizedSystemCode: String @deprecated(reason: "Use `InventoryItem.harmonizedSystemCode` instead.")

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The featured image for the variant.
  """
  image(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  The inventory item, which is used to query for inventory information.
  """
  inventoryItem: InventoryItem!

  """
  The fulfillment service that tracks the number of items in stock for the product variant.
  """
  inventoryManagement: ProductVariantInventoryManagement! @deprecated(reason: "Use tracked attribute on `inventoryItem` instead.")

  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: ProductVariantInventoryPolicy!

  """
  The total sellable quantity of the variant.
  """
  inventoryQuantity: Int

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The media associated with the product variant.
  """
  media(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MediaConnection!

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldDefinitionConnection!

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  The order of the product variant in the list of product variants. The first position in the list is 1.
  """
  position: Int!

  """
  List of prices and compare-at prices in the presentment currencies for this shop.
  """
  presentmentPrices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductVariantPricePairConnection! @deprecated(reason: "Use `contextualPricing` instead.")

  """
  The price of the product variant in the default shop currency.
  """
  price: Money!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  The product that this variant belongs to.
  """
  product: Product!

  """
  Whether a customer needs to provide a shipping address when placing an order for the product variant.
  """
  requiresShipping: Boolean! @deprecated(reason: "Use `InventoryItem.requiresShipping` instead.")

  """
  List of product options applied to the variant.
  """
  selectedOptions: [SelectedOption!]!

  """
  The total sellable quantity of the variant for online channels.
  This doesn't represent the total available inventory or capture
  [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
  """
  sellableOnlineQuantity: Int!

  """
  Count of selling plan groups associated with the product variant.
  """
  sellingPlanGroupCount: Int!

  """
  A list of all selling plan groups defined in the current shop associated with the product variant.
  """
  sellingPlanGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SellingPlanGroupConnection!

  """
  An identifier for the product variant in the shop. Required in order to connect to a fulfillment service.
  """
  sku: String

  """
  The Storefront GraphQL API ID of the `ProductVariant`.

  As of the `2022-04` version release, the Storefront GraphQL API will no longer
  return Base64 encoded IDs to match the behavior of the Admin GraphQL API.
  Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontID! @deprecated(reason: "Use `id` instead.")

  """
  The tax code for the product variant.
  """
  taxCode: String

  """
  Whether a tax is charged when the product variant is sold.
  """
  taxable: Boolean!

  """
  The title of the product variant.
  """
  title: String!

  """
  The translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [PublishedTranslation!]!

  """
  The date and time (ISO 8601 format) when the product variant was last modified.
  """
  updatedAt: DateTime!

  """
  The weight of the product variant in the unit system specified with weight_unit.
  """
  weight: Float

  """
  The unit of measurement that applies to the product variant's weight. If you
  don't specify a value for weight_unit, then the shop's default unit of
  measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.
  """
  weightUnit: WeightUnit!
}

"""
An auto-generated type for paginating through multiple ProductVariants.
"""
type ProductVariantConnection {
  """
  A list of edges.
  """
  edges: [ProductVariantEdge!]!

  """
  A list of the nodes contained in ProductVariantEdge.
  """
  nodes: [ProductVariant!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
The price of a product variant in a specific country.
Prices vary between countries.
"""
type ProductVariantContextualPricing {
  """
  The final compare-at price after all adjustments are applied.
  """
  compareAtPrice: MoneyV2

  """
  The final price after all adjustments are applied.
  """
  price: MoneyV2!
}

"""
An auto-generated type which holds one ProductVariant and a cursor during pagination.
"""
type ProductVariantEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ProductVariantEdge.
  """
  node: ProductVariant!
}

"""
The valid values for the method of inventory tracking for a product variant.
"""
enum ProductVariantInventoryManagement {
  """
  This product variant's inventory is tracked by a third-party fulfillment service.
  """
  FULFILLMENT_SERVICE

  """
  This product variant's inventory is not tracked.
  """
  NOT_MANAGED

  """
  This product variant's inventory is tracked by Shopify. In the unstable API
  version, this product variant's inventory could also be tracked by both
  Shopify and a third-party fulfillment service.
  """
  SHOPIFY
}

"""
The valid values for the inventory policy of a product variant once it is out of stock.
"""
enum ProductVariantInventoryPolicy {
  """
  Customers can buy this product variant after it's out of stock.
  """
  CONTINUE

  """
  Customers can't buy this product variant after it's out of stock.
  """
  DENY
}

"""
The compare-at price and price of a variant sharing a currency.
"""
type ProductVariantPricePair {
  """
  The compare-at price of the variant with associated currency.
  """
  compareAtPrice: MoneyV2

  """
  The price of the variant with associated currency.
  """
  price: MoneyV2!
}

"""
An auto-generated type for paginating through multiple ProductVariantPricePairs.
"""
type ProductVariantPricePairConnection {
  """
  A list of edges.
  """
  edges: [ProductVariantPricePairEdge!]!

  """
  A list of the nodes contained in ProductVariantPricePairEdge.
  """
  nodes: [ProductVariantPricePair!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
"""
type ProductVariantPricePairEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ProductVariantPricePairEdge.
  """
  node: ProductVariantPricePair!
}

"""
Provider group such as alternative or other, used for payments.
"""
enum ProviderGroup {
  ALTERNATIVE
  AMAZON_PAYMENTS
  GIFT_CARD
  GOOGLE
  MANUAL
  OTHER
  PAYPAL
  POS_ONLY
  WALLET
}

"""
A publication is a group of products and collections that is published to an app.
"""
type Publication implements Node {
  """
  The app associated with the publication.
  """
  app: App!

  """
  The collection publications for the list of collections published to the publication.
  """
  collectionPublicationsV3(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ResourcePublicationConnection!

  """
  The list of collections published to the publication.
  """
  collections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CollectionConnection!

  """
  Whether the collection is available to the publication.
  """
  hasCollection(
    """
    Collection ID to check.
    """
    id: ID!
  ): Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Name of the publication.
  """
  name: String!

  """
  The product publications for the list of products published to the publication.
  """
  productPublicationsV3(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ResourcePublicationConnection!

  """
  The list of products published to the publication.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductConnection!

  """
  Whether the publication supports future publishing.
  """
  supportsFuturePublishing: Boolean!
}

"""
An auto-generated type for paginating through multiple Publications.
"""
type PublicationConnection {
  """
  A list of edges.
  """
  edges: [PublicationEdge!]!

  """
  A list of the nodes contained in PublicationEdge.
  """
  nodes: [Publication!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Publication and a cursor during pagination.
"""
type PublicationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of PublicationEdge.
  """
  node: Publication!
}

"""
Represents a resource that can be published to a channel.
A publishable resource can be either a Product or Collection.
"""
interface Publishable {
  """
  The number of publications a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!

  """
  The number of publications a resource is published on.
  """
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean
  ): Int!

  """
  Check to see whether the resource is published to a given channel.
  """
  publishedOnChannel(
    """
    The ID of the channel to check.
    """
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")

  """
  Check to see whether the resource is published to the calling app's channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead.")

  """
  Check to see whether the resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!

  """
  Check to see whether the resource is published to a given publication.
  """
  publishedOnPublication(
    """
    The ID of the publication to check.
    """
    publicationId: ID!
  ): Boolean!

  """
  The list of resources that are published to a publication.
  """
  resourcePublications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ResourcePublicationConnection!

  """
  The list of resources that are either published or staged to be published to a publication.
  """
  resourcePublicationsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ResourcePublicationV2Connection!

  """
  The list of channels that the resource is not published to.
  """
  unpublishedChannels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead.")

  """
  The list of publications that the resource is not published to.
  """
  unpublishedPublications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PublicationConnection!
}

"""
Published translation of a field of a resource.
"""
type PublishedTranslation {
  """
  The resource field that is being translated.
  """
  key: String!

  """
  The locale of this translation.
  """
  locale: String!

  """
  The ID of the market that the translation is specific to. Null value means the translation is available in any market.
  """
  marketId: ID

  """
  The translation value.
  """
  value: String
}

"""
Represents information about the purchasing company for the order or draft order.
"""
type PurchasingCompany {
  """
  The company associated to the order or draft order.
  """
  company: Company!

  """
  The company contact associated to the order or draft order.
  """
  contact: CompanyContact

  """
  The company location associated to the order or draft order.
  """
  location: CompanyLocation!
}

"""
Represents information about the purchasing entity for the order or draft order.
"""
union PurchasingEntity = Customer | PurchasingCompany

"""
The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.
"""
type Query {
  brandProducts(ids: [ID!]!): [Product]!
  brands(ids: [ID!]!): [Brand]!

  """
  Returns a Product resource by ID.
  """
  product(
    """
    The ID of the Product to return.
    """
    id: ID!
  ): Product
}

"""
A checkout line item that doesn't represent a registered product.
"""
input QuickSaleLineItemInput {
  """
  Price of the line item, used for custom items.
  """
  price: Decimal

  """
  Title of the line item, used for custom items.
  """
  title: String
}

"""
Type/differentiator of rates.
"""
enum RateDifferentiator {
  """
  Amex card present.
  """
  AMEX_CARD_PRESENT

  """
  Amex international online.
  """
  AMEX_INTERNATIONAL_ONLINE

  """
  Amex online.
  """
  AMEX_ONLINE

  """
  Base.
  """
  BASE

  """
  Domestic card present.
  """
  DOMESTIC_CARD_PRESENT

  """
  Domestic online.
  """
  DOMESTIC_ONLINE

  """
  Eea card present.
  """
  EEA_CARD_PRESENT

  """
  Eea online.
  """
  EEA_ONLINE

  """
  Eftpos au.
  """
  EFTPOS_AU

  """
  International card present.
  """
  INTERNATIONAL_CARD_PRESENT

  """
  International online.
  """
  INTERNATIONAL_ONLINE

  """
  Jcb online.
  """
  JCB_ONLINE
}

"""
Amount charged to a shop each billing interval.
"""
type RecurringAppPlan {
  """
  Price charged every billing interval.
  """
  price: MoneyV2!
}

"""
The record of the line items and transactions that were refunded to a customer,
along with restocking instructions for refunded line items.
"""
type Refund implements LegacyInteroperability & Node {
  """
  The date and time when the refund was created.
  """
  createdAt: DateTime

  """
  A list of the refunded duties as part of this refund.
  """
  duties: [RefundDuty!]

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The optional note associated with the refund.
  """
  note: String

  """
  The order associated with the refund.
  """
  order: Order!

  """
  The `RefundLineItem` resources attached to the refund.
  """
  refundLineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RefundLineItemConnection!

  """
  The return associated with the refund.
  """
  return: Return

  """
  The staff member who created the refund.
  """
  staffMember: StaffMember

  """
  The total amount across all transactions for the refund.
  """
  totalRefunded: MoneyV2! @deprecated(reason: "Use `totalRefundedSet` instead.")

  """
  The total amount across all transactions for the refund, in shop and presentment currencies.
  """
  totalRefundedSet: MoneyBag!

  """
  The transactions associated with the refund.
  """
  transactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderTransactionConnection!

  """
  The date and time when the refund was updated.
  """
  updatedAt: DateTime!
}

"""
An agreement between the merchant and customer to refund all or a portion of the order.
"""
type RefundAgreement implements SalesAgreement {
  """
  The application that created the agreement.
  """
  app: App

  """
  The date and time at which the agreement occured.
  """
  happenedAt: DateTime!

  """
  The unique identifier for the agreement.
  """
  id: ID!

  """
  The reason the agremeent was created.
  """
  reason: OrderActionType!

  """
  The refund associated with the agreement.
  """
  refund: Refund!

  """
  The sales associated with the agreement.
  """
  sales(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SaleConnection!

  """
  The staff member associated with the agreement.
  """
  user: StaffMember
}

"""
An auto-generated type for paginating through multiple Refunds.
"""
type RefundConnection {
  """
  A list of edges.
  """
  edges: [RefundEdge!]!

  """
  A list of the nodes contained in RefundEdge.
  """
  nodes: [Refund!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Represents a refunded duty.
"""
type RefundDuty {
  """
  The amount of a refunded duty in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The duty associated with this refunded duty.
  """
  originalDuty: Duty
}

"""
The fields required to reimburse duties on a refund.
"""
input RefundDutyInput {
  """
  The ID of the duty in the refund.
  """
  dutyId: ID!

  """
  The type of refund for this duty.
  """
  refundType: RefundDutyRefundType
}

"""
The type of refund to perform for a particular refund duty.
"""
enum RefundDutyRefundType {
  """
  The duty is fully refunded.
  """
  FULL

  """
  The duty is proportionally refunded based on the quantity of the refunded line item.
  """
  PROPORTIONAL
}

"""
An auto-generated type which holds one Refund and a cursor during pagination.
"""
type RefundEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of RefundEdge.
  """
  node: Refund!
}

"""
A line item that's included in a refund.
"""
type RefundLineItem {
  """
  The `LineItem` resource associated to the refunded line item.
  """
  lineItem: LineItem!

  """
  The inventory restock location.
  """
  location: Location

  """
  The price of a refunded line item.
  """
  price: Money! @deprecated(reason: "Use `priceSet` instead.")

  """
  The price of a refunded line item in shop and presentment currencies.
  """
  priceSet: MoneyBag!

  """
  The quantity of a refunded line item.
  """
  quantity: Int!

  """
  Whether the line item was removed from the order.
  """
  removal: Boolean!

  """
  The type of restock for the refunded line item.
  """
  restockType: RefundLineItemRestockType!

  """
  Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
  """
  restocked: Boolean!

  """
  The subtotal price of a refunded line item.
  """
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead.")

  """
  The subtotal price of a refunded line item in shop and presentment currencies.
  """
  subtotalSet: MoneyBag!

  """
  The total tax charged on a refunded line item.
  """
  totalTax: Money! @deprecated(reason: "Use `totalTaxSet` instead.")

  """
  The total tax charged on a refunded line item in shop and presentment currencies.
  """
  totalTaxSet: MoneyBag!
}

"""
An auto-generated type for paginating through multiple RefundLineItems.
"""
type RefundLineItemConnection {
  """
  A list of edges.
  """
  edges: [RefundLineItemEdge!]!

  """
  A list of the nodes contained in RefundLineItemEdge.
  """
  nodes: [RefundLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one RefundLineItem and a cursor during pagination.
"""
type RefundLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of RefundLineItemEdge.
  """
  node: RefundLineItem!
}

"""
The fields required to reimburse line items on a refund.
"""
input RefundLineItemInput {
  """
  The ID of the line item in the refund.
  """
  lineItemId: ID!

  """
  The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty.`
  """
  locationId: ID

  """
  The quantity of the associated line item to be refunded.
  """
  quantity: Int!

  """
  Whether the line item was removed from the order.
  """
  removal: Boolean

  """
  The type of restock for this line item.
  """
  restockType: RefundLineItemRestockType
}

"""
The type of restock performed for a particular refund line item.
"""
enum RefundLineItemRestockType {
  """
  The refund line item was canceled. Use this when restocking unfulfilled line items.
  """
  CANCEL

  """
  Deprecated. The refund line item was restocked, without specifically
  beingidentified as a return or cancelation. This value is not accepted when
  creating new refunds.
  """
  LEGACY_RESTOCK

  """
  Refund line item was not restocked.
  """
  NO_RESTOCK

  """
  The refund line item was returned. Use this when restocking line items that were fulfilled.
  """
  RETURN
}

"""
The input fields for the shipping cost to refund.
"""
input RefundShippingInput {
  """
  Whether to refund the full shipping amount.
  """
  fullRefund: Boolean

  """
  The input fields required to refund shipping cost, in the presentment currency of the order.
  This overrides the `fullRefund` argument.
  """
  shippingRefundAmount: MoneyInput
}

"""
An alert message that appears in the Shopify admin about a problem with a store
resource, with 1 or more actions to take. For example, you could use an alert to
indicate that you're not charging taxes on some product variants.
They can optionally have a specific icon and be dismissed by merchants.
"""
type ResourceAlert {
  """
  Buttons in the alert that link to related information.
  For example, _Edit variants_.
  """
  actions: [ResourceAlertAction!]!

  """
  The secondary text in the alert that includes further information or instructions about how to solve a problem.
  """
  content: HTML!

  """
  Unique identifier that appears when an alert is manually closed by the merchant.
  Most alerts cannot be manually closed.
  """
  dismissibleHandle: String

  """
  An icon that is optionally displayed with the alert.
  """
  icon: ResourceAlertIcon

  """
  Indication of how important the alert is.
  """
  severity: ResourceAlertSeverity!

  """
  The primary text in the alert that includes information or describes the problem.
  """
  title: String!
}

"""
An action associated to a resource alert, such as editing variants.
"""
type ResourceAlertAction {
  """
  Whether the action appears as a button or as a link.
  """
  primary: Boolean!

  """
  Resource for the action to show.
  """
  show: String

  """
  The text for the button in the alert. For example, _Edit variants_.
  """
  title: String!

  """
  The target URL that the button links to.
  """
  url: URL!
}

"""
The available icons for resource alerts.
"""
enum ResourceAlertIcon {
  """
  A checkmark inside a circle.
  """
  CHECKMARK_CIRCLE

  """
  A lowercase `i` inside a circle.
  """
  INFORMATION_CIRCLE
}

"""
The possible severity levels for a resource alert.
"""
enum ResourceAlertSeverity {
  """
  Indicates a critical alert. For example, a blocked app.
  """
  CRITICAL

  """
  Indicates a neutral alert. For example, an accepted dispute.
  """
  DEFAULT
  ERROR @deprecated(reason: "`ERROR` severity is being deprecated in favour of `WARNING` or `CRITICAL` instead.")

  """
  Indicates an informative alert. For example, an escalated dispute.
  """
  INFO

  """
  Indicates a success alert. For example, a winning a dispute.
  """
  SUCCESS

  """
  Indicates an informative alert. For example, a new dispute.
  """
  WARNING
}

"""
Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.
"""
type ResourceFeedback {
  """
  Feedback from an app about the steps a merchant needs to take to set up the app on their store.
  """
  appFeedback: [AppFeedback!]! @deprecated(reason: "Use `details` instead.")

  """
  List of AppFeedback detailing issues regarding a resource.
  """
  details: [AppFeedback!]!

  """
  Summary of resource feedback pertaining to the resource.
  """
  summary: String!
}

"""
A resource limit represents the limits that the resource has.
"""
type ResourceLimit {
  """
  Whether the resource is available.
  """
  available: Boolean!

  """
  Quantity available. If null the quantity available is unlimited.
  """
  quantityAvailable: Int

  """
  Quantity limit of the resource. If null the quantity is unlimited.
  """
  quantityLimit: Int

  """
  Quantity used of the resource. If null the quantity used cannot be retrieved.
  """
  quantityUsed: Int
}

"""
Resource locations in admin.
"""
enum ResourceLocation {
  ACTION
  INDEX
  NEW
  SHOW
}

"""
A resource publication represents information about the publication of a resource.
An instance of `ResourcePublication`, unlike `ResourcePublicationV2`, can be neither published or scheduled to be published.

See [ResourcePublicationV2](/api/admin-graphql/latest/objects/ResourcePublicationV2) for more context.
"""
type ResourcePublication {
  """
  The channel the resource publication is published to.
  """
  channel: Channel! @deprecated(reason: "Use `publication` instead.")

  """
  Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
  If false, then the resource publication is neither published nor scheduled to be published.
  """
  isPublished: Boolean!

  """
  The publication the resource publication is published to.
  """
  publication: Publication!

  """
  The date that the resource publication was or is going to be published to the publication.
  """
  publishDate: DateTime!

  """
  The resource published to the publication.
  """
  publishable: Publishable!
}

"""
An auto-generated type for paginating through multiple ResourcePublications.
"""
type ResourcePublicationConnection {
  """
  A list of edges.
  """
  edges: [ResourcePublicationEdge!]!

  """
  A list of the nodes contained in ResourcePublicationEdge.
  """
  nodes: [ResourcePublication!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ResourcePublication and a cursor during pagination.
"""
type ResourcePublicationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ResourcePublicationEdge.
  """
  node: ResourcePublication!
}

"""
A resource publication represents information about the publication of a resource.
Unlike `ResourcePublication`, an instance of `ResourcePublicationV2` can't be
unpublished. It must either be published or scheduled to be published.

See [ResourcePublication](/api/admin-graphql/latest/objects/ResourcePublication) for more context.
"""
type ResourcePublicationV2 {
  """
  Whether the resource publication is published. If true, then the resource publication is published to the publication.
  If false, then the resource publication is staged to be published to the publication.
  """
  isPublished: Boolean!

  """
  The publication the resource publication is published to.
  """
  publication: Publication!

  """
  The date that the resource publication was or is going to be published to the publication.
  """
  publishDate: DateTime

  """
  The resource published to the publication.
  """
  publishable: Publishable!
}

"""
An auto-generated type for paginating through multiple ResourcePublicationV2s.
"""
type ResourcePublicationV2Connection {
  """
  A list of edges.
  """
  edges: [ResourcePublicationV2Edge!]!

  """
  A list of the nodes contained in ResourcePublicationV2Edge.
  """
  nodes: [ResourcePublicationV2!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.
"""
type ResourcePublicationV2Edge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ResourcePublicationV2Edge.
  """
  node: ResourcePublicationV2!
}

"""
Resource types in admin.
"""
enum ResourceType {
  ABANDONED_CHECKOUTS

  """
  Resource type for Apps.
  """
  APPS
  ARTICLES
  BLOGS
  CHECKOUTS @deprecated(reason: "checkouts is no longer supported")
  COLLECTIONS
  CUSTOMERS
  DISCOUNTS @deprecated(reason: "discounts is no longer supported, use `PRICE_RULES` instead")

  """
  Resource type for automatic discounts.
  """
  DISCOUNTS_AUTOMATIC

  """
  Resource type for Discount Code Node.
  """
  DISCOUNT_CODE
  DRAFT_ORDERS

  """
  Resource type for External Marketing Activities.
  """
  EXTERNAL_MARKETING_ACTIVITIES
  MARKETING @deprecated(reason: "marketing is no longer supported")

  """
  Resource type for Marketing Activities.
  """
  MARKETING_ACTIVITIES

  """
  Resource type for Marketing Activity Reports.
  """
  MARKETING_ACTIVITY_REPORTS

  """
  Resource type for Marketing Campaigns.
  """
  MARKETING_CAMPAIGNS

  """
  Resource type for Marketing Summary.
  """
  MARKETING_SUMMARY
  ORDERS

  """
  Resource type for Order Transactions.
  """
  ORDER_TRANSACTIONS
  PAGES
  PRICE_RULES
  PRODUCTS

  """
  Resource type for Tax Settings.
  """
  TAX_SETTINGS

  """
  Resource type for URL redirects.
  """
  URL_REDIRECTS
  VARIANTS
}

"""
Represents a return.
"""
type Return implements Node {
  """
  Additional information about the declined return.
  """
  decline: ReturnDecline

  """
  Whether the return has a label attached.
  """
  hasAttachedLabel: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Whether the return is closed.
  """
  isClosed: Boolean! @deprecated(reason: "Use `status` instead.")

  """
  The name of the return.
  """
  name: String!

  """
  The order that the return belongs to.
  """
  order: Order!

  """
  The list of refunds associated with the return.
  """
  refunds(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RefundConnection!

  """
  Whether the return can be restocked using the Shopify admin.
  """
  restockableByAdmin: Boolean!

  """
  The return line items attached to the return.
  """
  returnLineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReturnLineItemConnection!

  """
  The list of reverse fulfillment orders for the return.
  """
  reverseFulfillmentOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReverseFulfillmentOrderConnection!

  """
  The status of the return.
  """
  status: ReturnStatus!

  """
  A suggested refund for the return.
  """
  suggestedRefund(
    """
    The duties from to associated order to include in the refund.
    """
    refundDuties: [RefundDutyInput!]

    """
    The shipping amount from the associated order to include in the refund.
    """
    refundShipping: RefundShippingInput

    """
    The line items from the return to include in the refund.
    """
    returnRefundLineItems: [ReturnRefundLineItemInput!]!
  ): SuggestedReturnRefund

  """
  List of supported actions for this return.
  """
  supportedActions: [ReturnSupportedAction!]!

  """
  The sum of all line item quantities for the return.
  """
  totalQuantity: Int!
}

"""
Actions with high (FIRST) priority are recommended to perform.
Actions with low (SECOND) priority are possible to perform.
"""
enum ReturnActionPriority {
  """
  A high priority return action, this action is recommended.
  """
  FIRST

  """
  A lower priority return action, this action is possible to be performed on the return.
  """
  SECOND
}

"""
An auto-generated type for paginating through multiple Returns.
"""
type ReturnConnection {
  """
  A list of edges.
  """
  edges: [ReturnEdge!]!

  """
  A list of the nodes contained in ReturnEdge.
  """
  nodes: [Return!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Additional information about why a merchant declined the customer's return request.
"""
type ReturnDecline {
  """
  The notification message sent to the customer about their declined return request.
  Maximum length: 500 characters.
  """
  note: String

  """
  The reason the customer's return request was declined.
  """
  reason: ReturnDeclineReason!
}

"""
The reason why the merchant declined a customer's return request.
"""
enum ReturnDeclineReason {
  """
  The return contains final sale items.
  """
  FINAL_SALE

  """
  The return is declined for another reason.
  """
  OTHER

  """
  The return period has ended.
  """
  RETURN_PERIOD_ENDED
}

"""
An auto-generated type which holds one Return and a cursor during pagination.
"""
type ReturnEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ReturnEdge.
  """
  node: Return!
}

"""
A return line item.
"""
type ReturnLineItem implements Node {
  """
  A note from the customer that describes the item to be returned. Maximum length: 300 characters.
  """
  customerNote: String

  """
  The fulfillment line item from which items are returned.
  """
  fulfillmentLineItem: FulfillmentLineItem!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The quantity being returned.
  """
  quantity: Int!

  """
  The summary of refunded quantity.
  """
  refundDisplayInformation: String

  """
  The quantity that can be refunded.
  """
  refundableQuantity: Int!

  """
  The quantity that was refunded.
  """
  refundedQuantity: Int!

  """
  The reason for returning the item.
  """
  returnReason: ReturnReason!

  """
  Additional information about the reason for the return. Maximum length: 255 characters.
  """
  returnReasonNote: String!

  """
  The suggested location to restock the item. Returns `null` if the item cannot be restocked.
  """
  suggestedRestockLocation: Location

  """
  The total weight of the item.
  """
  totalWeight: Weight

  """
  The total line price after all discounts on the line item, including both line
  item level discounts and code-based line item discounts, are applied.
  """
  withCodeDiscountedTotalPriceSet: MoneyBag!
}

"""
An auto-generated type for paginating through multiple ReturnLineItems.
"""
type ReturnLineItemConnection {
  """
  A list of edges.
  """
  edges: [ReturnLineItemEdge!]!

  """
  A list of the nodes contained in ReturnLineItemEdge.
  """
  nodes: [ReturnLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ReturnLineItem and a cursor during pagination.
"""
type ReturnLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ReturnLineItemEdge.
  """
  node: ReturnLineItem!
}

"""
The reason for returning the return line item.
"""
enum ReturnReason {
  """
  The item is returned because the buyer did not like the color.
  """
  COLOR

  """
  The item is returned because it is damaged or defective.
  """
  DEFECTIVE

  """
  The item is returned because it was not as described.
  """
  NOT_AS_DESCRIBED

  """
  The item is returned for another reason. For this value, a return reason note is also provided.
  """
  OTHER

  """
  The item is returned because the size was too large.
  """
  SIZE_TOO_LARGE

  """
  The item is returned because the size was too small.
  """
  SIZE_TOO_SMALL

  """
  The item is returned because the buyer did not like the style.
  """
  STYLE

  """
  The item is returned because of an unknown reason.
  """
  UNKNOWN

  """
  The item is returned because the customer changed their mind.
  """
  UNWANTED

  """
  The item is returned because the customer received the wrong one.
  """
  WRONG_ITEM
}

"""
The input fields for a return refund line item.
"""
input ReturnRefundLineItemInput {
  """
  The quantity of the return line item to be refunded.
  """
  quantity: Int!

  """
  The ID of the return line item to be refunded.
  """
  returnLineItemId: ID!
}

"""
The status of a return.
"""
enum ReturnStatus {
  """
  The return has been canceled.
  """
  CANCELED

  """
  The return has been completed.
  """
  CLOSED

  """
  The return was declined.
  """
  DECLINED

  """
  The return is in progress.
  """
  OPEN

  """
  The return was requested.
  """
  REQUESTED
}

"""
Represents a supported action for a Return.
"""
type ReturnSupportedAction {
  """
  The external URL for the return action when the action has an external source.
  """
  externalUrl: URL

  """
  The priority of the action.
  """
  priority: ReturnActionPriority!

  """
  A human-readable name for the action.
  """
  title: String!
}

"""
A returnable fulfillment, which is an order that has been delivered
and is eligible to be returned to the merchant.
"""
type ReturnableFulfillment implements Node {
  """
  The fulfillment that the returnable fulfillment refers to.
  """
  fulfillment: Fulfillment!

  """
  The unique identifier of the Returnable Fulfillment.
  """
  id: ID!

  """
  The list of returnable fulfillment line items.
  """
  returnableFulfillmentLineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReturnableFulfillmentLineItemConnection!
}

"""
A returnable fulfillment line item.
"""
type ReturnableFulfillmentLineItem {
  """
  The fulfillment line item that can be returned.
  """
  fulfillmentLineItem: FulfillmentLineItem!

  """
  The quantity available to be returned.
  """
  quantity: Int!
}

"""
An auto-generated type for paginating through multiple ReturnableFulfillmentLineItems.
"""
type ReturnableFulfillmentLineItemConnection {
  """
  A list of edges.
  """
  edges: [ReturnableFulfillmentLineItemEdge!]!

  """
  A list of the nodes contained in ReturnableFulfillmentLineItemEdge.
  """
  nodes: [ReturnableFulfillmentLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ReturnableFulfillmentLineItem and a cursor during pagination.
"""
type ReturnableFulfillmentLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ReturnableFulfillmentLineItemEdge.
  """
  node: ReturnableFulfillmentLineItem!
}

"""
A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.
For example, a buyer requests a return, and a merchant sends the buyer a shipping label.
The reverse delivery contains the context of the items sent back, how they're being sent back
(for example, a shipping label), and the current state of the delivery (tracking information).
"""
type ReverseDelivery implements Node {
  """
  The deliverable associated with the reverse delivery.
  """
  deliverable: ReverseDeliveryDeliverable

  """
  The ID of the reverse delivery.
  """
  id: ID!

  """
  The Shopify Shipping return label associated with the reverse delivery.
  """
  returnLabel: DeliveryReturnLabel

  """
  The reverse delivery line items attached to the reverse delivery.
  """
  reverseDeliveryLineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReverseDeliveryLineItemConnection!

  """
  The `ReverseFulfillmentOrder` associated with the reverse delivery.
  """
  reverseFulfillmentOrder: ReverseFulfillmentOrder!
}

"""
An auto-generated type for paginating through multiple ReverseDeliveries.
"""
type ReverseDeliveryConnection {
  """
  A list of edges.
  """
  edges: [ReverseDeliveryEdge!]!

  """
  A list of the nodes contained in ReverseDeliveryEdge.
  """
  nodes: [ReverseDelivery!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
The delivery method and artifacts associated with a reverse delivery.
"""
union ReverseDeliveryDeliverable = ReverseDeliveryShippingDeliverable

"""
An auto-generated type which holds one ReverseDelivery and a cursor during pagination.
"""
type ReverseDeliveryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ReverseDeliveryEdge.
  """
  node: ReverseDelivery!
}

"""
The return label file information for a reverse delivery.
"""
type ReverseDeliveryLabelV2 {
  """
  The date and time when the reverse delivery label was created.
  """
  createdAt: DateTime!

  """
  A public link that can be used to download the label image.
  """
  publicFileUrl: URL

  """
  The date and time when the reverse delivery label was updated.
  """
  updatedAt: DateTime!
}

"""
The details about a reverse delivery line item.
"""
type ReverseDeliveryLineItem implements Node {
  """
  The dispositions of the item.
  """
  dispositions: [ReverseFulfillmentOrderDisposition!]!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The expected number of units.
  """
  quantity: Int!

  """
  The corresponding reverse fulfillment order line item.
  """
  reverseFulfillmentOrderLineItem: ReverseFulfillmentOrderLineItem!
}

"""
An auto-generated type for paginating through multiple ReverseDeliveryLineItems.
"""
type ReverseDeliveryLineItemConnection {
  """
  A list of edges.
  """
  edges: [ReverseDeliveryLineItemEdge!]!

  """
  A list of the nodes contained in ReverseDeliveryLineItemEdge.
  """
  nodes: [ReverseDeliveryLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ReverseDeliveryLineItem and a cursor during pagination.
"""
type ReverseDeliveryLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ReverseDeliveryLineItemEdge.
  """
  node: ReverseDeliveryLineItem!
}

"""
A reverse shipping deliverable that may include a label and tracking information.
"""
type ReverseDeliveryShippingDeliverable {
  """
  The return label attached to the reverse delivery.
  """
  label: ReverseDeliveryLabelV2

  """
  The information to track the reverse delivery.
  """
  tracking: ReverseDeliveryTrackingV2
}

"""
Represents the information used to track a reverse delivery.
"""
type ReverseDeliveryTrackingV2 {
  """
  The provider of the tracking information, in a human-readable format.
  """
  carrierName: String

  """
  The identifier used by the courier to identify the shipment.
  """
  number: String

  """
  The URL to track a shipment.
  """
  url: URL
}

"""
A group of one or more items in a return that will be processed at a fulfillment service.
There can be more than one reverse fulfillment order for a return at a given location.
"""
type ReverseFulfillmentOrder implements Node {
  """
  The reverse fulfillment order's assigned location.
  This is the location expected to perform reverse fulfillment.
  """
  assignedLocation: Location

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The list of reverse fulfillment order line items for the reverse fulfillment order.
  """
  lineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReverseFulfillmentOrderLineItemConnection!

  """
  The order associated with the reverse fulfillment order.
  """
  order: Order!

  """
  The list of reverse deliveries for the reverse fulfillment order.
  """
  reverseDeliveries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReverseDeliveryConnection!

  """
  The status of the reverse fulfillment order.
  """
  status: ReverseFulfillmentOrderStatus!

  """
  The current confirmation for the reverse fulfillment order from a third-party logistics service.
  If no third-party service is involved, then this value is `nil`.
  """
  thirdPartyConfirmation: ReverseFulfillmentOrderThirdPartyConfirmation
}

"""
An auto-generated type for paginating through multiple ReverseFulfillmentOrders.
"""
type ReverseFulfillmentOrderConnection {
  """
  A list of edges.
  """
  edges: [ReverseFulfillmentOrderEdge!]!

  """
  A list of the nodes contained in ReverseFulfillmentOrderEdge.
  """
  nodes: [ReverseFulfillmentOrder!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
The details of the arrangement of an item.
"""
type ReverseFulfillmentOrderDisposition implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The location where the disposition occurred.
  """
  location: Location

  """
  The number of disposed units.
  """
  quantity: Int!

  """
  The final arrangement of an item.
  """
  type: ReverseFulfillmentOrderDispositionType!
}

"""
The final arrangement of an item from a reverse fulfillment order.
"""
enum ReverseFulfillmentOrderDispositionType {
  """
  An item that was expected but absent.
  """
  MISSING

  """
  An item that wasn't restocked.
  """
  NOT_RESTOCKED

  """
  An item that requires further processing before being restocked or discarded.
  """
  PROCESSING_REQUIRED

  """
  An item that was restocked.
  """
  RESTOCKED
}

"""
An auto-generated type which holds one ReverseFulfillmentOrder and a cursor during pagination.
"""
type ReverseFulfillmentOrderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ReverseFulfillmentOrderEdge.
  """
  node: ReverseFulfillmentOrder!
}

"""
The details about a reverse fulfillment order line item.
"""
type ReverseFulfillmentOrderLineItem implements Node {
  """
  The dispositions of the item.
  """
  dispositions: [ReverseFulfillmentOrderDisposition!]!

  """
  The corresponding fulfillment line item for a reverse fulfillment order line item.
  """
  fulfillmentLineItem: FulfillmentLineItem!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The total number of units to be processed.
  """
  totalQuantity: Int!
}

"""
An auto-generated type for paginating through multiple ReverseFulfillmentOrderLineItems.
"""
type ReverseFulfillmentOrderLineItemConnection {
  """
  A list of edges.
  """
  edges: [ReverseFulfillmentOrderLineItemEdge!]!

  """
  A list of the nodes contained in ReverseFulfillmentOrderLineItemEdge.
  """
  nodes: [ReverseFulfillmentOrderLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ReverseFulfillmentOrderLineItem and a cursor during pagination.
"""
type ReverseFulfillmentOrderLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ReverseFulfillmentOrderLineItemEdge.
  """
  node: ReverseFulfillmentOrderLineItem!
}

"""
The status of a reverse fulfillment order.
"""
enum ReverseFulfillmentOrderStatus {
  """
  The reverse fulfillment order has been canceled.
  """
  CANCELED

  """
  The reverse fulfillment order has been completed.
  """
  CLOSED

  """
  The reverse fulfillment order is in progress.
  """
  OPEN
}

"""
The third-party confirmation of a reverse fulfillment order.
"""
type ReverseFulfillmentOrderThirdPartyConfirmation {
  """
  The status of the reverse fulfillment order third-party confirmation.
  """
  status: ReverseFulfillmentOrderThirdPartyConfirmationStatus!
}

"""
The status of a reverse fulfillment order third-party confirmation.
"""
enum ReverseFulfillmentOrderThirdPartyConfirmationStatus {
  """
  The reverse fulfillment order was accepted by the fulfillment service.
  """
  ACCEPTED

  """
  The reverse fulfillment order cancelation was accepted by the fulfillment service.
  """
  CANCEL_ACCEPTED

  """
  The reverse fulfillment order cancelation was rejected by the fulfillment service.
  """
  CANCEL_REJECTED

  """
  The reverse fulfillment order is awaiting acceptance by the fulfillment service.
  """
  PENDING_ACCEPTANCE

  """
  The reverse fulfillment order is awaiting cancelation by the fulfillment service.
  """
  PENDING_CANCELATION

  """
  The reverse fulfillment order was rejected by the fulfillment service.
  """
  REJECTED
}

"""
Represents a risk assessment for an order.
"""
type RiskAssessment {
  """
  Optional facts used to describe the risk assessment.
  """
  facts(
    """
    Truncate the array result to this size.
    """
    first: Int

    """
    The sort order for the risk assessment facts.
    """
    sortKey: FactSortKeys
  ): [RiskFact!]!

  """
  The provider of the risk assessment.
  """
  providerName: String!

  """
  The likelihood that the order is fraudulent, based on this risk assessment.
  """
  result: RiskAssessmentResult!
}

"""
List of possible values for a RiskAssessment result.
"""
enum RiskAssessmentResult {
  HIGH
  LOW
  MEDIUM
  NONE
  PENDING
}

"""
A risk fact belongs to a single risk assessment and serves to provide additional
context for an assessment. Risk facts are not necessarily tied to the result of
the recommendation.
"""
type RiskFact {
  """
  A description of the fact.
  """
  description: String!

  """
  Indicates whether the fact is a negative, neutral or positive contributor with regards to risk.
  """
  sentiment: RiskFactSentiment!
}

"""
List of possible values for a RiskFact sentiment.
"""
enum RiskFactSentiment {
  NEGATIVE
  NEUTRAL
  POSITIVE
}

"""
SEO information.
"""
type SEO {
  """
  SEO Description.
  """
  description: String

  """
  SEO Title.
  """
  title: String
}

"""
An individual sale record associated with a sales agreement. Every money value
in an order's sales data is represented in the currency's smallest unit. When
amounts are divided across multiple line items, such as taxes or order
discounts, the amounts might not divide evenly across all of the line items on
the order. To address this, the remaining currency units that couldn't be
divided evenly are allocated one at a time, starting with the first line item,
until they are all accounted for. In aggregate, the values sum up correctly. In
isolation, one line item might have a different tax or discount amount than
another line item of the same price, before taxes and discounts. This is because
the amount could not be divided evenly across the items. The allocation of
currency units across line items is immutable. After they are allocated,
currency units are never reallocated or redistributed among the line items.
"""
interface Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique identifier for the sale.
  """
  id: ID!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
The possible order action types for a sale.
"""
enum SaleActionType {
  """
  A purchase or charge.
  """
  ORDER

  """
  A removal or return.
  """
  RETURN

  """
  An unknown order action. Represents new actions that may be added in future versions.
  """
  UNKNOWN

  """
  A change to the price, taxes, or discounts for a prior purchase.
  """
  UPDATE
}

"""
An auto-generated type for paginating through multiple Sales.
"""
type SaleConnection {
  """
  A list of edges.
  """
  edges: [SaleEdge!]!

  """
  A list of the nodes contained in SaleEdge.
  """
  nodes: [Sale!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Sale and a cursor during pagination.
"""
type SaleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SaleEdge.
  """
  node: Sale!
}

"""
The possible line types for a sale record. One of the possible order line types
for a sale is an adjustment. Sales adjustments occur when a refund is issued for
a line item that is either more or less than the total value of the line item.
Examples are restocking fees and goodwill payments. When this happens, Shopify
produces a sales agreement with sale records for each line item that is returned
or refunded and an additional sale record for the adjustment (for example, a
restocking fee). The sales records for the returned or refunded items represent
the reversal of the original line item sale value. The additional adjustment
sale record represents the difference between the original total value of all
line items that were refunded, and the actual amount refunded.
"""
enum SaleLineType {
  """
  A sale adjustment.
  """
  ADJUSTMENT

  """
  A duty charge.
  """
  DUTY

  """
  A gift card.
  """
  GIFT_CARD

  """
  A product purchased, returned or exchanged.
  """
  PRODUCT

  """
  A shipping cost.
  """
  SHIPPING

  """
  A tip added by the customer.
  """
  TIP

  """
  An unknown sale line. Represents new types that may be added in future versions.
  """
  UNKNOWN
}

"""
The tax allocated to a sale from a single tax line.
"""
type SaleTax {
  """
  The portion of the total tax amount on the related sale that comes from the associated tax line.
  """
  amount: MoneyBag!

  """
  The unique identifier for the sale tax.
  """
  id: ID!

  """
  The tax line associated with the sale.
  """
  taxLine: TaxLine!
}

"""
A contract between a merchant and a customer to do business. Shopify creates a
sales agreement whenever an order is placed, edited, or refunded. A sales
agreement has one or more sales records, which provide itemized details about
the initial agreement or subsequent changes made to the order. For example, when
a customer places an order, Shopify creates the order, generates a sales
agreement, and records a sale for each line item purchased in the order. A sale
record is specific to a type of order line. Order lines can represent different
things such as a purchased product, a tip added by a customer, shipping costs
collected at checkout, and more.
"""
interface SalesAgreement {
  """
  The application that created the agreement.
  """
  app: App

  """
  The date and time at which the agreement occured.
  """
  happenedAt: DateTime!

  """
  The unique identifier for the agreement.
  """
  id: ID!

  """
  The reason the agremeent was created.
  """
  reason: OrderActionType!

  """
  The sales associated with the agreement.
  """
  sales(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SaleConnection!

  """
  The staff member associated with the agreement.
  """
  user: StaffMember
}

"""
An auto-generated type for paginating through multiple SalesAgreements.
"""
type SalesAgreementConnection {
  """
  A list of edges.
  """
  edges: [SalesAgreementEdge!]!

  """
  A list of the nodes contained in SalesAgreementEdge.
  """
  nodes: [SalesAgreement!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SalesAgreement and a cursor during pagination.
"""
type SalesAgreementEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SalesAgreementEdge.
  """
  node: SalesAgreement!
}

"""
A saved search is a representation of a search query saved in the admin.
"""
type SavedSearch implements LegacyInteroperability & Node {
  """
  The display name of a saved search. This will be internationalized to merchant's locale if it
  is a default saved search. This will be the name (without alteration, as merchant supplied) if it is a
  user-created saved search.
  """
  displayName: String!

  """
  The filters of a saved search.
  """
  filters: [SearchFilter!]!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The name of a saved search.
  """
  name: String!

  """
  The query string of a saved search. This includes search terms and filters.
  """
  query: String!

  """
  The type of resource this saved search is searching in.
  """
  resourceType: SearchResultType!

  """
  The search terms of a saved search.
  """
  searchTerms: String!
}

"""
An auto-generated type for paginating through multiple SavedSearches.
"""
type SavedSearchConnection {
  """
  A list of edges.
  """
  edges: [SavedSearchEdge!]!

  """
  A list of the nodes contained in SavedSearchEdge.
  """
  nodes: [SavedSearch!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SavedSearch and a cursor during pagination.
"""
type SavedSearchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SavedSearchEdge.
  """
  node: SavedSearch!
}

"""
Script discount applications capture the intentions of a discount that
was created by a Shopify Script for an order's line item or shipping line.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type ScriptDiscountApplication implements DiscountApplication {
  """
  The allocated amount of the discount that was applied to the order.
  """
  allocatedAmount: DiscountApplicationAllocationAmount!

  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The description of the application as defined by the Script.
  """
  description: String! @deprecated(reason: "Use `title` instead.")

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The title of the application as defined by the Script.
  """
  title: String!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
<div class="note"><h4>Theme app extensions</h4>
  <p>Your app might not pass App Store review if it uses script tags instead of
theme app extensions. All new apps, and apps that integrate with Online Store
2.0 themes, should use theme app extensions, such as app blocks or app embed
blocks. Script tags are an alternative you can use with only vintage themes. <a
href="/apps/online-store#what-integration-method-should-i-use"
target="_blank">Learn more</a>.</p></div>


A script tag represents remote JavaScript code that is loaded into the pages of
a shop's storefront or the order status page of checkout.
"""
type ScriptTag implements LegacyInteroperability & Node {
  """
  Whether the Shopify CDN can cache and serve the script tag.
  If `true`, then the script will be cached and served by the CDN.
  The cache expires 15 minutes after the script tag is successfully returned.
  If `false`, then the script will be served as is.
  """
  cache: Boolean!

  """
  The date and time when the script tag was created.
  """
  createdAt: DateTime!

  """
  The page or pages on the online store that the script should be included.
  """
  displayScope: ScriptTagDisplayScope!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The URL to the remote script.
  """
  src: URL!

  """
  The date and time when the script tag was last updated.
  """
  updatedAt: DateTime!
}

"""
The page or pages on the online store where the script should be included.
"""
enum ScriptTagDisplayScope {
  """
  Include the script on both the web storefront and the order status page.
  """
  ALL

  """
  Include the script only on the web storefront.
  """
  ONLINE_STORE

  """
  Include the script only on the order status page.
  """
  ORDER_STATUS
}

"""
A filter in a search query represented by a key value pair.
"""
type SearchFilter {
  """
  The key of the search filter.
  """
  key: String!

  """
  The value of the search filter.
  """
  value: String!
}

"""
A list of search filters along with their specific options in value and label pair for filtering.
"""
type SearchFilterOptions {
  """
  A list of options that can be use to filter product availability.
  """
  productAvailability: [FilterOption!]!
}

"""
Represents an individual result returned from a search.
"""
type SearchResult {
  """
  Returns the search result description text.
  """
  description: String

  """
  Returns the Image resource presented to accompany a search result.
  """
  image: Image

  """
  Returns the ID of the resource returned in the search result.
  """
  reference: Node!

  """
  Returns the resource title.
  """
  title: String!

  """
  Returns the absolute URL to the resource in the search result.
  """
  url: URL!
}

"""
The connection type for SearchResult.
"""
type SearchResultConnection {
  """
  A list of edges.
  """
  edges: [SearchResultEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Information to aid in pagination.
  """
  resultsAfterCount: Int! @deprecated(reason: "The provided information is not accurate.")
}

"""
An auto-generated type which holds one SearchResult and a cursor during pagination.
"""
type SearchResultEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SearchResultEdge.
  """
  node: SearchResult!
}

"""
Specifies the type of resources to be returned from a search.
"""
enum SearchResultType {
  """
  An abandoned checkout.
  """
  ABANDONED_CHECKOUT

  """
  An automatic discount.
  """
  AUTOMATIC_DISCOUNT
  COLLECTION
  CUSTOMER

  """
  A code discount redeem code.
  """
  DISCOUNT_REDEEM_CODE
  DRAFT_ORDER

  """
  A file.
  """
  FILE

  """
  Marketing activities represent marketing created via apps.
  """
  MARKETING_ACTIVITY

  """
  Marketing campaigns.
  """
  MARKETING_CAMPAIGN
  ONLINE_STORE_ARTICLE
  ONLINE_STORE_BLOG
  ONLINE_STORE_PAGE
  ORDER
  PRICE_RULE
  PRODUCT

  """
  A product variant.
  """
  PRODUCT_VARIANT

  """
  A URL redirect.
  """
  URL_REDIRECT
}

"""
A dynamic collection of customers based on specific criteria.
"""
type Segment implements Node {
  """
  The date and time when the segment was added to the store.
  """
  creationDate: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The date and time when the segment was last updated.
  """
  lastEditDate: DateTime!

  """
  The name of the segment.
  """
  name: String!

  """
  A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers.
  """
  query: String!

  """
  Whether the segment is created through tag migration.
  """
  tagMigrated: Boolean!
}

"""
Properties used by customers to select a product variant.
Products can have multiple options, like different sizes or colors.
"""
type SelectedOption {
  """
  The product option’s name.
  """
  name: String!

  """
  The product option’s value.
  """
  value: String!
}

"""
Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
up these records if you need to restore them later.

For more information on selling plans, refer to
[*Creating and managing selling plans*](https://shopify.dev/apps/subscriptions/selling-plans).
"""
type SellingPlan implements Node {
  """
  A selling plan policy which describes the recurring billing details.
  """
  billingPolicy: SellingPlanBillingPolicy!

  """
  The category used to classify the selling plan for reporting purposes.
  """
  category: SellingPlanCategory

  """
  The date and time when the selling plan was created.
  """
  createdAt: DateTime!

  """
  A selling plan policy which describes the delivery details.
  """
  deliveryPolicy: SellingPlanDeliveryPolicy!

  """
  Buyer facing string which describes the selling plan commitment.
  """
  description: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  When to reserve inventory for a selling plan.
  """
  inventoryPolicy: SellingPlanInventoryPolicy

  """
  A customer-facing description of the selling plan.

  If your store supports multiple currencies, then don't include
  country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This
  field won't be converted to reflect different currencies.
  """
  name: String!

  """
  The values of all options available on the selling plan. Selling plans are
  grouped together in Liquid when they are created by the same app, and have the
  same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!

  """
  Relative position of the selling plan for display. A lower position will be displayed before a higher position.
  """
  position: Int

  """
  Selling plan pricing details.
  """
  pricingPolicies: [SellingPlanPricingPolicy!]!
}

"""
Represents a selling plan policy anchor.
"""
type SellingPlanAnchor {
  """
  The cutoff day for the anchor.

  If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
  the days of the week according to ISO 8601, where 1 is Monday.

  If `type` is MONTHDAY, then the value must be between 1-31.

  If `type` is YEARDAY, then the value must be `null`.
  """
  cutoffDay: Int

  """
  The day of the anchor.

  If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
  the days of the week according to ISO 8601, where 1 is Monday.

  If `type` is not WEEKDAY, then the value must be between 1-31.
  """
  day: Int!

  """
  The month of the anchor. If type is different than YEARDAY, then the value must
  be `null` or between 1-12.
  """
  month: Int

  """
  Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.
  """
  type: SellingPlanAnchorType!
}

"""
Represents the anchor type.
"""
enum SellingPlanAnchorType {
  """
  Which day of the month, between 1-31.
  """
  MONTHDAY

  """
  Which day of the week, between 1-7.
  """
  WEEKDAY

  """
  Which days of the month and year, month between 1-12, and day between 1-31.
  """
  YEARDAY
}

"""
Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
We recommend backing up these records if you need to restore them later.
"""
union SellingPlanBillingPolicy = SellingPlanFixedBillingPolicy | SellingPlanRecurringBillingPolicy

"""
The category of the selling plan. For the `OTHER` category,
         you must fill out our [request form](https://docs.google.com/forms/d/e/1FAIpQLSeU18Xmw0Q61V8wdH-dfGafFqIBfRchQKUO8WAF3yJTvgyyZQ/viewform),
         where we'll review your request for a new purchase option.
"""
enum SellingPlanCategory {
  """
  The selling plan is for anything not in one of the other categories.
  """
  OTHER

  """
  The selling plan is for pre-orders.
  """
  PRE_ORDER

  """
  The selling plan is for subscriptions.
  """
  SUBSCRIPTION

  """
  The selling plan is for try before you buy purchases.
  """
  TRY_BEFORE_YOU_BUY
}

"""
The amount charged at checkout when the full amount isn't charged at checkout.
"""
type SellingPlanCheckoutCharge {
  """
  The charge type for the checkout charge.
  """
  type: SellingPlanCheckoutChargeType!

  """
  The charge value for the checkout charge.
  """
  value: SellingPlanCheckoutChargeValue!
}

"""
The percentage value of the price used for checkout charge.
"""
type SellingPlanCheckoutChargePercentageValue {
  """
  The percentage value of the price used for checkout charge.
  """
  percentage: Float!
}

"""
The checkout charge when the full amount isn't charged at checkout.
"""
enum SellingPlanCheckoutChargeType {
  """
  The checkout charge is a percentage of the product or variant price.
  """
  PERCENTAGE

  """
  The checkout charge is a fixed price amount.
  """
  PRICE
}

"""
The portion of the price to be charged at checkout.
"""
union SellingPlanCheckoutChargeValue = MoneyV2 | SellingPlanCheckoutChargePercentageValue

"""
An auto-generated type for paginating through multiple SellingPlans.
"""
type SellingPlanConnection {
  """
  A list of edges.
  """
  edges: [SellingPlanEdge!]!

  """
  A list of the nodes contained in SellingPlanEdge.
  """
  nodes: [SellingPlan!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
We recommend backing up these records if you need to restore them later.
"""
union SellingPlanDeliveryPolicy = SellingPlanFixedDeliveryPolicy | SellingPlanRecurringDeliveryPolicy

"""
An auto-generated type which holds one SellingPlan and a cursor during pagination.
"""
type SellingPlanEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SellingPlanEdge.
  """
  node: SellingPlan!
}

"""
The fixed selling plan billing policy.
"""
type SellingPlanFixedBillingPolicy {
  """
  The checkout charge when the full amount isn't charged at checkout.
  """
  checkoutCharge: SellingPlanCheckoutCharge!

  """
  The exact time when to capture the full payment.
  """
  remainingBalanceChargeExactTime: DateTime

  """
  The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration.
  """
  remainingBalanceChargeTimeAfterCheckout: String

  """
  When to capture payment for amount due.
  """
  remainingBalanceChargeTrigger: SellingPlanRemainingBalanceChargeTrigger!
}

"""
Represents a fixed selling plan delivery policy.
"""
type SellingPlanFixedDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  A buffer period for orders to be included in next fulfillment anchor.
  """
  cutoff: Int

  """
  The date and time when the fulfillment should trigger.
  """
  fulfillmentExactTime: DateTime

  """
  What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN.
  """
  fulfillmentTrigger: SellingPlanFulfillmentTrigger!

  """
  Whether the delivery policy is merchant or buyer-centric.
  Buyer-centric delivery policies state the time when the buyer will receive the goods.
  Merchant-centric delivery policies state the time when the fulfillment should be started.
  Currently, only merchant-centric delivery policies are supported.
  """
  intent: SellingPlanFixedDeliveryPolicyIntent!

  """
  The fulfillment or delivery behavior of the first fulfillment when the order
  is placed before the anchor. The default value for this field is `ASAP`.
  """
  preAnchorBehavior: SellingPlanFixedDeliveryPolicyPreAnchorBehavior!
}

"""
Possible intentions of a Delivery Policy.
"""
enum SellingPlanFixedDeliveryPolicyIntent {
  """
  A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
  """
  FULFILLMENT_BEGIN
}

"""
The fulfillment or delivery behavior of the first fulfillment when the orderis placed before the anchor.
"""
enum SellingPlanFixedDeliveryPolicyPreAnchorBehavior {
  """
  Orders placed can be fulfilled / delivered immediately. Orders placed inside a
  cutoff can be fulfilled / delivered at the next anchor.
  """
  ASAP

  """
  Orders placed can be fulfilled / delivered at the next anchor date.
  Orders placed inside a cutoff will skip the next anchor and can be fulfilled /
  delivered at the following anchor.
  """
  NEXT
}

"""
Represents a fixed selling plan pricing policy.
"""
type SellingPlanFixedPricingPolicy implements SellingPlanPricingPolicyBase {
  """
  The price adjustment type.
  """
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """
  The price adjustment value.
  """
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!

  """
  The date and time when the fixed selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

"""
Describes what triggers fulfillment.
"""
enum SellingPlanFulfillmentTrigger {
  """
  Use the anchor values to calculate fulfillment date.
  """
  ANCHOR

  """
  As soon as possible.
  """
  ASAP

  """
  At an exact time defined by the fulfillment_exact_time field.
  """
  EXACT_TIME

  """
  Unknown. Usually to be determined in the future.
  """
  UNKNOWN
}

"""
Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
and associated records (selling plans and policies) are deleted 48 hours after a merchant
uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
"""
type SellingPlanGroup implements Node {
  """
  The app that created the selling plan group.
  """
  app: App

  """
  The identifier for app, exposed in Liquid and product JSON.
  """
  appId: String

  """
  Whether the given product is directly associated to the selling plan group.
  """
  appliesToProduct(
    """
    The ID of the product.
    """
    productId: ID!
  ): Boolean!

  """
  Whether the given product variant is directly associated to the selling plan group.
  """
  appliesToProductVariant(
    """
    The ID of the product.
    """
    productVariantId: ID!
  ): Boolean!

  """
  Whether any of the product variants of the given product are associated to the selling plan group.
  """
  appliesToProductVariants(
    """
    The ID of the product.
    """
    productId: ID!
  ): Boolean!

  """
  The date and time when the selling plan group was created.
  """
  createdAt: DateTime!

  """
  The merchant-facing description of the selling plan group.
  """
  description: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The merchant-facing label of the selling plan group.
  """
  merchantCode: String!

  """
  The buyer-facing label of the selling plan group.
  """
  name: String!

  """
  The values of all options available on the selling plan group. Selling plans
  are grouped together in Liquid when they are created by the same app, and have
  the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!

  """
  The relative position of the selling plan group for display.
  """
  position: Int

  """
  A count of products associated to the selling plan group.
  """
  productCount: Int!

  """
  A count of product variants associated to the selling plan group.
  """
  productVariantCount(
    """
    The ID of the product to scope the count to.
    """
    productId: ID
  ): Int!

  """
  Product variants associated to the selling plan group.
  """
  productVariants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductVariantConnection!

  """
  Products associated to the selling plan group.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductConnection!

  """
  Selling plans associated to the selling plan group.
  """
  sellingPlans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SellingPlanConnection!

  """
  A summary of the policies associated to the selling plan group.
  """
  summary: String
}

"""
An auto-generated type for paginating through multiple SellingPlanGroups.
"""
type SellingPlanGroupConnection {
  """
  A list of edges.
  """
  edges: [SellingPlanGroupEdge!]!

  """
  A list of the nodes contained in SellingPlanGroupEdge.
  """
  nodes: [SellingPlanGroup!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
"""
type SellingPlanGroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SellingPlanGroupEdge.
  """
  node: SellingPlanGroup!
}

"""
Represents valid selling plan interval.
"""
enum SellingPlanInterval {
  """
  Day interval.
  """
  DAY

  """
  Month interval.
  """
  MONTH

  """
  Week interval.
  """
  WEEK

  """
  Year interval.
  """
  YEAR
}

"""
The selling plan inventory policy.
"""
type SellingPlanInventoryPolicy {
  """
  When to reserve inventory for the order.
  """
  reserve: SellingPlanReserve!
}

"""
Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
to restore them later.
"""
union SellingPlanPricingPolicy = SellingPlanFixedPricingPolicy | SellingPlanRecurringPricingPolicy

"""
Represents a selling plan pricing policy adjustment type.
"""
enum SellingPlanPricingPolicyAdjustmentType {
  """
  Fixed amount off adjustment.
  """
  FIXED_AMOUNT

  """
  Percentage off adjustment.
  """
  PERCENTAGE

  """
  Price of the policy.
  """
  PRICE
}

"""
Represents a selling plan pricing policy adjustment value type.
"""
union SellingPlanPricingPolicyAdjustmentValue = MoneyV2 | SellingPlanPricingPolicyPercentageValue

"""
Represents selling plan pricing policy common fields.
"""
interface SellingPlanPricingPolicyBase {
  """
  The price adjustment type.
  """
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """
  The price adjustment value.
  """
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!
}

"""
The percentage value of a selling plan pricing policy percentage type.
"""
type SellingPlanPricingPolicyPercentageValue {
  """
  The percentage value.
  """
  percentage: Float!
}

"""
Represents a recurring selling plan billing policy.
"""
type SellingPlanRecurringBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  The date and time when the selling plan billing policy was created.
  """
  createdAt: DateTime!

  """
  The billing frequency, it can be either: day, week, month or year.
  """
  interval: SellingPlanInterval!

  """
  The number of intervals between billings.
  """
  intervalCount: Int!

  """
  Maximum number of billing iterations.
  """
  maxCycles: Int

  """
  Minimum number of billing iterations.
  """
  minCycles: Int
}

"""
Represents a recurring selling plan delivery policy.
"""
type SellingPlanRecurringDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  The date and time when the selling plan delivery policy was created.
  """
  createdAt: DateTime!

  """
  Number of days which represent a buffer period for orders to be included in a cycle.
  """
  cutoff: Int

  """
  Whether the delivery policy is merchant or buyer-centric.
  Buyer-centric delivery policies state the time when the buyer will receive the goods.
  Merchant-centric delivery policies state the time when the fulfillment should be started.
  Currently, only merchant-centric delivery policies are supported.
  """
  intent: SellingPlanRecurringDeliveryPolicyIntent!

  """
  The delivery frequency, it can be either: day, week, month or year.
  """
  interval: SellingPlanInterval!

  """
  The number of intervals between deliveries.
  """
  intervalCount: Int!

  """
  The fulfillment or delivery behavior of the first fulfillment when the order
  is placed before the anchor. The default value for this field is `ASAP`.
  """
  preAnchorBehavior: SellingPlanRecurringDeliveryPolicyPreAnchorBehavior!
}

"""
Whether the delivery policy is merchant or buyer-centric.
"""
enum SellingPlanRecurringDeliveryPolicyIntent {
  """
  A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
  """
  FULFILLMENT_BEGIN
}

"""
The fulfillment or delivery behaviors of the first fulfillment when the orderis placed before the anchor.
"""
enum SellingPlanRecurringDeliveryPolicyPreAnchorBehavior {
  """
  The orders placed can be fulfilled or delivered immediately. The orders placed
  inside a cutoff can be fulfilled or delivered at the next anchor.
  """
  ASAP

  """
  The orders placed can be fulfilled or delivered at the next anchor date.
  The orders placed inside a cutoff will skip the next anchor and can be fulfilled or
  delivered at the following anchor.
  """
  NEXT
}

"""
Represents a recurring selling plan pricing policy.
"""
type SellingPlanRecurringPricingPolicy implements SellingPlanPricingPolicyBase {
  """
  The price adjustment type.
  """
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """
  The price adjustment value.
  """
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!

  """
  Cycle after which this pricing policy applies.
  """
  afterCycle: Int

  """
  The date and time when the recurring selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

"""
When to capture the payment for the remaining amount due.
"""
enum SellingPlanRemainingBalanceChargeTrigger {
  """
  At an exact time defined by the remaining_balance_charge_exact_time field.
  """
  EXACT_TIME

  """
  When there's no remaining balance to be charged after checkout.
  """
  NO_REMAINING_BALANCE

  """
  After the duration defined by the remaining_balance_charge_time_after_checkout field.
  """
  TIME_AFTER_CHECKOUT
}

"""
When to reserve inventory for a selling plan.
"""
enum SellingPlanReserve {
  """
  Reserve inventory when order is fulfilled.
  """
  ON_FULFILLMENT

  """
  Reserve inventory at time of sale.
  """
  ON_SALE
}

"""
The class of the discount for combining purposes.
"""
enum ShippingDiscountClass {
  """
  Combined as a shipping discount.
  """
  SHIPPING
}

"""
The optional shipping label for this fulfillment.
"""
type ShippingLabel implements Node {
  """
  Indicates whether the label is cancellable or not.
  """
  cancellable: Boolean!

  """
  Indicates whether the label is cancelled.
  """
  cancelled: Boolean!

  """
  A unique code associated with the carrier (eg: canada_post).
  """
  carrierCode: String

  """
  The name of the shipping carrier (eg: Canada Post).
  """
  carrierName: String

  """
  The shipping customs form PDF if it exists.
  """
  customsFormPdf(
    """
    The preferred content disposition for the customs form url.
    """
    contentDisposition: ContentDisposition

    """
    The page size of the customs form. Defaults to the shop's label format preference.
    """
    pageSize: PageSize
  ): URL @deprecated(reason: "Use `customsFormPdfs` instead.")

  """
  Indicates whether the label is a draft.
  """
  draft: Boolean!

  """
  Indicates whether the label has any additional documents.
  """
  hasAdditionalDocuments: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The location of the shipping origin. This will be null when the shipping origin is unknown.
  """
  location: Location

  """
  The order associated with this label.
  """
  order: Order!

  """
  The shipping label's package if applicable.
  """
  package: ShippingPackage @deprecated(reason: "`ShippingPackage` has been replaced with `ShippingPackageV2`. If you were using `ShippingPackage.weight` to get the total shipment weight, you'll need to migrate to `shipmentTotalWeight`. `ShippingPackageV2.weight` only returns the weight of the package itself now.")

  """
  The shipping label as a PDF.
  """
  pdf(
    """
    The preferred content disposition for the customs form url.
    """
    contentDisposition: ContentDisposition

    """
    The page size of the label. Defaults to the shop's label format preference.
    """
    pageSize: PageSize
  ): URL

  """
  Indicates whether the label was printed or not.
  """
  printed: Boolean!

  """
  Indicates whether the user needs to input customs information.
  """
  requiresCustomsForm: Boolean!

  """
  A unique code associated with the service (eg: expedited_parcel).
  """
  serviceCode: String

  """
  The name of the shipping service (eg: Expedited Parcel).
  """
  serviceName: String

  """
  Shipment options for a label.
  """
  shipmentOptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelShipmentOptionConnection!

  """
  The total weight of the package, including the contents.
  """
  shipmentTotalWeight: Weight!

  """
  The date and time when the merchant expects to ship the package.
  """
  shippingDate: DateTime

  """
  The line items and their quantities associated with the label.
  """
  shippingLabelLineItems: [ShippingLabelLineItem!]!

  """
  The shipping label's package if applicable.
  """
  shippingPackage: ShippingPackageV2

  """
  The total price of the label, excluding taxes.
  """
  totalPrice: MoneyV2
}

"""
The association between a shipping label and a line item from the order.
"""
type ShippingLabelLineItem implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The line item associated with this object.
  """
  lineItem: LineItem!

  """
  The quantity of this items associated with the shipping label.
  """
  quantity: Int!
}

"""
Represents the shipping details that the customer chose for their order.
"""
type ShippingLine {
  """
  A reference to the carrier service that provided the rate.
  Present when the rate was computed by a third-party carrier service.
  """
  carrierIdentifier: String

  """
  A reference to the shipping method.
  """
  code: String

  """
  Whether the shipping line is custom or not.
  """
  custom: Boolean!

  """
  The general classification of the delivery method.
  """
  deliveryCategory: String

  """
  The discounts that have been allocated to the shipping line.
  """
  discountAllocations: [DiscountAllocation!]!

  """
  The pre-tax shipping price with discounts applied.
  """
  discountedPrice: MoneyV2! @deprecated(reason: "Use `discountedPriceSet` instead.")

  """
  The pre-tax shipping price with discounts applied.
  """
  discountedPriceSet: MoneyBag!

  """
  A globally-unique identifier.
  """
  id: ID

  """
  The pre-tax shipping price without any discounts applied.
  """
  originalPrice: MoneyV2! @deprecated(reason: "Use `originalPriceSet` instead.")

  """
  The pre-tax shipping price without any discounts applied.
  """
  originalPriceSet: MoneyBag!

  """
  The phone number at the shipping address.
  """
  phone: String

  """
  Returns the price of the shipping line.
  """
  price: Money! @deprecated(reason: "Use `originalPriceSet` instead.")

  """
  The fulfillment service requested for the shipping method.
  Present if the shipping method requires processing by a third party fulfillment service.
  """
  requestedFulfillmentService: FulfillmentService

  """
  A unique identifier for the shipping rate. The format can change without notice and is not meant to be shown to users.
  """
  shippingRateHandle: String

  """
  Returns the rate source for the shipping line.
  """
  source: String

  """
  The TaxLine objects connected to this shipping line.
  """
  taxLines: [TaxLine!]!

  """
  Returns the title of the shipping line.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple ShippingLines.
"""
type ShippingLineConnection {
  """
  A list of edges.
  """
  edges: [ShippingLineEdge!]!

  """
  A list of the nodes contained in ShippingLineEdge.
  """
  nodes: [ShippingLine!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ShippingLine and a cursor during pagination.
"""
type ShippingLineEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ShippingLineEdge.
  """
  node: ShippingLine!
}

"""
A sale associated with a shipping charge.
"""
type ShippingLineSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique identifier for the sale.
  """
  id: ID!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return.
  """
  shippingLine: ShippingLine

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout.
"""
type ShippingMethod {
  """
  A unique code associated with the rate. For example: `expedited_mail`
  """
  code: String!

  """
  A description of the rate, which customers will see at checkout.
  For example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.
  """
  label: String!
}

"""
The package characteristics for a shipping label.
"""
type ShippingPackage {
  """
  The dimensions of the package.
  """
  dimensions: BoxDimensions!

  """
  A string representation of the package dimensions and weight.
  """
  displayDimensions: String!

  """
  The name for the packaging.
  """
  name: String!

  """
  The package type (eg: box or envelope).
  """
  type: ShippingPackageType!

  """
  The total weight of the package, including the contents.
  """
  weight: Weight!
}

"""
Type of a shipping package.
"""
enum ShippingPackageType {
  """
  A shipping box.
  """
  BOX

  """
  An envelope.
  """
  ENVELOPE

  """
  A flat rate packaging supplied by a carrier.
  """
  FLAT_RATE

  """
  A soft-pack, bubble-wrap or vinyl envelope.
  """
  SOFT_PACK
}

"""
Represents a shipping package with dimensions and weight.
"""
type ShippingPackageV2 implements Node {
  """
  Carrier supplying the package.
  """
  carrier: String

  """
  Code identifying this carrier supplied package.
  """
  carrierPackageCode: String

  """
  The default shipping package is the one used to calculate shipping costs on checkout.
  """
  default: Boolean!

  """
  Outside dimensions of the shipping package.
  """
  dimensions: BoxDimensions!

  """
  A string representation of the shipping package dimensions and weight.
  """
  displayDimensions: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Descriptive name for the shipping package.
  """
  name: String!

  """
  Type of shipping package.
  """
  type: ShippingPackageType!

  """
  Weight of the shipping package.
  """
  weight: Weight!
}

"""
Type of packaging.
"""
enum ShippingPackaging {
  """
  A shipping box.
  """
  BOX

  """
  An envelope.
  """
  ENVELOPE

  """
  A flat rate packaging supplied by a carrier.
  """
  FLAT_RATE

  """
  A soft-pack, bubble-wrap or vinyl envelope.
  """
  SOFT_PACK
}

"""
A shipping rate is an additional cost added to the cost of the products that were ordered.
"""
type ShippingRate {
  """
  The carrier service providing this rate.
  """
  carrierService: DeliveryCarrierService @deprecated(reason: "Use `shippingService` instead.")

  """
  Human-readable unique identifier for this shipping rate.
  """
  handle: String!

  """
  The amount of insurance included.
  """
  includedInsuredAmount: MoneyV2

  """
  The list of included shipment options.
  """
  includedShipmentOptions: [DeliveryRateItem!]

  """
  The maximum estimated number of business days until delivery.
  """
  maximumEstimatedBusinessDaysToDelivery: Int

  """
  The minimum estimated number of business days until delivery.
  """
  minimumEstimatedBusinessDaysToDelivery: Int

  """
  The cost associated with the shipping rate.
  """
  price: MoneyV2!

  """
  The code defining the type of service that was provided.
  """
  serviceCode: String @deprecated(reason: "Use `shippingService` instead.")

  """
  The shipping service provided by the carrier.
  """
  shippingService: ShippingService

  """
  The name of the shipping rate.
  """
  title: String!

  """
  Whether the rate was generated using the merchant carrier account.
  """
  usingMerchantAccount: Boolean!
}

"""
Represents the shipping costs refunded on the Refund.
"""
type ShippingRefund {
  """
  The monetary value of the shipping fees to be refunded.
  """
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The monetary value of the shipping fees to be refunded in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The maximum amount of shipping fees currently refundable.
  """
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead.")

  """
  The maximum amount of shipping fees currently refundable in shop and presentment currencies.
  """
  maximumRefundableSet: MoneyBag!

  """
  The monetary value of the tax allocated to shipping fees to be refunded.
  """
  tax: Money! @deprecated(reason: "Use `taxSet` instead.")

  """
  The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.
  """
  taxSet: MoneyBag!
}

"""
The input fields that are required to reimburse shipping costs.
"""
input ShippingRefundInput {
  """
  The monetary value of the shipping fees to be reimbursed.
  """
  amount: Money

  """
  Whether a full refund is provided.
  """
  fullRefund: Boolean
}

"""
A shipping service provided by a carrier.
"""
type ShippingService {
  """
  Shipping carrier providing this service.
  """
  carrier: DeliveryCarrierService!

  """
  Code defining the type of service.
  """
  code: String!

  """
  Flag indicating if this is the preferred shipping service based on merchant's
  last selection or buyer selection on checkout.
  """
  preferredService: Boolean!

  """
  Title of the shipping service.
  """
  title: String!
}

"""
Represents a collection of the general settings and information about the shop.
"""
type Shop implements HasMetafields & HasPublishedTranslations & Node {
  """
  Account owner information.
  """
  accountOwner: StaffMember!

  """
  A list of the shop's active alert messages that appear in the Shopify admin.
  """
  alerts: [ShopAlert!]!

  """
  A list of the shop's custom product types. Limit: 1000 product types.
  """
  allCustomProductTypes: [String!]!

  """
  A list of the shop's product categories. Limit: 1000 product categories.
  """
  allProductCategories: [ProductCategory!]!

  """
  A comma separated list of tags that belong to the shop, capped up to 5K.
  """
  allProductTags(
    """
    Sort type.
    """
    sort: ShopTagSort
  ): [String!]!

  """
  The token required to query the shop's reports or dashboards.
  """
  analyticsToken: String! @deprecated(reason: "Not supported anymore.")

  """
  Return active app links on the shop.
  """
  appLinks(
    """
    Whether to include links which are in-context. By default they are excluded.
    """
    includeInContext: Boolean

    """
    The location of the link resource to filter by.
    """
    location: ResourceLocation!

    """
    The ID of the link resource to filter by.
    """
    resourceId: ID

    """
    The type of the link resource to filter by.
    """
    type: ResourceType!
  ): [AppLink!]!

  """
  Whether the App Recommendations card has already been dismissed.
  """
  appRecommendationsDismissed: Boolean!

  """
  The paginated list of fulfillment orders assigned to fulfillment services.
  """
  assignedFulfillmentOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FulfillmentOrderConnection!

  """
  The list of sales channels not currently installed on the shop.
  """
  availableChannelApps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AppConnection!

  """
  Determine available template options for a shop.
  """
  availableTemplateOptions(
    """
    The template resource type to filter by.
    """
    resourceType: ShopTemplateResource!
  ): [String!]! @deprecated(reason: "Will be moved to OnlineStore.")

  """
  Whether the specified beta is enabled on the shop.
  """
  beta(
    """
    The beta name.
    """
    name: String!
  ): Boolean!

  """
  The shop's billing address information.
  """
  billingAddress: ShopAddress!

  """
  Exposes the number of channels.
  """
  channelCount: Int! @deprecated(reason: "Use `publicationCount` instead.")

  """
  List of all channel definitions associated with a shop.
  """
  channelDefinitionsForInstalledChannels: [AvailableChannelDefinitionsByChannel!]!

  """
  List of the shop's active sales channels.
  """
  channels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChannelConnection! @deprecated(reason: "Use `QueryRoot.channels` instead.")

  """
  Specifies whether the shop supports checkouts via Checkout API.
  """
  checkoutApiSupported: Boolean!

  """
  Whether the shop has claimed the free card reader.
  """
  claimedCardReader: Boolean! @deprecated(reason: "Cardreader Giveaway no longer exists")

  """
  Whether the shop should perform translation context collection.
  """
  collectTranslationContext: Boolean!

  """
  Return a collection by its handle.
  """
  collectionByHandle(
    """
    The handle of the collection.
    """
    handle: String!
  ): Collection @deprecated(reason: "Use `QueryRoot.collectionByHandle` instead.")

  """
  List of the shop's collection saved searches.
  """
  collectionSavedSearches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.collectionSavedSearches` instead.")

  """
  List of the shop's collections.
  """
  collections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CollectionConnection! @deprecated(reason: "Use `QueryRoot.collections` instead.")

  """
  The public-facing contact email address for the shop.
  Customers will use this email to communicate with the shop owner.
  """
  contactEmail: String!

  """
  Countries that have been defined in shipping zones for the shop.
  """
  countriesInShippingZones: CountriesInShippingZones!

  """
  The two-letter code for the country.

  For example, US.
  """
  countryCode: CountryCode!

  """
  The three letter code for the currency that the shop sells in.
  """
  currencyCode: CurrencyCode!

  """
  How currencies are displayed on your store.
  """
  currencyFormats: CurrencyFormats!

  """
  The presentment currency settings for the shop excluding the shop's own currency.
  """
  currencySettings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CurrencySettingConnection!

  """
  Custom types added to products.
  """
  customProductTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StringConnection!

  """
  Whether customer accounts are required, optional, or disabled for the shop.
  """
  customerAccounts: ShopCustomerAccountsSetting!

  """
  List of the shop's customer saved searches.
  """
  customerSavedSearches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.customerSavedSearches` instead.")

  """
  A list of tags that have been added to customer accounts.
  """
  customerTags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StringConnection!

  """
  List of a shop's customer tags.
  """
  customerTagsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CustomerTagConnection!

  """
  Customer accounts associated to the shop.
  """
  customers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CustomerConnection! @deprecated(reason: "Use `QueryRoot.customers` instead.")

  """
  List of all distinct custom rate names, sorted alphanumerically.
  """
  deliveryMethodNames: [String!]!

  """
  The shop's meta description used in search engine results.
  """
  description: String

  """
  The domains configured for the shop.
  """
  domains: [Domain!]! @deprecated(reason: "Use `domainsPaginated` instead.")

  """
  List of the shop's draft order saved searches.
  """
  draftOrderSavedSearches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.draftOrderSavedSearches` instead.")

  """
  A list of tags that have been added to draft orders.
  """
  draftOrderTags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StringConnection!

  """
  List of saved draft orders on the shop.
  """
  draftOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DraftOrderConnection! @deprecated(reason: "Use `QueryRoot.draftOrders` instead.")

  """
  Whether the shop is eligible for the card reader giveaway.
  """
  eligibleForCardReaderGiveaway: Boolean! @deprecated(reason: "Cardreader Giveaway no longer exists")

  """
  The shop owner's email address.
  Shopify will use this email address to communicate with the shop owner.
  """
  email: String!

  """
  The presentment currencies enabled for the shop.
  """
  enabledPresentmentCurrencies: [CurrencyCode!]!

  """
  Collection of products that charge EU Digital Goods VAT Tax on.
  """
  euDigitalGoodsCollection: Collection

  """
  Determine the shop's group assignment for an experiment.
  """
  experimentAssigment(
    """
    The name of the experiment.
    """
    name: String!
  ): String @deprecated(reason: "Use `experimentAssignment` instead.")

  """
  Determine the shop's group assignment for an experiment.
  """
  experimentAssignment(
    """
    The name of the experiment.
    """
    name: String!
  ): String

  """
  The set of features enabled for the shop.
  """
  features: ShopFeatures!

  """
  A shop's flow action defintions.
  """
  flowActionDefinitions: [FlowActionDefinition!]!

  """
  A shop's flow trigger defintions.
  """
  flowTriggerDefinitions: [FlowTriggerDefinition!]!

  """
  Fraud Protect account settings.
  """
  fraudProtectSettings: FraudProtectSettings!

  """
  The paginated list of merchant-managed and third-party fulfillment orders.
  """
  fulfillmentOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FulfillmentOrderConnection! @deprecated(reason: "Use `QueryRoot.fulfillmentOrders` instead.")

  """
  List of the shop's installed fulfillment services.
  """
  fulfillmentServices: [FulfillmentService!]!

  """
  Whether the shop has an active tax service.
  """
  hasActiveTaxService: Boolean!

  """
  Whether a shop has at least one tax service.
  """
  hasTaxService: Boolean!

  """
  The shop's time zone as defined by the IANA.
  """
  ianaTimezone: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  List of the shop's inventory items.
  """
  inventoryItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InventoryItemConnection! @deprecated(reason: "Use `QueryRoot.inventoryItems` instead.")

  """
  Determine whether a milestone has been completed.
  """
  isMilestoneComplete(
    """
    The milestone to check.
    """
    milestone: ShopMilestone!
  ): Boolean!

  """
  Whether the shop is trackable.
  """
  isTrackable: Boolean!

  """
  The number of pendings orders on the shop.
  Limited to a maximum of 10000.
  """
  limitedPendingOrderCount: LimitedPendingOrderCount!

  """
  List of active locations of the shop.
  """
  locations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LocationConnection! @deprecated(reason: "Use `QueryRoot.locations` instead.")

  """
  Shop's marketing actions.
  """
  marketingActions(
    """
    Location where the marketing action will be used.
    """
    location: ResourceLocation!

    """
    Resource ID of the item the marketing action is being used for.
    """
    resourceId: ID

    """
    Resource type the marketing action will be used for.
    """
    type: ResourceType!
  ): [AppLink!]!

  """
  List of a shop's marketing events.
  """
  marketingEvents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MarketingEventConnection! @deprecated(reason: "Use `QueryRoot.marketingEvents` instead.")

  """
  The approval signals for a shop to support onboarding to channel apps.
  """
  merchantApprovalSignals: MerchantApprovalSignals

  """
  Requests for feedback for the merchant from Shopify.
  """
  merchantFeedback(
    """
    The ID of the feedback form.
    """
    id: Int!

    """
    The referrer of the feedback form.
    """
    referrer: String
  ): MerchantFeedback

  """
  Returns a metafield by namespace and key that belongs to the resource.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The namespace for the metafield.
    """
    namespace: String
  ): Metafield

  """
  List of metafields that belong to the resource.
  """
  metafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MetafieldConnection!

  """
  Milestones used to determine a merchant's progress through their shop's setup.
  """
  milestones: [ShopMilestoneStatus!]!

  """
  The shop's .myshopify.com domain name.
  """
  myshopifyDomain: String!

  """
  The shop's name.
  """
  name: String!

  """
  Shop's navigation items.
  """
  navigationItems(
    """
    The type of navigation items to filter by.
    """
    type: NavigationItemV2Type!
  ): [NavigationItemV2!]!

  """
  The shop's settings related to navigation.
  """
  navigationSettings: [NavigationItem!]!

  """
  The shop's online store channel.
  """
  onlineStore: OnlineStore @deprecated(reason: "Use QueryRoot.onlineStore instead.")

  """
  The prefix that appears before order numbers.
  """
  orderNumberFormatPrefix: String!

  """
  The suffix that appears after order numbers.
  """
  orderNumberFormatSuffix: String!

  """
  List of the shop's order saved searches.
  """
  orderSavedSearches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.orderSavedSearches` instead.")

  """
  A list of tags that have been added to orders.
  """
  orderTags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StringConnection!

  """
  A list of the shop's orders.
  """
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderConnection! @deprecated(reason: "Use `QueryRoot.orders` instead.")

  """
  The max time for which the orders have been delayed.
  """
  ordersDelayedSince: DateTime

  """
  The shop's settings related to payments.
  """
  paymentSettings: PaymentSettings!

  """
  Number of pending orders on the shop.
  """
  pendingOrderCount: Int! @deprecated(reason: "Use `limitedPendingOrderCount` instead.")

  """
  Shop's Ping Message callbacks.
  """
  pingMessageCallbacks: [PingMessageCallback!]!

  """
  The shop's billing plan.
  """
  plan: ShopPlan!

  """
  Shop's POS links.
  """
  posLinks(
    """
    The location of the link resource to filter by.
    """
    location: PosLinkResourceLocation!

    """
    The ID of the link resource to filter by.
    """
    resourceId: ID

    """
    The type of the link resource to filter by.
    """
    type: PosLinkResourceType!
  ): [PosLink!]!

  """
  List of the competitor platforms that the merchant is selling on or replatforming from.
  """
  previousPlatforms: [String!]!

  """
  List of the shop's price rule saved searches.
  """
  priceRuleSavedSearches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.priceRuleSavedSearches` instead.")

  """
  List of the shop’s price rules.
  """
  priceRules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PriceRuleConnection! @deprecated(reason: "Use `QueryRoot.priceRules` instead.")

  """
  The primary domain of the shop's online store.
  """
  primaryDomain: Domain!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """
    The key for the private metafield.
    """
    key: String!

    """
    The namespace for the private metafield.
    """
    namespace: String!
  ): PrivateMetafield

  """
  List of private metafields that belong to the resource.
  """
  privateMetafields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PrivateMetafieldConnection!

  """
  Return a product by its handle.
  """
  productByHandle(
    """
    A unique string that identifies the product. Handles are automatically
    generated based on the product's title, and are always lowercase. Whitespace
    and special characters are replaced with a hyphen: `-`. If there are
    multiple consecutive whitespace or special characters, then they're replaced
    with a single hyphen. Whitespace or special characters at the beginning are
    removed. If a duplicate product title is used, then the handle is
    auto-incremented by one. For example, if you had two products called
    `Potion`, then their handles would be `potion` and `potion-1`. After a
    product has been created, changing the product title doesn't update the handle.
    """
    handle: String!
  ): Product @deprecated(reason: "Use `QueryRoot.productByHandle` instead.")

  """
  The list of all images of all products for the shop.
  """
  productImages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ImageConnection!

  """
  List of the shop's product saved searches.
  """
  productSavedSearches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.productSavedSearches` instead.")

  """
  A list of tags that have been added to products.
  """
  productTags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StringConnection!

  """
  The list of types added to products.
  """
  productTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StringConnection!

  """
  List of the shop's product variants.
  """
  productVariants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductVariantConnection! @deprecated(reason: "Use `QueryRoot.productVariants` instead.")

  """
  The list of vendors added to products.
  """
  productVendors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StringConnection!

  """
  List of the shop's products.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductConnection! @deprecated(reason: "Use `QueryRoot.products`.")

  """
  The number of publications for the shop.
  """
  publicationCount: Int!

  """
  The shop's limits for specific resources. For example, the maximum number
  ofvariants allowed per product, or the maximum number of locations allowed.
  """
  resourceLimits: ShopResourceLimits!

  """
  The URL of the rich text editor that can be used for mobile devices.
  """
  richTextEditorUrl: URL!

  """
  Fetches a list of admin search results by a specified query.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SearchResultConnection!

  """
  The list of search filter options for the shop. These can be used to filter productvisibility for the shop.
  """
  searchFilters: SearchFilterOptions!

  """
  Whether the shop has outstanding setup steps.
  """
  setupRequired: Boolean!

  """
  The list of countries that the shop ships to.
  """
  shipsToCountries: [CountryCode!]!

  """
  The list of all legal policies associated with a shop.
  """
  shopPolicies: [ShopPolicy!]!

  """
  Settings for the shop's policies.
  """
  shopPolicySettings: ShopPolicySettings!

  """
  Whether an employee is impersonating the current user.
  """
  shopifyEmployeeSession: Boolean!

  """
  Shopify Payments account information, including balances and payouts.
  """
  shopifyPaymentsAccount: ShopifyPaymentsAccount @deprecated(reason: "Use `QueryRoot.shopifyPaymentsAccount` instead.")

  """
  The paginated list of the shop's staff members.
  """
  staffMembers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StaffMemberConnection!

  """
  The storefront access token of a private application. These are scoped per-application.
  """
  storefrontAccessTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StorefrontAccessTokenConnection!

  """
  The URL of the shop's storefront.
  """
  storefrontUrl: URL! @deprecated(reason: "Use `url` instead.")

  """
  The shop's tax services.
  """
  taxServices: [TaxService!]!

  """
  Whether the shop charges taxes for shipping.
  """
  taxShipping: Boolean!

  """
  Whether applicable taxes are included in the shop's product prices.
  """
  taxesIncluded: Boolean!

  """
  The shop's time zone abbreviation.
  """
  timezoneAbbreviation: String!

  """
  The shop's time zone offset.
  """
  timezoneOffset: String!

  """
  The shop's time zone offset expressed as a number of minutes.
  """
  timezoneOffsetMinutes: Int!

  """
  Whether transactional SMS sent by Shopify have been disabled for a shop.
  """
  transactionalSmsDisabled: Boolean!

  """
  The translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [PublishedTranslation!]!

  """
  Whether the shop has a trial plan.
  """
  trialPlan: Boolean! @deprecated(reason: "Use Shop.plan.trial instead.")

  """
  The shop's unit system for weights and measures.
  """
  unitSystem: UnitSystem!

  """
  All images uploaded to the shop.
  """
  uploadedImages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ImageConnection!

  """
  Fetches a list of images uploaded to the shop by their IDs.
  """
  uploadedImagesByIds(
    """
    The IDs of the uploaded images.
    """
    imageIds: [ID!]!
  ): [Image!]!

  """
  The URL of the shop's online store.
  """
  url: URL!

  """
  The shop's primary unit of weight for products and shipping.
  """
  weightUnit: WeightUnit!
}

"""
The shop's billing address.
"""
type ShopAddress implements Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the company or organization.
  """
  company: String

  """
  Whether the address coordinates are valid.
  """
  coordinatesValidated: Boolean!

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.

  For example, US.
  """
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead.")

  """
  The two-letter code for the country of the address.

  For example, US.
  """
  countryCodeV2: CountryCode

  """
  The first name.
  """
  firstName: String @deprecated(reason: "Always null in this context.")

  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """
    Whether to include the company in the formatted address.
    """
    withCompany: Boolean
  ): [String!]!

  """
  A comma-separated list of the values for city, province, and country.
  """
  formattedArea: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The last name.
  """
  lastName: String @deprecated(reason: "Always null in this context.")

  """
  The latitude coordinate of the address.
  """
  latitude: Float

  """
  The longitude coordinate of the address.
  """
  longitude: Float

  """
  The full name, based on firstName and lastName.
  """
  name: String @deprecated(reason: "Always null in this context.")

  """
  A phone number associated with the address.

  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The two-letter code for the region.

  For example, ON.
  """
  provinceCode: String

  """
  Whether the address was geolocated and it is a valid address. The field
  returns `false` if the verification failed, or if the job to verify this
  address was never started.
  """
  verified: Boolean!

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
An alert message that appears in the Shopify admin about a problem with a store
setting, with an action to take. For example, you could show an alert to ask the
merchant to enter their billing information to activate Shopify Plus.
"""
type ShopAlert {
  """
  The text for the button in the alert that links to related information. For example, _Add credit card_.
  """
  action: ShopAlertAction!

  """
  A description of the alert and further information, such as whether the merchant will be charged.
  """
  description: String!
}

"""
An action associated to a shop alert, such as adding a credit card.
"""
type ShopAlertAction {
  """
  The text for the button in the alert. For example, _Add credit card_.
  """
  title: String!

  """
  The target URL that the button links to.
  """
  url: URL!
}

"""
Possible branding of a shop.
Branding can be used to define the look of a shop including its styling and logo in the Shopify Admin.
"""
enum ShopBranding {
  """
  Shop has Rogers branding.
  """
  ROGERS

  """
  Shop has Shopify branding.
  """
  SHOPIFY

  """
  Shop has Shopify Gold branding.
  """
  SHOPIFY_GOLD

  """
  Shop has Shopify Plus branding.
  """
  SHOPIFY_PLUS
}

"""
Represents the shop's customer account requirement preference.
"""
enum ShopCustomerAccountsSetting {
  DISABLED
  OPTIONAL
  REQUIRED
}

"""
Represents the feature set available to the shop.
Most fields specify whether a feature is enabled for a shop, and some fields return information
related to specific features.
"""
type ShopFeatures {
  """
  Whether the shop has access to shipping methods beyond the basic platform-provided ones.
  """
  additionalShippingMethods: Boolean!

  """
  Whether a shop can use our address services.
  """
  addressServices: Boolean!

  """
  Whether the shop has access to the Shopify App Store.
  """
  appStore: Boolean!

  """
  Whether a shop has access to Avalara AvaTax.
  """
  avalaraAvatax: Boolean!

  """
  Whether a shop has B2B business customers enabled.
  """
  b2bBusinessCustomers: Boolean!

  """
  Whether a shop has B2B business customers enabled for draft orders.
  """
  b2bBusinessCustomersDraftOrders: Boolean!

  """
  Whether a shop has B2B enabled.
  """
  b2bEnabled: Boolean!

  """
  Whether a shop has B2B mobile admin enabled.
  """
  b2bMobileEnabled: Boolean!

  """
  Whether a shop is allowed to assign a non-shop currency to a B2B price list
  with a currency that does not match the shop's currency.
  """
  b2bMultiCurrencyEnabled: Boolean!

  """
  The branding of the shop, which influences its look and feel in the Shopify admin.
  """
  branding: ShopBranding!

  """
  Whether a shop has access to Shopify Capital.
  """
  capital: Boolean!

  """
  Whether a shop's online store can have CAPTCHA protection.
  """
  captcha: Boolean!

  """
  Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify.
  """
  captchaExternalDomains: Boolean!

  """
  Whether the delivery profiles functionality is enabled for this shop.
  """
  deliveryProfiles: Boolean! @deprecated(reason: "Delivery profiles are now 100% enabled across Shopify.")

  """
  Whether a shop has access to the Google Analytics dynamic remarketing feature.
  """
  dynamicRemarketing: Boolean!

  """
  Whether a shop has the ability to use 3D Secure.
  """
  eligibleFor3ds: Boolean!

  """
  Whether a shop has the ability to buy shipping labels in bulk.
  """
  eligibleForBulkLabelPurchase: Boolean!

  """
  Whether a shop can be migrated to use Shopify subscriptions.
  """
  eligibleForSubscriptionMigration: Boolean!

  """
  Whether a shop is configured properly to sell subscriptions.
  """
  eligibleForSubscriptions: Boolean!

  """
  Whether to use functions with the extensible discount platform instead of core discounts.
  """
  extensibleDiscountFunctionsEnabled: Boolean!

  """
  Whether to use scripts with the extensible discount platform instead of core discounts.
  """
  extensibleDiscountScriptsEnabled: Boolean!

  """
  Whether to use the extensible discount platform instead of legacy discounts.
  """
  extensibleDiscountsEnabled: Boolean!

  """
  Shop's eligibility to enable Fraud Protect.
  """
  fraudProtectEligibility: FraudProtectEligibility!

  """
  Whether a shop can create gift cards.
  """
  giftCards: Boolean!

  """
  Whether a shop displays Harmonized System codes on products. This is used for customs when shipping
  internationally.
  """
  harmonizedSystemCode: Boolean!

  """
  Whether the shop has access to the HS shipping codes selector.
  """
  hsCodeSelectorEnabled: Boolean!

  """
  Whether a shop can use in-context tools for communicating with support.
  """
  inContextSupport: Boolean!

  """
  Whether a shop can enable international domains.
  """
  internationalDomains: Boolean!

  """
  Whether a shop can enable international price overrides.
  """
  internationalPriceOverrides: Boolean!

  """
  Whether a shop can enable international price rules.
  """
  internationalPriceRules: Boolean!

  """
  Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.
  """
  legacySubscriptionGatewayEnabled: Boolean!

  """
  Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial
  or don't have a storefront.
  """
  liveView: Boolean!

  """
  Whether to show the manually sort feature view.
  """
  manuallySortProductsInSmartCollectionsFeatureEnabled: Boolean!

  """
  Whether a shop can create marketing campaigns and activities.
  """
  marketing: Boolean!

  """
  Whether a shop has multi-location functionality.
  """
  multiLocation: Boolean! @deprecated(reason: "All shops support multi-location inventory. Use `QueryRoot.locations` to determine whether shop has more than one location.\n")

  """
  Whether a shop has access to the onboarding visual.
  """
  onboardingVisual: Boolean!

  """
  Whether a shop has packing slip customization and printing in orders and fulfillment enabled.
  """
  packingSlips: Boolean!

  """
  Whether a shop is configured to sell subscriptions with PayPal Express.
  """
  paypalExpressSubscriptionGatewayStatus: PaypalExpressSubscriptionsGatewayStatus!

  """
  Whether a shop is using the pseudotranslation feature. More information on https://github.com/Shopify/pseudolocalization.
  """
  pseudotranslation: Boolean!

  """
  Whether a shop has access to all reporting features.
  """
  reports: Boolean!

  """
  Whether the shop has the retail package.
  """
  retailPackage: Boolean!

  """
  Whether a shop has ever had subscription products.
  """
  sellsSubscriptions: Boolean!

  """
  Whether a shop has access to creating shipping labels.
  """
  shippingLabels: Boolean!

  """
  Whether the shop's Shopify Payments gateway is enabled.
  """
  shopifyPaymentsEnabled: Boolean!

  """
  Whether the shop has a Shopify Plus subscription.
  """
  shopifyPlus: Boolean! @deprecated(reason: "Use Shop.plan.shopifyPlus instead.")

  """
  Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful.
  """
  showMetrics: Boolean!

  """
  Whether a shop has an online store.
  """
  storefront: Boolean!

  """
  Whether the interactions in a shop can be tracked with US-based tracking libraries.
  """
  usBasedTracking: Boolean!

  """
  Whether a shop’s users can be tracked with user journey tools.
  """
  userJourneyTracking: Boolean!

  """
  Whether a shop is using Shopify Balance.
  """
  usingShopifyBalance: Boolean!
}

"""
Milestones used to determine a shop's progress through setup.
"""
enum ShopMilestone {
  """
  Automatically enrolled into locations.
  """
  AUTO_ENROLLED_MULTILOCATION @deprecated(reason: "This milestore is no longer used. All shops are auto-enrolled into locations.")

  """
  Setup import store.
  """
  SETUP_IMPORT_STORE

  """
  Setup payments gateway.
  """
  SETUP_PAYMENTS_GATEWAY

  """
  Setup shipping.
  """
  SETUP_SHIPPING

  """
  Setup tax.
  """
  SETUP_TAX

  """
  Setup unlock store.
  """
  SETUP_UNLOCK_STORE
}

"""
Represents a shop-specific milestone.
"""
type ShopMilestoneStatus {
  """
  Whether the shop has completed the milestone.
  """
  completed: Boolean!

  """
  The date and time the milestone was completed.
  """
  completedDate: DateTime

  """
  The milestone.
  """
  milestone: ShopMilestone!
}

"""
The billing plan of the shop.
"""
type ShopPlan {
  """
  The name of the shop's billing plan.
  """
  displayName: String!

  """
  The URL used to view the current invoice.
  """
  invoiceUrl: URL!

  """
  Whether the shop is a partner development shop for testing purposes.
  """
  partnerDevelopment: Boolean!

  """
  Whether the shop has a Shopify Plus subscription.
  """
  shopifyPlus: Boolean!

  """
  Whether the trial has expired.
  """
  trialExpired: Boolean!
}

"""
Policy that a merchant has configured for their store, such as their refund or privacy policy.
"""
type ShopPolicy implements HasPublishedTranslations & Node {
  """
  The text of the policy. The maximum size is 512kb.
  """
  body: HTML!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [PublishedTranslation!]!

  """
  The shop policy type.
  """
  type: ShopPolicyType!

  """
  The public URL of the policy.
  """
  url: URL!
}

"""
Settings for the shop's policies.
"""
type ShopPolicySettings {
  """
  A list of the shop's existing policy types and suggested policy types.
  """
  suggestedShopPolicyTypes: [ShopPolicySettingsSuggestedShopPolicyType!]!

  """
  Return a shop policy template by shop policy type if available.
  """
  templateByType(
    """
    The shop policy type.
    """
    type: ShopPolicyType!
  ): HTML
}

"""
Suggested shop policy type.
"""
type ShopPolicySettingsSuggestedShopPolicyType {
  """
  Whether the shop policy type template is available.
  """
  templateAvailable: Boolean!

  """
  The shop policy type.
  """
  type: ShopPolicyType!
}

"""
Available shop policy types.
"""
enum ShopPolicyType {
  """
  The contact information.
  """
  CONTACT_INFORMATION

  """
  The legal notice.
  """
  LEGAL_NOTICE

  """
  The privacy policy.
  """
  PRIVACY_POLICY

  """
  The refund policy.
  """
  REFUND_POLICY

  """
  The shipping policy.
  """
  SHIPPING_POLICY

  """
  The purchase options cancellation policy.
  """
  SUBSCRIPTION_POLICY

  """
  The terms of sale.
  """
  TERMS_OF_SALE

  """
  The terms of service.
  """
  TERMS_OF_SERVICE
}

"""
Information that allows a shop to have a proxy URL for an app.
"""
type ShopProxy {
  """
  The sub path.
  """
  subPath: String!

  """
  The shop's complete proxy URL for an app.
  """
  url: URL!

  """
  The currently set url prefix.
  """
  urlPrefix: URL!

  """
  The available prefix options.
  """
  urlPrefixOptions: [URL!]!
}

"""
Resource limits of a shop.
"""
type ShopResourceLimits {
  """
  Maximum number of locations allowed.
  """
  locationLimit: Int!

  """
  Maximum number of product options allowed.
  """
  maxProductOptions: Int!

  """
  The maximum number of variants allowed per product.
  """
  maxProductVariants: Int!

  """
  Whether the shop has reached the limit of the number of URL redirects it can make for resources.
  """
  redirectLimitReached: Boolean!

  """
  The maximum number of variants allowed per shop. If the shop has unlimited
  SKUs, then the quantity used cannot be retrieved.
  """
  skuResourceLimits: ResourceLimit!
}

"""
Possible sort of tags.
"""
enum ShopTagSort {
  """
  Alphabetical sort.
  """
  ALPHABETICAL

  """
  Popularity sort.
  """
  POPULAR
}

"""
Possible resource type of a template.
"""
enum ShopTemplateResource {
  GIFT_CARD
  PRODUCT
}

"""
Balance and payout information for a
[Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
account. Balance includes all balances for the currencies supported by the shop.
You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
"""
type ShopifyPaymentsAccount implements Node {
  """
  Whether the Shopify Payments setup is completed.
  """
  activated: Boolean!

  """
  Current balances in all currencies for the account.
  """
  balance: [MoneyV2!]!

  """
  All bank accounts configured for the Shopify Payments account.
  """
  bankAccounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ShopifyPaymentsBankAccountConnection!

  """
  The statement descriptor used for charges.

  The statement descriptor appears on a customer's credit card or bank statement when they make a purchase.
  """
  chargeStatementDescriptor: String @deprecated(reason: "Use `chargeStatementDescriptors` instead.")

  """
  The statement descriptors used for charges.

  These descriptors appear on a customer's credit card or bank statement when they make a purchase.
  """
  chargeStatementDescriptors: ShopifyPaymentsChargeStatementDescriptor

  """
  The Shopify Payments account country.
  """
  country: String!

  """
  The default payout currency for the Shopify Payments account.
  """
  defaultCurrency: CurrencyCode!

  """
  All disputes related to the Shopify Payments account.
  """
  disputes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ShopifyPaymentsDisputeConnection!

  """
  The fraud settings of the Shopify Payments account.
  """
  fraudSettings: ShopifyPaymentsFraudSettings!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The legal entity for the Shopify Payments account.
  """
  legalEntity: ShopifyPaymentsLegalEntity! @deprecated(reason: "Use `legalEntityV2` instead.")

  """
  The notifications settings for the account.
  """
  notificationSettings: ShopifyPaymentsNotificationSettings!

  """
  Whether the Shopify Payments account can be onboarded.
  """
  onboardable: Boolean!

  """
  The payout schedule for the account.
  """
  payoutSchedule: ShopifyPaymentsPayoutSchedule!

  """
  The descriptor used for payouts.

  The descriptor appears on a merchant's bank statement when they receive a payout.
  """
  payoutStatementDescriptor: String

  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ShopifyPaymentsPayoutConnection!

  """
  The permitted documents for identity verification.
  """
  permittedVerificationDocuments: [ShopifyPaymentsVerificationDocument!]!

  """
  The verifications necessary for this account.
  """
  verifications: [ShopifyPaymentsVerification!]!
}

"""
A balance debit represents the movement of funds away from a Shopify Payments
account's balance to a target account. This target account is selected depending
on the reason behind the balance debit.
"""
type ShopifyPaymentsBalanceDebit implements Node {
  """
  The payments account of the balance debit.
  """
  account: ShopifyPaymentsAccount!

  """
  The amount and currency of the balance debit.
  """
  amount: MoneyV2!

  """
  The time the balance debit was created at.
  """
  createdAt: DateTime!

  """
  A summary describing the balance debit.
  """
  description: String!

  """
  The remote id of the created object on the destination account.
  """
  destinationRemoteObjectId: String

  """
  The reason behind a failed balance debit.
  """
  failureCode: ShopifyPaymentsBalanceDebitFailureCode

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Set of key-value pairs that you can attach to a balance debit. This can be useful for storing additional
  information about the balance debit in a structured format.
  """
  metadata: JSON

  """
  The time the balance debit was processed at.
  """
  processedAt: DateTime

  """
  The reason behind the balance debit.
  """
  reasonCode: ShopifyPaymentsBalanceDebitReasonCode!

  """
  The status of a balance debit.
  """
  status: ShopifyPaymentsBalanceDebitStatus!

  """
  Whether the balance debit is in test mode.
  """
  test: Boolean!
}

"""
The reason behind a failed balance debit.
"""
enum ShopifyPaymentsBalanceDebitFailureCode {
  """
  There are insufficient funds in the payments account's balance to satisfy the balance debit amount.
  """
  INSUFFICIENT_FUNDS

  """
  Invalid payments account.
  """
  INVALID_ACCOUNT

  """
  Unknown failure.
  """
  UNKNOWN
}

"""
The reason behind the balance debit.
"""
enum ShopifyPaymentsBalanceDebitReasonCode {
  """
  The balance debit represents a billing purchase.
  """
  BILLING

  """
  The balance debit represents a chargeback protection fee.
  """
  CHARGEBACK_PROTECTION
}

"""
A balance debit reversal is a partial or full reversal of a debit.
"""
type ShopifyPaymentsBalanceDebitReversal implements Node {
  """
  The payments account of the reversal.
  """
  account: ShopifyPaymentsAccount!

  """
  The amount and currency of the reversal.
  """
  amount: MoneyV2!

  """
  A summary describing the reason the debit was reversed.
  """
  description: String!

  """
  The remote id of the created object on the destination account.
  """
  destinationRemoteObjectId: String

  """
  The reason behind a failed balance debit reversal, if it failed or errored out.
  """
  failureCode: ShopifyPaymentsBalanceDebitReversalFailureCode

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Set of key-value pairs that you can attach to a debit reversal.
  This can be useful for storing additional information about the reversal in a structured format.
  """
  metadata: JSON

  """
  The date and time the debit reversal was processed at.
  """
  processedAt: DateTime

  """
  The status of a balance debit reversal.
  """
  status: ShopifyPaymentsBalanceDebitReversalStatus!
}

"""
The reason behind a failed balance debit reversal.
"""
enum ShopifyPaymentsBalanceDebitReversalFailureCode {
  """
  There are insufficient funds in the Shopify Payments platform account's balance to satisfy the reversal amount.
  """
  INSUFFICIENT_FUNDS

  """
  Invalid payments account.
  """
  INVALID_ACCOUNT

  """
  The reversal amount that was requested exceeds the debit's original amount.
  """
  REVERSAL_AMOUNT_EXCEEDED

  """
  Unknown failure.
  """
  UNKNOWN
}

"""
The status associated to a balance debit reversal.
"""
enum ShopifyPaymentsBalanceDebitReversalStatus {
  """
  An error occurred when processing the balance debit reversal.
  """
  ERROR

  """
  The debit was not able to be reversed. See the failure code for more details.
  """
  FAILURE

  """
  The debit reversal request has been received but not yet processed.
  """
  PENDING

  """
  The debit was successfully reversed.
  """
  SUCCESS
}

"""
The status associated to a balance debit.
"""
enum ShopifyPaymentsBalanceDebitStatus {
  """
  An error occurred when processing the balance debit.
  """
  ERROR

  """
  The funds were not able to be debited from the account. See the failure code for more details.
  """
  FAILURE

  """
  The debit request has been received but not yet processed.
  """
  PENDING

  """
  The funds were successfully debited from the account.
  """
  SUCCESS
}

"""
A bank account that can receive payouts.
"""
type ShopifyPaymentsBankAccount implements Node {
  """
  The account number of the bank account.
  """
  accountNumber: String!

  """
  The last digits of the account number (the rest is redacted).
  """
  accountNumberLastDigits: String!

  """
  The name of the bank.
  """
  bankName: String

  """
  The country of the bank.
  """
  country: CountryCode!

  """
  The date that the bank account was created.
  """
  createdAt: DateTime!

  """
  The currency of the bank account.
  """
  currency: CurrencyCode!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ShopifyPaymentsPayoutConnection!

  """
  The routing number of the bank account.
  """
  routingNumber: String!

  """
  The status of the bank account.
  """
  status: ShopifyPaymentsBankAccountStatus!
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts.
"""
type ShopifyPaymentsBankAccountConnection {
  """
  A list of edges.
  """
  edges: [ShopifyPaymentsBankAccountEdge!]!

  """
  A list of the nodes contained in ShopifyPaymentsBankAccountEdge.
  """
  nodes: [ShopifyPaymentsBankAccount!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.
"""
type ShopifyPaymentsBankAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ShopifyPaymentsBankAccountEdge.
  """
  node: ShopifyPaymentsBankAccount!
}

"""
The bank account status.
"""
enum ShopifyPaymentsBankAccountStatus {
  """
  A payout to the bank account failed.
  """
  ERRORED

  """
  A bank account that hasn't had any activity and that's not validated.
  """
  NEW

  """
  It was determined that the bank account exists.
  """
  VALIDATED

  """
  Bank account validation was successful.
  """
  VERIFIED
}

"""
The charge descriptors for a payments account.
"""
interface ShopifyPaymentsChargeStatementDescriptor {
  """
  The default charge statement descriptor.
  """
  default: String

  """
  The prefix of the statement descriptor.
  """
  prefix: String!
}

"""
The charge descriptors for a payments account.
"""
type ShopifyPaymentsDefaultChargeStatementDescriptor implements ShopifyPaymentsChargeStatementDescriptor {
  """
  The default charge statement descriptor.
  """
  default: String

  """
  The prefix of the statement descriptor.
  """
  prefix: String!
}

"""
A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.
"""
type ShopifyPaymentsDispute implements LegacyInteroperability & Node {
  """
  The total amount disputed by the cardholder.
  """
  amount: MoneyV2!

  """
  The deadline for evidence submission.
  """
  evidenceDueBy: Date

  """
  The date when evidence was sent. Returns null if evidence has not yet been sent.
  """
  evidenceSentOn: Date

  """
  The date when this dispute was resolved. Returns null if the dispute is not yet resolved.
  """
  finalizedOn: Date

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The date when this dispute was initiated.
  """
  initiatedAt: DateTime!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The order that contains the charge that is under dispute.
  """
  order: Order

  """
  The reason of the dispute.
  """
  reasonDetails: ShopifyPaymentsDisputeReasonDetails!

  """
  The current state of the dispute.
  """
  status: DisputeStatus!

  """
  Indicates if this dispute is still in the inquiry phase or has turned into a chargeback.
  """
  type: DisputeType!
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsDisputes.
"""
type ShopifyPaymentsDisputeConnection {
  """
  A list of edges.
  """
  edges: [ShopifyPaymentsDisputeEdge!]!

  """
  A list of the nodes contained in ShopifyPaymentsDisputeEdge.
  """
  nodes: [ShopifyPaymentsDispute!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.
"""
type ShopifyPaymentsDisputeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ShopifyPaymentsDisputeEdge.
  """
  node: ShopifyPaymentsDispute!
}

"""
The evidence associated with the dispute.
"""
type ShopifyPaymentsDisputeEvidence implements Node {
  """
  The activity logs associated with the dispute evidence.
  """
  accessActivityLog: String

  """
  The billing address that is provided by the customer.
  """
  billingAddress: MailingAddress

  """
  The cancellation policy disclosure associated with the dispute evidence.
  """
  cancellationPolicyDisclosure: String

  """
  The cancellation policy file associated with the dispute evidence.
  """
  cancellationPolicyFile: ShopifyPaymentsDisputeFileUpload

  """
  The cancellation rebuttal associated with the dispute evidence.
  """
  cancellationRebuttal: String

  """
  The customer communication file associated with the dispute evidence.
  """
  customerCommunicationFile: ShopifyPaymentsDisputeFileUpload

  """
  The customer's email address.
  """
  customerEmailAddress: String

  """
  The customer's first name.
  """
  customerFirstName: String

  """
  The customer's last name.
  """
  customerLastName: String

  """
  The customer purchase ip for this dispute evidence.
  """
  customerPurchaseIp: String

  """
  The dispute associated with the evidence.
  """
  dispute: ShopifyPaymentsDispute!

  """
  The file uploads associated with the dispute evidence.
  """
  disputeFileUploads: [ShopifyPaymentsDisputeFileUpload!]!

  """
  The fulfillments associated with the dispute evidence.
  """
  fulfillments: [ShopifyPaymentsDisputeFulfillment!]!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The product description for this dispute evidence.
  """
  productDescription: String

  """
  The refund policy disclosure associated with the dispute evidence.
  """
  refundPolicyDisclosure: String

  """
  The refund policy file associated with the dispute evidence.
  """
  refundPolicyFile: ShopifyPaymentsDisputeFileUpload

  """
  The refund refusal explanation associated with dispute evidence.
  """
  refundRefusalExplanation: String

  """
  The service documentation file associated with the dispute evidence.
  """
  serviceDocumentationFile: ShopifyPaymentsDisputeFileUpload

  """
  The mailing address for shipping that is provided by the customer.
  """
  shippingAddress: MailingAddress

  """
  The shipping documentation file associated with the dispute evidence.
  """
  shippingDocumentationFile: ShopifyPaymentsDisputeFileUpload

  """
  Whether the dispute evidence is submitted.
  """
  submitted: Boolean!

  """
  The uncategorized file associated with the dispute evidence.
  """
  uncategorizedFile: ShopifyPaymentsDisputeFileUpload

  """
  The uncategorized text for the dispute evidence.
  """
  uncategorizedText: String
}

"""
The possible dispute evidence file types.
"""
enum ShopifyPaymentsDisputeEvidenceFileType {
  """
  Cancellation Policy File.
  """
  CANCELLATION_POLICY_FILE

  """
  Customer Communication File.
  """
  CUSTOMER_COMMUNICATION_FILE

  """
  Refund Policy File.
  """
  REFUND_POLICY_FILE

  """
  Service Documentation File.
  """
  SERVICE_DOCUMENTATION_FILE

  """
  Shipping Documentation File.
  """
  SHIPPING_DOCUMENTATION_FILE

  """
  Uncategorized File.
  """
  UNCATEGORIZED_FILE
}

"""
The file upload associated with the dispute evidence.
"""
type ShopifyPaymentsDisputeFileUpload implements Node {
  """
  The type of the file for the dispute evidence.
  """
  disputeEvidenceType: ShopifyPaymentsDisputeEvidenceFileType

  """
  The file size.
  """
  fileSize: Int!

  """
  The file type.
  """
  fileType: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The original file name.
  """
  originalFileName: String

  """
  The URL for accessing the file.
  """
  url: URL!
}

"""
The fulfillment associated with dispute evidence.
"""
type ShopifyPaymentsDisputeFulfillment implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The shipping carrier for this fulfillment.
  """
  shippingCarrier: String

  """
  The shipping date for this fulfillment.
  """
  shippingDate: Date

  """
  The shipping tracking number for this fulfillment.
  """
  shippingTrackingNumber: String
}

"""
The reason for the dispute provided by the cardholder's bank.
"""
enum ShopifyPaymentsDisputeReason {
  """
  The customer's bank can't process the charge.
  """
  BANK_CANNOT_PROCESS

  """
  The customer claims that the purchased product was returned or the transaction
  was otherwise canceled, but you haven't yet provided a refund or credit.
  """
  CREDIT_NOT_PROCESSED

  """
  The customer initiated the dispute. Contact the customer for additional details on why the payment was disputed.
  """
  CUSTOMER_INITIATED

  """
  The customer's bank can't proceed with the debit since it hasn't been authorized.
  """
  DEBIT_NOT_AUTHORIZED

  """
  The customer claims they were charged multiple times for the same product or service.
  """
  DUPLICATE

  """
  The cardholder claims that they didn’t authorize the payment.
  """
  FRAUDULENT

  """
  The dispute is uncategorized, so you should contact the customer for
  additional details to find out why the payment was disputed.
  """
  GENERAL

  """
  The customer account associated with the purchase is incorrect.
  """
  INCORRECT_ACCOUNT_DETAILS

  """
  The customer's bank account has insufficient funds.
  """
  INSUFFICIENT_FUNDS

  """
  The customer claims they did not receive the products or services purchased.
  """
  PRODUCT_NOT_RECEIVED

  """
  The product or service was received but was defective, damaged, or not as described.
  """
  PRODUCT_UNACCEPTABLE

  """
  The customer claims that you continued to charge them after a subscription was canceled.
  """
  SUBSCRIPTION_CANCELLED

  """
  The customer doesn’t recognize the payment appearing on their card statement.
  """
  UNRECOGNIZED
}

"""
Details regarding a dispute reason.
"""
type ShopifyPaymentsDisputeReasonDetails {
  """
  The raw code provided by the payment network.
  """
  networkReasonCode: String

  """
  The reason for the dispute provided by the cardholder's banks.
  """
  reason: ShopifyPaymentsDisputeReason!
}

"""
Presents all Shopify Payments information related to an extended authorization.
"""
type ShopifyPaymentsExtendedAuthorization {
  """
  Indicates that the end of the extended capture period is approaching.
  """
  expiringExtendedAuthorization: Boolean!

  """
  Indicates that the end of the standard capture period is approaching.
  """
  expiringStandardAuthorization: Boolean!

  """
  The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.
  """
  extendedAuthorizationExpiresAt: DateTime!

  """
  The amount that will be charged if the payment is an extended authorization
  and is captured after the standard capture period has expired.
  """
  extendedAuthorizationFee: MoneyV2!

  """
  Indicates that the standard capture period has expired and that an additional
  extended authorization fee will be applied upon capturing the payment.
  """
  extendedAuthorizationFeeEffective: Boolean!

  """
  The time after which capture will incur an additional fee.
  """
  standardAuthorizationExpiresAt: DateTime!

  """
  The length in days of the standard authorization length.
  """
  standardAuthorizationLength: Int!
}

"""
The fraud settings of a payments account.
"""
type ShopifyPaymentsFraudSettings {
  """
  Decline a charge if there is an AVS failure.
  """
  declineChargeOnAvsFailure: Boolean!

  """
  Decline a charge if there is an CVC failure.
  """
  declineChargeOnCvcFailure: Boolean!
}

"""
The charge descriptors for a Japanese payments account.
"""
type ShopifyPaymentsJpChargeStatementDescriptor implements ShopifyPaymentsChargeStatementDescriptor {
  """
  The default charge statement descriptor.
  """
  default: String

  """
  The charge statement descriptor in kana.
  """
  kana: String

  """
  The charge statement descriptor in kanji.
  """
  kanji: String

  """
  The prefix of the statement descriptor.
  """
  prefix: String!
}

"""
A legal entity for a payments account.
"""
type ShopifyPaymentsLegalEntity implements Node {
  """
  The company name of the legal entity.
  """
  companyName: String!

  """
  The family name of the legal entity.
  """
  familyName: String

  """
  The given name of the legal entity.
  """
  givenName: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The phone number of the legal entity.
  """
  phoneNumber: String
}

"""
The notification settings for the account.
"""
type ShopifyPaymentsNotificationSettings {
  """
  Receive email notifications when new payouts are sent or payouts fail.
  """
  payouts: Boolean!
}

"""
Payouts represent the movement of money between a merchant's Shopify
Payments balance and their bank account.
"""
type ShopifyPaymentsPayout implements LegacyInteroperability & Node {
  """
  The bank account for the payout.
  """
  bankAccount: ShopifyPaymentsBankAccount

  """
  The total amount and currency of the payout.
  """
  gross: MoneyV2! @deprecated(reason: "Use `net` instead.")

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The exact time when the payout was issued. The payout only contains
  balance transactions that were available at this time.
  """
  issuedAt: DateTime!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The total amount and currency of the payout.
  """
  net: MoneyV2!

  """
  The transfer status of the payout.
  """
  status: ShopifyPaymentsPayoutStatus!

  """
  The summary of the payout.
  """
  summary: ShopifyPaymentsPayoutSummary!

  """
  The direction of the payout.
  """
  transactionType: ShopifyPaymentsPayoutTransactionType!
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsPayouts.
"""
type ShopifyPaymentsPayoutConnection {
  """
  A list of edges.
  """
  edges: [ShopifyPaymentsPayoutEdge!]!

  """
  A list of the nodes contained in ShopifyPaymentsPayoutEdge.
  """
  nodes: [ShopifyPaymentsPayout!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.
"""
type ShopifyPaymentsPayoutEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of ShopifyPaymentsPayoutEdge.
  """
  node: ShopifyPaymentsPayout!
}

"""
The interval at which payouts are sent to the connected bank account.
"""
enum ShopifyPaymentsPayoutInterval {
  """
  Each business day.
  """
  DAILY

  """
  Payouts will not be automatically made.
  """
  MANUAL

  """
  Each month, on the day of month specified by monthlyAnchor.
  """
  MONTHLY

  """
  Each week, on the day of week specified by weeklyAnchor.
  """
  WEEKLY
}

"""
The payment schedule for a payments account.
"""
type ShopifyPaymentsPayoutSchedule {
  """
  The interval at which payouts are sent to the connected bank account.
  """
  interval: ShopifyPaymentsPayoutInterval!

  """
  The day of the month funds will be paid out.

  The value can be any day of the month from the 1st to the 31st.
  If the payment interval is set to monthly, this value will be used.
  Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
  """
  monthlyAnchor: Int

  """
  The predicted date of a Shopify Payments account's next payout.

  The value can be any date in UTC.
  """
  nextPayoutDate: Date

  """
  The day of the week funds will be paid out.

  The value can be any weekday from Monday to Friday.
  If the payment interval is set to weekly, this value will be used.
  """
  weeklyAnchor: DayOfTheWeek
}

"""
The transfer status of the payout.
"""
enum ShopifyPaymentsPayoutStatus {
  """
  The payout has been canceled by Shopify.
  """
  CANCELED

  """
  The payout has been declined by the bank.
  """
  FAILED

  """
  The payout has been submitted to the bank.
  """
  IN_TRANSIT

  """
  The payout has been successfully deposited into the bank.
  """
  PAID

  """
  The payout has been created and had transactions assigned to it, but
  it has not yet been submitted to the bank.
  """
  SCHEDULED
}

"""
Breakdown of the total fees and gross of each of the different types of transactions associated
with the payout.
"""
type ShopifyPaymentsPayoutSummary {
  """
  Total fees for all adjustments including disputes.
  """
  adjustmentsFee: MoneyV2!

  """
  Total gross amount for all adjustments including disputes.
  """
  adjustmentsGross: MoneyV2!

  """
  Total fees for all charges.
  """
  chargesFee: MoneyV2!

  """
  Total gross amount for all charges.
  """
  chargesGross: MoneyV2!

  """
  Total fees for all refunds.
  """
  refundsFee: MoneyV2!

  """
  Total gross amount for all refunds.
  """
  refundsFeeGross: MoneyV2!

  """
  Total fees for all reserved funds.
  """
  reservedFundsFee: MoneyV2!

  """
  Total gross amount for all reserved funds.
  """
  reservedFundsGross: MoneyV2!

  """
  Total fees for all retried payouts.
  """
  retriedPayoutsFee: MoneyV2!

  """
  Total gross amount for all retried payouts.
  """
  retriedPayoutsGross: MoneyV2!
}

"""
The possible transaction types for a payout.
"""
enum ShopifyPaymentsPayoutTransactionType {
  """
  The payout is a deposit.
  """
  DEPOSIT

  """
  The payout is a withdrawal.
  """
  WITHDRAWAL
}

"""
Presents all Shopify Payments specific information related to an order refund.
"""
type ShopifyPaymentsRefundSet {
  """
  The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.
  """
  acquirerReferenceNumber: String
}

"""
Presents all Shopify Payments specific information related to an order transaction.
"""
type ShopifyPaymentsTransactionSet {
  """
  Contains all fields related to an extended authorization.
  """
  extendedAuthorizationSet: ShopifyPaymentsExtendedAuthorization

  """
  Contains all fields related to a refund.
  """
  refundSet: ShopifyPaymentsRefundSet
}

"""
Each subject (individual) of an account has a verification object giving
 information about the verification state.
"""
type ShopifyPaymentsVerification implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The status of the verification.
  """
  status: ShopifyPaymentsVerificationStatus!

  """
  The subject/individual who has to be verified.
  """
  subject: ShopifyPaymentsVerificationSubject!
}

"""
A document which can be used to verify an individual.
"""
type ShopifyPaymentsVerificationDocument {
  """
  True if the back side of the document is required.
  """
  backRequired: Boolean!

  """
  True if the front side of the document is required.
  """
  frontRequired: Boolean!

  """
  The type of the document which can be used for verification.
  """
  type: ShopifyPaymentsVerificationDocumentType!
}

"""
The types of possible verification documents.
"""
enum ShopifyPaymentsVerificationDocumentType {
  """
  The subject's driver's license.
  """
  DRIVERS_LICENSE

  """
  A government's identification document of the subject.
  """
  GOVERNMENT_IDENTIFICATION

  """
  The subject's passport.
  """
  PASSPORT
}

"""
The status of a verification.
"""
enum ShopifyPaymentsVerificationStatus {
  """
  The verification request has been submitted but a response has not yet been given.
  """
  PENDING

  """
  The verification has not yet been verified.
  """
  UNVERIFIED

  """
  The verification has been verified.
  """
  VERIFIED
}

"""
The verification subject represents an individual that has to be verified.
"""
type ShopifyPaymentsVerificationSubject {
  """
  The family name of the individual to verify.
  """
  familyName: String!

  """
  The given name of the individual to verify.
  """
  givenName: String!
}

"""
Represents the data about a staff member's Shopify account. Merchants can use
staff member data to get more information about the staff members in their store.
"""
type StaffMember implements Node {
  """
  A description of the staff member's access level. The possible values are `No
  access`, `Full access`, `Limited access` or `Account owner`.
  """
  accountAccess: String! @deprecated(reason: "Use `permissionLevel` instead.")

  """
  Whether the staff member is active.
  """
  active: Boolean!

  """
  The image used as the staff member's avatar in the Shopify admin.
  """
  avatar(
    """
    The default image returned if the staff member has no avatar.
    """
    fallback: StaffMemberDefaultImage

    """
    The image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` argument on `image` instead.")

    """
    The image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on argument `image` instead.")
  ): Image!

  """
  A list of businesses that the staff member has access to.
  """
  businesses(
    """
    The type of business products, e.g. 'shop'.
    """
    productType: String @deprecated(reason: "This argument is not used.")
  ): [StaffMemberBusiness!] @deprecated(reason: "Not supported anymore.")

  """
  The staff member's email address.
  """
  email: String!

  """
  Whether the staff member's account exists.
  """
  exists: Boolean!

  """
  The staff member's first name.
  """
  firstName: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The Identity account page URL for the staff member.
  """
  identityAccountUrl: URL

  """
  The staff member's initials, if available.
  """
  initials: [String!]

  """
  Whether the staff member is the shop owner.
  """
  isShopOwner: Boolean!

  """
  The staff member's last name.
  """
  lastName: String

  """
  The staff member's preferred locale. Locale values use the format `language`
  or `language-COUNTRY`, where `language` is a two-letter language code, and
  `COUNTRY` is a two-letter country code. For example: `en` or `en-US`
  """
  locale: String!

  """
  The staff member's full name.
  """
  name: String!

  """
  The staff member's phone number.
  """
  phone: String

  """
  The data used to customize the Shopify admin experience for the staff member.
  """
  privateData: StaffMemberPrivateData!
}

"""
Represents a business to which a staff user belongs.
"""
type StaffMemberBusiness {
  """
  A unique identifier representing the business in the business platform.
  """
  businessId: String!

  """
  An URL referencing a logo of the business to which the staff member belongs.
  """
  logo: URL

  """
  A name for the business to which the staff member belongs.
  """
  name: String!

  """
  All the business products a staff member has access to.
  """
  products: [StaffMemberBusinessProduct!]! @deprecated(reason: "Use `shops` instead.")

  """
  All the shops on a business a staff member has access to.
  """
  shops: [StaffMemberBusinessShop!]!
}

"""
Represents a business product a staff user has access to.
"""
type StaffMemberBusinessProduct {
  """
  An external identifier for the business product.
  """
  externalId: String

  """
  A name for the business product.
  """
  name: String!

  """
  The type of business products, e.g. 'shop'.
  """
  productType: String! @deprecated(reason: "Use StaffMemberBusiness.shops instead.")

  """
  The Shopify Shop ID for the product.
  """
  shopifyShopId: String

  """
  An URL for the business product.
  """
  url: URL
}

"""
Represents a business shop a staff user has access to.
"""
type StaffMemberBusinessShop {
  """
  A name for the business shop.
  """
  name: String!

  """
  The Shopify Shop ID for the shop.
  """
  shopifyShopId: String

  """
  An URL for the business shop.
  """
  url: URL
}

"""
An auto-generated type for paginating through multiple StaffMembers.
"""
type StaffMemberConnection {
  """
  A list of edges.
  """
  edges: [StaffMemberEdge!]!

  """
  A list of the nodes contained in StaffMemberEdge.
  """
  nodes: [StaffMember!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Represents the fallback avatar image for a staff member. This is used only if the staff member has no avatar image.
"""
enum StaffMemberDefaultImage {
  """
  Returns a default avatar image for the staff member.
  """
  DEFAULT

  """
  Returns a URL that returns a 404 error if the image is not present.
  """
  NOT_FOUND

  """
  Returns a transparent avatar image for the staff member.
  """
  TRANSPARENT
}

"""
An auto-generated type which holds one StaffMember and a cursor during pagination.
"""
type StaffMemberEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of StaffMemberEdge.
  """
  node: StaffMember!
}

"""
Represents access permissions for a staff member.
"""
enum StaffMemberPermission {
  """
  The staff member can manage and install apps and channels.
  """
  APPLICATIONS

  """
  The staff member can manage and install sales channels.
  """
  CHANNELS

  """
  The staff member can view, create, update, and delete customers, and respond
  to customer messages in the Shopify Messaging API.
  """
  CUSTOMERS

  """
  The staff member can view the Shopify Home page, which includes sales information and other shop data.
  """
  DASHBOARD

  """
  The staff member can view, buy, and manage domains.
  """
  DOMAINS

  """
  The staff member can create, update, and delete draft orders.
  """
  DRAFT_ORDERS

  """
  The staff member can update orders.
  """
  EDIT_ORDERS

  """
  The staff member can export customers.
  """
  EXPORT_CUSTOMERS

  """
  The staff member can export draft orders.
  """
  EXPORT_DRAFT_ORDERS

  """
  The staff member can export orders.
  """
  EXPORT_ORDERS

  """
  The staff member can export products and inventory.
  """
  EXPORT_PRODUCTS

  """
  The staff has the same permissions as the [store owner](https://shopify.dev/en/manual/your-account/staff-accounts/staff-permissions#store-owner-permissions)
  with some exceptions, such as modifying the account billing or deleting staff accounts.
  """
  FULL @deprecated(reason: "Use the list of the staff member's explicit permissions returned in the `StaffMember.permissions.userPermissions` field instead of `full` permission.")

  """
  The staff member can view, create, issue, and export gift cards to a CSV file.
  """
  GIFT_CARDS

  """
  The staff member can manage selected apps and channels.
  """
  LIMITED_APPLICATIONS

  """
  The staff member can view and modify links and navigation menus.
  """
  LINKS

  """
  The staff member can create, update, and delete locations where inventory is stocked or managed.
  """
  LOCATIONS

  """
  The staff member can view and create discount codes and automatic discounts, and export discounts to a CSV file.
  """
  MARKETING

  """
  The staff member can view, create, and automate marketing campaigns.
  """
  MARKETING_SECTION

  """
  The staff member can delete metaobjects.
  """
  METAOBJECTS_DELETE

  """
  The staff member can create and edit metaobjects.
  """
  METAOBJECTS_EDIT

  """
  The staff member can view metaobjects.
  """
  METAOBJECTS_VIEW

  """
  The staff member can delete metaobject definitions.
  """
  METAOBJECT_DEFINITIONS_DELETE

  """
  The staff member can create and edit metaobject definitions.
  """
  METAOBJECT_DEFINITIONS_EDIT

  """
  The staff member can view metaobject definitions.
  """
  METAOBJECT_DEFINITIONS_VIEW

  """
  The staff member can view, create, update, delete, and cancel orders, and
  receive order notifications. The staff member can still create draft orders
  without this permission.
  """
  ORDERS

  """
  The staff member can view the Overview and Live view pages,
              which include sales information, and other shop and sales channels data.
  """
  OVERVIEWS

  """
  The staff member can view, create, update, publish, and delete blog posts and pages.
  """
  PAGES

  """
  The staff member can pay for an order by using a vaulted card.
  """
  PAY_ORDERS_BY_VAULTED_CARD

  """
  The staff member can view the preferences and configuration of a shop.
  """
  PREFERENCES

  """
  The staff member can view, create, import, and update products, collections, and inventory.
  """
  PRODUCTS

  """
  The staff member can view and create all reports, which includes sales information and other shop data.
  """
  REPORTS

  """
  The staff member can view, update, and publish themes.
  """
  THEMES

  """
  The staff member can view and create translations.
  """
  TRANSLATIONS @deprecated(reason: "Unused.")
}

"""
Represents the data used to customize the Shopify admin experience for a logged-in staff member.
"""
type StaffMemberPrivateData {
  """
  The URL to the staff member's account settings page.
  """
  accountSettingsUrl: URL!

  """
  The type of the staff member's account on the shop.
  """
  accountType: AccountType @deprecated(reason: "Use StaffMember.accountType instead.")

  """
  Paginated list of activities.
  """
  activityFeed(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ActivityConnection!

  """
  The information on the Shopify Capital updated on a regular schedule.
  """
  capital: HomeCapitalSummary

  """
  The list of cards that can be shown to the staff member on the Shopify Home.
  """
  cards(
    """
    Show only home cards with a specified action to the staff member.
    """
    acceptAction: [HomeCardAction!]

    """
    Show only home cards with a specified layout to the staff member.
    """
    acceptLayout: [HomeCardLayout!]
  ): [HomeCard!]!

  """
  The date and time when the staff member was created.
  """
  createdAt: DateTime!

  """
  Whether the staff member has verified their email address.
  """
  emailVerified: Boolean!

  """
  The Shopify Home feed theme. This object holds more information about the list of the Shopify Home cards.
  """
  feedTheme: HomeFeedTheme

  """
  The Shopify Home greeting messages, localized to the staff members's locale.
  """
  greeting(
    """
    The date and time in the staff member's locale.
    """
    clientDatetime: DateTime!
  ): HomeGreeting!

  """
  Whether the staff member is using an Identity account.
  """
  identityOwned: Boolean!

  """
  Staff member's Identity account identifier.
  """
  identityUuid: String

  """
  The Insights for the current shop.
  """
  insights: Insights!

  """
  The list of notifications that will be shown to the staff member on the Shopify Home.
  """
  notifications: [HomeNotification!]!

  """
  Access permissions for the staff member.
  """
  permissions: [StaffMemberPermission!]! @deprecated(reason: "Use StaffMember.permissions.userPermissions instead")

  """
  The list of merchant tasks requiring action from staff member.
  """
  tasks: [HomeTask!]!
}

"""
Standard metafield definition templates provide preset configurations to create metafield definitions.
Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.

Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
"""
type StandardMetafieldDefinitionTemplate implements Node {
  """
  The description of the standard metafield definition.
  """
  description: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The key owned by the definition after the definition has been activated.
  """
  key: String!

  """
  The human-readable name for the standard metafield definition.
  """
  name: String!

  """
  The namespace owned by the definition after the definition has been activated.
  """
  namespace: String!

  """
  The list of resource types that the standard metafield definition can be applied to.
  """
  ownerTypes: [MetafieldOwnerType!]!

  """
  The associated [metafield definition
  type](https://shopify.dev/apps/metafields/definitions/types) that the
  metafield stores.
  """
  type: MetafieldDefinitionType!

  """
  The configured validations for the standard metafield definition.
  """
  validations: [MetafieldDefinitionValidation!]!

  """
  Whether metafields for the definition are by default visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean!
}

"""
Represents the details of a specific type of product within the [Shopify product
taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
"""
type StandardProductType {
  """
  The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
  """
  fullName: String!

  """
  Whether the product taxonomy node is a leaf node.
  """
  isLeaf: Boolean!

  """
  Whether the product taxonomy node is a root node.
  """
  isRoot: Boolean!

  """
  The name of the product taxonomy node. For example, Dog Beds.
  """
  name: String!

  """
  The id of the parent of the product taxonomy node.
  """
  parentProductTaxonomyNodeId: ID

  """
  The product taxonomy node associated with the standardized product type.
  """
  productTaxonomyNode: ProductTaxonomyNode

  """
  The id of the product taxonomy node for the product's standard type.
  """
  productTaxonomyNodeId: ID!

  """
  The type of the product taxonomy node. For example, Dog Beds.
  """
  type: String! @deprecated(reason: "Use `name` instead.")

  """
  The type path of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
  """
  typePath: String! @deprecated(reason: "Use `fullName` instead.")
}

"""
Represents the details of a specific type of product within the [Shopify product
taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
"""
type StandardizedProductType {
  """
  The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
  """
  fullName: String!

  """
  Whether the product taxonomy node is a leaf node.
  """
  isLeaf: Boolean!

  """
  Whether the product taxonomy node is a root node.
  """
  isRoot: Boolean!

  """
  The name of the product taxonomy node. For example, Dog Beds.
  """
  name: String!

  """
  The id of the parent of the product taxonomy node.
  """
  parentProductTaxonomyNodeId: ID

  """
  The product taxonomy node associated with the standardized product type.
  """
  productTaxonomyNode: ProductTaxonomyNode

  """
  The id of the product taxonomy node for the product's standard type.
  """
  productTaxonomyNodeId: ID!

  """
  The type of the product taxonomy node. For example, Dog Beds.
  """
  type: String! @deprecated(reason: "Use `name` instead.")

  """
  The type path of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
  """
  typePath: String! @deprecated(reason: "Use `fullName` instead.")
}

"""
A token that's used to delegate unauthenticated access scopes to clients that need to access
the unauthenticated Storefront API. An app can have a maximum of 100 active storefront access
tokens for each shop.
"""
type StorefrontAccessToken implements Node {
  """
  List of permissions associated with the token.
  """
  accessScopes: [AccessScope!]!

  """
  The issued public access token.
  """
  accessToken: String!

  """
  The date and time when the public access token was created.
  """
  createdAt: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  An arbitrary title for each token determined by the developer, used for reference         purposes.
  """
  title: String!

  """
  The date and time when the storefront access token was updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple StorefrontAccessTokens.
"""
type StorefrontAccessTokenConnection {
  """
  A list of edges.
  """
  edges: [StorefrontAccessTokenEdge!]!

  """
  A list of the nodes contained in StorefrontAccessTokenEdge.
  """
  nodes: [StorefrontAccessToken!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.
"""
type StorefrontAccessTokenEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of StorefrontAccessTokenEdge.
  """
  node: StorefrontAccessToken!
}

"""
Represents a unique identifier in the Storefront API. A `StorefrontID` value can
be used wherever an ID is expected in the Storefront API.

Example value: `"Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0LzEwMDc5Nzg1MTAw"`.
"""
scalar StorefrontID

"""
An auto-generated type for paginating through a list of Strings.
"""
type StringConnection {
  """
  A list of edges.
  """
  edges: [StringEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one String and a cursor during pagination.
"""
type StringEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of StringEdge.
  """
  node: String!
}

"""
Represents an applied code discount.
"""
type SubscriptionAppliedCodeDiscount {
  """
  The unique identifier.
  """
  id: ID!

  """
  The redeem code of the discount that applies on the subscription.
  """
  redeemCode: String!

  """
  The reason that the discount on the subscription draft is rejected.
  """
  rejectionReason: SubscriptionDiscountRejectionReason
}

"""
A record of an execution of the subscription billing process. Billing attempts use
idempotency keys to avoid duplicate order creation. A successful billing attempt
will create an order.
"""
type SubscriptionBillingAttempt implements Node {
  """
  The date and time when the billing attempt was completed.
  """
  completedAt: DateTime

  """
  The date and time when the billing attempt was created.
  """
  createdAt: DateTime!

  """
  A code corresponding to a payment error during processing.
  """
  errorCode: SubscriptionBillingAttemptErrorCode

  """
  A message describing a payment error during processing.
  """
  errorMessage: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  A unique key generated by the client to avoid duplicate payments.
  """
  idempotencyKey: String!

  """
  The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
  """
  nextActionUrl: URL

  """
  The result of this billing attempt if completed successfully.
  """
  order: Order

  """
  The date and time used to calculate fulfillment intervals for a billing attempt that
  successfully completed after the current anchor date. To prevent fulfillment from being
  pushed to the next anchor date, this field can override the billing attempt date.
  """
  originTime: DateTime

  """
  Whether the billing attempt is still processing.
  """
  ready: Boolean!

  """
  The subscription contract.
  """
  subscriptionContract: SubscriptionContract!
}

"""
An auto-generated type for paginating through multiple SubscriptionBillingAttempts.
"""
type SubscriptionBillingAttemptConnection {
  """
  A list of edges.
  """
  edges: [SubscriptionBillingAttemptEdge!]!

  """
  A list of the nodes contained in SubscriptionBillingAttemptEdge.
  """
  nodes: [SubscriptionBillingAttempt!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.
"""
type SubscriptionBillingAttemptEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SubscriptionBillingAttemptEdge.
  """
  node: SubscriptionBillingAttempt!
}

"""
The possible error codes associated with making billing attempts. The error codes supplement the
`error_message` to provide consistent results and help with dunning management.
"""
enum SubscriptionBillingAttemptErrorCode {
  """
  The amount is too small.
  """
  AMOUNT_TOO_SMALL

  """
  There was an error during the authentication.
  """
  AUTHENTICATION_ERROR

  """
  Payment method was canceled by buyer.
  """
  BUYER_CANCELED_PAYMENT_METHOD

  """
  Customer is invalid.
  """
  CUSTOMER_INVALID

  """
  Customer was not found.
  """
  CUSTOMER_NOT_FOUND

  """
  Payment method is expired.
  """
  EXPIRED_PAYMENT_METHOD

  """
  The billing agreement ID or the transaction ID for the customer's payment method is invalid.
  """
  INVALID_CUSTOMER_BILLING_AGREEMENT

  """
  Payment method is invalid. Please update or create a new payment method.
  """
  INVALID_PAYMENT_METHOD

  """
  The shipping address is either missing or invalid.
  """
  INVALID_SHIPPING_ADDRESS

  """
  No inventory location found or enabled.
  """
  INVENTORY_ALLOCATIONS_NOT_FOUND

  """
  A payment has already been made for this invoice.
  """
  INVOICE_ALREADY_PAID

  """
  Payment method was declined by processor.
  """
  PAYMENT_METHOD_DECLINED

  """
  Payment method cannot be used with the current payment gateway test mode configuration.
  """
  PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG

  """
  Payment method was not found.
  """
  PAYMENT_METHOD_NOT_FOUND

  """
  Payment provider is not enabled.
  """
  PAYMENT_PROVIDER_IS_NOT_ENABLED

  """
  Gateway is in test mode and attempted to bill a live payment method.
  """
  TEST_MODE

  """
  There was an unexpected error during the billing attempt.
  """
  UNEXPECTED_ERROR
}

"""
A subscription billing cycle.
"""
type SubscriptionBillingCycle {
  """
  The date on which the billing attempt is expected to be made.
  """
  billingAttemptExpectedDate: DateTime!

  """
  The list of billing attempts associated with the billing cycle.
  """
  billingAttempts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionBillingAttemptConnection!

  """
  The end date of the billing cycle.
  """
  cycleEndAt: DateTime!

  """
  The index of the billing cycle.
  """
  cycleIndex: Int!

  """
  The start date of the billing cycle.
  """
  cycleStartAt: DateTime!

  """
  Whether this billing cycle was edited.
  """
  edited: Boolean!

  """
  The active edited contract for the billing cycle.
  """
  editedContract: SubscriptionBillingCycleEditedContract

  """
  Whether this billing cycle was skipped.
  """
  skipped: Boolean!

  """
  The subscription contract that the billing cycle belongs to.
  """
  sourceContract: SubscriptionContract!

  """
  The status of the billing cycle.
  """
  status: SubscriptionBillingCycleBillingCycleStatus!
}

"""
The possible status values of a subscription billing cycle.
"""
enum SubscriptionBillingCycleBillingCycleStatus {
  """
  The billing cycle is billed.
  """
  BILLED

  """
  The billing cycle hasn't been billed.
  """
  UNBILLED
}

"""
An auto-generated type for paginating through multiple SubscriptionBillingCycles.
"""
type SubscriptionBillingCycleConnection {
  """
  A list of edges.
  """
  edges: [SubscriptionBillingCycleEdge!]!

  """
  A list of the nodes contained in SubscriptionBillingCycleEdge.
  """
  nodes: [SubscriptionBillingCycle!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionBillingCycle and a cursor during pagination.
"""
type SubscriptionBillingCycleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SubscriptionBillingCycleEdge.
  """
  node: SubscriptionBillingCycle!
}

"""
Represents a subscription contract with billing cycles.
"""
type SubscriptionBillingCycleEditedContract implements SubscriptionContractBase {
  """
  The subscription app that the subscription contract is registered to.
  """
  app: App

  """
  The URL of the subscription contract page on the subscription app.
  """
  appAdminUrl: URL

  """
  The billing cycles that the edited contract belongs to.
  """
  billingCycles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionBillingCycleConnection!

  """
  The date and time when the subscription contract was created.
  """
  createdAt: DateTime!

  """
  The currency that's used for the subscription contract.
  """
  currencyCode: CurrencyCode!

  """
  A list of the custom attributes to be added to the generated orders.
  """
  customAttributes: [Attribute!]!

  """
  The customer to whom the subscription contract belongs.
  """
  customer: Customer

  """
  The customer payment method that's used for the subscription contract.
  """
  customerPaymentMethod(
    """
    Whether to show the customer's revoked payment method.
    """
    showRevoked: Boolean
  ): CustomerPaymentMethod

  """
  The delivery method for each billing of the subscription contract.
  """
  deliveryMethod: SubscriptionDeliveryMethod

  """
  The delivery price for each billing of the subscription contract.
  """
  deliveryPrice: MoneyV2!

  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionManualDiscountConnection!

  """
  The number of lines associated with the subscription contract.
  """
  lineCount: Int!

  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionLineConnection!

  """
  The note field that will be applied to the generated orders.
  """
  note: String

  """
  A list of the subscription contract's orders.
  """
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderConnection!

  """
  The date and time when the subscription contract was updated.
  """
  updatedAt: DateTime!
}

"""
Represents a Subscription Billing Policy.
"""
type SubscriptionBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: SellingPlanInterval!

  """
  The number of billing intervals between invoices.
  """
  intervalCount: Int!

  """
  Maximum amount of cycles after which the subscription ends.
  """
  maxCycles: Int

  """
  Minimum amount of cycles required in the subscription.
  """
  minCycles: Int
}

"""
Represents a Subscription Contract.
"""
type SubscriptionContract implements Node & SubscriptionContractBase {
  """
  The subscription app that the subscription contract is registered to.
  """
  app: App

  """
  The URL of the subscription contract page on the subscription app.
  """
  appAdminUrl: URL

  """
  The list of billing attempts associated with the subscription contract.
  """
  billingAttempts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionBillingAttemptConnection!

  """
  The billing policy associated with the subscription contract.
  """
  billingPolicy: SubscriptionBillingPolicy!

  """
  The date and time when the subscription contract was created.
  """
  createdAt: DateTime!

  """
  The currency that's used for the subscription contract.
  """
  currencyCode: CurrencyCode!

  """
  A list of the custom attributes to be added to the generated orders.
  """
  customAttributes: [Attribute!]!

  """
  The customer to whom the subscription contract belongs.
  """
  customer: Customer

  """
  The customer payment method that's used for the subscription contract.
  """
  customerPaymentMethod(
    """
    Whether to show the customer's revoked payment method.
    """
    showRevoked: Boolean
  ): CustomerPaymentMethod

  """
  The delivery method for each billing of the subscription contract.
  """
  deliveryMethod: SubscriptionDeliveryMethod

  """
  The delivery policy associated with the subscription contract.
  """
  deliveryPolicy: SubscriptionDeliveryPolicy!

  """
  The delivery price for each billing of the subscription contract.
  """
  deliveryPrice: MoneyV2!

  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionManualDiscountConnection!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The current status of the last payment.
  """
  lastPaymentStatus: SubscriptionContractLastPaymentStatus

  """
  The number of lines associated with the subscription contract.
  """
  lineCount: Int!

  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionLineConnection!

  """
  The next billing date for the subscription contract.
  """
  nextBillingDate: DateTime

  """
  The note field that will be applied to the generated orders.
  """
  note: String

  """
  A list of the subscription contract's orders.
  """
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderConnection!

  """
  The order from which this contract originated.
  """
  originOrder: Order

  """
  The current status of the subscription contract.
  """
  status: SubscriptionContractSubscriptionStatus!

  """
  The date and time when the subscription contract was updated.
  """
  updatedAt: DateTime!
}

"""
Represents subscription contract common fields.
"""
interface SubscriptionContractBase {
  """
  The subscription app that the subscription contract is registered to.
  """
  app: App

  """
  The URL of the subscription contract page on the subscription app.
  """
  appAdminUrl: URL

  """
  The currency that's used for the subscription contract.
  """
  currencyCode: CurrencyCode!

  """
  A list of the custom attributes to be added to the generated orders.
  """
  customAttributes: [Attribute!]!

  """
  The customer to whom the subscription contract belongs.
  """
  customer: Customer

  """
  The customer payment method that's used for the subscription contract.
  """
  customerPaymentMethod(
    """
    Whether to show the customer's revoked payment method.
    """
    showRevoked: Boolean
  ): CustomerPaymentMethod

  """
  The delivery method for each billing of the subscription contract.
  """
  deliveryMethod: SubscriptionDeliveryMethod

  """
  The delivery price for each billing of the subscription contract.
  """
  deliveryPrice: MoneyV2!

  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionManualDiscountConnection!

  """
  The number of lines associated with the subscription contract.
  """
  lineCount: Int!

  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionLineConnection!

  """
  The note field that will be applied to the generated orders.
  """
  note: String

  """
  A list of the subscription contract's orders.
  """
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderConnection!

  """
  The date and time when the subscription contract was updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple SubscriptionContracts.
"""
type SubscriptionContractConnection {
  """
  A list of edges.
  """
  edges: [SubscriptionContractEdge!]!

  """
  A list of the nodes contained in SubscriptionContractEdge.
  """
  nodes: [SubscriptionContract!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionContract and a cursor during pagination.
"""
type SubscriptionContractEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SubscriptionContractEdge.
  """
  node: SubscriptionContract!
}

"""
The possible status values of the last payment on a subscription contract.
"""
enum SubscriptionContractLastPaymentStatus {
  """
  Failed subscription billing attempt.
  """
  FAILED

  """
  Successful subscription billing attempt.
  """
  SUCCEEDED
}

"""
The possible status values of a subscription.
"""
enum SubscriptionContractSubscriptionStatus {
  """
  The contract is active and continuing per its policies.
  """
  ACTIVE

  """
  The contract was ended by an unplanned customer action.
  """
  CANCELLED

  """
  The contract has ended per the expected circumstances. All billing and deliverycycles of the subscriptions were executed.
  """
  EXPIRED

  """
  The contract ended because billing failed and no further billing attempts are expected.
  """
  FAILED

  """
  The contract is temporarily paused and is expected to resume in the future.
  """
  PAUSED
}

"""
Represents a Subscription Line Pricing Cycle Adjustment.
"""
type SubscriptionCyclePriceAdjustment {
  """
  Price adjustment type.
  """
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """
  Price adjustment value.
  """
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!

  """
  The number of cycles required before this pricing policy applies.
  """
  afterCycle: Int!

  """
  The computed price after the adjustments applied.
  """
  computedPrice: MoneyV2!
}

"""
Describes the delivery method to use to get the physical goods to the customer.
"""
union SubscriptionDeliveryMethod = SubscriptionDeliveryMethodLocalDelivery | SubscriptionDeliveryMethodPickup | SubscriptionDeliveryMethodShipping

"""
A local delivery method, which includes a mailing address and a local delivery option.
"""
type SubscriptionDeliveryMethodLocalDelivery {
  """
  The address to deliver to.
  """
  address: SubscriptionMailingAddress!

  """
  The details of the local delivery method to use.
  """
  localDeliveryOption: SubscriptionDeliveryMethodLocalDeliveryOption!
}

"""
The selected delivery option on a subscription contract.
"""
type SubscriptionDeliveryMethodLocalDeliveryOption {
  """
  A custom reference to the delivery method for use with automations.
  """
  code: String

  """
  The details displayed to the customer to describe the local delivery option.
  """
  description: String

  """
  The delivery instructions that the customer can provide to the merchant.
  """
  instructions: String

  """
  The phone number that the customer provided to the merchant.
  Formatted using E.164 standard. For example, `+16135551111`.
  """
  phone: String!

  """
  The presentment title of the local delivery option.
  """
  presentmentTitle: String

  """
  The title of the local delivery option.
  """
  title: String
}

"""
A delivery method with a pickup option.
"""
type SubscriptionDeliveryMethodPickup {
  """
  The details of the pickup delivery method to use.
  """
  pickupOption: SubscriptionDeliveryMethodPickupOption!
}

"""
Represents the selected pickup option on a subscription contract.
"""
type SubscriptionDeliveryMethodPickupOption {
  """
  A custom reference to the delivery method for use with automations.
  """
  code: String

  """
  The details displayed to the customer to describe the pickup option.
  """
  description: String

  """
  The location where the customer will pickup the merchandise.
  """
  location: Location!

  """
  The presentment title of the pickup option.
  """
  presentmentTitle: String

  """
  The title of the pickup option.
  """
  title: String
}

"""
Represents a shipping delivery method: a mailing address and a shipping option.
"""
type SubscriptionDeliveryMethodShipping {
  """
  The address to ship to.
  """
  address: SubscriptionMailingAddress!

  """
  The details of the shipping method to use.
  """
  shippingOption: SubscriptionDeliveryMethodShippingOption!
}

"""
Represents the selected shipping option on a subscription contract.
"""
type SubscriptionDeliveryMethodShippingOption {
  """
  The carrier service of the shipping option.
  """
  carrierService: DeliveryCarrierService

  """
  The code of the shipping option.
  """
  code: String

  """
  The description of the shipping option.
  """
  description: String

  """
  The presentment title of the shipping option.
  """
  presentmentTitle: String

  """
  The title of the shipping option.
  """
  title: String
}

"""
The delivery option for a subscription contract.
"""
union SubscriptionDeliveryOption = SubscriptionLocalDeliveryOption | SubscriptionPickupOption | SubscriptionShippingOption

"""
The result of the query to fetch delivery options for the subscription contract.
"""
union SubscriptionDeliveryOptionResult = SubscriptionDeliveryOptionResultFailure | SubscriptionDeliveryOptionResultSuccess

"""
A failure to find the available delivery options for a subscription contract.
"""
type SubscriptionDeliveryOptionResultFailure {
  """
  The reason for the failure.
  """
  message: String
}

"""
The delivery option for a subscription contract.
"""
type SubscriptionDeliveryOptionResultSuccess {
  """
  The available delivery options.
  """
  deliveryOptions: [SubscriptionDeliveryOption!]!
}

"""
Represents a Subscription Delivery Policy.
"""
type SubscriptionDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: SellingPlanInterval!

  """
  The number of delivery intervals between deliveries.
  """
  intervalCount: Int!
}

"""
Subscription draft discount types.
"""
union SubscriptionDiscount = SubscriptionAppliedCodeDiscount | SubscriptionManualDiscount

"""
Represents what a particular discount reduces from a line price.
"""
type SubscriptionDiscountAllocation {
  """
  Allocation amount.
  """
  amount: MoneyV2!

  """
  Discount that created the allocation.
  """
  discount: SubscriptionDiscount!
}

"""
An auto-generated type for paginating through multiple SubscriptionDiscounts.
"""
type SubscriptionDiscountConnection {
  """
  A list of edges.
  """
  edges: [SubscriptionDiscountEdge!]!

  """
  A list of the nodes contained in SubscriptionDiscountEdge.
  """
  nodes: [SubscriptionDiscount!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.
"""
type SubscriptionDiscountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SubscriptionDiscountEdge.
  """
  node: SubscriptionDiscount!
}

"""
Represents the subscription lines the discount applies on.
"""
type SubscriptionDiscountEntitledLines {
  """
  Specify whether the subscription discount will apply on all subscription lines.
  """
  all: Boolean!

  """
  The list of subscription lines associated with the subscription discount.
  """
  lines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionLineConnection!
}

"""
The value of the discount and how it will be applied.
"""
type SubscriptionDiscountFixedAmountValue {
  """
  The fixed amount value of the discount.
  """
  amount: MoneyV2!

  """
  Whether the amount is applied per item.
  """
  appliesOnEachItem: Boolean!
}

"""
The percentage value of the discount.
"""
type SubscriptionDiscountPercentageValue {
  """
  The percentage value of the discount.
  """
  percentage: Int!
}

"""
The reason a discount on a subscription draft was rejected.
"""
enum SubscriptionDiscountRejectionReason {
  """
  Discount is inactive.
  """
  CURRENTLY_INACTIVE

  """
  Given customer does not qualify for the discount.
  """
  CUSTOMER_NOT_ELIGIBLE

  """
  Customer usage limit has been reached.
  """
  CUSTOMER_USAGE_LIMIT_REACHED

  """
  Purchase type does not qualify for the discount.
  """
  INCOMPATIBLE_PURCHASE_TYPE

  """
  Internal error during discount code validation.
  """
  INTERNAL_ERROR

  """
  Discount code is not found.
  """
  NOT_FOUND

  """
  Discount does not apply to any of the given line items.
  """
  NO_ENTITLED_LINE_ITEMS

  """
  No applicable shipping lines.
  """
  NO_ENTITLED_SHIPPING_LINES

  """
  Purchase amount of items does not qualify for the discount.
  """
  PURCHASE_NOT_IN_RANGE

  """
  Quantity of items does not qualify for the discount.
  """
  QUANTITY_NOT_IN_RANGE

  """
  Discount usage limit has been reached.
  """
  USAGE_LIMIT_REACHED
}

"""
The value of the discount and how it will be applied.
"""
union SubscriptionDiscountValue = SubscriptionDiscountFixedAmountValue | SubscriptionDiscountPercentageValue

"""
Represents a Subscription Draft.
"""
type SubscriptionDraft implements Node {
  """
  The billing cycle that the subscription contract will be associated with.
  """
  billingCycle: SubscriptionBillingCycle

  """
  The billing policy for the subscription contract.
  """
  billingPolicy: SubscriptionBillingPolicy!

  """
  The billing cycles of the contracts that will be concatenated to the subscription contract.
  """
  concatenatedBillingCycles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionBillingCycleConnection!

  """
  The currency used for the subscription contract.
  """
  currencyCode: CurrencyCode!

  """
  A list of the custom attributes to be added to the generated orders.
  """
  customAttributes: [Attribute!]!

  """
  The customer to whom the subscription contract belongs.
  """
  customer: Customer!

  """
  The customer payment method used for the subscription contract.
  """
  customerPaymentMethod(
    """
    Whether to show the customer's revoked payment method.
    """
    showRevoked: Boolean
  ): CustomerPaymentMethod

  """
  The delivery method for each billing of the subscription contract.
  """
  deliveryMethod: SubscriptionDeliveryMethod

  """
  The available delivery options for a given delivery address. Returns `null` for pending requests.
  """
  deliveryOptions(
    """
    The address to deliver the subscription contract to.
    """
    deliveryAddress: MailingAddressInput
  ): SubscriptionDeliveryOptionResult

  """
  The delivery policy for the subscription contract.
  """
  deliveryPolicy: SubscriptionDeliveryPolicy!

  """
  The delivery price for each billing the subscription contract.
  """
  deliveryPrice: MoneyV2

  """
  The list of subscription discounts which will be associated with the subscription contract.
  """
  discounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be added to the subscription contract.
  """
  discountsAdded(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be removed from the subscription contract.
  """
  discountsRemoved(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be updated on the subscription contract.
  """
  discountsUpdated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionDiscountConnection!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The list of subscription lines which will be associated with the subscription contract.
  """
  lines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionLineConnection!

  """
  The list of subscription lines to be added to the subscription contract.
  """
  linesAdded(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionLineConnection!

  """
  The list of subscription lines to be removed from the subscription contract.
  """
  linesRemoved(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionLineConnection!

  """
  The next billing date for the subscription contract.
  """
  nextBillingDate: DateTime

  """
  The note field that will be applied to the generated orders.
  """
  note: String

  """
  The original subscription contract.
  """
  originalContract: SubscriptionContract

  """
  Available Shipping Options for a given delivery address. Returns NULL for pending requests.
  """
  shippingOptions(
    """
    The address to delivery the subscription contract to.
    """
    deliveryAddress: MailingAddressInput
  ): SubscriptionShippingOptionResult @deprecated(reason: "Use `deliveryOptions` instead.")

  """
  The current status of the subscription contract.
  """
  status: SubscriptionContractSubscriptionStatus
}

"""
Represents a Subscription Line.
"""
type SubscriptionLine {
  """
  The price per unit for the subscription line in the contract's currency.
  """
  currentPrice: MoneyV2!

  """
  List of custom attributes associated to the line item.
  """
  customAttributes: [Attribute!]!

  """
  Discount allocations.
  """
  discountAllocations: [SubscriptionDiscountAllocation!]!

  """
  The unique identifier.
  """
  id: ID!

  """
  Total line price including all discounts.
  """
  lineDiscountedPrice: MoneyV2!

  """
  Describe the price changes of the line over time.
  """
  pricingPolicy: SubscriptionPricingPolicy

  """
  The product id associated with the subscription line.
  """
  productId: ID

  """
  The quantity of the unit selected for the subscription line.
  """
  quantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  The selling plan ID associated to the line.

  Indicates which selling plan was used to create this
  contract line initially. The selling plan ID is also used to
  find the associated delivery profile.

  The subscription contract, subscription line, or selling plan might have
  changed. As a result, the selling plan's attributes might not
  match the information on the contract.
  """
  sellingPlanId: ID

  """
  The selling plan name associated to the line. This name describes
  the order line items created from this subscription line
  for both merchants and customers.

  The value can be different from the selling plan's name, because both
  the selling plan's name and the subscription line's selling_plan_name
  attribute can be updated independently.
  """
  sellingPlanName: String

  """
  Variant SKU number of the item associated with the subscription line.
  """
  sku: String

  """
  Whether the variant is taxable.
  """
  taxable: Boolean!

  """
  Product title of the item associated with the subscription line.
  """
  title: String!

  """
  The product variant id associated with the subscription line.
  """
  variantId: ID

  """
  The image associated with the line item's variant or product.
  """
  variantImage: Image

  """
  Product variant title of the item associated with the subscription line.
  """
  variantTitle: String
}

"""
An auto-generated type for paginating through multiple SubscriptionLines.
"""
type SubscriptionLineConnection {
  """
  A list of edges.
  """
  edges: [SubscriptionLineEdge!]!

  """
  A list of the nodes contained in SubscriptionLineEdge.
  """
  nodes: [SubscriptionLine!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionLine and a cursor during pagination.
"""
type SubscriptionLineEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SubscriptionLineEdge.
  """
  node: SubscriptionLine!
}

"""
A local delivery option for a subscription contract.
"""
type SubscriptionLocalDeliveryOption {
  """
  The code of the local delivery option.
  """
  code: String!

  """
  The description of the local delivery option.
  """
  description: String

  """
  Whether a phone number is required for the local delivery option.
  """
  phoneRequired: Boolean!

  """
  The presentment title of the local delivery option.
  """
  presentmentTitle: String

  """
  The price of the local delivery option.
  """
  price: MoneyV2

  """
  The title of the local delivery option.
  """
  title: String!
}

"""
Represents a Mailing Address on a Subscription.
"""
type SubscriptionMailingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the customer's company or organization.
  """
  company: String

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.

  For example, US.
  """
  countryCode: CountryCode

  """
  The first name of the customer.
  """
  firstName: String

  """
  The last name of the customer.
  """
  lastName: String

  """
  The full name of the customer, based on firstName and lastName.
  """
  name: String

  """
  A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The two-letter code for the region.

  For example, ON.
  """
  provinceCode: String

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
Custom subscription discount.
"""
type SubscriptionManualDiscount {
  """
  Entitled line items used to apply the subscription discount on.
  """
  entitledLines: SubscriptionDiscountEntitledLines!

  """
  The unique identifier.
  """
  id: ID!

  """
  The maximum number of times the subscription discount will be applied on orders.
  """
  recurringCycleLimit: Int

  """
  The reason that the discount on the subscription draft is rejected.
  """
  rejectionReason: SubscriptionDiscountRejectionReason

  """
  Type of line the discount applies on.
  """
  targetType: DiscountTargetType!

  """
  The title associated with the subscription discount.
  """
  title: String

  """
  The type of the subscription discount.
  """
  type: DiscountType!

  """
  The number of times the discount was applied.
  """
  usageCount: Int!

  """
  The value of the subscription discount.
  """
  value: SubscriptionDiscountValue!
}

"""
An auto-generated type for paginating through multiple SubscriptionManualDiscounts.
"""
type SubscriptionManualDiscountConnection {
  """
  A list of edges.
  """
  edges: [SubscriptionManualDiscountEdge!]!

  """
  A list of the nodes contained in SubscriptionManualDiscountEdge.
  """
  nodes: [SubscriptionManualDiscount!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.
"""
type SubscriptionManualDiscountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of SubscriptionManualDiscountEdge.
  """
  node: SubscriptionManualDiscount!
}

"""
A pickup option to deliver a subscription contract.
"""
type SubscriptionPickupOption {
  """
  The code of the pickup option.
  """
  code: String!

  """
  The description of the pickup option.
  """
  description: String

  """
  The pickup location.
  """
  location: Location!

  """
  Whether a phone number is required for the pickup option.
  """
  phoneRequired: Boolean!

  """
  The estimated amount of time it takes for the pickup to be ready. For example, "Usually ready in 24 hours".).
  """
  pickupTime: String!

  """
  The presentment title of the pickup option.
  """
  presentmentTitle: String

  """
  The price of the pickup option.
  """
  price: MoneyV2

  """
  The title of the pickup option.
  """
  title: String!
}

"""
Represents a Subscription Line Pricing Policy.
"""
type SubscriptionPricingPolicy {
  """
  The base price per unit for the subscription line in the contract's currency.
  """
  basePrice: MoneyV2!

  """
  The adjustments per cycle for the subscription line.
  """
  cycleDiscounts: [SubscriptionCyclePriceAdjustment!]!
}

"""
A shipping option to deliver a subscription contract.
"""
type SubscriptionShippingOption {
  """
  The carrier service that is providing this shipping option.
  This field isn't currently supported and returns null.
  """
  carrierService: DeliveryCarrierService

  """
  The code of the shipping option.
  """
  code: String!

  """
  The description of the shipping option.
  """
  description: String

  """
  If a phone number is required for the shipping option.
  """
  phoneRequired: Boolean

  """
  The presentment title of the shipping option.
  """
  presentmentTitle: String

  """
  The price of the shipping option.
  """
  price: MoneyV2

  """
  The title of the shipping option.
  """
  title: String!
}

"""
The result of the query to fetch shipping options for the subscription contract.
"""
union SubscriptionShippingOptionResult = SubscriptionShippingOptionResultFailure | SubscriptionShippingOptionResultSuccess

"""
Failure determining available shipping options for delivery of a subscription contract.
"""
type SubscriptionShippingOptionResultFailure {
  """
  Failure reason.
  """
  message: String
}

"""
A shipping option for delivery of a subscription contract.
"""
type SubscriptionShippingOptionResultSuccess {
  """
  Available shipping options.
  """
  shippingOptions: [SubscriptionShippingOption!]!
}

"""
A suggested transaction. Suggested transaction are usually used in the context of refunds
and exchanges.
"""
type SuggestedOrderTransaction {
  """
  The masked account number associated with the payment method.
  """
  accountNumber: String

  """
  The amount of the transaction.
  """
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The amount and currency of the suggested order transaction in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The human-readable payment gateway name suggested to process the transaction.
  """
  formattedGateway: String

  """
  The suggested payment gateway used to process the transaction.
  """
  gateway: String

  """
  Specifies the kind of the suggested order transaction.
  """
  kind: SuggestedOrderTransactionKind!

  """
  Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
  """
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableSet` instead.")

  """
  Specifies the available amount to refund on the gateway in shop and
  presentment currencies. Only available within SuggestedRefund.
  """
  maximumRefundableSet: MoneyBag

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: OrderTransaction
}

"""
Specifies the kind of the suggested order transaction.
"""
enum SuggestedOrderTransactionKind {
  """
  A suggested refund transaction for an order.
  """
  SUGGESTED_REFUND
}

"""
Represents a refund suggested by Shopify based on the items being reimbursed.
You can then use the suggested refund object to generate an actual refund.
"""
type SuggestedRefund {
  """
  The total monetary value to be refunded.
  """
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The total monetary value to be refunded in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The sum of all the discounted prices of the line items being refunded.
  """
  discountedSubtotalSet: MoneyBag!

  """
  The total monetary value available to refund.
  """
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead.")

  """
  The total monetary value available to refund in shop and presentment currencies.
  """
  maximumRefundableSet: MoneyBag!

  """
  A list of duties to be refunded from the order.
  """
  refundDuties: [RefundDuty!]!

  """
  A list of line items to be refunded, along with restock instructions.
  """
  refundLineItems: [RefundLineItem!]!

  """
  The shipping costs to be refunded from the order.
  """
  shipping: ShippingRefund!

  """
  The sum of all the prices of the line items being refunded.
  """
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead.")

  """
  The sum of all the prices of the line items being refunded in shop and presentment currencies.
  """
  subtotalSet: MoneyBag!

  """
  A list of suggested order transactions.
  """
  suggestedTransactions: [SuggestedOrderTransaction!]!

  """
  The total cart discount amount that was applied to all line items in this refund.
  """
  totalCartDiscountAmountSet: MoneyBag!

  """
  The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalDutiesSet: MoneyBag!

  """
  The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalTaxSet: MoneyBag!

  """
  The sum of the taxes being refunded from the order. The value must be positive.
  """
  totalTaxes: Money! @deprecated(reason: "Use `totalTaxSet` instead.")

  """
  The sum of all tips being refunded from the order.
  """
  totalTips: MoneyV2!
}

"""
Represents a return refund suggested by Shopify based on the items being
reimbursed. You can then use the suggested refund object to generate an actual
refund for the return.
"""
type SuggestedReturnRefund {
  """
  The total monetary value to be refunded in shop and presentment currencies.
  """
  amount: MoneyBag!

  """
  The sum of all the discounted prices of the line items being refunded.
  """
  discountedSubtotal: MoneyBag!

  """
  The total monetary value available to refund in shop and presentment currencies.
  """
  maximumRefundable: MoneyBag!

  """
  A list of duties to be refunded from the order.
  """
  refundDuties: [RefundDuty!]!

  """
  The shipping costs to be refunded from the order.
  """
  shipping: ShippingRefund!

  """
  The sum of all the prices of the line items being refunded in shop and presentment currencies.
  """
  subtotal: MoneyBag!

  """
  A list of suggested order transactions.
  """
  suggestedTransactions: [SuggestedOrderTransaction!]!

  """
  The total cart discount amount that was applied to all line items in this refund.
  """
  totalCartDiscountAmount: MoneyBag!

  """
  The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalDuties: MoneyBag!

  """
  The sum of the taxes being refunded in shop and presentment currencies. The value must be positive.
  """
  totalTax: MoneyBag!
}

"""
Represents one of the methods with which the unfulfilled line items can be fulfilled.
"""
type SupportedFulfillmentMethod {
  """
  The action value.
  """
  action: FulfillmentAction!

  """
  Human-readable name for the action.
  """
  title: String!
}

"""
Available customer tax exemptions.
"""
enum TaxExemption {
  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia.
  """
  CA_BC_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia.
  """
  CA_BC_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia.
  """
  CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia.
  """
  CA_BC_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia.
  """
  CA_BC_SUB_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada.
  """
  CA_DIPLOMAT_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba.
  """
  CA_MB_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba.
  """
  CA_MB_FARMER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba.
  """
  CA_MB_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia.
  """
  CA_NS_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia.
  """
  CA_NS_FARMER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario.
  """
  CA_ON_PURCHASE_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island.
  """
  CA_PE_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan.
  """
  CA_SK_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan.
  """
  CA_SK_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan.
  """
  CA_SK_FARMER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan.
  """
  CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan.
  """
  CA_SK_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan.
  """
  CA_SK_SUB_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada.
  """
  CA_STATUS_CARD_EXEMPTION

  """
  This customer is exempt from VAT for purchases within the EU that is shipping from outside of customer's country.
  """
  EU_REVERSE_CHARGE_EXEMPTION_RULE

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alaska.
  """
  US_AK_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alabama.
  """
  US_AL_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arkansas.
  """
  US_AR_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arizona.
  """
  US_AZ_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in California.
  """
  US_CA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Colorado.
  """
  US_CO_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Connecticut.
  """
  US_CT_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington DC.
  """
  US_DC_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Delaware.
  """
  US_DE_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Florida.
  """
  US_FL_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Georgia.
  """
  US_GA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Hawaii.
  """
  US_HI_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Iowa.
  """
  US_IA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Idaho.
  """
  US_ID_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Illinois.
  """
  US_IL_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Indiana.
  """
  US_IN_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kansas.
  """
  US_KS_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kentucky.
  """
  US_KY_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Louisiana.
  """
  US_LA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Massachusetts.
  """
  US_MA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maryland.
  """
  US_MD_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maine.
  """
  US_ME_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Michigan.
  """
  US_MI_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Minnesota.
  """
  US_MN_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Missouri.
  """
  US_MO_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Mississippi.
  """
  US_MS_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Montana.
  """
  US_MT_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Carolina.
  """
  US_NC_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Dakota.
  """
  US_ND_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nebraska.
  """
  US_NE_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Hampshire.
  """
  US_NH_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Jersey.
  """
  US_NJ_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Mexico.
  """
  US_NM_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nevada.
  """
  US_NV_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New York.
  """
  US_NY_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Ohio.
  """
  US_OH_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oklahoma.
  """
  US_OK_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oregon.
  """
  US_OR_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Pennsylvania.
  """
  US_PA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Rhode Island.
  """
  US_RI_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Carolina.
  """
  US_SC_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Dakota.
  """
  US_SD_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Tennessee.
  """
  US_TN_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Texas.
  """
  US_TX_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Utah.
  """
  US_UT_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Virginia.
  """
  US_VA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Vermont.
  """
  US_VT_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington.
  """
  US_WA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wisconsin.
  """
  US_WI_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in West Virginia.
  """
  US_WV_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wyoming.
  """
  US_WY_RESELLER_EXEMPTION
}

"""
Detailed information for tax exemptions that can be applied to customers.
"""
type TaxExemptionDetails {
  """
  Whether the tax exemption can be applied on tax lines.
  """
  applicable: Boolean!

  """
  An identifier that groups exemptions.
  """
  exemptionGroup: String!

  """
  The translated display name of the tax exemption group.
  """
  exemptionGroupName: String!

  """
  The translated display name of the tax exemption when grouped.
  """
  groupedName: String!

  """
  The translated display name of the tax exemption.
  """
  name: String!

  """
  The tax region this exemption applies to, if null it applies in all regions.
  """
  taxRegion: CountryCode @deprecated(reason: "Use `taxRegionCode` instead.")

  """
  The unique type of the exemption.
  """
  type: TaxExemption!
}

"""
Represents a single tax applied to the associated line item.
"""
type TaxLine {
  """
  Whether the channel that submitted the tax line is liable for remitting. A
  value of null indicates unknown liability for this tax line.
  """
  channelLiable: Boolean

  """
  The amount of tax, in shop currency, after discounts and before returns.
  """
  price: Money! @deprecated(reason: "Use `priceSet` instead.")

  """
  The amount of tax, in shop and presentment currencies, after discounts and before returns.
  """
  priceSet: MoneyBag!

  """
  The proportion of the line item price that the tax represents as a decimal.
  """
  rate: Float

  """
  The proportion of the line item price that the tax represents as a percentage.
  """
  ratePercentage: Float

  """
  The name of the tax.
  """
  title: String!
}

"""
Represents a tax override for a country, or region within a country, on a collection of products or shipping.
"""
type TaxOverride implements Node {
  """
  Collection associated with this tax override.
  """
  collection: Collection

  """
  The country code of the country this tax override applies to.
  """
  countryCode: CountryCode!

  """
  The date and time when the tax override was created.
  """
  createdAt: DateTime!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Whether the override applies to the products in the collection or on shipping them.
  """
  isShipping: Boolean!

  """
  The regions and their rates associated with this tax override.
  """
  taxOverrideRegions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TaxOverrideRegionConnection!

  """
  The date and time when the tax override was last modified.
  """
  updatedAt: DateTime!
}

"""
Represents a tax override region.
"""
type TaxOverrideRegion implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The rate at which to override.
  """
  rate: Float!

  """
  Specifies zone that the tax override region applies to.
  """
  zone: TaxOverrideZone!
}

"""
An auto-generated type for paginating through multiple TaxOverrideRegions.
"""
type TaxOverrideRegionConnection {
  """
  A list of edges.
  """
  edges: [TaxOverrideRegionEdge!]!

  """
  A list of the nodes contained in TaxOverrideRegionEdge.
  """
  nodes: [TaxOverrideRegion!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one TaxOverrideRegion and a cursor during pagination.
"""
type TaxOverrideRegionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of TaxOverrideRegionEdge.
  """
  node: TaxOverrideRegion!
}

"""
Represents a tax override region.
"""
type TaxOverrideZone {
  """
  The ISO 3166-2 code for the tax override zone.
  """
  code: String

  """
  The ID of the task. A unique identifier used for analytics.
  """
  id: ID!

  """
  The name of the zone being overridden.
  """
  name: String!

  """
  The rate applied to the zone.
  """
  rate: Float!

  """
  The type zone being overridden.
  """
  zoneType: TaxOverrideZoneType!
}

"""
TaxOverrideRegion zone describes the geopolitical area the tax override applies to.
"""
enum TaxOverrideZoneType {
  """
  City.
  """
  CITY

  """
  Country.
  """
  COUNTRY

  """
  County.
  """
  COUNTY

  """
  Province.
  """
  PROVINCE

  """
  State.
  """
  STATE
}

"""
Represents a tax service for a shop.
"""
type TaxService implements Node {
  """
  Whether the shop has activated this tax service.
  """
  active: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The name of the tax service.
  """
  name: String!

  """
  Whether the shop is using a sandbox account.
  """
  sandbox: Boolean!

  """
  Url of the tax service uses to send tax requests.
  """
  url: URL!
}

"""
A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always
represents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions
for reconciling a shop's cash flow. A TenderTransaction is immutable once created.
"""
type TenderTransaction implements Node {
  """
  The amount and currency of the tender transaction.
  """
  amount: MoneyV2!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Information about the payment method used for the transaction.
  """
  paymentMethod: String

  """
  Date and time when the transaction was processed.
  """
  processedAt: DateTime

  """
  The remote gateway reference associated with the tender transaction.
  """
  remoteReference: String

  """
  Whether the transaction is a test transaction.
  """
  test: Boolean!

  """
  Information about the payment instrument used for the transaction.
  """
  transactionDetails: TenderTransactionDetails

  """
  The staff member who performed the transaction.
  """
  user: StaffMember
}

"""
Information about the credit card used for this transaction.
"""
type TenderTransactionCreditCardDetails {
  """
  The name of the company that issued the customer's credit card. Example: `Visa`.
  """
  creditCardCompany: String

  """
  The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234`
  """
  creditCardNumber: String
}

"""
Information about the payment instrument used for this transaction.
"""
union TenderTransactionDetails = TenderTransactionCreditCardDetails

"""
A theme for display on the storefront.
"""
type Theme implements LegacyInteroperability & Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The name of the theme.
  """
  name: String!
  prefix: String!

  """
  The screenshot for the desktop view of the theme.
  """
  screenshot(
    """
    The height of the viewport used to capture the screenshot.
    """
    height: Int

    """
    The desired height of the screenshot in pixels.
    """
    resizeHeight: Int

    """
    The desired width of the screenshot in pixels.
    """
    resizeWidth: Int

    """
    The width of the viewport used to capture the screenshot.
    """
    width: Int
  ): URL
}

"""
Represent the 3DS credential for Cardinal.
"""
type ThreeDSecureCardinalCredential {
  """
  The unique identifier representing the API Key.
  """
  identifier: PaymentProviderCredential!

  """
  The unique organizational unit for which the cardinal request is being processed for.
  """
  orgUnit: PaymentProviderCredential!
}

"""
3D Secure setting values for the gateway.
"""
enum ThreeDSecureSetting {
  """
  3D Secure is off.
  """
  DISABLED

  """
  3D Secure is on.
  """
  ENABLED
}

"""
A sale associated with a tip.
"""
type TipSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique identifier for the sale.
  """
  id: ID!

  """
  The line item for the associated sale.
  """
  lineItem: LineItem!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
Transaction fee related to an order transaction.
"""
type TransactionFee implements Node {
  """
  Amount of the fee.
  """
  amount: MoneyV2!

  """
  Flat rate charge for a transaction.
  """
  flatFee: MoneyV2!

  """
  Name of the credit card flat fee.
  """
  flatFeeName: String

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  Percentage charge.
  """
  rate: Decimal!

  """
  Name of the credit card rate.
  """
  rateName: String

  """
  Tax amount charged on the fee.
  """
  taxAmount: MoneyV2!

  """
  Name of the type of fee.
  """
  type: String!
}

"""
Represents a typed custom attribute.
"""
type TypedAttribute {
  """
  Key or name of the attribute.
  """
  key: String!

  """
  Value of the attribute.
  """
  value: String!
}

"""
Represents an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
[RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.

For example, `"https://johns-apparel.myshopify.com"` is a valid URL. It includes a scheme (`https`) and a host
(`johns-apparel.myshopify.com`).
"""
scalar URL

"""
Represents a set of UTM parameters.
"""
type UTMParameters {
  """
  The name of a marketing campaign.
  """
  campaign: String

  """
  Identifies specific content in a marketing campaign. Used to differentiate
  between similar content or links in a marketing campaign to determine which is
  the most effective.
  """
  content: String

  """
  The medium of a marketing campaign, such as a banner or email newsletter.
  """
  medium: String

  """
  The source of traffic to the merchant's store, such as Google or an email newsletter.
  """
  source: String

  """
  Paid search terms used by a marketing campaign.
  """
  term: String
}

"""
Represents a line item with remaining fulfillable quantity.
"""
type UnfulfilledLineItem {
  """
  The fulfillable quantity of the original order line item.
  """
  fulfillableQuantity: Int!

  """
  The original order line item.
  """
  lineItem: LineItem!
}

"""
An auto-generated type for paginating through multiple UnfulfilledLineItems.
"""
type UnfulfilledLineItemConnection {
  """
  A list of edges.
  """
  edges: [UnfulfilledLineItemEdge!]!

  """
  A list of the nodes contained in UnfulfilledLineItemEdge.
  """
  nodes: [UnfulfilledLineItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one UnfulfilledLineItem and a cursor during pagination.
"""
type UnfulfilledLineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of UnfulfilledLineItemEdge.
  """
  node: UnfulfilledLineItem!
}

"""
Represents a group of unfulfilled line items in a location and the set of fulfillment actions that can be taken
on the items.
"""
type UnfulfilledLineItemsByLocation implements Node {
  """
  The fulfillment service type that will be used to fulfill the line items.
  """
  fulfillmentServiceType: FulfillmentServiceType!

  """
  Indicates if at least one or more line items can be reassigned to a different location.
  """
  hasReassignableLineItems: Boolean!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The location where the line items will be fulfilled.
  """
  location: Location!

  """
  Whether the merchant is permitted to print packing slips for this group.
  """
  merchantPackingSlipPrintable: Boolean!

  """
  A warning that indicates whether this group has any items that are not refundable.
  """
  refundWarning: UnfulfilledLineItemsRefundWarning @deprecated(reason: "This field will be removed, we will no longer allow refunding in progress items in the UI.")

  """
  Whether any of the line items require shipping.
  """
  requiresShipping: Boolean!

  """
  Action that can be performed on this group.
  """
  supportedFulfillmentMethods: [SupportedFulfillmentMethod!]!

  """
  List of line items that can be fulfilled together in a single fulfillment.
  """
  unfulfilledLineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UnfulfilledLineItemConnection!
}

"""
An auto-generated type for paginating through multiple UnfulfilledLineItemsByLocations.
"""
type UnfulfilledLineItemsByLocationConnection {
  """
  A list of edges.
  """
  edges: [UnfulfilledLineItemsByLocationEdge!]!

  """
  A list of the nodes contained in UnfulfilledLineItemsByLocationEdge.
  """
  nodes: [UnfulfilledLineItemsByLocation!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one UnfulfilledLineItemsByLocation and a cursor during pagination.
"""
type UnfulfilledLineItemsByLocationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of UnfulfilledLineItemsByLocationEdge.
  """
  node: UnfulfilledLineItemsByLocation!
}

"""
Represents a pre-warning displayed to the user when refunding line items.
"""
type UnfulfilledLineItemsRefundWarning {
  """
  A list of line items and quantities that are not refundable.
  """
  lineItemsDetails: [LineItemRefundWarningDetails!]! @deprecated(reason: "This field will be removed, we will no longer allow refunding in progress items in the UI.")

  """
  The refund warning message.
  """
  message: String! @deprecated(reason: "This field will be removed, we will no longer allow refunding in progress items in the UI.")
}

"""
Systems of weights and measures.
"""
enum UnitSystem {
  """
  Imperial system of weights and measures.
  """
  IMPERIAL_SYSTEM

  """
  Metric system of weights and measures.
  """
  METRIC_SYSTEM
}

"""
Possible strategies for handling unprotected orders.
"""
enum UnprotectedOrderAction {
  """
  Automatically cancel unprotected orders.
  """
  AUTO_CANCEL_UNPROTECTED_ORDERS @deprecated(reason: "No longer supported.")

  """
  Automatically capture unprotected orders.
  """
  AUTO_CAPTURE_UNPROTECTED_ORDERS

  """
  Action has not been set because Fraud Protect is not enabled.
  """
  NOT_SET

  """
  Take no special action for unprotected orders.
  """
  NO_ACTION_FOR_UNPROTECTED_ORDERS
}

"""
An unsigned 64-bit integer. Represents whole numeric values between 0 and 2^64 - 1 encoded as a string of base-10 digits.

Example value: `"50"`.
"""
scalar UnsignedInt64

"""
The URL redirect for the online store.
"""
type UrlRedirect implements Node {
  """
  The ID of the URL redirect.
  """
  id: ID!

  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String!

  """
  The target location where the user will be redirected to.
  """
  target: String!
}

"""
A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object
into the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.

For more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.
"""
type UrlRedirectImport implements Node {
  """
  The number of rows in the file.
  """
  count: Int

  """
  The number of redirects created from the import.
  """
  createdCount: Int

  """
  The number of redirects that failed to be imported.
  """
  failedCount: Int

  """
  Whether the import is finished.
  """
  finished: Boolean!

  """
  The date and time when the import finished.
  """
  finishedAt: DateTime

  """
  The ID of the `UrlRedirectImport` object.
  """
  id: ID!

  """
  A list of up to three previews of the URL redirects to be imported.
  """
  previewRedirects: [UrlRedirectImportPreview!]!

  """
  The number of redirects updated during the import.
  """
  updatedCount: Int
}

"""
A preview of a URL redirect import row.
"""
type UrlRedirectImportPreview {
  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String!

  """
  The target location where the user will be redirected to.
  """
  target: String!
}

"""
Usage costs per billing interval.
"""
type UsageAppPlan {
  """
  The total usage charges for billing interval.
  """
  balanceUsed: MoneyV2!

  """
  The capped amount is the limit a customer can be charged for usage based billing.
  """
  cappedAmount: MoneyV2!
}

"""
Represents an error in the input of a mutation.
"""
type UserError implements DisplayableError {
  """
  The path to the input field that caused the error.
  """
  field: [String!]

  """
  The error message.
  """
  message: String!
}

"""
An input that represents a product with variant.
"""
input VariantLineItemInput {
  """
  Variant id for the variant on the line item.
  """
  variantId: ID!
}

"""
Represents a credit card payment instrument.
"""
type VaultCreditCard {
  """
  The billing address of the card.
  """
  billingAddress: CustomerCreditCardBillingAddress

  """
  The brand for the card.
  """
  brand: String!

  """
  Whether the card has been expired.
  """
  expired: Boolean!

  """
  The expiry month of the card.
  """
  expiryMonth: Int!

  """
  The expiry year of the card.
  """
  expiryYear: Int!

  """
  The last four digits for the card.
  """
  lastDigits: String!

  """
  The name of the card holder.
  """
  name: String!
}

"""
Represents a paypal billing agreement payment instrument.
"""
type VaultPaypalBillingAgreement {
  """
  Whether the paypal billing agreement is inactive.
  """
  inactive: Boolean!

  """
  The paypal account name.
  """
  name: String!

  """
  The paypal account email address.
  """
  paypalAccountEmail: String!
}

"""
Representation of 3d vectors and points. It can represent
either the coordinates of a point in space, a direction, or
size. Presented as an object with three floating-point values.
"""
type Vector3 {
  """
  The x coordinate of Vector3.
  """
  x: Float!

  """
  The y coordinate of Vector3.
  """
  y: Float!

  """
  The z coordinate of Vector3.
  """
  z: Float!
}

"""
Represents a Shopify hosted video.
"""
type Video implements File & Media & Node {
  """
  A word or phrase to share the nature or contents of a media.
  """
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """
  The display name of the file created.
  """
  displayName: String

  """
  The video's duration in milliseconds. This value is `null` unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  duration: Int

  """
  Any errors that have occurred on the file.
  """
  fileErrors: [FileError!]!

  """
  The status of the file.
  """
  fileStatus: FileStatus!

  """
  The video's filename.
  """
  filename: String!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The media content type.
  """
  mediaContentType: MediaContentType!

  """
  Any errors which have occurred on the media.
  """
  mediaErrors: [MediaError!]!

  """
  The warnings attached to the media.
  """
  mediaWarnings: [MediaWarning!]!

  """
  The video's original source. This value is `null` unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  originalSource: VideoSource

  """
  The position of the media object.
  """
  position: Int!

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  The preview image for the media.
  """
  previewImage: Image @deprecated(reason: "Use `preview` instead.")

  """
  The video's sources. This value is empty unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  sources: [VideoSource!]!

  """
  Current status of the media.
  """
  status: MediaStatus!
}

"""
Represents a source for a Shopify hosted video.

Types of sources include the original video, lower resolution versions of the original video,
and an m3u8 playlist file.

Only [videos](https://shopify.dev/api/admin-graphql/latest/objects/video) with a status field
of [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready) have sources.
"""
type VideoSource {
  """
  The video source's file size in bytes.
  """
  fileSize: Int

  """
  The video source's file format extension.
  """
  format: String!

  """
  The video source's height.
  """
  height: Int!

  """
  The video source's MIME type.
  """
  mimeType: String!

  """
  The video source's URL.
  """
  url: String!

  """
  The video source's width.
  """
  width: Int!
}

"""
A web pixel settings.
"""
type WebPixel implements Node {
  """
  A globally-unique identifier.
  """
  id: ID!

  """
  The settings JSON object for the web pixel.
  """
  settings: JSON!
}

"""
An Amazon EventBridge partner event source to which webhook subscriptions publish events.
"""
type WebhookEventBridgeEndpoint {
  """
  The ARN of this EventBridge partner event source.
  """
  arn: ARN!
}

"""
An HTTPS endpoint to which webhook subscriptions send POST requests.
"""
type WebhookHttpEndpoint {
  """
  The URL to which the webhooks events are sent.
  """
  callbackUrl: URL!
}

"""
A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.
"""
type WebhookPubSubEndpoint {
  """
  The Google Cloud Pub/Sub project ID.
  """
  pubSubProject: String!

  """
  The Google Cloud Pub/Sub topic ID.
  """
  pubSubTopic: String!
}

"""
A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.
It describes the topic that the app wants to receive, and a destination where
Shopify should send webhooks of the specified topic.
When an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.
Learn more about the [webhooks system](https://shopify.dev/apps/webhooks).
"""
type WebhookSubscription implements LegacyInteroperability & Node {
  """
  The destination URI to which the webhook subscription will send a message when an event occurs.
  """
  callbackUrl: URL! @deprecated(reason: "Use `endpoint` instead.")

  """
  The date and time when the webhook subscription was created.
  """
  createdAt: DateTime!

  """
  The endpoint to which the webhook subscription will send events.
  """
  endpoint: WebhookSubscriptionEndpoint!

  """
  The format in which the webhook subscription should send the data.
  """
  format: WebhookSubscriptionFormat!

  """
  A globally-unique identifier.
  """
  id: ID!

  """
  An optional array of top-level resource fields that should be serialized and
  sent in the webhook message. If null, then all fields will be sent.
  """
  includeFields: [String!]!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]!

  """
  The list of namespaces for private metafields that should be included in the webhook subscription.
  """
  privateMetafieldNamespaces: [String!]!

  """
  The type of event that triggers the webhook. The topic determines when the
  webhook subscription sends a webhook, as well as what class of data object
  that webhook contains.
  """
  topic: WebhookSubscriptionTopic!

  """
  The date and time when the webhook subscription was updated.
  """
  updatedAt: DateTime!
}

"""
An endpoint to which webhook subscriptions send webhooks events.
"""
union WebhookSubscriptionEndpoint = WebhookEventBridgeEndpoint | WebhookHttpEndpoint | WebhookPubSubEndpoint

"""
The supported formats for webhook subscriptions.
"""
enum WebhookSubscriptionFormat {
  JSON
  XML
}

"""
The supported topics for webhook subscriptions. You can use webhook subscriptions to receive
notifications about particular events in a shop.

You don't create webhook subscriptions to
[mandatory webhooks](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks).
Instead, you configure mandatory webhooks in your Partner Dashboard as part of your app setup.
"""
enum WebhookSubscriptionTopic {
  """
  The webhook topic for `app_purchases_one_time/update` events. Occurs whenever a one-time app charge is updated.
  """
  APP_PURCHASES_ONE_TIME_UPDATE

  """
  The webhook topic for `app_subscriptions/approaching_capped_amount` events.
  Occurs when the balance used on an app subscription crosses 90% of the capped amount.
  """
  APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT

  """
  The webhook topic for `app_subscriptions/update` events. Occurs whenever an app subscription is updated.
  """
  APP_SUBSCRIPTIONS_UPDATE

  """
  The webhook topic for `app/uninstalled` events. Occurs whenever a shop has uninstalled the app.
  """
  APP_UNINSTALLED

  """
  The webhook topic for `attributed_sessions/first` events. Occurs whenever an
  order with a "first" attributed session is attributed. Requires the
  `read_marketing_events` scope.
  """
  ATTRIBUTED_SESSIONS_FIRST

  """
  The webhook topic for `attributed_sessions/last` events. Occurs whenever an
  order with a "last" attributed session is attributed. Requires the
  `read_marketing_events` scope.
  """
  ATTRIBUTED_SESSIONS_LAST

  """
  The webhook topic for `audit_events/admin_api_activity` events. Triggers for
  each auditable Admin API request. This topic is limited to one active
  subscription per Plus store and requires the use of Google Cloud Pub/Sub or
  AWS EventBridge. Requires the `read_audit_events` scope.
  """
  AUDIT_EVENTS_ADMIN_API_ACTIVITY

  """
  The webhook topic for `bulk_operations/finish` events. Notifies when a Bulk Operation finishes.
  """
  BULK_OPERATIONS_FINISH

  """
  The webhook topic for `carts/create` events. Occurs when a cart is created in
  the online store. Other types of carts aren't supported. For example, the
  webhook doesn't support carts that are created in a custom storefront.
  Requires the `read_orders` scope.
  """
  CARTS_CREATE

  """
  The webhook topic for `carts/update` events. Occurs when a cart is updated in
  the online store. Other types of carts aren't supported. For example, the
  webhook doesn't support carts that are updated in a custom storefront.
  Requires the `read_orders` scope.
  """
  CARTS_UPDATE

  """
  The webhook topic for `channels/delete` events. Occurs whenever a channel is
  deleted. Requires the `read_publications` scope.
  """
  CHANNELS_DELETE

  """
  The webhook topic for `checkouts/create` events. Occurs whenever a checkout is created. Requires the `read_orders` scope.
  """
  CHECKOUTS_CREATE

  """
  The webhook topic for `checkouts/delete` events. Occurs whenever a checkout is deleted. Requires the `read_orders` scope.
  """
  CHECKOUTS_DELETE

  """
  The webhook topic for `checkouts/update` events. Occurs whenever a checkout is updated. Requires the `read_orders` scope.
  """
  CHECKOUTS_UPDATE

  """
  The webhook topic for `collections/create` events. Occurs whenever a
  collection is created. Requires the `read_products` scope.
  """
  COLLECTIONS_CREATE

  """
  The webhook topic for `collections/delete` events. Occurs whenever a
  collection is deleted. Requires the `read_products` scope.
  """
  COLLECTIONS_DELETE

  """
  The webhook topic for `collections/update` events. Occurs whenever a
  collection is updated, including whenever products are added or removed from
  the collection. Occurs once if multiple products are added or removed from a
  collection at the same time. Requires the `read_products` scope.
  """
  COLLECTIONS_UPDATE

  """
  The webhook topic for `collection_listings/add` events. Occurs whenever a
  collection listing is added. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_ADD

  """
  The webhook topic for `collection_listings/remove` events. Occurs whenever a
  collection listing is removed. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_REMOVE

  """
  The webhook topic for `collection_listings/update` events. Occurs whenever a
  collection listing is updated. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_UPDATE

  """
  The webhook topic for `collection_publications/create` events. Occurs whenever
  a collection publication listing is created. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_CREATE

  """
  The webhook topic for `collection_publications/delete` events. Occurs whenever
  a collection publication listing is deleted. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_DELETE

  """
  The webhook topic for `collection_publications/update` events. Occurs whenever
  a collection publication listing is updated. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_UPDATE

  """
  The webhook topic for `customers/create` events. Occurs whenever a customer is
  created. Requires the `read_customers` scope.
  """
  CUSTOMERS_CREATE

  """
  The webhook topic for `customers/delete` events. Occurs whenever a customer is
  deleted. Requires the `read_customers` scope.
  """
  CUSTOMERS_DELETE

  """
  The webhook topic for `customers/disable` events. Occurs whenever a customer
  account is disabled. Requires the `read_customers` scope.
  """
  CUSTOMERS_DISABLE

  """
  The webhook topic for `customers/enable` events. Occurs whenever a customer
  account is enabled. Requires the `read_customers` scope.
  """
  CUSTOMERS_ENABLE

  """
  The webhook topic for `customers_marketing_consent/update` events. Occurs
  whenever a customer's marketing consent is updated. Requires the
  `read_customers` scope.
  """
  CUSTOMERS_MARKETING_CONSENT_UPDATE

  """
  The webhook topic for `customers/update` events. Occurs whenever a customer is
  updated. Requires the `read_customers` scope.
  """
  CUSTOMERS_UPDATE

  """
  The webhook topic for `customer_groups/create` events. Occurs whenever a
  customer saved search is created. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_CREATE

  """
  The webhook topic for `customer_groups/delete` events. Occurs whenever a
  customer saved search is deleted. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_DELETE

  """
  The webhook topic for `customer_groups/update` events. Occurs whenever a
  customer saved search is updated. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_UPDATE

  """
  The webhook topic for `customer_payment_methods/create` events. Occurs
  whenever a customer payment method is created. Requires the
  `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_CREATE

  """
  The webhook topic for `customer_payment_methods/revoke` events. Occurs
  whenever a customer payment method is revoked. Requires the
  `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_REVOKE

  """
  The webhook topic for `customer_payment_methods/update` events. Occurs
  whenever a customer payment method is updated. Requires the
  `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_UPDATE

  """
  The webhook topic for `disputes/create` events. Occurs whenever a dispute is
  created. Requires the `read_shopify_payments_disputes` scope.
  """
  DISPUTES_CREATE

  """
  The webhook topic for `disputes/update` events. Occurs whenever a dispute is
  updated. Requires the `read_shopify_payments_disputes` scope.
  """
  DISPUTES_UPDATE

  """
  The webhook topic for `domains/create` events. Occurs whenever a domain is created.
  """
  DOMAINS_CREATE

  """
  The webhook topic for `domains/destroy` events. Occurs whenever a domain is destroyed.
  """
  DOMAINS_DESTROY

  """
  The webhook topic for `domains/update` events. Occurs whenever a domain is updated.
  """
  DOMAINS_UPDATE

  """
  The webhook topic for `draft_orders/create` events. Occurs whenever a draft
  order is created. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_CREATE

  """
  The webhook topic for `draft_orders/delete` events. Occurs whenever a draft
  order is deleted. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_DELETE

  """
  The webhook topic for `draft_orders/update` events. Occurs whenever a draft
  order is updated. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_UPDATE

  """
  The webhook topic for `fulfillments/create` events. Occurs whenever a
  fulfillment is created. Requires at least one of the following scopes:
  read_fulfillments, read_marketplace_orders.
  """
  FULFILLMENTS_CREATE

  """
  The webhook topic for `fulfillments/update` events. Occurs whenever a
  fulfillment is updated. Requires at least one of the following scopes:
  read_fulfillments, read_marketplace_orders.
  """
  FULFILLMENTS_UPDATE

  """
  The webhook topic for `fulfillment_events/create` events. Occurs whenever a
  fulfillment event is created. Requires the `read_fulfillments` scope.
  """
  FULFILLMENT_EVENTS_CREATE

  """
  The webhook topic for `fulfillment_events/delete` events. Occurs whenever a
  fulfillment event is deleted. Requires the `read_fulfillments` scope.
  """
  FULFILLMENT_EVENTS_DELETE

  """
  The webhook topic for `fulfillment_orders/cancellation_request_accepted`
  events. Occurs when a 3PL accepts a fulfillment cancellation request, received
  from a merchant. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLATION_REQUEST_ACCEPTED

  """
  The webhook topic for `fulfillment_orders/cancellation_request_rejected`
  events. Occurs when a 3PL rejects a fulfillment cancellation request, received
  from a merchant. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLATION_REQUEST_REJECTED

  """
  The webhook topic for `fulfillment_orders/cancellation_request_submitted`
  events. Occurs when a merchant requests a fulfillment request to be cancelled
  after that request was approved by a 3PL. Requires at least one of the
  following scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLATION_REQUEST_SUBMITTED

  """
  The webhook topic for `fulfillment_orders/cancelled` events. Occurs when a
  fulfillment order is cancelled. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLED

  """
  The webhook topic for `fulfillment_orders/fulfillment_request_accepted`
  events. Occurs when a fulfillment service accepts a request to fulfill a
  fulfillment order. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_ACCEPTED

  """
  The webhook topic for `fulfillment_orders/fulfillment_request_rejected`
  events. Occurs when a 3PL rejects a fulfillment request that was sent by a
  merchant. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_REJECTED

  """
  The webhook topic for `fulfillment_orders/fulfillment_request_submitted`
  events. Occurs when a merchant submits a fulfillment request to a 3PL.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_SUBMITTED

  """
  The webhook topic for
  `fulfillment_orders/fulfillment_service_failed_to_complete` events. Occurs
  when a fulfillment service intends to close an in_progress fulfillment order.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_SERVICE_FAILED_TO_COMPLETE

  """
  The webhook topic for `fulfillment_orders/hold_released` events. Occurs
  whenever a fulfillment order hold is released. Requires at least one of the
  following scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_HOLD_RELEASED

  """
  The webhook topic for
  `fulfillment_orders/line_items_prepared_for_local_delivery` events. Occurs
  whenever a fulfillment order's line items are prepared for local delivery.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_LOCAL_DELIVERY

  """
  The webhook topic for `fulfillment_orders/line_items_prepared_for_pickup`
  events. Triggers when one or more of the line items for a fulfillment order
  are prepared for pickup Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_PICKUP

  """
  The webhook topic for `fulfillment_orders/moved` events. Occurs whenever a
  fulfillment order is moved. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_MOVED

  """
  The webhook topic for `fulfillment_orders/order_routing_complete` events.
  Occurs when an order has finished being routed and it's fulfillment orders
  assigned to a fulfillment service's location. Requires at least one of the
  following scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_ORDER_ROUTING_COMPLETE

  """
  The webhook topic for `fulfillment_orders/placed_on_hold` events. Occurs when
  a fulfillment order is placed on hold. Requires at least one of the following
  scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_PLACED_ON_HOLD

  """
  The webhook topic for `fulfillment_orders/rescheduled` events. Triggers when a
  fulfillment order is rescheduled Requires at least one of the following
  scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_RESCHEDULED

  """
  The webhook topic for `fulfillment_orders/scheduled_fulfillment_order_ready`
  events. Occurs whenever a fulfillment order which was scheduled becomes due.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_SCHEDULED_FULFILLMENT_ORDER_READY

  """
  The webhook topic for `inventory_items/create` events. Occurs whenever an
  inventory item is created. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_CREATE

  """
  The webhook topic for `inventory_items/delete` events. Occurs whenever an
  inventory item is deleted. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_DELETE

  """
  The webhook topic for `inventory_items/update` events. Occurs whenever an
  inventory item is updated. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_UPDATE

  """
  The webhook topic for `inventory_levels/connect` events. Occurs whenever an
  inventory level is connected. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_CONNECT

  """
  The webhook topic for `inventory_levels/disconnect` events. Occurs whenever an
  inventory level is disconnected. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_DISCONNECT

  """
  The webhook topic for `inventory_levels/update` events. Occurs whenever an
  inventory level is updated. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_UPDATE

  """
  The webhook topic for `locales/create` events. Occurs whenever a shop locale is created Requires the `read_locales` scope.
  """
  LOCALES_CREATE

  """
  The webhook topic for `locales/update` events. Occurs whenever a shop locale
  is updated, such as published or unpublished Requires the `read_locales` scope.
  """
  LOCALES_UPDATE

  """
  The webhook topic for `locations/activate` events. Occurs whenever a
  deactivated location is re-activated. Requires the `read_locations` scope.
  """
  LOCATIONS_ACTIVATE

  """
  The webhook topic for `locations/create` events. Occurs whenever a location is
  created. Requires the `read_locations` scope.
  """
  LOCATIONS_CREATE

  """
  The webhook topic for `locations/deactivate` events. Occurs whenever a
  location is deactivated. Requires the `read_locations` scope.
  """
  LOCATIONS_DEACTIVATE

  """
  The webhook topic for `locations/delete` events. Occurs whenever a location is
  deleted. Requires the `read_locations` scope.
  """
  LOCATIONS_DELETE

  """
  The webhook topic for `locations/update` events. Occurs whenever a location is
  updated. Requires the `read_locations` scope.
  """
  LOCATIONS_UPDATE

  """
  The webhook topic for `markets/create` events. Occurs when a new market is created. Requires the `read_markets` scope.
  """
  MARKETS_CREATE

  """
  The webhook topic for `markets/delete` events. Occurs when a market is deleted. Requires the `read_markets` scope.
  """
  MARKETS_DELETE

  """
  The webhook topic for `markets/update` events. Occurs when a market is updated. Requires the `read_markets` scope.
  """
  MARKETS_UPDATE

  """
  The webhook topic for `orders/cancelled` events. Occurs whenever an order is
  cancelled. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_CANCELLED

  """
  The webhook topic for `orders/create` events. Occurs whenever an order is
  created. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_CREATE

  """
  The webhook topic for `orders/delete` events. Occurs whenever an order is deleted. Requires the `read_orders` scope.
  """
  ORDERS_DELETE

  """
  The webhook topic for `orders/edited` events. Occurs whenever an order is
  edited. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_EDITED

  """
  The webhook topic for `orders/fulfilled` events. Occurs whenever an order is
  fulfilled. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_FULFILLED

  """
  The webhook topic for `orders/paid` events. Occurs whenever an order is paid.
  Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_PAID

  """
  The webhook topic for `orders/partially_fulfilled` events. Occurs whenever an
  order is partially fulfilled. Requires at least one of the following scopes:
  read_orders, read_marketplace_orders.
  """
  ORDERS_PARTIALLY_FULFILLED

  """
  The webhook topic for `orders/updated` events. Occurs whenever an order is
  updated. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_UPDATED

  """
  The webhook topic for `order_transactions/create` events. Occurs when a order
  transaction is created or when it's status is updated. Only occurs for
  transactions with a status of success, failure or error. Requires at least one
  of the following scopes: read_orders, read_marketplace_orders.
  """
  ORDER_TRANSACTIONS_CREATE

  """
  The webhook topic for `payment_schedules/due` events. Occurs whenever payment
  schedules are due. Requires the `read_payment_terms` scope.
  """
  PAYMENT_SCHEDULES_DUE

  """
  The webhook topic for `payment_terms/create` events. Occurs whenever payment
  terms are created. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_CREATE

  """
  The webhook topic for `payment_terms/delete` events. Occurs whenever payment
  terms are deleted. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_DELETE

  """
  The webhook topic for `payment_terms/update` events. Occurs whenever payment
  terms are updated. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_UPDATE

  """
  The webhook topic for `products/create` events. Occurs whenever a product is created. Requires the `read_products` scope.
  """
  PRODUCTS_CREATE

  """
  The webhook topic for `products/delete` events. Occurs whenever a product is deleted. Requires the `read_products` scope.
  """
  PRODUCTS_DELETE

  """
  The webhook topic for `products/update` events. Occurs whenever a product is
  updated, or whenever a product is ordered, or whenever a variant is added,
  removed, or updated. Requires the `read_products` scope.
  """
  PRODUCTS_UPDATE

  """
  The webhook topic for `product_listings/add` events. Occurs whenever an active
  product is listed on a channel. Requires the `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_ADD

  """
  The webhook topic for `product_listings/remove` events. Occurs whenever a
  product listing is removed from the channel. Requires the
  `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_REMOVE

  """
  The webhook topic for `product_listings/update` events. Occurs whenever a
  product publication is updated. Requires the `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_UPDATE

  """
  The webhook topic for `product_publications/create` events. Occurs whenever a
  product publication for an active product is created, or whenever an existing
  product publication is published. Requires the `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_CREATE

  """
  The webhook topic for `product_publications/delete` events. Occurs whenever a
  product publication for an active product is removed, or whenever an existing
  product publication is unpublished. Requires the `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_DELETE

  """
  The webhook topic for `product_publications/update` events. Occurs whenever a
  product publication is updated. Requires the `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_UPDATE

  """
  The webhook topic for `profiles/create` events. Occurs whenever a delivery
  profile is created Requires the `read_shipping` scope.
  """
  PROFILES_CREATE

  """
  The webhook topic for `profiles/delete` events. Occurs whenever a delivery
  profile is deleted Requires the `read_shipping` scope.
  """
  PROFILES_DELETE

  """
  The webhook topic for `profiles/update` events. Occurs whenever a delivery
  profile is updated Requires the `read_shipping` scope.
  """
  PROFILES_UPDATE

  """
  The webhook topic for `refunds/create` events. Occurs whenever a new refund is
  created without errors on an order, independent from the movement of money.
  Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  REFUNDS_CREATE

  """
  The webhook topic for `returns/approve` events. Occurs whenever a return is
  approved. This means `Return.status` is `OPEN`. Requires at least one of the
  following scopes: read_returns, read_marketplace_returns.
  """
  RETURNS_APPROVE

  """
  The webhook topic for `returns/cancel` events. Occurs whenever a return is
  canceled. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_returns, read_marketplace_returns.
  """
  RETURNS_CANCEL

  """
  The webhook topic for `returns/close` events. Occurs whenever a return is
  closed. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_returns, read_marketplace_returns.
  """
  RETURNS_CLOSE

  """
  The webhook topic for `returns/decline` events. Occurs whenever a return is
  declined. This means `Return.status` is `DECLINED`. Requires at least one of
  the following scopes: read_returns, read_marketplace_returns.
  """
  RETURNS_DECLINE

  """
  The webhook topic for `returns/reopen` events. Occurs whenever a closed return
  is reopened. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_returns, read_marketplace_returns.
  """
  RETURNS_REOPEN

  """
  The webhook topic for `returns/request` events. Occurs whenever a return is
  requested. This means `Return.status` is `REQUESTED`. Requires at least one of
  the following scopes: read_returns, read_marketplace_returns.
  """
  RETURNS_REQUEST

  """
  The webhook topic for `reverse_deliveries/attach_deliverable` events. Occurs
  whenever a deliverable is attached to a reverse delivery.
  This occurs when a reverse delivery is created or updated with delivery metadata.
  Metadata includes the delivery method, label, and tracking information associated with a reverse delivery.
   Requires at least one of the following scopes: read_returns, read_marketplace_returns.
  """
  REVERSE_DELIVERIES_ATTACH_DELIVERABLE

  """
  The webhook topic for `reverse_fulfillment_orders/dispose` events. Occurs
  whenever a disposition is made on a reverse fulfillment order.
  This includes dispositions made on reverse deliveries that are associated with the reverse fulfillment order.
   Requires at least one of the following scopes: read_returns, read_marketplace_returns.
  """
  REVERSE_FULFILLMENT_ORDERS_DISPOSE

  """
  The webhook topic for `scheduled_product_listings/add` events. Occurs whenever
  a product is scheduled to be published. Requires the `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_ADD

  """
  The webhook topic for `scheduled_product_listings/remove` events. Occurs
  whenever a product is no longer scheduled to be published. Requires the
  `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_REMOVE

  """
  The webhook topic for `scheduled_product_listings/update` events. Occurs
  whenever a product's scheduled availability date changes. Requires the
  `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_UPDATE

  """
  The webhook topic for `segments/create` events. Occurs whenever a segment is created. Requires the `read_customers` scope.
  """
  SEGMENTS_CREATE

  """
  The webhook topic for `segments/delete` events. Occurs whenever a segment is deleted. Requires the `read_customers` scope.
  """
  SEGMENTS_DELETE

  """
  The webhook topic for `segments/update` events. Occurs whenever a segment is updated. Requires the `read_customers` scope.
  """
  SEGMENTS_UPDATE

  """
  The webhook topic for `selling_plan_groups/create` events. Notifies when a
  SellingPlanGroup is created. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_CREATE

  """
  The webhook topic for `selling_plan_groups/delete` events. Notifies when a
  SellingPlanGroup is deleted. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_DELETE

  """
  The webhook topic for `selling_plan_groups/update` events. Notifies when a
  SellingPlanGroup is updated. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_UPDATE

  """
  The webhook topic for `shipping_addresses/create` events. Occurs whenever a
  shipping address is created. Requires the `read_shipping` scope.
  """
  SHIPPING_ADDRESSES_CREATE

  """
  The webhook topic for `shipping_addresses/update` events. Occurs whenever a
  shipping address is updated. Requires the `read_shipping` scope.
  """
  SHIPPING_ADDRESSES_UPDATE

  """
  The webhook topic for `shop/update` events. Occurs whenever a shop is updated.
  """
  SHOP_UPDATE

  """
  The webhook topic for `subscription_billing_attempts/challenged` events.
  Occurs when the financial instutition challenges the subscripttion billing
  attempt charge as per 3D Secure. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED

  """
  The webhook topic for `subscription_billing_attempts/failure` events. Occurs
  whenever a subscription billing attempt fails. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE

  """
  The webhook topic for `subscription_billing_attempts/success` events. Occurs
  whenever a subscription billing attempt succeeds. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS

  """
  The webhook topic for `subscription_billing_cycle_edits/create` events. Occurs
  whenever a subscription contract billing cycle is edited. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_CYCLE_EDITS_CREATE

  """
  The webhook topic for `subscription_billing_cycle_edits/delete` events. Occurs
  whenever a subscription contract billing cycle edit is deleted. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_CYCLE_EDITS_DELETE

  """
  The webhook topic for `subscription_billing_cycle_edits/update` events. Occurs
  whenever a subscription contract billing cycle edit is updated. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_CYCLE_EDITS_UPDATE

  """
  The webhook topic for `subscription_contracts/create` events. Occurs whenever
  a subscription contract is created. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_CREATE

  """
  The webhook topic for `subscription_contracts/update` events. Occurs whenever
  a subscription contract is updated. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_UPDATE

  """
  The webhook topic for `tax_services/create` events. Occurs whenever a tax
  service is created. Requires the `read_taxes` scope.
  """
  TAX_SERVICES_CREATE

  """
  The webhook topic for `tax_services/update` events. Occurs whenver a tax
  service is updated. Requires the `read_taxes` scope.
  """
  TAX_SERVICES_UPDATE

  """
  The webhook topic for `tender_transactions/create` events. Occurs when a
  tender transaction is created. Requires the `read_orders` scope.
  """
  TENDER_TRANSACTIONS_CREATE

  """
  The webhook topic for `themes/create` events. Occurs whenever a theme is
  created. Does not occur when theme files are created. Requires the
  `read_themes` scope.
  """
  THEMES_CREATE

  """
  The webhook topic for `themes/delete` events. Occurs whenever a theme is
  deleted. Does not occur when theme files are deleted. Requires the
  `read_themes` scope.
  """
  THEMES_DELETE

  """
  The webhook topic for `themes/publish` events. Occurs whenever a theme with
  the main or mobile (deprecated) role is published. Requires the `read_themes` scope.
  """
  THEMES_PUBLISH

  """
  The webhook topic for `themes/update` events. Occurs whenever a theme is
  updated. Does not occur when theme files are updated. Requires the
  `read_themes` scope.
  """
  THEMES_UPDATE

  """
  The webhook topic for `variants/in_stock` events. Occurs whenever a variant
  becomes in stock. Requires the `read_products` scope.
  """
  VARIANTS_IN_STOCK

  """
  The webhook topic for `variants/out_of_stock` events. Occurs whenever a
  variant becomes out of stock. Requires the `read_products` scope.
  """
  VARIANTS_OUT_OF_STOCK
}

"""
A weight, which includes a numeric value and a unit of measurement.
"""
type Weight {
  """
  The unit of measurement for `value`.
  """
  unit: WeightUnit!

  """
  The weight value using the unit system specified with `unit`.
  """
  value: Float!
}

"""
Units of measurement for weight.
"""
enum WeightUnit {
  """
  Metric system unit of mass.
  """
  GRAMS

  """
  1 kilogram equals 1000 grams.
  """
  KILOGRAMS

  """
  Imperial system unit of mass.
  """
  OUNCES

  """
  1 pound equals 16 ounces.
  """
  POUNDS
}
