schema {
  query: QueryRoot
}

"""
Marks an element of a GraphQL schema as having restricted access.
"""
directive @accessRestricted(
  """
  Explains the reason around this restriction
  """
  reason: String = null
) on FIELD_DEFINITION | OBJECT

"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
An Amazon Web Services Amazon Resource Name (ARN), including the Region and account ID.
For more information, refer to [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
"""
scalar ARN

"""
A checkout that was abandoned by the customer.
"""
type AbandonedCheckout implements Navigable & Node {
  """
  The URL for the buyer to recover their checkout.
  """
  abandonedCheckoutUrl: URL!

  """
  The billing address provided by the buyer.
  Null if the user did not provide a billing address.
  """
  billingAddress: MailingAddress

  """
  The date and time when the buyer completed the checkout.
  Null if the checkout has not been completed.
  """
  completedAt: DateTime

  """
  The date and time when the checkout was created.
  """
  createdAt: DateTime!

  """
  A list of extra information that has been added to the checkout.
  """
  customAttributes: [Attribute!]!

  """
  The customer who created this checkout.
  May be null if the checkout was created from a draft order or via an app.
  """
  customer: Customer

  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  The discount codes entered by the buyer at checkout.
  """
  discountCodes: [String!]!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A list of the line items in this checkout.
  """
  lineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): AbandonedCheckoutLineItemConnection!

  """
  The number of products in the checkout.
  """
  lineItemsQuantity: Int! @deprecated(reason: "Use [AbandonedCheckoutLineItem.quantity](https://shopify.dev/api/admin-graphql/unstable/objects/AbandonedCheckoutLineItem#field-quantity) instead.")

  """
  Unique merchant-facing identifier for the checkout.
  """
  name: String!

  """
  A merchant-facing note added to the checkout. Not visible to the buyer.
  """
  note: String!

  """
  The shipping address to where the line items will be shipped.
  Null if the user did not provide a shipping address.
  """
  shippingAddress: MailingAddress

  """
  The sum of all items in the checkout, including discounts but excluding shipping, taxes and tips.
  """
  subtotalPriceSet: MoneyBag!

  """
  Individual taxes charged on the checkout.
  """
  taxLines: [TaxLine!]!

  """
  Whether taxes are included in line item and shipping line prices.
  """
  taxesIncluded: Boolean!

  """
  The total amount of discounts to be applied.
  """
  totalDiscountSet: MoneyBag!

  """
  The total duties applied to the checkout.
  """
  totalDutiesSet: MoneyBag

  """
  The sum of the prices of all line items in the checkout.
  """
  totalLineItemsPriceSet: MoneyBag!

  """
  The sum of all items in the checkout, including discounts, shipping, taxes, and tips.
  """
  totalPriceSet: MoneyBag!

  """
  The total tax applied to the checkout.
  """
  totalTaxSet: MoneyBag

  """
  The date and time when the checkout was most recently updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple AbandonedCheckouts.
"""
type AbandonedCheckoutConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [AbandonedCheckoutEdge!]!

  """
  A list of nodes that are contained in AbandonedCheckoutEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [AbandonedCheckout!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AbandonedCheckout and a cursor during pagination.
"""
type AbandonedCheckoutEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of AbandonedCheckoutEdge.
  """
  node: AbandonedCheckout!
}

"""
A single line item in an abandoned checkout.
"""
type AbandonedCheckoutLineItem implements Node {
  """
  A list of line item components for this line item.
  """
  components: [AbandonedCheckoutLineItemComponent!]

  """
  A list of extra information that has been added to the line item.
  """
  customAttributes: [Attribute!]!

  """
  Discount allocations that have been applied on the line item.
  """
  discountAllocations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): DiscountAllocationConnection!

  """
  Final total price for the entire quantity of this line item, including discounts.
  """
  discountedTotalPriceSet: MoneyBag!

  """
  The total price for the entire quantity of this line item, after all discounts
  are applied, at both the line item and code-based line item level.
  """
  discountedTotalPriceWithCodeDiscount: MoneyBag!

  """
  The price of a single variant unit after discounts are applied at the line item level, in shop and presentment currencies.
  """
  discountedUnitPriceSet: MoneyBag!

  """
  The price of a single variant unit after all discounts are applied, at both the line item and code-based line item level.
  """
  discountedUnitPriceWithCodeDiscount: MoneyBag!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The image associated with the line item's variant or product.
  NULL if the line item has no product, or if neither the variant nor the product have an image.
  """
  image: Image

  """
  Original total price for the entire quantity of this line item, before discounts.
  """
  originalTotalPriceSet: MoneyBag!

  """
  Original price for a single unit of this line item, before discounts.
  """
  originalUnitPriceSet: MoneyBag!

  """
  Product for this line item.
  NULL for custom line items and products that were deleted after checkout began.
  """
  product: Product

  """
  The quantity of the line item.
  """
  quantity: Int!

  """
  SKU for the inventory item associated with the variant, if any.
  """
  sku: String

  """
  Title of the line item. Defaults to the product's title.
  """
  title: String

  """
  Product variant for this line item.
  NULL for custom line items and variants that were deleted after checkout began.
  """
  variant: ProductVariant

  """
  Title of the variant for this line item.
  NULL for custom line items and products that don't have distinct variants.
  """
  variantTitle: String
}

"""
The list of line item components that belong to a line item.
"""
type AbandonedCheckoutLineItemComponent {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The variant image associated with the line item component.
  NULL if the variant associated doesn't have an image.
  """
  image: Image

  """
  The quantity of the line item component.
  """
  quantity: Int!

  """
  Title of the line item component.
  """
  title: String!

  """
  The name of the variant.
  """
  variantTitle: String
}

"""
An auto-generated type for paginating through multiple AbandonedCheckoutLineItems.
"""
type AbandonedCheckoutLineItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [AbandonedCheckoutLineItemEdge!]!

  """
  A list of nodes that are contained in AbandonedCheckoutLineItemEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [AbandonedCheckoutLineItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AbandonedCheckoutLineItem and a cursor during pagination.
"""
type AbandonedCheckoutLineItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of AbandonedCheckoutLineItemEdge.
  """
  node: AbandonedCheckoutLineItem!
}

"""
The set of valid sort keys for the AbandonedCheckout query.
"""
enum AbandonedCheckoutSortKeys {
  """
  Sort by the `checkout_id` value.
  """
  CHECKOUT_ID

  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `customer_name` value.
  """
  CUSTOMER_NAME

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `total_price` value.
  """
  TOTAL_PRICE
}

"""
A browse, cart, or checkout that was abandoned by a customer.
"""
type Abandonment implements Node {
  """
  The abandonment payload for the abandoned checkout.
  """
  abandonedCheckoutPayload: AbandonedCheckout

  """
  The abandonment type.
  """
  abandonmentType: AbandonmentAbandonmentType!

  """
  The app associated with an abandoned checkout.
  """
  app: App!

  """
  Permalink to the cart page.
  """
  cartUrl: URL

  """
  The date and time when the abandonment was created.
  """
  createdAt: DateTime!

  """
  The customer who abandoned this event.
  """
  customer: Customer!

  """
  Whether the customer has a draft order since this abandonment has been abandoned.
  """
  customerHasNoDraftOrderSinceAbandonment: Boolean!

  """
  Whether the customer has completed an order since this checkout has been abandoned.
  """
  customerHasNoOrderSinceAbandonment: Boolean!

  """
  The number of days since the last abandonment email was sent to the customer.
  """
  daysSinceLastAbandonmentEmail: Int!

  """
  When the email was sent, if that's the case.
  """
  emailSentAt: DateTime

  """
  The email state (e.g., sent or not sent).
  """
  emailState: AbandonmentEmailState

  """
  The number of hours since the customer has last abandoned a checkout.
  """
  hoursSinceLastAbandonedCheckout: Float

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether the products in abandonment are available.
  """
  inventoryAvailable: Boolean!

  """
  Whether the abandonment event comes from a custom storefront channel.
  """
  isFromCustomStorefront: Boolean!

  """
  Whether the abandonment event comes from the Online Store sales channel.
  """
  isFromOnlineStore: Boolean!

  """
  Whether the abandonment event comes from the Shop app sales channel.
  """
  isFromShopApp: Boolean!

  """
  Whether the abandonment event comes from Shop Pay.
  """
  isFromShopPay: Boolean!

  """
  Whether the customer didn't complete another most significant step since this abandonment.
  """
  isMostSignificantAbandonment: Boolean!

  """
  The date for the latest browse abandonment.
  """
  lastBrowseAbandonmentDate: DateTime!

  """
  The date for the latest cart abandonment.
  """
  lastCartAbandonmentDate: DateTime!

  """
  The date for the latest checkout abandonment.
  """
  lastCheckoutAbandonmentDate: DateTime!

  """
  The most recent step type.
  """
  mostRecentStep: AbandonmentAbandonmentType!

  """
  The products added to the cart during the customer abandoned visit.
  """
  productsAddedToCart(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CustomerVisitProductInfoConnection!

  """
  The products viewed during the customer abandoned visit.
  """
  productsViewed(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CustomerVisitProductInfoConnection!

  """
  The date and time when the visit started.
  """
  visitStartedAt: DateTime
}

"""
Specifies the abandonment type.
"""
enum AbandonmentAbandonmentType {
  """
  The abandonment event is an abandoned browse.
  """
  BROWSE

  """
  The abandonment event is an abandoned cart.
  """
  CART

  """
  The abandonment event is an abandoned checkout.
  """
  CHECKOUT
}

"""
Specifies the email state.
"""
enum AbandonmentEmailState {
  """
  The email has not yet been sent.
  """
  NOT_SENT

  """
  The email has been scheduled for later delivery.
  """
  SCHEDULED

  """
  The email has been sent.
  """
  SENT
}

"""
The permission required to access a Shopify Admin API or Storefront API resource
for a shop. Merchants grant access scopes that are requested by applications.
"""
type AccessScope {
  """
  A description of the actions that the access scope allows an app to perform.
  """
  description: String!

  """
  A readable string that represents the access scope. The string usually follows
  the format `{action}_{resource}`. `{action}` is `read` or `write`, and
  `{resource}` is the resource that the action can be performed on. `{action}`
  and `{resource}` are separated by an underscore. For example, `read_orders` or
  `write_products`.
  """
  handle: String!
}

"""
Possible account types that a staff member can have.
"""
enum AccountType {
  """
  The account of a partner who collaborates with the merchant.
  """
  COLLABORATOR

  """
  The account of a partner collaborator team member.
  """
  COLLABORATOR_TEAM_MEMBER

  """
  The user has not yet accepted the invitation to create an account.
  """
  INVITED

  """
  The user has not yet accepted the invitation to become the store owner.
  """
  INVITED_STORE_OWNER

  """
  The account can access the Shopify admin.
  """
  REGULAR

  """
  The admin has not yet accepted the request to create a collaborator account.
  """
  REQUESTED

  """
  The account cannot access the Shopify admin.
  """
  RESTRICTED

  """
  The account can be signed into via a SAML provider.
  """
  SAML
}

"""
Represents an operation publishing all products to a publication.
"""
type AddAllProductsOperation implements Node & ResourceOperation {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The count of processed rows, summing imported, failed, and skipped rows.
  """
  processedRowCount: Int

  """
  Represents a rows objects within this background operation.
  """
  rowCount: RowCount

  """
  The status of this operation.
  """
  status: ResourceOperationStatus!
}

"""
The additional fees that have been applied to the order.
"""
type AdditionalFee implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the additional fee.
  """
  name: String!

  """
  The price of the additional fee.
  """
  price: MoneyBag!

  """
  A list of taxes charged on the additional fee.
  """
  taxLines: [TaxLine!]!
}

"""
A sale associated with an additional fee charge.
"""
type AdditionalFeeSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The additional fees for the associated sale.
  """
  additionalFee: SaleAdditionalFee!

  """
  The unique ID for the sale.
  """
  id: ID!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
A sale associated with an order price adjustment.
"""
type AdjustmentSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique ID for the sale.
  """
  id: ID!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
The set of valid sort keys for the Adjustments query.
"""
enum AdjustmentsSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `time` value.
  """
  TIME
}

"""
Targets all items the cart for a specified discount.
"""
type AllDiscountItems {
  """
  Whether all items are eligible for the discount. This value always returns `true`.
  """
  allItems: Boolean!
}

"""
The Android mobile platform application.
"""
type AndroidApplication {
  """
  Whether Android App Links are supported by this app.
  """
  appLinksEnabled: Boolean!

  """
  The Android application ID.
  """
  applicationId: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The SHA256 fingerprints of the app's signing certificate.
  """
  sha256CertFingerprints: [String!]!
}

"""
A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).
Versions are commonly referred to by their handle (for example, `2021-10`).
"""
type ApiVersion {
  """
  The human-readable name of the version.
  """
  displayName: String!

  """
  The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
  """
  handle: String!

  """
  Whether the version is actively supported by Shopify. Supported API versions
  are guaranteed to be stable. Unsupported API versions include unstable,
  release candidate, and end-of-life versions that are marked as unsupported.
  For more information, refer to
  [Versioning](https://shopify.dev/api/usage/versioning).
  """
  supported: Boolean!
}

"""
A Shopify application.
"""
type App implements Node {
  """
  A unique application API identifier.
  """
  apiKey: String!

  """
  App store page URL of the app.
  """
  appStoreAppUrl: URL

  """
  App store page URL of the developer who created the app.
  """
  appStoreDeveloperUrl: URL

  """
  All requestable access scopes available to the app.
  """
  availableAccessScopes: [AccessScope!]!

  """
  Banner image for the app.
  """
  banner: Image!

  """
  Description of the app.
  """
  description: String

  """
  The name of the app developer.
  """
  developerName: String

  """
  The type of app developer.
  """
  developerType: AppDeveloperType!

  """
  Website of the developer who created the app.
  """
  developerUrl: URL! @deprecated(reason: "Use `appStoreDeveloperUrl` instead.")

  """
  Whether the app uses the Embedded App SDK.
  """
  embedded: Boolean!

  """
  Requirements that must be met before the app can be installed.
  """
  failedRequirements: [FailedRequirement!]!

  """
  A list of app features that are shown in the Shopify App Store listing.
  """
  features: [String!]!

  """
  Feedback from this app about the store.
  """
  feedback: AppFeedback

  """
  Handle of the app.
  """
  handle: String

  """
  Icon that represents the app.
  """
  icon: Image!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Webpage where you can install the app.
  """
  installUrl: URL

  """
  Corresponding AppInstallation for this shop and App.
  Returns null if the App is not installed.
  """
  installation: AppInstallation

  """
  Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use.
  """
  isPostPurchaseAppInUse: Boolean!

  """
  Webpage that the app starts in.
  """
  launchUrl: URL! @deprecated(reason: "Use AppInstallation.launchUrl instead")

  """
  Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
  """
  navigationItems: [NavigationItem!]! @deprecated(reason: "Use AppInstallation.navigationItems instead")

  """
  The optional scopes requested by the app. Lists the optional access scopes the
  app has declared in its configuration. These scopes are optionally requested
  by the app after installation.
  """
  optionalAccessScopes: [AccessScope!]!

  """
  Whether the app was previously installed on the current shop.
  """
  previouslyInstalled: Boolean!

  """
  Detailed information about the app pricing.
  """
  pricingDetails: String

  """
  Summary of the app pricing details.
  """
  pricingDetailsSummary: String!

  """
  Link to app privacy policy.
  """
  privacyPolicyUrl: URL

  """
  The public category for the app.
  """
  publicCategory: AppPublicCategory!

  """
  Whether the app is published to the Shopify App Store.
  """
  published: Boolean!

  """
  The access scopes requested by the app. Lists the access scopes the app has
  declared in its configuration. Merchant must grant approval to these scopes
  for the app to be installed.
  """
  requestedAccessScopes: [AccessScope!]!

  """
  Screenshots of the app.
  """
  screenshots: [Image!]!

  """
  Whether the app was developed by Shopify.
  """
  shopifyDeveloped: Boolean!

  """
  Name of the app.
  """
  title: String!

  """
  Message that appears when the app is uninstalled. For example:
  By removing this app, you will no longer be able to publish products to
  MySocialSite or view this app in your Shopify admin. You can re-enable this
  channel at any time.
  """
  uninstallMessage: String!

  """
  Webpage where you can uninstall the app.
  """
  uninstallUrl: URL @deprecated(reason: "Use AppInstallation.uninstallUrl instead")

  """
  The webhook API version for the app.
  """
  webhookApiVersion: String!
}

"""
A catalog that defines the publication associated with an app.
"""
type AppCatalog implements Catalog & Node {
  """
  The apps associated with the catalog.
  """
  apps(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): AppConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Most recent catalog operations.
  """
  operations: [ResourceOperation!]!

  """
  The price list associated with the catalog.
  """
  priceList: PriceList

  """
  A group of products and collections that's published to a catalog.
  """
  publication: Publication

  """
  The status of the catalog.
  """
  status: CatalogStatus!

  """
  The name of the catalog.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple Apps.
"""
type AppConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [AppEdge!]!

  """
  A list of nodes that are contained in AppEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [App!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
"""
type AppCredit implements Node {
  """
  The amount that can be used towards future app purchases in Shopify.
  """
  amount: MoneyV2!

  """
  The date and time when the app credit was created.
  """
  createdAt: DateTime!

  """
  The description of the app credit.
  """
  description: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether the app credit is a test transaction.
  """
  test: Boolean!
}

"""
An auto-generated type for paginating through multiple AppCredits.
"""
type AppCreditConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [AppCreditEdge!]!

  """
  A list of nodes that are contained in AppCreditEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [AppCredit!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AppCredit and a cursor during pagination.
"""
type AppCreditEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of AppCreditEdge.
  """
  node: AppCredit!
}

"""
Possible types of app developer.
"""
enum AppDeveloperType {
  """
  Indicates the app developer works directly for a Merchant.
  """
  MERCHANT

  """
  Indicates the app developer is a Partner.
  """
  PARTNER

  """
  Indicates the app developer is Shopify.
  """
  SHOPIFY

  """
  Indicates the app developer is unknown. It is not categorized as any of the other developer types.
  """
  UNKNOWN
}

"""
The details about the app extension that's providing the
[discount type](https://help.shopify.com/manual/discounts/discount-types).
This information includes the app extension's name and
[client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets),
[App Bridge configuration](https://shopify.dev/docs/api/app-bridge),
[discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations),
[function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries),
and other metadata about the discount type, including the discount type's name and description.
"""
type AppDiscountType {
  """
  The name of the app extension that's providing the
  [discount type](https://help.shopify.com/manual/discounts/discount-types).
  """
  app: App!

  """
  The [App Bridge configuration](https://shopify.dev/docs/api/app-bridge)
  for the [discount type](https://help.shopify.com/manual/discounts/discount-types).
  """
  appBridge: FunctionsAppBridge!

  """
  The [client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets)
  of the app extension that's providing the [discount type](https://help.shopify.com/manual/discounts/discount-types).
  """
  appKey: String!

  """
  A description of the
  [discount type](https://help.shopify.com/manual/discounts/discount-types)
  provided by the app extension.
  """
  description: String

  """
  The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that's used to control how discounts can be combined.
  """
  discountClass: DiscountClass!

  """
  The
  [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries)
  associated with the app extension providing the
  [discount type](https://help.shopify.com/manual/discounts/discount-types).
  """
  functionId: String!

  """
  The type of line item on an order that the
  [discount type](https://help.shopify.com/manual/discounts/discount-types) applies to.
  Valid values: `SHIPPING_LINE` and `LINE_ITEM`.
  """
  targetType: DiscountApplicationTargetType!

  """
  The name of the [discount type](https://help.shopify.com/manual/discounts/discount-types)
  that the app extension is providing.
  """
  title: String!
}

"""
An auto-generated type which holds one App and a cursor during pagination.
"""
type AppEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of AppEdge.
  """
  node: App!
}

"""
Reports the status of shops and their resources and displays this information
within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
to set up an app on their store.
"""
type AppFeedback {
  """
  The application associated to the feedback.
  """
  app: App!

  """
  The date and time when the app feedback was generated.
  """
  feedbackGeneratedAt: DateTime!

  """
  A link to where merchants can resolve errors.
  """
  link: Link

  """
  The feedback message presented to the merchant.
  """
  messages: [UserError!]!

  """
  Conveys the state of the feedback and whether it requires merchant action or not.
  """
  state: ResourceFeedbackState!
}

"""
Represents an installed application on a shop.
"""
type AppInstallation implements HasMetafields & Node {
  """
  The access scopes granted to the application by a merchant during installation.
  """
  accessScopes: [AccessScope!]!

  """
  The active application subscriptions billed to the shop on a recurring basis.
  """
  activeSubscriptions: [AppSubscription!]!

  """
  All subscriptions created for a shop.
  """
  allSubscriptions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: AppSubscriptionSortKeys = CREATED_AT
  ): AppSubscriptionConnection!

  """
  Application which is installed.
  """
  app: App!

  """
  Channel associated with the installed application.
  """
  channel: Channel @deprecated(reason: "Use `publication` instead.")

  """
  Credits that can be used towards future app purchases.
  """
  credits(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: AppTransactionSortKeys = CREATED_AT
  ): AppCreditConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The URL to launch the application.
  """
  launchUrl: URL!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  One-time purchases to a shop.
  """
  oneTimePurchases(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: AppTransactionSortKeys = CREATED_AT
  ): AppPurchaseOneTimeConnection!

  """
  The publication associated with the installed application.
  """
  publication: Publication

  """
  The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes.
  """
  revenueAttributionRecords(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: AppRevenueAttributionRecordSortKeys = CREATED_AT
  ): AppRevenueAttributionRecordConnection!

  """
  Subscriptions charge to a shop on a recurring basis.
  """
  subscriptions: [AppSubscription!]! @deprecated(reason: "Use `activeSubscriptions` instead.")

  """
  The URL to uninstall the application.
  """
  uninstallUrl: URL
}

"""
The possible categories of an app installation, based on their purpose
or the environment they can run in.
"""
enum AppInstallationCategory {
  """
  Apps that serve as channels through which sales are made, such as the online store.
  """
  CHANNEL

  """
  Apps that can be used in the POS mobile client.
  """
  POS_EMBEDDED
}

"""
An auto-generated type for paginating through multiple AppInstallations.
"""
type AppInstallationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [AppInstallationEdge!]!

  """
  A list of nodes that are contained in AppInstallationEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [AppInstallation!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AppInstallation and a cursor during pagination.
"""
type AppInstallationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of AppInstallationEdge.
  """
  node: AppInstallation!
}

"""
The levels of privacy of an app installation.
"""
enum AppInstallationPrivacy {
  PRIVATE
  PUBLIC
}

"""
The set of valid sort keys for the AppInstallation query.
"""
enum AppInstallationSortKeys {
  """
  Sort by the `app_title` value.
  """
  APP_TITLE

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `installed_at` value.
  """
  INSTALLED_AT

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The app plan that the merchant is subscribed to.
"""
type AppPlanV2 {
  """
  The plan billed to a shop on a recurring basis.
  """
  pricingDetails: AppPricingDetails!
}

"""
The information about the price that's charged to a shop every plan period.
The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
"""
union AppPricingDetails = AppRecurringPricing | AppUsagePricing

"""
The frequency at which the shop is billed for an app subscription.
"""
enum AppPricingInterval {
  """
  The app subscription bills the shop annually.
  """
  ANNUAL

  """
  The app subscription bills the shop every 30 days.
  """
  EVERY_30_DAYS
}

"""
The public-facing category for an app.
"""
enum AppPublicCategory {
  """
  The app's public category is [custom](https://shopify.dev/apps/distribution#capabilities-and-requirements).
  """
  CUSTOM

  """
  The app's public category is other. An app is in this category if it's not
  classified under any of the other app types (private, public, or custom).
  """
  OTHER

  """
  The app's public category is [private](https://shopify.dev/apps/distribution#deprecated-app-types).
  """
  PRIVATE

  """
  The app's public category is [public](https://shopify.dev/apps/distribution#capabilities-and-requirements).
  """
  PUBLIC
}

"""
Services and features purchased once by the store.
"""
interface AppPurchase {
  """
  The date and time when the app purchase occurred.
  """
  createdAt: DateTime!

  """
  The name of the app purchase.
  """
  name: String!

  """
  The amount to be charged to the store for the app purchase.
  """
  price: MoneyV2!

  """
  The status of the app purchase.
  """
  status: AppPurchaseStatus!

  """
  Whether the app purchase is a test transaction.
  """
  test: Boolean!
}

"""
Services and features purchased once by a store.
"""
type AppPurchaseOneTime implements AppPurchase & Node {
  """
  The date and time when the app purchase occurred.
  """
  createdAt: DateTime!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the app purchase.
  """
  name: String!

  """
  The amount to be charged to the store for the app purchase.
  """
  price: MoneyV2!

  """
  The status of the app purchase.
  """
  status: AppPurchaseStatus!

  """
  Whether the app purchase is a test transaction.
  """
  test: Boolean!
}

"""
An auto-generated type for paginating through multiple AppPurchaseOneTimes.
"""
type AppPurchaseOneTimeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [AppPurchaseOneTimeEdge!]!

  """
  A list of nodes that are contained in AppPurchaseOneTimeEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [AppPurchaseOneTime!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.
"""
type AppPurchaseOneTimeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of AppPurchaseOneTimeEdge.
  """
  node: AppPurchaseOneTime!
}

"""
The approval status of the app purchase.

The merchant is charged for the purchase immediately after approval, and the status changes to `active`.
If the payment fails, then the app purchase remains `pending`.

Purchases start as `pending` and can change to: `active`, `declined`, `expired`. After a purchase changes, it
remains in that final state.
"""
enum AppPurchaseStatus {
  """
  The app purchase has been approved by the merchant and is ready to be
  activated by the app. App purchases created through the GraphQL Admin API are
  activated upon approval.
  """
  ACCEPTED @deprecated(reason: "As of API version 2021-01, when a merchant accepts an app purchase, the status immediately changes from `pending` to `active`.")

  """
  The app purchase was approved by the merchant and has been activated by the
  app. Active app purchases are charged to the merchant and are paid out to the partner.
  """
  ACTIVE

  """
  The app purchase was declined by the merchant.
  """
  DECLINED

  """
  The app purchase was not accepted within two days of being created.
  """
  EXPIRED

  """
  The app purchase is pending approval by the merchant.
  """
  PENDING
}

"""
The pricing information about a subscription app.
The object contains an interval (the frequency at which the shop is billed for an app subscription) and
a price (the amount to be charged to the subscribing shop at each interval).
"""
type AppRecurringPricing {
  """
  The discount applied to the subscription for a given number of billing intervals.
  """
  discount: AppSubscriptionDiscount

  """
  The frequency at which the subscribing shop is billed for an app subscription.
  """
  interval: AppPricingInterval!

  """
  The amount and currency to be charged to the subscribing shop every billing interval.
  """
  price: MoneyV2!
}

"""
Represents app revenue that was captured externally by the partner.
"""
type AppRevenueAttributionRecord implements Node {
  """
  The financial amount captured in this attribution.
  """
  amount: MoneyV2!

  """
  The timestamp when the financial amount was captured.
  """
  capturedAt: DateTime!

  """
  The timestamp at which this revenue attribution was issued.
  """
  createdAt: DateTime!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The unique value submitted during the creation of the app revenue attribution record.
  For more information, refer to
  [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
  """
  idempotencyKey: String!

  """
  Indicates whether this is a test submission.
  """
  test: Boolean!

  """
  The type of revenue attribution.
  """
  type: AppRevenueAttributionType!
}

"""
An auto-generated type for paginating through multiple AppRevenueAttributionRecords.
"""
type AppRevenueAttributionRecordConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [AppRevenueAttributionRecordEdge!]!

  """
  A list of nodes that are contained in AppRevenueAttributionRecordEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [AppRevenueAttributionRecord!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.
"""
type AppRevenueAttributionRecordEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of AppRevenueAttributionRecordEdge.
  """
  node: AppRevenueAttributionRecord!
}

"""
The set of valid sort keys for the AppRevenueAttributionRecord query.
"""
enum AppRevenueAttributionRecordSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Represents the billing types of revenue attribution.
"""
enum AppRevenueAttributionType {
  """
  App purchase related revenue collection.
  """
  APPLICATION_PURCHASE

  """
  App subscription revenue collection.
  """
  APPLICATION_SUBSCRIPTION

  """
  App usage-based revenue collection.
  """
  APPLICATION_USAGE

  """
  Other app revenue collection type.
  """
  OTHER
}

"""
Provides users access to services and/or features for a duration of time.
"""
type AppSubscription implements Node {
  """
  The date and time when the app subscription was created.
  """
  createdAt: DateTime!

  """
  The date and time when the current app subscription period ends. Returns `null` if the subscription isn't active.
  """
  currentPeriodEnd: DateTime

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The plans attached to the app subscription.
  """
  lineItems: [AppSubscriptionLineItem!]!

  """
  The name of the app subscription.
  """
  name: String!

  """
  The URL that the merchant is redirected to after approving the app subscription.
  """
  returnUrl: URL!

  """
  The status of the app subscription.
  """
  status: AppSubscriptionStatus!

  """
  Specifies whether the app subscription is a test transaction.
  """
  test: Boolean!

  """
  The number of free trial days, starting at the subscription's creation date, by which billing is delayed.
  """
  trialDays: Int!
}

"""
An auto-generated type for paginating through multiple AppSubscriptions.
"""
type AppSubscriptionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [AppSubscriptionEdge!]!

  """
  A list of nodes that are contained in AppSubscriptionEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [AppSubscription!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Discount applied to the recurring pricing portion of a subscription.
"""
type AppSubscriptionDiscount {
  """
  The total number of billing intervals to which the discount will be applied.
  The discount will be applied to an indefinite number of billing intervals if this value is blank.
  """
  durationLimitInIntervals: Int

  """
  The price of the subscription after the discount is applied.
  """
  priceAfterDiscount: MoneyV2!

  """
  The remaining number of billing intervals to which the discount will be applied.
  """
  remainingDurationInIntervals: Int

  """
  The value of the discount applied every billing interval.
  """
  value: AppSubscriptionDiscountValue!
}

"""
The fixed amount value of a discount.
"""
type AppSubscriptionDiscountAmount {
  """
  The fixed amount value of a discount.
  """
  amount: MoneyV2!
}

"""
The percentage value of a discount.
"""
type AppSubscriptionDiscountPercentage {
  """
  The percentage value of a discount.
  """
  percentage: Float!
}

"""
The value of the discount.
"""
union AppSubscriptionDiscountValue = AppSubscriptionDiscountAmount | AppSubscriptionDiscountPercentage

"""
An auto-generated type which holds one AppSubscription and a cursor during pagination.
"""
type AppSubscriptionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of AppSubscriptionEdge.
  """
  node: AppSubscription!
}

"""
The plan attached to an app subscription.
"""
type AppSubscriptionLineItem {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The pricing model for the app subscription.
  """
  plan: AppPlanV2!

  """
  A list of the store's usage records for a usage pricing plan.
  """
  usageRecords(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: AppUsageRecordSortKeys = CREATED_AT
  ): AppUsageRecordConnection!
}

"""
The set of valid sort keys for the AppSubscription query.
"""
enum AppSubscriptionSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The status of the app subscription.
"""
enum AppSubscriptionStatus {
  """
  The app subscription has been approved by the merchant and is ready to be activated by the app.
  """
  ACCEPTED @deprecated(reason: "As of API version 2021-01, when a merchant approves an app subscription, the status immediately transitions from `pending` to `active`.")

  """
  The app subscription has been approved by the merchant. Active app
  subscriptions are billed to the shop. After payment, partners receive payouts.
  """
  ACTIVE

  """
  The app subscription was cancelled by the app. This could be caused by the app
  being uninstalled, a new app subscription being activated, or a direct
  cancellation by the app. This is a terminal state.
  """
  CANCELLED

  """
  The app subscription was declined by the merchant. This is a terminal state.
  """
  DECLINED

  """
  The app subscription wasn't approved by the merchant within two days of being created. This is a terminal state.
  """
  EXPIRED

  """
  The app subscription is on hold due to non-payment. The subscription re-activates after payments resume.
  """
  FROZEN

  """
  The app subscription is pending approval by the merchant.
  """
  PENDING
}

"""
The set of valid sort keys for the AppTransaction query.
"""
enum AppTransactionSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Defines a usage pricing model for the app subscription.
These charges are variable based on how much the merchant uses the app.
"""
type AppUsagePricing {
  """
  The total usage records for interval.
  """
  balanceUsed: MoneyV2!

  """
  The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
  This prevents billing from exceeding a maximum threshold over the duration of the billing period.
  For the merchant to continue using the app after exceeding a capped amount,
  they would need to agree to a new usage charge.
  """
  cappedAmount: MoneyV2!

  """
  The frequency with which the app usage records are billed.
  """
  interval: AppPricingInterval!

  """
  The terms and conditions for app usage pricing.
  Must be present in order to create usage charges.
  The terms are presented to the merchant when they approve an app's usage charges.
  """
  terms: String!
}

"""
Store usage for app subscriptions with usage pricing.
"""
type AppUsageRecord implements Node {
  """
  The date and time when the usage record was created.
  """
  createdAt: DateTime!

  """
  The description of the app usage record.
  """
  description: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A unique key generated by the client to avoid duplicate charges.
  """
  idempotencyKey: String

  """
  The price of the usage record.
  """
  price: MoneyV2!

  """
  Defines the usage pricing plan the merchant is subscribed to.
  """
  subscriptionLineItem: AppSubscriptionLineItem!
}

"""
An auto-generated type for paginating through multiple AppUsageRecords.
"""
type AppUsageRecordConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [AppUsageRecordEdge!]!

  """
  A list of nodes that are contained in AppUsageRecordEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [AppUsageRecord!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one AppUsageRecord and a cursor during pagination.
"""
type AppUsageRecordEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of AppUsageRecordEdge.
  """
  node: AppUsageRecord!
}

"""
The set of valid sort keys for the AppUsageRecord query.
"""
enum AppUsageRecordSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The Apple mobile platform application.
"""
type AppleApplication {
  """
  The iOS App Clip application ID.
  """
  appClipApplicationId: String

  """
  Whether iOS App Clips are enabled for this app.
  """
  appClipsEnabled: Boolean!

  """
  The iOS App ID.
  """
  appId: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether iOS shared web credentials are enabled for this app.
  """
  sharedWebCredentialsEnabled: Boolean!

  """
  Whether iOS Universal Links are supported by this app.
  """
  universalLinksEnabled: Boolean!
}

"""
An article in the blogging system.
"""
type Article implements HasEvents & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Navigable & Node {
  """
  The name of the author of the article.
  """
  author: ArticleAuthor

  """
  The blog containing the article.
  """
  blog: Blog!

  """
  The text of the article's body, complete with HTML markup.
  """
  body: HTML!

  """
  List of the article's comments.
  """
  comments(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | published_status | string | Filter by published status | - `any`<br/> -
    `published`<br/> - `unpublished` | | - `published_status:any`<br/> -
    `published_status:published`<br/> - `published_status:unpublished` |
    | status | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CommentConnection!

  """
  Count of comments.
  """
  commentsCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | published_status | string | Filter by published status | - `any`<br/> -
    `published`<br/> - `unpublished` | | - `published_status:any`<br/> -
    `published_status:published`<br/> - `published_status:unpublished` |
    | status | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String
  ): Count

  """
  The date and time (ISO 8601 format) when the article was created.
  """
  createdAt: DateTime!

  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A unique, human-friendly string for the article that's automatically generated from the article's title.
  The handle is used in the article's URL.
  """
  handle: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The image associated with the article.
  """
  image: Image

  """
  Whether or not the article is visible.
  """
  isPublished: Boolean!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The date and time (ISO 8601 format) when the article became or will become visible.
  Returns null when the article isn't visible.
  """
  publishedAt: DateTime

  """
  A summary of the article, which can include HTML markup.
  The summary is used by the online store theme to display the article on other
  pages, such as the home page or the main blog page.
  """
  summary: HTML

  """
  A comma-separated list of tags.
  Tags are additional short descriptors formatted as a string of comma-separated values.
  """
  tags: [String!]!

  """
  The name of the template an article is using if it's using an alternate template.
  If an article is using the default `article.liquid` template, then the value returned is `null`.
  """
  templateSuffix: String

  """
  The title of the article.
  """
  title: String!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!

  """
  The date and time (ISO 8601 format) when the article was last updated.
  """
  updatedAt: DateTime
}

"""
Represents an article author in an Article.
"""
type ArticleAuthor {
  """
  The author's full name.
  """
  name: String!
}

"""
An auto-generated type for paginating through multiple Articles.
"""
type ArticleConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ArticleEdge!]!

  """
  A list of nodes that are contained in ArticleEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Article!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Article and a cursor during pagination.
"""
type ArticleEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ArticleEdge.
  """
  node: Article!
}

"""
The set of valid sort keys for the Article query.
"""
enum ArticleSortKeys {
  """
  Sort by the `author` value.
  """
  AUTHOR

  """
  Sort by the `blog_title` value.
  """
  BLOG_TITLE

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `published_at` value.
  """
  PUBLISHED_AT

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `title` value.
  """
  TITLE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
Possible sort of tags.
"""
enum ArticleTagSort {
  """
  Sort alphabetically..
  """
  ALPHABETICAL

  """
  Sort by popularity, starting with the most popular tag.
  """
  POPULAR
}

"""
Represents a generic custom attribute, such as whether an order is a customer's first.
"""
type Attribute {
  """
  The key or name of the attribute. For example, `"customersFirstOrder"`.
  """
  key: String!

  """
  The value of the attribute. For example, `"true"`.
  """
  value: String
}

"""
Automatic discount applications capture the intentions of a discount that was automatically applied.
"""
type AutomaticDiscountApplication implements DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The title of the discount application.
  """
  title: String!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
The set of valid sort keys for the AutomaticDiscount query.
"""
enum AutomaticDiscountSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Represents an object containing all information for channels available to a shop.
"""
type AvailableChannelDefinitionsByChannel {
  """
  The channel definitions for channels installed on a shop.
  """
  channelDefinitions: [ChannelDefinition!]!

  """
  The name of the channel.
  """
  channelName: String!
}

"""
The possible types for a badge.
"""
enum BadgeType {
  """
  This badge has type `attention`.
  """
  ATTENTION

  """
  This badge has type `default`.
  """
  DEFAULT

  """
  This badge has type `info`.
  """
  INFO

  """
  This badge has type `success`.
  """
  SUCCESS

  """
  This badge has type `warning`.
  """
  WARNING
}

"""
The set of valid sort keys for the BalanceTransaction query.
"""
enum BalanceTransactionSortKeys {
  """
  Sort by the `amount` value.
  """
  AMOUNT

  """
  Sort by the `fee` value.
  """
  FEE

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `net` value.
  """
  NET

  """
  Sort by the `order_name` value.
  """
  ORDER_NAME

  """
  Sort by the `payment_method_name` value.
  """
  PAYMENT_METHOD_NAME

  """
  Sort by the `payout_date` value.
  """
  PAYOUT_DATE

  """
  Sort by the `payout_status` value.
  """
  PAYOUT_STATUS

  """
  Sort by the `processed_at` value.
  """
  PROCESSED_AT

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `transaction_type` value.
  """
  TRANSACTION_TYPE
}

"""
Generic payment details that are related to a transaction.
"""
interface BasePaymentDetails {
  """
  The name of payment method used by the buyer.
  """
  paymentMethodName: String
}

"""
Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
the addition of a product.

### General events

| Action | Description  |
|---|---|
| `create` | The item was created. |
| `destroy` | The item was destroyed. |
| `published` | The item was published. |
| `unpublished` | The item was unpublished. |
| `update` | The item was updated.  |

### Order events

Order events can be divided into the following categories:

- *Authorization*: Includes whether the authorization succeeded, failed, or is pending.
- *Capture*: Includes whether the capture succeeded, failed, or is pending.
- *Email*: Includes confirmation or cancellation of the order, as well as shipping.
- *Fulfillment*: Includes whether the fulfillment succeeded, failed, or is
pending. Also includes cancellation, restocking, and fulfillment updates.
- *Order*: Includess the placement, confirmation, closing, re-opening, and cancellation of the order.
- *Refund*: Includes whether the refund succeeded, failed, or is pending.
- *Sale*: Includes whether the sale succeeded, failed, or is pending.
- *Void*: Includes whether the void succeeded, failed, or is pending.

| Action  | Message  | Description  |
|---|---|---|
| `authorization_failure` | The customer, unsuccessfully, tried to authorize:
`{money_amount}`. | Authorization failed. The funds cannot be captured. |
| `authorization_pending` | Authorization for `{money_amount}` is pending. | Authorization pending. |
| `authorization_success` | The customer successfully authorized us to capture:
`{money_amount}`. | Authorization was successful and the funds are available for capture. |
| `cancelled` | Order was cancelled by `{shop_staff_name}`. | The order was cancelled. |
| `capture_failure` | We failed to capture: `{money_amount}`. | The capture
failed. The funds cannot be transferred to the shop. |
| `capture_pending` | Capture for `{money_amount}` is pending. | The capture is
in process. The funds are not yet available to the shop. |
| `capture_success` | We successfully captured: `{money_amount}` | The capture
was successful and the funds are now available to the shop. |
| `closed` | Order was closed. | The order was closed. |
| `confirmed` | Received a new order: `{order_number}` by `{customer_name}`. | The order was confirmed. |
| `fulfillment_cancelled` | We cancelled `{number_of_line_items}` from being
fulfilled by the third party fulfillment service. | Fulfillment for one or more
of the line_items failed. |
| `fulfillment_pending` | We submitted `{number_of_line_items}` to the third
party service. | One or more of the line_items has been assigned to a third
party service for fulfillment. |
| `fulfillment_success` | We successfully fulfilled line_items. | Fulfillment was successful for one or more line_items. |
| `mail_sent` | `{message_type}` email was sent to the customer. | An email was sent to the customer. |
| `placed` | Order was placed. | An order was placed by the customer. |
| `re_opened` | Order was re-opened. | An order was re-opened. |
| `refund_failure` | We failed to refund `{money_amount}`. | The refund failed. The funds are still with the shop. |
| `refund_pending` | Refund of `{money_amount}` is still pending. | The refund
is in process. The funds are still with shop. |
| `refund_success` | We successfully refunded `{money_amount}`. | The refund was
successful. The funds have been transferred to the customer. |
| `restock_line_items` | We restocked `{number_of_line_items}`. |	One or more of
the order's line items have been restocked. |
| `sale_failure` | The customer failed to pay `{money_amount}`. | The sale
failed. The funds are not available to the shop. |
| `sale_pending` | The `{money_amount}` is pending. | The sale is in process. The funds are not yet available to the shop. |
| `sale_success` | We successfully captured `{money_amount}`. | The sale was successful. The funds are now with the shop. |
| `update` | `{order_number}` was updated. | The order was updated. |
| `void_failure` | We failed to void the authorization. | Voiding the
authorization failed. The authorization is still valid. |
| `void_pending` | Authorization void is pending. | Voiding the authorization is
in process. The authorization is still valid. |
| `void_success` | We successfully voided the authorization. | Voiding the
authorization was successful. The authorization is no longer valid. |
"""
type BasicEvent implements Event & Node {
  """
  The action that occured.
  """
  action: String!

  """
  Provides additional content for collapsible timeline events.
  """
  additionalContent: JSON

  """
  Provides additional data for event consumers.
  """
  additionalData: JSON

  """
  The name of the app that created the event.
  """
  appTitle: String

  """
  Refers to a certain event and its resources.
  """
  arguments: JSON

  """
  Whether the event was created by an app.
  """
  attributeToApp: Boolean!

  """
  Whether the event was caused by an admin user.
  """
  attributeToUser: Boolean!

  """
  The date and time when the event was created.
  """
  createdAt: DateTime!

  """
  Whether the event is critical.
  """
  criticalAlert: Boolean!

  """
  Whether this event has additional content.
  """
  hasAdditionalContent: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Human readable text that describes the event.
  """
  message: FormattedString!

  """
  Human readable text that supports the event message.
  """
  secondaryMessage: FormattedString

  """
  The resource that generated the event. To see a list of possible types,
  refer to [HasEvents](https://shopify.dev/docs/api/admin-graphql/unstable/interfaces/HasEvents#implemented-in).
  """
  subject: HasEvents

  """
  The ID of the resource that generated the event.
  """
  subjectId: ID!

  """
  The type of the resource that generated the event.
  """
  subjectType: EventSubjectType!
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
to be used as a type of magazine or newsletter for the shop, with content that changes over time.
"""
type Blog implements HasEvents & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Node {
  """
  List of the blog's articles.
  """
  articles(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ArticleConnection!

  """
  Count of articles.
  """
  articlesCount: Count

  """
  Indicates whether readers can post comments to the blog and if comments are moderated or not.
  """
  commentPolicy: CommentPolicy!

  """
  The date and time when the blog was created.
  """
  createdAt: DateTime!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  FeedBurner provider details. Any blogs that aren't already integrated with FeedBurner can't use the service.
  """
  feed: BlogFeed

  """
  A unique, human-friendly string for the blog. If no handle is specified, a
  handle will be generated automatically from the blog title.
  The handle is customizable and is used by the Liquid templating language to refer to the blog.
  """
  handle: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  A list of tags associated with the 200 most recent blog articles.
  """
  tags: [String!]!

  """
  The name of the template a blog is using if it's using an alternate template.
  Returns `null` if a blog is using the default blog.liquid template.
  """
  templateSuffix: String

  """
  The title of the blog.
  """
  title: String!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!

  """
  The date and time when the blog was update.
  """
  updatedAt: DateTime
}

"""
An auto-generated type for paginating through multiple Blogs.
"""
type BlogConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [BlogEdge!]!

  """
  A list of nodes that are contained in BlogEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Blog!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Blog and a cursor during pagination.
"""
type BlogEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of BlogEdge.
  """
  node: Blog!
}

"""
FeedBurner provider details. Any blogs that aren't already integrated with FeedBurner can't use the service.
"""
type BlogFeed {
  """
  Blog feed provider url.
  """
  location: URL!

  """
  Blog feed provider path.
  """
  path: String!
}

"""
The set of valid sort keys for the Blog query.
"""
enum BlogSortKeys {
  """
  Sort by the `handle` value.
  """
  HANDLE

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `title` value.
  """
  TITLE
}

"""
An asynchronous long-running operation to fetch data in bulk or to bulk import data.

Bulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After
they are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
a link to the data in [JSONL](http://jsonlines.org/) format.

Refer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
"""
type BulkOperation implements Node {
  """
  When the bulk operation was successfully completed.
  """
  completedAt: DateTime

  """
  When the bulk operation was created.
  """
  createdAt: DateTime!

  """
  Error code for failed operations.
  """
  errorCode: BulkOperationErrorCode

  """
  File size in bytes of the file in the `url` field.
  """
  fileSize: UnsignedInt64

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A running count of all the objects processed.
  For example, when fetching all the products and their variants, this field counts both products and variants.
  This field can be used to track operation progress.
  """
  objectCount: UnsignedInt64!

  """
  The URL that points to the partial or incomplete response data (in
  [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.
  The URL expires 7 days after the operation fails. Returns `null` when there's no data available.
  """
  partialDataUrl: URL

  """
  GraphQL query document specified in `bulkOperationRunQuery`.
  """
  query: String!

  """
  A running count of all the objects that are processed at the root of the query.
  For example, when fetching all the products and their variants, this field only counts products.
  This field can be used to track operation progress.
  """
  rootObjectCount: UnsignedInt64!

  """
  Status of the bulk operation.
  """
  status: BulkOperationStatus!

  """
  The bulk operation's type.
  """
  type: BulkOperationType!

  """
  The URL that points to the response data in [JSONL](http://jsonlines.org/) format.
  The URL expires 7 days after the operation completes.
  """
  url: URL
}

"""
Error codes for failed bulk operations.
"""
enum BulkOperationErrorCode {
  """
  The provided operation `query` returned access denied due to missing
  [access scopes](https://shopify.dev/api/usage/access-scopes).
  Review the requested object permissions and execute the query as a normal non-bulk GraphQL request to see more details.
  """
  ACCESS_DENIED

  """
  The operation resulted in partial or incomplete data due to internal server errors during execution.
  These errors might be intermittent, so you can try performing the same query again.
  """
  INTERNAL_SERVER_ERROR

  """
  The operation resulted in partial or incomplete data due to query timeouts during execution.
  In some cases, timeouts can be avoided by modifying your `query` to select fewer fields.
  """
  TIMEOUT
}

"""
The valid values for the status of a bulk operation.
"""
enum BulkOperationStatus {
  """
  The bulk operation has been canceled.
  """
  CANCELED

  """
  Cancelation has been initiated on the bulk operation. There may be a short delay from when a cancelation
  starts until the operation is actually canceled.
  """
  CANCELING

  """
  The bulk operation has successfully completed.
  """
  COMPLETED

  """
  The bulk operation has been created.
  """
  CREATED

  """
  The bulk operation URL has expired.
  """
  EXPIRED

  """
  The bulk operation has failed. For information on why the operation failed, use
  [BulkOperation.errorCode](https://shopify.dev/api/admin-graphql/latest/enums/bulkoperationerrorcode).
  """
  FAILED

  """
  The bulk operation is runnning.
  """
  RUNNING
}

"""
The valid values for the bulk operation's type.
"""
enum BulkOperationType {
  """
  The bulk operation is a mutation.
  """
  MUTATION

  """
  The bulk operation is a query.
  """
  QUERY
}

"""
Represents the Bundles feature configuration for the shop.
"""
type BundlesFeature {
  """
  Whether a shop is configured properly to sell bundles.
  """
  eligibleForBundles: Boolean!

  """
  The reason why a shop is not eligible for bundles.
  """
  ineligibilityReason: String

  """
  Whether a shop has any fixed bundle products or has a cartTransform function installed.
  """
  sellsBundles: Boolean!
}

"""
Represents a merchant's Business Entity.
"""
type BusinessEntity implements Node {
  """
  The address of the merchant's Business Entity.
  """
  address: BusinessEntityAddress!

  """
  The name of the company associated with the merchant's Business Entity.
  """
  companyName: String

  """
  The display name of the merchant's Business Entity.
  """
  displayName: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether it's the merchant's primary Business Entity.
  """
  primary: Boolean!

  """
  Shopify Payments account information, including balances and payouts.
  """
  shopifyPaymentsAccount: ShopifyPaymentsAccount @accessRestricted(reason: "Requires the `read_shopify_payments` approval scope.")
}

"""
Represents the address of a merchant's Business Entity.
"""
type BusinessEntityAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The country code of the merchant's Business Entity.
  """
  countryCode: CountryCode!

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
Settings describing the behavior of checkout for a B2B buyer.
"""
type BuyerExperienceConfiguration {
  """
  Whether to checkout to draft order for merchant review.
  """
  checkoutToDraft: Boolean!

  """
  The portion required to be paid at checkout.
  """
  deposit: DepositConfiguration

  """
  Whether to allow customers to use editable shipping addresses.
  """
  editableShippingAddress: Boolean!

  """
  Whether a buyer must pay at checkout or they can also choose to pay
  later using net terms.
  """
  payNowOnly: Boolean! @deprecated(reason: "Please use `checkoutToDraft`(must be false) and `paymentTermsTemplate`(must be nil) to derive this instead.")

  """
  Represents the merchant configured payment terms.
  """
  paymentTermsTemplate: PaymentTermsTemplate
}

"""
The input fields for exchange line items on a calculated return.
"""
input CalculateExchangeLineItemInput {
  """
  The discount to be applied to the exchange line item.
  """
  appliedDiscount: ExchangeLineItemAppliedDiscountInput

  """
  The quantity of the item to be added.
  """
  quantity: Int!

  """
  The ID of the product variant to be added to the order as part of an exchange.
  """
  variantId: ID
}

"""
The input fields to calculate return amounts associated with an order.
"""
input CalculateReturnInput {
  """
  The exchange line items to add to the order.
  """
  exchangeLineItems: [CalculateExchangeLineItemInput!] = []

  """
  The ID of the order that will be returned.
  """
  orderId: ID!

  """
  The line items from the order to include in the return.
  """
  returnLineItems: [CalculateReturnLineItemInput!] = []

  """
  The return shipping fee associated with the return.
  """
  returnShippingFee: ReturnShippingFeeInput
}

"""
The input fields for return line items on a calculated return.
"""
input CalculateReturnLineItemInput {
  """
  The ID of the fulfillment line item to be returned.
  """
  fulfillmentLineItemId: ID!

  """
  The quantity of the item to be returned.
  """
  quantity: Int!

  """
  The restocking fee for the return line item.
  """
  restockingFee: RestockingFeeInput
}

"""
A discount that is automatically applied to an order that is being edited.
"""
type CalculatedAutomaticDiscountApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The level at which the discount was applied.
  """
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
An amount discounting the line that has been allocated by an associated discount application.
"""
type CalculatedDiscountAllocation {
  """
  The money amount that's allocated by the discount application in shop and presentment currencies.
  """
  allocatedAmountSet: MoneyBag!

  """
  The discount that the allocated amount originated from.
  """
  discountApplication: CalculatedDiscountApplication!
}

"""
A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied.
"""
interface CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The level at which the discount was applied.
  """
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
An auto-generated type for paginating through multiple CalculatedDiscountApplications.
"""
type CalculatedDiscountApplicationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CalculatedDiscountApplicationEdge!]!

  """
  A list of nodes that are contained in CalculatedDiscountApplicationEdge. You
  can fetch data about an individual node, or you can follow the edges to fetch
  data about a collection of related nodes. At each node, you specify the fields
  that you want to retrieve.
  """
  nodes: [CalculatedDiscountApplication!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.
"""
type CalculatedDiscountApplicationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CalculatedDiscountApplicationEdge.
  """
  node: CalculatedDiscountApplication!
}

"""
A discount code that is applied to an order that is being edited.
"""
type CalculatedDiscountCodeApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The level at which the discount was applied.
  """
  appliedTo: DiscountApplicationLevel!

  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
The calculated line item for a draft order.
"""
type CalculatedDraftOrderLineItem {
  """
  The custom applied discount.
  """
  appliedDiscount: DraftOrderAppliedDiscount

  """
  The `discountedTotal` divided by `quantity`,
  equal to the average value of the line item price per unit after discounts are applied.
  This value doesn't include discounts applied to the entire draft order.
  """
  approximateDiscountedUnitPriceSet: MoneyBag!

  """
  The bundle components of the draft order line item.
  """
  bundleComponents: [CalculatedDraftOrderLineItem!]!

  """
  Whether the line item is custom (`true`) or contains a product variant (`false`).
  """
  custom: Boolean!

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The list of additional information (metafields) with the associated types.
  """
  customAttributesV2: [TypedAttribute!]!

  """
  The total price with discounts applied.
  """
  discountedTotal: MoneyV2!

  """
  The total price with discounts applied.
  """
  discountedTotalSet: MoneyBag!

  """
  The unit price with discounts applied.
  """
  discountedUnitPrice: MoneyV2! @deprecated(reason: "Use `approximateDiscountedUnitPriceSet` instead.")

  """
  The unit price with discounts applied.
  """
  discountedUnitPriceSet: MoneyBag! @deprecated(reason: "Use `approximateDiscountedUnitPriceSet` instead.")

  """
  Name of the service provider who fulfilled the order.

  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.

  Deleted fulfillment services will return null.
  """
  fulfillmentService: FulfillmentService

  """
  The image associated with the draft order line item.
  """
  image: Image

  """
  Whether the line item represents the purchase of a gift card.
  """
  isGiftCard: Boolean!

  """
  The name of the product.
  """
  name: String!

  """
  The total price, excluding discounts, equal to the original unit price multiplied by quantity.
  """
  originalTotal: MoneyV2!

  """
  The total price excluding discounts, equal to the original unit price multiplied by quantity.
  """
  originalTotalSet: MoneyBag!

  """
  The line item price without any discounts applied.
  """
  originalUnitPrice: MoneyV2!

  """
  The price without any discounts applied.
  """
  originalUnitPriceSet: MoneyBag!

  """
  The original custom line item input price.
  """
  originalUnitPriceWithCurrency: MoneyV2

  """
  The price override for the line item.
  """
  priceOverride: MoneyV2

  """
  The product for the line item.
  """
  product: Product

  """
  The quantity of items. For a bundle item, this is the quantity of bundles,
  not the quantity of items contained in the bundles themselves.
  """
  quantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  The SKU number of the product variant.
  """
  sku: String

  """
  Whether the variant is taxable.
  """
  taxable: Boolean!

  """
  The title of the product or variant. This field only applies to custom line items.
  """
  title: String!

  """
  The total value of the discount.
  """
  totalDiscount: MoneyV2!

  """
  The total discount amount.
  """
  totalDiscountSet: MoneyBag!

  """
  The UUID of the draft order line item. Must be unique and consistent across requests.
  This field is mandatory in order to manipulate drafts with bundles.
  """
  uuid: String!

  """
  The product variant for the line item.
  """
  variant: ProductVariant

  """
  The name of the variant.
  """
  variantTitle: String

  """
  The name of the vendor who created the product variant.
  """
  vendor: String

  """
  The weight unit and value.
  """
  weight: Weight
}

"""
A calculated exchange line item.
"""
type CalculatedExchangeLineItem {
  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  calculatedDiscountAllocations: [CalculatedDiscountAllocation!]!

  """
  The unit price of the exchange line item after discounts.
  """
  discountedUnitPriceSet: MoneyBag!

  """
  A globally-unique ID.
  """
  id: ID

  """
  The original unit price of the exchange line item before discounts.
  """
  originalUnitPriceSet: MoneyBag!

  """
  The quantity being exchanged.
  """
  quantity: Int!

  """
  The calculated subtotal set of the exchange line item, including discounts.
  """
  subtotalSet: MoneyBag!

  """
  The total tax of the exchange line item.
  """
  totalTaxSet: MoneyBag!

  """
  The variant being exchanged.
  """
  variant: ProductVariant
}

"""
A line item involved in order editing that may be newly added or have new changes applied.
"""
type CalculatedLineItem {
  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  calculatedDiscountAllocations: [CalculatedDiscountAllocation!]!

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [DiscountAllocation!]! @deprecated(reason: "Use `calculatedDiscountAllocations` instead.")

  """
  The price of a single quantity of the line item with line item discounts
  applied, in shop and presentment currencies. Discounts applied to the entire
  order aren't included in this price.
  """
  discountedUnitPriceSet: MoneyBag!

  """
  The total number of items that can be edited.
  """
  editableQuantity: Int!

  """
  The editable quantity prior to any changes made in the current edit.
  """
  editableQuantityBeforeChanges: Int!

  """
  The total price of editable lines in shop and presentment currencies.
  """
  editableSubtotalSet: MoneyBag!

  """
  Whether the calculated line item has a staged discount.
  """
  hasStagedLineItemDiscount: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The image object associated to the line item's variant.
  """
  image: Image

  """
  The variant unit price in shop and presentment currencies, without any discounts applied.
  """
  originalUnitPriceSet: MoneyBag!

  """
  The total number of items.
  """
  quantity: Int!

  """
  Whether the line item can be restocked or not.
  """
  restockable: Boolean!

  """
  Whether the changes on the line item will result in a restock.
  """
  restocking: Boolean!

  """
  The variant SKU number.
  """
  sku: String

  """
  A list of changes that affect this line item.
  """
  stagedChanges: [OrderStagedChange!]!

  """
  The title of the product.
  """
  title: String!

  """
  The total price of uneditable lines in shop and presentment currencies.
  """
  uneditableSubtotalSet: MoneyBag!

  """
  The product variant associated with this line item. The value is null for custom line items and items where
  the variant has been deleted.
  """
  variant: ProductVariant

  """
  The title of the variant.
  """
  variantTitle: String
}

"""
An auto-generated type for paginating through multiple CalculatedLineItems.
"""
type CalculatedLineItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CalculatedLineItemEdge!]!

  """
  A list of nodes that are contained in CalculatedLineItemEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CalculatedLineItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.
"""
type CalculatedLineItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CalculatedLineItemEdge.
  """
  node: CalculatedLineItem!
}

"""
Represents a discount that was manually created for an order that is being edited.
"""
type CalculatedManualDiscountApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The level at which the discount was applied.
  """
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
An order with edits applied but not saved.
"""
type CalculatedOrder implements Node {
  """
  Returns only the new discount applications being added to the order in the current edit.
  """
  addedDiscountApplications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CalculatedDiscountApplicationConnection!

  """
  Returns only the new line items being added to the order during the current edit.
  """
  addedLineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CalculatedLineItemConnection!

  """
  Amount of the order-level discount (doesn't contain any line item discounts) in shop and presentment currencies.
  """
  cartDiscountAmountSet: MoneyBag

  """
  Whether the changes have been applied and saved to the order.
  """
  committed: Boolean! @deprecated(reason: "CalculatedOrder for committed order edits is being deprecated, and this field will also be removed in a future version.  See [changelog](https://shopify.dev/changelog/deprecation-notice-calculatedorder-for-committed-order-edits) for more details.")

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Returns all items on the order that existed before starting the edit.
  Will include any changes that have been made.
  Will not include line items added during the current edit.
  """
  lineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | editable | boolean |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CalculatedLineItemConnection!

  """
  The HTML of the customer notification for the order edit.
  """
  notificationPreviewHtml: HTML

  """
  The customer notification title.
  """
  notificationPreviewTitle: String!

  """
  The order without any changes applied.
  """
  originalOrder: Order!

  """
  Returns the shipping lines on the order that existed before starting the edit.
  Will include any changes that have been made as well as shipping lines added during the current edit.
  Returns only the first 250 shipping lines.
  """
  shippingLines: [CalculatedShippingLine!]!

  """
  List of changes made to the order during the current edit.
  """
  stagedChanges(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): OrderStagedChangeConnection!

  """
  The sum of the quantities for the line items that contribute to the order's subtotal.
  """
  subtotalLineItemsQuantity: Int!

  """
  The subtotal of the line items, in shop and presentment currencies, after all
  the discounts are applied.  The subtotal doesn't include shipping.  The
  subtotal includes taxes for taxes-included orders and excludes taxes for
  taxes-excluded orders.
  """
  subtotalPriceSet: MoneyBag

  """
  Taxes charged for the line item.
  """
  taxLines: [TaxLine!]!

  """
  Total price of the order less the total amount received from the customer in shop and presentment currencies.
  """
  totalOutstandingSet: MoneyBag!

  """
  Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
  """
  totalPriceSet: MoneyBag!
}

"""
The calculated costs of handling a return line item.
Typically, this would cover the costs of inspecting, repackaging, and restocking the item.
"""
type CalculatedRestockingFee implements CalculatedReturnFee {
  """
  The calculated amount of the return fee, in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The value of the fee as a percentage.
  """
  percentage: Float!
}

"""
A calculated return.
"""
type CalculatedReturn {
  """
  A list of calculated exchange line items.
  """
  exchangeLineItems: [CalculatedExchangeLineItem!]!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A list of calculated return line items.
  """
  returnLineItems: [CalculatedReturnLineItem!]!

  """
  The calulated return shipping fee.
  """
  returnShippingFee: CalculatedReturnShippingFee
}

"""
A calculated return fee.
"""
interface CalculatedReturnFee {
  """
  The calculated amount of the return fee, in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  A globally-unique ID.
  """
  id: ID!
}

"""
A calculated return line item.
"""
type CalculatedReturnLineItem {
  """
  The fulfillment line item from which items are returned.
  """
  fulfillmentLineItem: FulfillmentLineItem!

  """
  A globally-unique ID.
  """
  id: ID

  """
  The quantity being returned.
  """
  quantity: Int!

  """
  The restocking fee of the return line item.
  """
  restockingFee: CalculatedRestockingFee

  """
  The subtotal of the return line item before order discounts.
  """
  subtotalBeforeOrderDiscountsSet: MoneyBag!

  """
  The subtotal of the return line item.
  """
  subtotalSet: MoneyBag!

  """
  The total tax of the return line item.
  """
  totalTaxSet: MoneyBag!
}

"""
The calculated cost of the return shipping.
"""
type CalculatedReturnShippingFee implements CalculatedReturnFee {
  """
  The calculated amount of the return fee, in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  A globally-unique ID.
  """
  id: ID!
}

"""
A discount created by a Shopify script for an order that is being edited.
"""
type CalculatedScriptDiscountApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The level at which the discount was applied.
  """
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
A shipping line item involved in order editing that may be newly added or have new changes applied.
"""
type CalculatedShippingLine {
  """
  A globally-unique ID.
  """
  id: ID

  """
  The price of the shipping line when sold and before applying discounts. This
  field includes taxes if `Order.taxesIncluded` is true. Otherwise, this field
  doesn't include taxes for the shipping line.
  """
  price: MoneyBag!

  """
  The staged status of the shipping line.
  """
  stagedStatus: CalculatedShippingLineStagedStatus!

  """
  The title of the shipping line.
  """
  title: String!
}

"""
Represents the staged status of a CalculatedShippingLine on a CalculatedOrder.
"""
enum CalculatedShippingLineStagedStatus {
  """
  The shipping line was added as part of the current order edit.
  """
  ADDED

  """
  The shipping line has no staged changes associated with it.
  """
  NONE

  """
  The shipping line was removed as part of the current order edit.
  """
  REMOVED
}

"""
Card payment details related to a transaction.
"""
type CardPaymentDetails implements BasePaymentDetails {
  """
  The response code from the address verification system (AVS). The code is always a single letter.
  """
  avsResultCode: String

  """
  The issuer identification number (IIN), formerly known as bank identification
  number (BIN) of the customer's credit card. This is made up of the first few
  digits of the credit card number.
  """
  bin: String

  """
  The name of the company that issued the customer's credit card.
  """
  company: String

  """
  The response code from the credit card company indicating whether the customer
  entered the card security code, or card verification value, correctly. The
  code is a single letter or empty string.
  """
  cvvResultCode: String

  """
  The month in which the used credit card expires.
  """
  expirationMonth: Int

  """
  The year in which the used credit card expires.
  """
  expirationYear: Int

  """
  The holder of the credit card.
  """
  name: String

  """
  The customer's credit card number, with most of the leading digits redacted.
  """
  number: String

  """
  The name of payment method used by the buyer.
  """
  paymentMethodName: String

  """
  Digital wallet used for the payment.
  """
  wallet: DigitalWallet
}

"""
The set of valid sort keys for the CarrierService query.
"""
enum CarrierServiceSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle).
"""
type CartTransform implements HasMetafields & Node {
  """
  Whether a run failure will block cart and checkout operations.
  """
  blockOnFailure: Boolean!

  """
  The ID for the Cart Transform function.
  """
  functionId: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!
}

"""
An auto-generated type for paginating through multiple CartTransforms.
"""
type CartTransformConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CartTransformEdge!]!

  """
  A list of nodes that are contained in CartTransformEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CartTransform!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CartTransform and a cursor during pagination.
"""
type CartTransformEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CartTransformEdge.
  """
  node: CartTransform!
}

"""
Represents the cart transform feature configuration for the shop.
"""
type CartTransformEligibleOperations {
  """
  The shop is eligible for expand operations.
  """
  expandOperation: Boolean!

  """
  The shop is eligible for merge operations.
  """
  mergeOperation: Boolean!

  """
  The shop is eligible for update operations.
  """
  updateOperation: Boolean!
}

"""
Represents the cart transform feature configuration for the shop.
"""
type CartTransformFeature {
  """
  The cart transform operations eligible for the shop.
  """
  eligibleOperations: CartTransformEligibleOperations!
}

"""
The rounding adjustment applied to total payment or refund received for an Order involving cash payments.
"""
type CashRoundingAdjustment {
  """
  The rounding adjustment that can be applied to totalReceived for an Order
  involving cash payments in shop and presentment currencies. Could be a
  positive or negative value. Value is 0 if there's no rounding, or for non-cash payments.
  """
  paymentSet: MoneyBag!

  """
  The rounding adjustment that can be applied to totalRefunded for an Order
  involving cash payments in shop and presentment currencies. Could be a
  positive or negative value. Value is 0 if there's no rounding, or for non-cash refunds.
  """
  refundSet: MoneyBag!
}

"""
Tracks an adjustment to the cash in a cash tracking session for a point of sale device over the course of a shift.
"""
type CashTrackingAdjustment implements Node {
  """
  The amount of cash being added or removed.
  """
  cash: MoneyV2!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The note entered when the adjustment was made.
  """
  note: String

  """
  The staff member who made the adjustment.
  """
  staffMember: StaffMember!

  """
  The time when the adjustment was made.
  """
  time: DateTime!
}

"""
An auto-generated type for paginating through multiple CashTrackingAdjustments.
"""
type CashTrackingAdjustmentConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CashTrackingAdjustmentEdge!]!

  """
  A list of nodes that are contained in CashTrackingAdjustmentEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [CashTrackingAdjustment!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CashTrackingAdjustment and a cursor during pagination.
"""
type CashTrackingAdjustmentEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CashTrackingAdjustmentEdge.
  """
  node: CashTrackingAdjustment!
}

"""
Tracks the balance in a cash drawer for a point of sale device over the course of a shift.
"""
type CashTrackingSession implements Node {
  """
  The adjustments made to the cash drawer during this session.
  """
  adjustments(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: AdjustmentsSortKeys = TIME
  ): CashTrackingAdjustmentConnection!

  """
  Whether this session is tracking cash payments.
  """
  cashTrackingEnabled: Boolean!

  """
  The cash transactions made during this session.
  """
  cashTransactions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | kind | string |
    | processed_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CashTrackingSessionTransactionsSortKeys = PROCESSED_AT
  ): OrderTransactionConnection!

  """
  The counted cash balance when the session was closed.
  """
  closingBalance: MoneyV2

  """
  The note entered when the session was closed.
  """
  closingNote: String

  """
  The user who closed the session.
  """
  closingStaffMember: StaffMember

  """
  When the session was closed.
  """
  closingTime: DateTime

  """
  The expected balance at the end of the session or the expected current balance for sessions that are still open.
  """
  expectedBalance: MoneyV2!

  """
  The amount that was expected to be in the cash drawer at the end of the session, calculated after the session was closed.
  """
  expectedClosingBalance: MoneyV2

  """
  The amount expected to be in the cash drawer based on the previous session.
  """
  expectedOpeningBalance: MoneyV2

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The location of the point of sale device during this session.
  """
  location: Location

  """
  The net cash sales made for the duration of this cash tracking session.
  """
  netCashSales: MoneyV2!

  """
  The counted cash balance when the session was opened.
  """
  openingBalance: MoneyV2!

  """
  The note entered when the session was opened.
  """
  openingNote: String

  """
  The user who opened the session.
  """
  openingStaffMember: StaffMember

  """
  When the session was opened.
  """
  openingTime: DateTime!

  """
  The register name for the point of sale device that this session is tracking cash for.
  """
  registerName: String!

  """
  The sum of all adjustments made during the session, excluding the final adjustment.
  """
  totalAdjustments: MoneyV2

  """
  The sum of all cash refunds for the duration of this cash tracking session.
  """
  totalCashRefunds: MoneyV2!

  """
  The sum of all cash sales for the duration of this cash tracking session.
  """
  totalCashSales: MoneyV2!

  """
  The total discrepancy for the session including starting and ending.
  """
  totalDiscrepancy: MoneyV2
}

"""
An auto-generated type for paginating through multiple CashTrackingSessions.
"""
type CashTrackingSessionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CashTrackingSessionEdge!]!

  """
  A list of nodes that are contained in CashTrackingSessionEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CashTrackingSession!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CashTrackingSession and a cursor during pagination.
"""
type CashTrackingSessionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CashTrackingSessionEdge.
  """
  node: CashTrackingSession!
}

"""
The set of valid sort keys for the CashTrackingSessionTransactions query.
"""
enum CashTrackingSessionTransactionsSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `processed_at` value.
  """
  PROCESSED_AT

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The set of valid sort keys for the CashTrackingSessions query.
"""
enum CashTrackingSessionsSortKeys {
  """
  Sort by the `closing_time_asc` value.
  """
  CLOSING_TIME_ASC

  """
  Sort by the `closing_time_desc` value.
  """
  CLOSING_TIME_DESC

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `opening_time_asc` value.
  """
  OPENING_TIME_ASC

  """
  Sort by the `opening_time_desc` value.
  """
  OPENING_TIME_DESC

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `total_discrepancy_asc` value.
  """
  TOTAL_DISCREPANCY_ASC

  """
  Sort by the `total_discrepancy_desc` value.
  """
  TOTAL_DISCREPANCY_DESC
}

"""
An object with an ID field to support global identification, in accordance with the
[Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
"""
interface Catalog implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  Most recent catalog operations.
  """
  operations: [ResourceOperation!]!

  """
  The price list associated with the catalog.
  """
  priceList: PriceList

  """
  A group of products and collections that's published to a catalog.
  """
  publication: Publication

  """
  The status of the catalog.
  """
  status: CatalogStatus!

  """
  The name of the catalog.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple Catalogs.
"""
type CatalogConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CatalogEdge!]!

  """
  A list of nodes that are contained in CatalogEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Catalog!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
A catalog csv operation represents a CSV file import.
"""
type CatalogCsvOperation implements Node & ResourceOperation {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The count of processed rows, summing imported, failed, and skipped rows.
  """
  processedRowCount: Int

  """
  Represents a rows objects within this background operation.
  """
  rowCount: RowCount

  """
  The status of this operation.
  """
  status: ResourceOperationStatus!
}

"""
An auto-generated type which holds one Catalog and a cursor during pagination.
"""
type CatalogEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CatalogEdge.
  """
  node: Catalog!
}

"""
The set of valid sort keys for the Catalog query.
"""
enum CatalogSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `title` value.
  """
  TITLE
}

"""
The state of a catalog.
"""
enum CatalogStatus {
  """
  The catalog is active.
  """
  ACTIVE

  """
  The catalog is archived.
  """
  ARCHIVED

  """
  The catalog is in draft.
  """
  DRAFT
}

"""
The associated catalog's type.
"""
enum CatalogType {
  """
  Catalogs belonging to apps.
  """
  APP

  """
  Catalogs belonging to company locations.
  """
  COMPANY_LOCATION

  """
  Catalogs belonging to markets.
  """
  MARKET

  """
  Not associated to a catalog.
  """
  NONE
}

"""
A channel represents an app where you sell a group of products and collections.
A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
"""
type Channel implements Node {
  """
  The underlying app used by the channel.
  """
  app: App!

  """
  The collection publications for the list of collections published to the channel.
  """
  collectionPublicationsV3(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """
  The list of collections published to the channel.
  """
  collections(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CollectionConnection!

  """
  The unique identifier for the channel.
  """
  handle: String! @deprecated(reason: "Use `id` instead.")

  """
  Whether the collection is available to the channel.
  """
  hasCollection(
    """
    The collection ID to check.
    """
    id: ID!
  ): Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the channel.
  """
  name: String!

  """
  The menu items for the channel, which also appear as submenu items in the left navigation sidebar in the Shopify admin.
  """
  navigationItems: [NavigationItem!]! @deprecated(reason: "Use [AppInstallation.navigationItems](\n          https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-navigationitems) instead.")

  """
  Home page for the channel.
  """
  overviewPath: URL @deprecated(reason: "Use [AppInstallation.launchUrl](\n          https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-launchurl) instead.")

  """
  The product publications for the products published to the channel.
  """
  productPublications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductPublicationConnection! @deprecated(reason: "Use `productPublicationsV3` instead.")

  """
  The product publications for the list of products published to the channel.
  """
  productPublicationsV3(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """
  The list of products published to the channel.
  """
  products(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductConnection!

  """
  The count of products published to the channel. Limited to a maximum of 10000.
  """
  productsCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | barcode | string | Filter by the product variant [`barcode`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-barcode)
    field. | | | - `barcode:ABC-abc-1234` |
    | bundles | boolean | Filter by a [product
    bundle](https://shopify.dev/docs/apps/build/product-merchandising/bundles).
    A product bundle is a set of two or more related products, which are
    commonly offered at a discount. | | | - `bundles:true` |
    | category_id | string | Filter by the product [category ID](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-category)
    (`product.category.id`). A product category is the category of a product
    from [Shopify's Standard Product Taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
    | | | - `category_id:sg-4-17-2-17` |
    | collection_id | id | Filter by the collection [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-id)
    field. | | | - `collection_id:108179161409` |
    | combined_listing_role | string | Filter by the role of the product in a [combined listing](https://shopify.dev/apps/build/product-merchandising/combined-listings).
    | - `parent`<br/> - `child`<br/> - `no_role` | | -
    `combined_listing_role:parent` |
    | created_at | time | Filter by the date and time when the product was
    created. | | | - `created_at:>'2020-10-21T23:39:20Z'`<br/> -
    `created_at:<now`<br/> - `created_at:<='2024'` |
    | delivery_profile_id | id | Filter by the delivery profile [`id`](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryProfile#field-id)
    field. | | | - `delivery_profile_id:108179161409` |
    | error_feedback | string | Filter by products with publishing errors. |
    | gift_card | boolean | Filter by the product [`isGiftCard`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-isgiftcard)
    field. | | | - `gift_card:true` |
    | handle | string | Filter by a comma-separated list of product [handles](https://shopify.dev/api/admin-graphql/latest/queries/products#argument-query-filter-handle).
    | | | - `handle:the-minimal-snowboard` |
    | has_only_composites | boolean | Filter by products that have only
    composite variants. | | | - `has_only_composites:true` |
    | has_only_default_variant | boolean | Filter by products that have only a
    default variant. A default variant is the only variant if no other variants
    are specified. | | | - `has_only_default_variant:true` |
    | has_variant_with_components | boolean | Filter by products that have
    variants with associated components. | | | -
    `has_variant_with_components:true` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | inventory_total | integer | Filter by inventory count. | | | -
    `inventory_total:0`<br/> - `inventory_total:>150`<br/> -
    `inventory_total:>=200` |
    | is_price_reduced | boolean | Filter by products that have a reduced price.
    For more information, refer to the [`CollectionRule`](https://shopify.dev/api/admin-graphql/latest/objects/CollectionRule)
    object. | | | - `is_price_reduced:true` |
    | out_of_stock_somewhere | boolean | Filter by products that are out of
    stock in at least one location. | | | - `out_of_stock_somewhere:true` |
    | price | bigdecimal | Filter by the product variant [`price`](https://shopify.dev/api/admin-graphql/latest/objects/Productvariant#field-price)
    field. | | | - `price:100.57` |
    | product_configuration_owner | string | Filter by the app
    [`id`](https://shopify.dev/api/admin-graphql/latest/objects/App#field-id)
    field. | | | - `product_configuration_owner:10001` |
    | product_publication_status | string | Filter by the publishable status of
    the resource on a channel, such as the online store. The value is a
    composite of the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) and one of the valid values. | - `approved`<br/> -
    `rejected`<br/> - `needs_action`<br/> - `awaiting_review`<br/> -
    `published`<br/> - `demoted`<br/> - `scheduled`<br/> -
    `provisionally_published` | | - `publishable_status:189769876-approved` |
    | product_type | string | Filter by a comma-separated list of [product
    types](https://help.shopify.com/manual/products/details/product-type). | | |
    - `product_type:snowboard` |
    | publication_ids | string | Filter by a comma-separated list of publication
    IDs that are associated with the product. | | | -
    `publication_ids:184111530305,184111694145` |
    | publishable_status | string | Filter by the publishable status of the
    resource on a channel, such as the online store. The value is a composite of
    either the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) or [channel `name`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel#field-name)
    and one of the valid values. | - `online_store_channel`<br/> -
    `published`<br/> - `unpublished`<br/> - `visible`<br/> - `unavailable`<br/>
    - `hidden`<br/> - `intended`<br/> - `visible` | | -
    `publishable_status:published`<br/> -
    `publishable_status:189769876:visible`<br/> -
    `publishable_status:pos:hidden` |
    | published_at | time | Filter by the date and time when the product was
    published to the online store and other sales channels. | | | -
    `published_at:>2020-10-21T23:39:20Z`<br/> - `published_at:<now`<br/> -
    `published_at:<=2024` |
    | published_status | string | Filter by the published status of the resource
    on a channel, such as the online store. | - `unset`<br/> - `pending`<br/> -
    `approved`<br/> - `not approved` | | - `published_status:approved` |
    | sku | string | Filter by the product variant [`sku`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | -
    `sku:XYZ-12345` |
    | status | string | Filter by a comma-separated list of statuses. You can
    use statuses to manage inventory. Shopify only displays products with an
    `ACTIVE` status in online stores, sales channels, and apps. | -
    `ACTIVE`<br/> - `ARCHIVED`<br/> - `DRAFT` | `ACTIVE` | -
    `status:ACTIVE,DRAFT` |
    | tag | string | Filter objects by the `tag` field. | | | - `tag:my_tag` |
    | tag_not | string | Filter by objects that don’t have the specified tag. | | | - `tag_not:my_tag` |
    | title | string | Filter by the product [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-title)
    field. | | | - `title:The Minimal Snowboard` |
    | updated_at | time | Filter by the date and time when the product was last
    updated. | | | - `updated_at:>'2020-10-21T23:39:20Z'`<br/> -
    `updated_at:<now`<br/> - `updated_at:<='2024'` |
    | variant_id | id | Filter by the product variant [`id`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-id)
    field. | | | - `variant_id:45779434701121` |
    | variant_title | string | Filter by the product variant [`title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-title)
    field. | | | - `variant_title:'Special ski wax'` |
    | vendor | string | Filter by the origin or source of the product. Learn
    more about [vendors and managing vendor
    information](https://help.shopify.com/manual/products/managing-vendor-info).
    | | | - `vendor:Snowdevil`<br/> - `vendor:Snowdevil OR vendor:Icedevil` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String
  ): Count

  """
  Whether the channel supports future publishing.
  """
  supportsFuturePublishing: Boolean!
}

"""
An auto-generated type for paginating through multiple Channels.
"""
type ChannelConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ChannelEdge!]!

  """
  A list of nodes that are contained in ChannelEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Channel!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
A channel definition represents channels surfaces on the platform.
A channel definition can be a platform or a subsegment of it such as Facebook
Home, Instagram Live, Instagram Shops, or WhatsApp chat.
"""
type ChannelDefinition implements Node {
  """
  Name of the channel that this sub channel belongs to.
  """
  channelName: String!

  """
  Unique string used as a public identifier for the channel definition.
  """
  handle: String!

  """
  The unique ID for the channel definition.
  """
  id: ID!

  """
  Whether this channel definition represents a marketplace.
  """
  isMarketplace: Boolean!

  """
  Name of the sub channel (e.g. Online Store, Instagram Shopping, TikTok Live).
  """
  subChannelName: String!

  """
  Icon displayed when showing the channel in admin.
  """
  svgIcon: String
}

"""
An auto-generated type which holds one Channel and a cursor during pagination.
"""
type ChannelEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ChannelEdge.
  """
  node: Channel!
}

"""
Contains the information for a given sales channel.
"""
type ChannelInformation implements Node {
  """
  The app associated with the channel.
  """
  app: App!

  """
  The channel definition associated with the channel.
  """
  channelDefinition: ChannelDefinition

  """
  The unique ID for the channel.
  """
  channelId: ID!

  """
  A globally-unique ID.
  """
  id: ID!
}

"""
The settings of checkout visual customizations.

To learn more about updating checkout branding settings, refer to the
[checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert) mutation.
"""
type CheckoutBranding {
  """
  The customizations that apply to specific components or areas of the user interface.
  """
  customizations: CheckoutBrandingCustomizations

  """
  The design system allows you to set values that represent specific attributes
  of your brand like color and font. These attributes are used throughout the user
  interface. This brings consistency and allows you to easily make broad design changes.
  """
  designSystem: CheckoutBrandingDesignSystem
}

"""
The container background style.
"""
enum CheckoutBrandingBackground {
  """
  The Base background style.
  """
  BASE

  """
  The Subdued background style.
  """
  SUBDUED

  """
  The Transparent background style.
  """
  TRANSPARENT
}

"""
Possible values for the background style.
"""
enum CheckoutBrandingBackgroundStyle {
  """
  The None background style.
  """
  NONE

  """
  The Solid background style.
  """
  SOLID
}

"""
Possible values for the border.
"""
enum CheckoutBrandingBorder {
  """
  The Block End border.
  """
  BLOCK_END

  """
  The Full border.
  """
  FULL

  """
  The None border.
  """
  NONE
}

"""
The container border style.
"""
enum CheckoutBrandingBorderStyle {
  """
  The Base border style.
  """
  BASE

  """
  The Dashed border style.
  """
  DASHED

  """
  The Dotted border style.
  """
  DOTTED
}

"""
The container border width.
"""
enum CheckoutBrandingBorderWidth {
  """
  The Base border width.
  """
  BASE

  """
  The Large border width.
  """
  LARGE

  """
  The Large 100 border width.
  """
  LARGE_100

  """
  The Large 200 border width.
  """
  LARGE_200
}

"""
The buttons customizations.
"""
type CheckoutBrandingButton {
  """
  The background style used for buttons.
  """
  background: CheckoutBrandingBackgroundStyle

  """
  The block padding used for buttons.
  """
  blockPadding: CheckoutBrandingSpacing

  """
  The border used for buttons.
  """
  border: CheckoutBrandingSimpleBorder

  """
  The corner radius used for buttons.
  """
  cornerRadius: CheckoutBrandingCornerRadius

  """
  The inline padding used for buttons.
  """
  inlinePadding: CheckoutBrandingSpacing

  """
  The typography used for buttons.
  """
  typography: CheckoutBrandingTypographyStyle
}

"""
Colors for buttons.
"""
type CheckoutBrandingButtonColorRoles {
  """
  The color of accented objects (links and focused state).
  """
  accent: String

  """
  The color of the background.
  """
  background: String

  """
  The color of borders.
  """
  border: String

  """
  The decorative color for highlighting specific parts of the user interface.
  """
  decorative: String

  """
  The colors of the button on hover.
  """
  hover: CheckoutBrandingColorRoles

  """
  The color of icons.
  """
  icon: String

  """
  The color of text.
  """
  text: String
}

"""
The customizations for the breadcrumbs that represent a buyer's journey to the checkout.
"""
type CheckoutBrandingBuyerJourney {
  """
  An option to display or hide the breadcrumbs that represent the buyer's journey on 3-page checkout.
  """
  visibility: CheckoutBrandingVisibility
}

"""
The customizations that you can make to cart links at checkout.
"""
type CheckoutBrandingCartLink {
  """
  Whether the cart link is visible at checkout.
  """
  visibility: CheckoutBrandingVisibility
}

"""
Possible values for the cart link content type for the header.
"""
enum CheckoutBrandingCartLinkContentType {
  """
  The checkout header content type icon value.
  """
  ICON

  """
  The checkout header content type image value.
  """
  IMAGE

  """
  The checkout header content type text value.
  """
  TEXT
}

"""
The checkboxes customizations.
"""
type CheckoutBrandingCheckbox {
  """
  The corner radius used for checkboxes.
  """
  cornerRadius: CheckoutBrandingCornerRadius
}

"""
The choice list customizations.
"""
type CheckoutBrandingChoiceList {
  """
  The settings that apply to the 'group' variant of ChoiceList.
  """
  group: CheckoutBrandingChoiceListGroup
}

"""
The settings that apply to the 'group' variant of ChoiceList.
"""
type CheckoutBrandingChoiceListGroup {
  """
  The spacing between UI elements in the list.
  """
  spacing: CheckoutBrandingSpacingKeyword
}

"""
A set of colors for customizing the overall look and feel of the checkout.
"""
type CheckoutBrandingColorGlobal {
  """
  A color used for interaction, like links and focus states.
  """
  accent: String

  """
  A color that's strongly associated with the merchant. Currently used for
  primary buttons, for example **Pay now**, and secondary buttons, for example **Buy again**.
  """
  brand: String

  """
  A semantic color used for components that communicate critical content. For
  example, a blocking error such as the requirement to enter a valid credit card number.
  """
  critical: String

  """
  A color used to highlight certain areas of the user interface. For example, the [`Text`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/titles-and-text/text#textprops-propertydetail-appearance) component.
  """
  decorative: String

  """
  A semantic color used for components that communicate general, informative content.
  """
  info: String

  """
  A semantic color used for components that communicate successful actions or a positive state.
  """
  success: String

  """
  A semantic color used for components that display content that requires
  attention. For example, something that might be wrong, but not blocking.
  """
  warning: String
}

"""
A group of colors used together on a surface.
"""
type CheckoutBrandingColorRoles {
  """
  The color of accented objects (links and focused state).
  """
  accent: String

  """
  The color of the background.
  """
  background: String

  """
  The color of borders.
  """
  border: String

  """
  The decorative color for highlighting specific parts of the user interface.
  """
  decorative: String

  """
  The color of icons.
  """
  icon: String

  """
  The color of text.
  """
  text: String
}

"""
A base set of color customizations that's applied to an area of Checkout, from which every component
pulls its colors.
"""
type CheckoutBrandingColorScheme {
  """
  The main colors of a scheme. Used for the surface background, text, links, and more.
  """
  base: CheckoutBrandingColorRoles

  """
  The colors of form controls, such as the [`TextField`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/forms/textfield) and [`ChoiceList`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/forms/choicelist) components.
  """
  control: CheckoutBrandingControlColorRoles

  """
  The colors of the primary button. For example, the main payment, or **Pay now** button.
  """
  primaryButton: CheckoutBrandingButtonColorRoles

  """
  The colors of the secondary button, which is used for secondary actions. For example, **Buy again**.
  """
  secondaryButton: CheckoutBrandingButtonColorRoles
}

"""
The possible color schemes.
"""
enum CheckoutBrandingColorSchemeSelection {
  """
  The COLOR_SCHEME1 color scheme selection.
  """
  COLOR_SCHEME1

  """
  The COLOR_SCHEME2 color scheme selection.
  """
  COLOR_SCHEME2

  """
  The COLOR_SCHEME3 color scheme selection.
  """
  COLOR_SCHEME3

  """
  The COLOR_SCHEME4 color scheme selection.
  """
  COLOR_SCHEME4

  """
  The TRANSPARENT color scheme selection.
  """
  TRANSPARENT
}

"""
The color schemes.
"""
type CheckoutBrandingColorSchemes {
  """
  The primary scheme. By default, it’s used for the main area of the interface.
  """
  scheme1: CheckoutBrandingColorScheme

  """
  The secondary scheme. By default, it’s used for secondary areas, like Checkout’s Order Summary.
  """
  scheme2: CheckoutBrandingColorScheme

  """
  An extra scheme available to customize more surfaces, components or specific states of the user interface.
  """
  scheme3: CheckoutBrandingColorScheme

  """
  An extra scheme available to customize more surfaces, components or specific states of the user interface.
  """
  scheme4: CheckoutBrandingColorScheme
}

"""
The possible colors.
"""
enum CheckoutBrandingColorSelection {
  """
  Transparent color selection.
  """
  TRANSPARENT
}

"""
The color settings for global colors and color schemes.
"""
type CheckoutBrandingColors {
  """
  A group of global colors for customizing the overall look and feel of the user interface.
  """
  global: CheckoutBrandingColorGlobal

  """
  A set of color schemes which apply to different areas of the user interface.
  """
  schemes: CheckoutBrandingColorSchemes
}

"""
The container's divider customizations.
"""
type CheckoutBrandingContainerDivider {
  """
  The divider style.
  """
  borderStyle: CheckoutBrandingBorderStyle

  """
  The divider width.
  """
  borderWidth: CheckoutBrandingBorderWidth

  """
  The divider visibility.
  """
  visibility: CheckoutBrandingVisibility
}

"""
The content container customizations.
"""
type CheckoutBrandingContent {
  """
  The content container's divider style and visibility.
  """
  divider: CheckoutBrandingContainerDivider
}

"""
The form controls customizations.
"""
type CheckoutBrandingControl {
  """
  The border used for form controls.
  """
  border: CheckoutBrandingSimpleBorder

  """
  Set to TRANSPARENT to define transparent form controls. If null, form controls
  inherit colors from their scheme settings (for example, the main section
  inherits from `design_system.colors.schemes.scheme1.control` by default). Note
  that usage of the `customizations.control.color` setting to customize the form
  control color is deprecated.
  """
  color: CheckoutBrandingColorSelection

  """
  The corner radius used for form controls.
  """
  cornerRadius: CheckoutBrandingCornerRadius

  """
  The label position used for form controls.
  """
  labelPosition: CheckoutBrandingLabelPosition
}

"""
Colors for form controls.
"""
type CheckoutBrandingControlColorRoles {
  """
  The color of accented objects (links and focused state).
  """
  accent: String

  """
  The color of the background.
  """
  background: String

  """
  The color of borders.
  """
  border: String

  """
  The decorative color for highlighting specific parts of the user interface.
  """
  decorative: String

  """
  The color of icons.
  """
  icon: String

  """
  The colors of selected controls.
  """
  selected: CheckoutBrandingColorRoles

  """
  The color of text.
  """
  text: String
}

"""
The options for customizing the corner radius of checkout-related objects. Examples include the primary
button, the name text fields and the sections within the main area (if they have borders).
Refer to this complete [list](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius#fieldswith)
for objects with customizable corner radii.

The design system defines the corner radius pixel size for each option. Modify the defaults by setting the
[designSystem.cornerRadius](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/CheckoutBrandingDesignSystemInput#field-checkoutbrandingdesignsysteminput-cornerradius)
input fields.
"""
enum CheckoutBrandingCornerRadius {
  """
  The corner radius with a pixel value defined by designSystem.cornerRadius.base.
  """
  BASE

  """
  The corner radius with a pixel value defined by designSystem.cornerRadius.large.
  """
  LARGE

  """
  The 0px corner radius (square corners).
  """
  NONE

  """
  The corner radius with a pixel value defined by designSystem.cornerRadius.small.
  """
  SMALL
}

"""
Define the pixel size of corner radius options.
"""
type CheckoutBrandingCornerRadiusVariables {
  """
  The value in pixels for base corner radii. Example: 5.
  """
  base: Int

  """
  The value in pixels for large corner radii. Example: 10.
  """
  large: Int

  """
  The value in pixels for small corner radii. Example: 3.
  """
  small: Int
}

"""
A custom font.
"""
type CheckoutBrandingCustomFont implements CheckoutBrandingFont {
  """
  Globally unique ID reference to the custom font file.
  """
  genericFileId: ID

  """
  The font sources.
  """
  sources: String

  """
  The font weight.
  """
  weight: Int
}

"""
The customizations that apply to specific components or areas of the user interface.
"""
type CheckoutBrandingCustomizations {
  """
  The customizations for the breadcrumbs that represent a buyer's journey to the checkout.
  """
  buyerJourney: CheckoutBrandingBuyerJourney

  """
  The checkout cart link customizations. For example, by setting the visibility
  field to `HIDDEN`, you can hide the cart icon in the header for one-page
  checkout, and the cart link in breadcrumbs in three-page checkout.
  """
  cartLink: CheckoutBrandingCartLink

  """
  The checkboxes customizations.
  """
  checkbox: CheckoutBrandingCheckbox

  """
  The choice list customizations.
  """
  choiceList: CheckoutBrandingChoiceList

  """
  The content container customizations.
  """
  content: CheckoutBrandingContent

  """
  The form controls customizations.
  """
  control: CheckoutBrandingControl

  """
  The customizations for the page, content, main, and order summary dividers.
  For example, by setting the borderStyle to `DOTTED`, you can make these
  dividers render as dotted lines.
  """
  divider: CheckoutBrandingDividerStyle

  """
  The express checkout customizations.
  """
  expressCheckout: CheckoutBrandingExpressCheckout

  """
  The favicon image.
  """
  favicon: CheckoutBrandingImage

  """
  The footer customizations.
  """
  footer: CheckoutBrandingFooter

  """
  The global customizations.
  """
  global: CheckoutBrandingGlobal

  """
  The header customizations.
  """
  header: CheckoutBrandingHeader

  """
  The Heading Level 1 customizations.
  """
  headingLevel1: CheckoutBrandingHeadingLevel

  """
  The Heading Level 2 customizations.
  """
  headingLevel2: CheckoutBrandingHeadingLevel

  """
  The Heading Level 3 customizations.
  """
  headingLevel3: CheckoutBrandingHeadingLevel

  """
  The main area customizations.
  """
  main: CheckoutBrandingMain

  """
  The merchandise thumbnails customizations.
  """
  merchandiseThumbnail: CheckoutBrandingMerchandiseThumbnail

  """
  The order summary customizations.
  """
  orderSummary: CheckoutBrandingOrderSummary

  """
  The primary buttons customizations.
  """
  primaryButton: CheckoutBrandingButton

  """
  The secondary buttons customizations.
  """
  secondaryButton: CheckoutBrandingButton

  """
  The selects customizations.
  """
  select: CheckoutBrandingSelect

  """
  The text fields customizations.
  """
  textField: CheckoutBrandingTextField
}

"""
The design system allows you to set values that represent specific attributes
of your brand like color and font. These attributes are used throughout the user
interface. This brings consistency and allows you to easily make broad design changes.
"""
type CheckoutBrandingDesignSystem {
  """
  The color settings for global colors and color schemes.
  """
  colors: CheckoutBrandingColors

  """
  The corner radius variables.
  """
  cornerRadius: CheckoutBrandingCornerRadiusVariables

  """
  The typography.
  """
  typography: CheckoutBrandingTypography
}

"""
The customizations for the page, content, main, and order summary dividers.
"""
type CheckoutBrandingDividerStyle {
  """
  The border style for the divider.
  """
  borderStyle: CheckoutBrandingBorderStyle

  """
  The border width for the divider.
  """
  borderWidth: CheckoutBrandingBorderWidth
}

"""
The Express Checkout customizations.
"""
type CheckoutBrandingExpressCheckout {
  """
  The Express Checkout buttons customizations.
  """
  button: CheckoutBrandingExpressCheckoutButton
}

"""
The Express Checkout button customizations.
"""
type CheckoutBrandingExpressCheckoutButton {
  """
  The corner radius used for the Express Checkout buttons.
  """
  cornerRadius: CheckoutBrandingCornerRadius
}

"""
A font.
"""
interface CheckoutBrandingFont {
  """
  The font sources.
  """
  sources: String

  """
  The font weight.
  """
  weight: Int
}

"""
A font group. To learn more about updating fonts, refer to the
[checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert)
mutation and the checkout branding [tutorial](https://shopify.dev/docs/apps/checkout/styling).
"""
type CheckoutBrandingFontGroup {
  """
  The base font.
  """
  base: CheckoutBrandingFont

  """
  The bold font.
  """
  bold: CheckoutBrandingFont

  """
  The font loading strategy.
  """
  loadingStrategy: CheckoutBrandingFontLoadingStrategy

  """
  The font group name.
  """
  name: String
}

"""
The font loading strategy determines how a font face is displayed after it is loaded or failed to load.
For more information: https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display.
"""
enum CheckoutBrandingFontLoadingStrategy {
  """
  The font display strategy is defined by the browser user agent.
  """
  AUTO

  """
  Gives the font face a short block period and an infinite swap period.
  """
  BLOCK

  """
  Gives the font face an extremely small block period and a short swap period.
  """
  FALLBACK

  """
  Gives the font face an extremely small block period and no swap period.
  """
  OPTIONAL

  """
  Gives the font face an extremely small block period and an infinite swap period.
  """
  SWAP
}

"""
The font size.
"""
type CheckoutBrandingFontSize {
  """
  The base font size.
  """
  base: Float

  """
  The scale ratio used to derive all font sizes such as small and large.
  """
  ratio: Float
}

"""
A container for the footer section customizations.
"""
type CheckoutBrandingFooter {
  """
  The footer alignment.
  """
  alignment: CheckoutBrandingFooterAlignment

  """
  The selected color scheme of the footer container.
  """
  colorScheme: CheckoutBrandingColorSchemeSelection

  """
  The footer content settings.
  """
  content: CheckoutBrandingFooterContent

  """
  The divided setting.
  """
  divided: Boolean

  """
  The padding of the footer container.
  """
  padding: CheckoutBrandingSpacingKeyword

  """
  The footer position.
  """
  position: CheckoutBrandingFooterPosition
}

"""
Possible values for the footer alignment.
"""
enum CheckoutBrandingFooterAlignment {
  """
  The checkout footer alignment Center value.
  """
  CENTER

  """
  The checkout footer alignment End value.
  """
  END

  """
  The checkout footer alignment Start value.
  """
  START
}

"""
The footer content customizations.
"""
type CheckoutBrandingFooterContent {
  """
  The visibility settings for footer content.
  """
  visibility: CheckoutBrandingVisibility
}

"""
Possible values for the footer position.
"""
enum CheckoutBrandingFooterPosition {
  """
  The End footer position.
  """
  END

  """
  The Inline footer position.
  """
  INLINE
}

"""
The global customizations.
"""
type CheckoutBrandingGlobal {
  """
  The global corner radius setting that overrides all other [corner radius](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius)
  customizations.
  """
  cornerRadius: CheckoutBrandingGlobalCornerRadius

  """
  The global typography customizations.
  """
  typography: CheckoutBrandingTypographyStyleGlobal
}

"""
Possible choices to override corner radius customizations on all applicable objects. Note that this selection
can only be used to set the override to `NONE` (0px).

For more customizations options, set the [corner radius](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius)
selection on specific objects while leaving the global corner radius unset.
"""
enum CheckoutBrandingGlobalCornerRadius {
  """
  Set the global corner radius override to 0px (square corners).
  """
  NONE
}

"""
The header customizations.
"""
type CheckoutBrandingHeader {
  """
  The header alignment.
  """
  alignment: CheckoutBrandingHeaderAlignment

  """
  The background image of the header.
  """
  banner: CheckoutBrandingImage

  """
  The cart link customizations for 1-page checkout. This field allows to
  customize the cart icon that renders by default on 1-page checkout.
  """
  cartLink: CheckoutBrandingHeaderCartLink

  """
  The selected color scheme of the header container.
  """
  colorScheme: CheckoutBrandingColorSchemeSelection

  """
  The divided setting.
  """
  divided: Boolean

  """
  The store logo.
  """
  logo: CheckoutBrandingLogo

  """
  The padding of the header container.
  """
  padding: CheckoutBrandingSpacingKeyword

  """
  The header position.
  """
  position: CheckoutBrandingHeaderPosition
}

"""
The possible header alignments.
"""
enum CheckoutBrandingHeaderAlignment {
  """
  Center alignment.
  """
  CENTER

  """
  End alignment.
  """
  END

  """
  Start alignment.
  """
  START
}

"""
The header cart link customizations.
"""
type CheckoutBrandingHeaderCartLink {
  """
  The content type for the header back to cart link in 1-page checkout. Setting
  this to image will render the custom image provided using the image field on
  the header cart_link object. If no image is provided, the default cart icon will be used.
  """
  contentType: CheckoutBrandingCartLinkContentType

  """
  The image that's used for the header back to cart link in 1-page checkout when the content type is set to image.
  """
  image: Image
}

"""
The possible header positions.
"""
enum CheckoutBrandingHeaderPosition {
  """
  Inline position.
  """
  INLINE

  """
  Secondary inline position.
  """
  INLINE_SECONDARY

  """
  Start position.
  """
  START
}

"""
The heading level customizations.
"""
type CheckoutBrandingHeadingLevel {
  """
  The typography customizations used for headings.
  """
  typography: CheckoutBrandingTypographyStyle
}

"""
A checkout branding image.
"""
type CheckoutBrandingImage {
  """
  The image details.
  """
  image: Image
}

"""
Possible values for the label position.
"""
enum CheckoutBrandingLabelPosition {
  """
  The Inside label position.
  """
  INSIDE

  """
  The Outside label position.
  """
  OUTSIDE
}

"""
The store logo customizations.
"""
type CheckoutBrandingLogo {
  """
  The logo image.
  """
  image: Image

  """
  The maximum width of the logo.
  """
  maxWidth: Int

  """
  The visibility of the logo.
  """
  visibility: CheckoutBrandingVisibility
}

"""
The main container customizations.
"""
type CheckoutBrandingMain {
  """
  The background image of the main container.
  """
  backgroundImage: CheckoutBrandingImage

  """
  The selected color scheme of the main container.
  """
  colorScheme: CheckoutBrandingColorSchemeSelection

  """
  The main container's divider style and visibility.
  """
  divider: CheckoutBrandingContainerDivider

  """
  The settings for the main sections.
  """
  section: CheckoutBrandingMainSection
}

"""
The main sections customizations.
"""
type CheckoutBrandingMainSection {
  """
  The background style of the main sections.
  """
  background: CheckoutBrandingBackground

  """
  The border for the main sections.
  """
  border: CheckoutBrandingSimpleBorder

  """
  The border style of the main sections.
  """
  borderStyle: CheckoutBrandingBorderStyle

  """
  The border width of the main sections.
  """
  borderWidth: CheckoutBrandingBorderWidth

  """
  The selected color scheme of the main sections.
  """
  colorScheme: CheckoutBrandingColorSchemeSelection

  """
  The corner radius of the main sections.
  """
  cornerRadius: CheckoutBrandingCornerRadius

  """
  The padding of the main sections.
  """
  padding: CheckoutBrandingSpacingKeyword

  """
  The shadow of the main sections.
  """
  shadow: CheckoutBrandingShadow
}

"""
The merchandise thumbnails customizations.
"""
type CheckoutBrandingMerchandiseThumbnail {
  """
  The settings for the merchandise thumbnail badge.
  """
  badge: CheckoutBrandingMerchandiseThumbnailBadge

  """
  The border used for merchandise thumbnails.
  """
  border: CheckoutBrandingSimpleBorder

  """
  The corner radius used for merchandise thumbnails.
  """
  cornerRadius: CheckoutBrandingCornerRadius

  """
  The property used to customize how the product image fits within merchandise thumbnails.
  """
  fit: CheckoutBrandingObjectFit
}

"""
The merchandise thumbnail badges customizations.
"""
type CheckoutBrandingMerchandiseThumbnailBadge {
  """
  The background used for merchandise thumbnail badges.
  """
  background: CheckoutBrandingMerchandiseThumbnailBadgeBackground
}

"""
The merchandise thumbnail badge background.
"""
enum CheckoutBrandingMerchandiseThumbnailBadgeBackground {
  """
  The Accent background.
  """
  ACCENT

  """
  The Base background.
  """
  BASE
}

"""
Possible values for object fit.
"""
enum CheckoutBrandingObjectFit {
  """
  The Contain value for fit. The image is scaled to maintain its aspect ratio
  while fitting within the containing box. The entire image is made to fill the
  box, while preserving its aspect ratio, so the image will be "letterboxed" if
  its aspect ratio does not match the aspect ratio of the box. This is the default value.
  """
  CONTAIN

  """
  The Cover value for fit. The image is sized to maintain its aspect ratio while
  filling the entire containing box. If the image’s aspect ratio does not match
  the aspect ratio of the containing box, then the object will be clipped to fit.
  """
  COVER
}

"""
The order summary customizations.
"""
type CheckoutBrandingOrderSummary {
  """
  The background image of the order summary container.
  """
  backgroundImage: CheckoutBrandingImage

  """
  The selected color scheme of the order summary container.
  """
  colorScheme: CheckoutBrandingColorSchemeSelection

  """
  The order summary container's divider style and visibility.
  """
  divider: CheckoutBrandingContainerDivider

  """
  The settings for the order summary sections.
  """
  section: CheckoutBrandingOrderSummarySection
}

"""
The order summary sections customizations.
"""
type CheckoutBrandingOrderSummarySection {
  """
  The background style of the order summary sections.
  """
  background: CheckoutBrandingBackground

  """
  The border for the order summary sections.
  """
  border: CheckoutBrandingSimpleBorder

  """
  The border style of the order summary sections.
  """
  borderStyle: CheckoutBrandingBorderStyle

  """
  The border width of the order summary sections.
  """
  borderWidth: CheckoutBrandingBorderWidth

  """
  The selected color scheme of the order summary sections.
  """
  colorScheme: CheckoutBrandingColorSchemeSelection

  """
  The corner radius of the order summary sections.
  """
  cornerRadius: CheckoutBrandingCornerRadius

  """
  The padding of the order summary sections.
  """
  padding: CheckoutBrandingSpacingKeyword

  """
  The shadow of the order summary sections.
  """
  shadow: CheckoutBrandingShadow
}

"""
The selects customizations.
"""
type CheckoutBrandingSelect {
  """
  The border used for selects.
  """
  border: CheckoutBrandingBorder

  """
  The typography customizations used for selects.
  """
  typography: CheckoutBrandingTypographyStyle
}

"""
The container shadow.
"""
enum CheckoutBrandingShadow {
  """
  The Base shadow.
  """
  BASE

  """
  The Large 100 shadow.
  """
  LARGE_100

  """
  The Large 200 shadow.
  """
  LARGE_200

  """
  The Small 100 shadow.
  """
  SMALL_100

  """
  The Small 200 shadow.
  """
  SMALL_200
}

"""
A Shopify font.
"""
type CheckoutBrandingShopifyFont implements CheckoutBrandingFont {
  """
  The font sources.
  """
  sources: String

  """
  The font weight.
  """
  weight: Int
}

"""
Possible values for the simple border.
"""
enum CheckoutBrandingSimpleBorder {
  """
  The Full simple border.
  """
  FULL

  """
  The None simple border.
  """
  NONE
}

"""
Possible values for the spacing.
"""
enum CheckoutBrandingSpacing {
  """
  The Base spacing.
  """
  BASE

  """
  The Extra Loose spacing.
  """
  EXTRA_LOOSE

  """
  The Extra Tight spacing.
  """
  EXTRA_TIGHT

  """
  The Loose spacing.
  """
  LOOSE

  """
  The None spacing.
  """
  NONE

  """
  The Tight spacing.
  """
  TIGHT
}

"""
The spacing between UI elements.
"""
enum CheckoutBrandingSpacingKeyword {
  """
  The Base spacing.
  """
  BASE

  """
  The Large spacing.
  """
  LARGE

  """
  The Large 100 spacing.
  """
  LARGE_100

  """
  The Large 200 spacing.
  """
  LARGE_200

  """
  The Large 300 spacing.
  """
  LARGE_300

  """
  The Large 400 spacing.
  """
  LARGE_400

  """
  The Large 500 spacing.
  """
  LARGE_500

  """
  The None spacing.
  """
  NONE

  """
  The Small spacing.
  """
  SMALL

  """
  The Small 100 spacing.
  """
  SMALL_100

  """
  The Small 200 spacing.
  """
  SMALL_200

  """
  The Small 300 spacing.
  """
  SMALL_300

  """
  The Small 400 spacing.
  """
  SMALL_400

  """
  The Small 500 spacing.
  """
  SMALL_500
}

"""
The text fields customizations.
"""
type CheckoutBrandingTextField {
  """
  The border used for text fields.
  """
  border: CheckoutBrandingBorder

  """
  The typography customizations used for text fields.
  """
  typography: CheckoutBrandingTypographyStyle
}

"""
The typography settings used for checkout-related text. Use these settings to customize the
font family and size for primary and secondary text elements.

Refer to the [typography tutorial](https://shopify.dev/docs/apps/checkout/styling/customize-typography)
for further information on typography customization.
"""
type CheckoutBrandingTypography {
  """
  A font group used for most components such as text, buttons and form controls.
  """
  primary: CheckoutBrandingFontGroup

  """
  A font group used for heading components by default.
  """
  secondary: CheckoutBrandingFontGroup

  """
  The font size design system (base size in pixels and scaling between different sizes).
  """
  size: CheckoutBrandingFontSize
}

"""
The font selection.
"""
enum CheckoutBrandingTypographyFont {
  """
  The primary font.
  """
  PRIMARY

  """
  The secondary font.
  """
  SECONDARY
}

"""
Possible values for the typography kerning.
"""
enum CheckoutBrandingTypographyKerning {
  """
  Base or default kerning.
  """
  BASE

  """
  Extra loose kerning, leaving even more space in between characters.
  """
  EXTRA_LOOSE

  """
  Loose kerning, leaving more space than the default in between characters.
  """
  LOOSE
}

"""
Possible values for the typography letter case.
"""
enum CheckoutBrandingTypographyLetterCase {
  """
  All letters are is lower case.
  """
  LOWER

  """
  No letter casing applied.
  """
  NONE

  """
  Capitalize the first letter of each word.
  """
  TITLE

  """
  All letters are uppercase.
  """
  UPPER
}

"""
Possible choices for the font size.

Note that the value in pixels of these settings can be customized with the
[typography size](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/CheckoutBrandingFontSizeInput)
object. Refer to the [typography tutorial](https://shopify.dev/docs/apps/checkout/styling/customize-typography)
for more information.
"""
enum CheckoutBrandingTypographySize {
  """
  The base font size. Example: 14px.
  """
  BASE

  """
  The extra extra large font size. Example: 24px.
  """
  EXTRA_EXTRA_LARGE

  """
  The extra large font size. Example: 21px.
  """
  EXTRA_LARGE

  """
  The extra small font size. Example: 10px.
  """
  EXTRA_SMALL

  """
  The large font size. Example: 19px.
  """
  LARGE

  """
  The medium font size. Example: 16px.
  """
  MEDIUM

  """
  The small font size. Example: 12px.
  """
  SMALL
}

"""
The typography customizations.
"""
type CheckoutBrandingTypographyStyle {
  """
  The font.
  """
  font: CheckoutBrandingTypographyFont

  """
  The kerning.
  """
  kerning: CheckoutBrandingTypographyKerning

  """
  The letter case.
  """
  letterCase: CheckoutBrandingTypographyLetterCase

  """
  The font size.
  """
  size: CheckoutBrandingTypographySize

  """
  The font weight.
  """
  weight: CheckoutBrandingTypographyWeight
}

"""
The global typography customizations.
"""
type CheckoutBrandingTypographyStyleGlobal {
  """
  The kerning.
  """
  kerning: CheckoutBrandingTypographyKerning

  """
  The letter case.
  """
  letterCase: CheckoutBrandingTypographyLetterCase
}

"""
Possible values for the font weight.
"""
enum CheckoutBrandingTypographyWeight {
  """
  The base weight.
  """
  BASE

  """
  The bold weight.
  """
  BOLD
}

"""
Possible visibility states.
"""
enum CheckoutBrandingVisibility {
  """
  The Hidden visibility setting.
  """
  HIDDEN

  """
  The Visible visibility setting.
  """
  VISIBLE
}

"""
A checkout profile defines the branding settings and the UI extensions for a
store's checkout. A checkout profile could be published or draft. A store might
have at most one published checkout profile, which is used to render their live
checkout. The store could also have multiple draft profiles that were created,
previewed, and published using the admin checkout editor.
"""
type CheckoutProfile implements Node {
  """
  The date and time when the checkout profile was created.
  """
  createdAt: DateTime!

  """
  The date and time when the checkout profile was last edited.
  """
  editedAt: DateTime!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether the checkout profile is published or not.
  """
  isPublished: Boolean!

  """
  The profile name.
  """
  name: String!

  """
  Whether the checkout profile Thank You Page and Order Status Page are actively using extensibility or not.
  """
  typOspPagesActive: Boolean!

  """
  The date and time when the checkout profile was last updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple CheckoutProfiles.
"""
type CheckoutProfileConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CheckoutProfileEdge!]!

  """
  A list of nodes that are contained in CheckoutProfileEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CheckoutProfile!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CheckoutProfile and a cursor during pagination.
"""
type CheckoutProfileEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CheckoutProfileEdge.
  """
  node: CheckoutProfile!
}

"""
The set of valid sort keys for the CheckoutProfile query.
"""
enum CheckoutProfileSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `edited_at` value.
  """
  EDITED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `is_published` value.
  """
  IS_PUBLISHED

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
The set of valid sort keys for the CodeDiscount query.
"""
enum CodeDiscountSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `ends_at` value.
  """
  ENDS_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `starts_at` value.
  """
  STARTS_AT

  """
  Sort by the `title` value.
  """
  TITLE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
Represents a group of products that can be displayed in online stores and other
sales channels in categories, which makes it easy for customers to find them.
For example, an athletics store might create different collections for running
attire, shoes, and accessories.

Collections can be defined by conditions, such as whether they match certain
product tags. These are called smart or automated collections.

Collections can also be created for a custom group of products. These are called custom or manual collections.
"""
type Collection implements HasEvents & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Node & Publishable {
  """
  The number of
  [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that a resource is published to, without
  [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
  """
  availablePublicationsCount: Count

  """
  A single-line, text-only description of the collection, stripped of any HTML
  tags and formatting that were included in the description.
  """
  description(
    """
    Truncates a string after the given length.
    """
    truncateAt: Int
  ): String!

  """
  The description of the collection, including any HTML tags and formatting.
  This content is typically displayed to customers, such as on an online store,
  depending on the theme.
  """
  descriptionHtml: HTML!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  Information about the collection that's provided through resource feedback.
  """
  feedback: ResourceFeedback

  """
  A unique string that identifies the collection. If a handle isn't specified
  when a collection is created, it's automatically generated from the
  collection's original title, and typically includes words from the title
  separated by hyphens. For example, a collection that was created with the
  title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.

  If the title is changed, the handle doesn't automatically change.

  The handle can be used in themes by the Liquid templating language to refer to
  the collection, but using the ID is preferred because it never changes.
  """
  handle: String!

  """
  Whether the collection includes the specified product.
  """
  hasProduct(
    """
    The ID of the product to check.
    """
    id: ID!
  ): Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The image associated with the collection.
  """
  image(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1 @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The products that are included in the collection.
  """
  products(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ProductCollectionSortKeys = COLLECTION_DEFAULT
  ): ProductConnection!

  """
  The number of products in the collection.
  """
  productsCount: Count

  """
  The number of
  [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that a resource is published to, without
  [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
  """
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int! @deprecated(reason: "Use `resourcePublicationsCount` instead.")

  """
  The channels where the collection is published.
  """
  publications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Whether or not to return only the collection publications that are published.
    """
    onlyPublished: Boolean = true

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CollectionPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead.")

  """
  Whether the resource is published to a specific channel.
  """
  publishedOnChannel(
    """
    The ID of the channel to check.
    """
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")

  """
  Whether the resource is published to a
  [channel](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel).
  For example, the resource might be published to the online store channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead.")

  """
  Whether the resource is published to the app's
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  For example, the resource might be published to the app's online store channel.
  """
  publishedOnCurrentPublication: Boolean!

  """
  Whether the resource is published to a specified
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  """
  publishedOnPublication(
    """
    The ID of the publication to check. For example, `id: "gid://shopify/Publication/123"`.
    """
    publicationId: ID!
  ): Boolean!

  """
  The list of resources that are published to a
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  """
  resourcePublications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled to be published.
    """
    onlyPublished: Boolean = true

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """
  The number of
  [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that a resource is published to, without
  [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
  """
  resourcePublicationsCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Count

  """
  The list of resources that are either published or staged to be published to a
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  """
  resourcePublicationsV2(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Filter publications by catalog type.
    """
    catalogType: CatalogType

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled or staged to be published.
    """
    onlyPublished: Boolean = true

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ResourcePublicationV2Connection!

  """
  For a smart (automated) collection, specifies the rules that determine whether a product is included.
  """
  ruleSet: CollectionRuleSet

  """
  If the default SEO fields for page title and description have been modified, contains the modified information.
  """
  seo: SEO!

  """
  The order in which the products in the collection are displayed by default in
  the Shopify admin and in sales channels, such as an online store.
  """
  sortOrder: CollectionSortOrder!

  """
  The Storefront GraphQL API ID of the `Collection`.

  As of the `2022-04` version release, the Storefront GraphQL API will no longer
  return Base64 encoded IDs to match the behavior of the Admin GraphQL API.
  Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontID! @deprecated(reason: "Use `id` instead.")

  """
  The suffix of the Liquid template being used to show the collection in an
  online store. For example, if the value is `custom`, then the collection is
  using the `collection.custom.liquid` template. If the value is `null`, then
  the collection is using the default `collection.liquid` template.
  """
  templateSuffix: String

  """
  The name of the collection. It's displayed in the Shopify admin and is
  typically displayed in sales channels, such as an online store.
  """
  title: String!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!

  """
  The list of channels that the resource is not published to.
  """
  unpublishedChannels(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead.")

  """
  The list of [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that the resource isn't published to.
  """
  unpublishedPublications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): PublicationConnection!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple Collections.
"""
type CollectionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CollectionEdge!]!

  """
  A list of nodes that are contained in CollectionEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [Collection!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Collection and a cursor during pagination.
"""
type CollectionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CollectionEdge.
  """
  node: Collection!
}

"""
Represents the publications where a collection is published.
"""
type CollectionPublication {
  """
  The channel where the collection will be published.
  """
  channel: Channel! @deprecated(reason: "Use `publication` instead.")

  """
  The collection to be published on the publication.
  """
  collection: Collection!

  """
  Whether the publication is published or not.
  """
  isPublished: Boolean!

  """
  The publication where the collection will be published.
  """
  publication: Publication!

  """
  The date that the publication was or is going to be published.
  """
  publishDate: DateTime!
}

"""
An auto-generated type for paginating through multiple CollectionPublications.
"""
type CollectionPublicationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CollectionPublicationEdge!]!

  """
  A list of nodes that are contained in CollectionPublicationEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CollectionPublication!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CollectionPublication and a cursor during pagination.
"""
type CollectionPublicationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CollectionPublicationEdge.
  """
  node: CollectionPublication!
}

"""
Represents at rule that's used to assign products to a collection.
"""
type CollectionRule {
  """
  The attribute that the rule focuses on. For example, `title` or `product_type`.
  """
  column: CollectionRuleColumn!

  """
  The value that the operator is applied to. For example, `Hats`.
  """
  condition: String!

  """
  The value that the operator is applied to.
  """
  conditionObject: CollectionRuleConditionObject

  """
  The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
  """
  relation: CollectionRuleRelation!
}

"""
Specifies the taxonomy category to used for the condition.
"""
type CollectionRuleCategoryCondition {
  """
  The taxonomy category used as condition.
  """
  value: TaxonomyCategory!
}

"""
Specifies the attribute of a product being used to populate the smart collection.
"""
enum CollectionRuleColumn {
  """
  An attribute evaluated based on the `compare_at_price` attribute of the product's variants.
  With `is_set` relation, the rule matches products with at least one variant with `compare_at_price` set.
  With `is_not_set` relation, the rule matches matches products with at least one variant with `compare_at_price` not set.
  """
  IS_PRICE_REDUCED

  """
  The [`product_category_id`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-category) attribute.
  """
  PRODUCT_CATEGORY_ID

  """
  This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
  """
  PRODUCT_METAFIELD_DEFINITION

  """
  The [`product_taxonomy_node_id`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-productcategory) attribute.
  """
  PRODUCT_TAXONOMY_NODE_ID

  """
  The [`tag`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
  """
  TAG

  """
  The [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-title) attribute.
  """
  TITLE

  """
  The [`type`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
  """
  TYPE

  """
  The [`variant_compare_at_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-compareatprice) attribute.
  """
  VARIANT_COMPARE_AT_PRICE

  """
  The [`variant_inventory`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryquantity) attribute.
  """
  VARIANT_INVENTORY

  """
  This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
  """
  VARIANT_METAFIELD_DEFINITION

  """
  The [`variant_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-price) attribute.
  """
  VARIANT_PRICE

  """
  The [`variant_title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-title) attribute.
  """
  VARIANT_TITLE

  """
  The [`variant_weight`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-weight) attribute.
  """
  VARIANT_WEIGHT

  """
  The [`vendor`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-vendor) attribute.
  """
  VENDOR
}

"""
Specifies object for the condition of the rule.
"""
union CollectionRuleConditionObject = CollectionRuleCategoryCondition | CollectionRuleMetafieldCondition | CollectionRuleProductCategoryCondition | CollectionRuleTextCondition

"""
This object defines all columns and allowed relations that can be used in rules
for smart collections to automatically include the matching products.
"""
type CollectionRuleConditions {
  """
  Allowed relations of the rule.
  """
  allowedRelations: [CollectionRuleRelation!]!

  """
  Most commonly used relation for this rule.
  """
  defaultRelation: CollectionRuleRelation!

  """
  Additional attributes defining the rule.
  """
  ruleObject: CollectionRuleConditionsRuleObject

  """
  Type of the rule.
  """
  ruleType: CollectionRuleColumn!
}

"""
Specifies object with additional rule attributes.
"""
union CollectionRuleConditionsRuleObject = CollectionRuleMetafieldCondition

"""
Identifies a metafield definition used as a rule for the smart collection.
"""
type CollectionRuleMetafieldCondition {
  """
  The metafield definition associated with the condition.
  """
  metafieldDefinition: MetafieldDefinition!
}

"""
Specifies the condition for a Product Category field.
"""
type CollectionRuleProductCategoryCondition {
  """
  The value of the condition.
  """
  value: ProductTaxonomyNode!
}

"""
Specifies the relationship between the `column` and the `condition`.
"""
enum CollectionRuleRelation {
  """
  The attribute contains the condition.
  """
  CONTAINS

  """
  The attribute ends with the condition.
  """
  ENDS_WITH

  """
  The attribute is equal to the condition.
  """
  EQUALS

  """
  The attribute is greater than the condition.
  """
  GREATER_THAN

  """
  The attribute is not set (equal to `null`).
  """
  IS_NOT_SET

  """
  The attribute is set (not equal to `null`).
  """
  IS_SET

  """
  The attribute is less than the condition.
  """
  LESS_THAN

  """
  The attribute does not contain the condition.
  """
  NOT_CONTAINS

  """
  The attribute does not equal the condition.
  """
  NOT_EQUALS

  """
  The attribute starts with the condition.
  """
  STARTS_WITH
}

"""
The set of rules that are used to determine which products are included in the collection.
"""
type CollectionRuleSet {
  """
  Whether products must match any or all of the rules to be included in the collection.
  If true, then products must match at least one of the rules to be included in the collection.
  If false, then products must match all of the rules to be included in the collection.
  """
  appliedDisjunctively: Boolean!

  """
  The rules used to assign products to the collection.
  """
  rules: [CollectionRule!]!
}

"""
Specifies the condition for a text field.
"""
type CollectionRuleTextCondition {
  """
  The value of the condition.
  """
  value: String!
}

"""
The set of valid sort keys for the Collection query.
"""
enum CollectionSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `title` value.
  """
  TITLE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
Specifies the sort order for the products in the collection.
"""
enum CollectionSortOrder {
  """
  Alphabetically, in ascending order (A - Z).
  """
  ALPHA_ASC

  """
  Alphabetically, in descending order (Z - A).
  """
  ALPHA_DESC

  """
  By best-selling products.
  """
  BEST_SELLING

  """
  By date created, in ascending order (oldest - newest).
  """
  CREATED

  """
  By date created, in descending order (newest - oldest).
  """
  CREATED_DESC

  """
  In the order set manually by the merchant.
  """
  MANUAL

  """
  By price, in ascending order (lowest - highest).
  """
  PRICE_ASC

  """
  By price, in descending order (highest - lowest).
  """
  PRICE_DESC
}

"""
A string containing a hexadecimal representation of a color.

For example, "#6A8D48".
"""
scalar Color

"""
A combined listing of products.
"""
type CombinedListing {
  """
  A list of child products in the combined listing.
  """
  combinedListingChildren(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CombinedListingChildConnection!

  """
  The parent product.
  """
  parentProduct: Product!
}

"""
A child of a combined listing.
"""
type CombinedListingChild {
  """
  The parent variant.
  """
  parentVariant: ProductVariant!

  """
  The child product.
  """
  product: Product!
}

"""
An auto-generated type for paginating through multiple CombinedListingChildren.
"""
type CombinedListingChildConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CombinedListingChildEdge!]!

  """
  A list of nodes that are contained in CombinedListingChildEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CombinedListingChild!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CombinedListingChild and a cursor during pagination.
"""
type CombinedListingChildEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CombinedListingChildEdge.
  """
  node: CombinedListingChild!
}

"""
The role of the combined listing.
"""
enum CombinedListingsRole {
  """
  The product is the child of a combined listing.
  """
  CHILD

  """
  The product is the parent of a combined listing.
  """
  PARENT
}

"""
A comment on an article.
"""
type Comment implements HasEvents & Node {
  """
  The article associated with the comment.
  """
  article: Article

  """
  The comment’s author.
  """
  author: CommentAuthor!

  """
  The content of the comment.
  """
  body: String!

  """
  The content of the comment, complete with HTML formatting.
  """
  bodyHtml: HTML!

  """
  The date and time when the comment was created.
  """
  createdAt: DateTime!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The IP address of the commenter.
  """
  ip: String

  """
  Whether or not the comment is published.
  """
  isPublished: Boolean!

  """
  The date and time when the comment was published.
  """
  publishedAt: DateTime

  """
  The status of the comment.
  """
  status: CommentStatus!

  """
  The date and time when the comment was last updated.
  """
  updatedAt: DateTime

  """
  The user agent of the commenter.
  """
  userAgent: String
}

"""
The author of a comment.
"""
type CommentAuthor {
  """
  The author's email.
  """
  email: String!

  """
  The author’s name.
  """
  name: String!
}

"""
An auto-generated type for paginating through multiple Comments.
"""
type CommentConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CommentEdge!]!

  """
  A list of nodes that are contained in CommentEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Comment!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Comment and a cursor during pagination.
"""
type CommentEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CommentEdge.
  """
  node: Comment!
}

"""
Comment events are generated by staff members of a shop.
They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
"""
type CommentEvent implements Event & Node {
  """
  The action that occured.
  """
  action: String!

  """
  The name of the app that created the event.
  """
  appTitle: String

  """
  The attachments associated with the comment event.
  """
  attachments: [CommentEventAttachment!]!

  """
  Whether the event was created by an app.
  """
  attributeToApp: Boolean!

  """
  Whether the event was caused by an admin user.
  """
  attributeToUser: Boolean!

  """
  The name of the user that authored the comment event.
  """
  author: StaffMember!

  """
  Whether the comment event can be deleted. If true, then the comment event can be deleted.
  """
  canDelete: Boolean!

  """
  Whether the comment event can be edited. If true, then the comment event can be edited.
  """
  canEdit: Boolean!

  """
  The date and time when the event was created.
  """
  createdAt: DateTime!

  """
  Whether the event is critical.
  """
  criticalAlert: Boolean!

  """
  Whether the comment event has been edited. If true, then the comment event has been edited.
  """
  edited: Boolean!

  """
  The object reference associated with the comment event. For example, a product or discount).
  """
  embed: CommentEventEmbed

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Human readable text that describes the event.
  """
  message: FormattedString!

  """
  The raw body of the comment event.
  """
  rawMessage: String!

  """
  The parent subject to which the comment event belongs.
  """
  subject: CommentEventSubject
}

"""
A file attachment associated to a comment event.
"""
type CommentEventAttachment {
  """
  The file extension of the comment event attachment, indicating the file format.
  """
  fileExtension: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The image attached to the comment event.
  """
  image(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1 @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  The filename of the comment event attachment.
  """
  name: String!

  """
  The size of the attachment.
  """
  size: Int!

  """
  The URL of the attachment.
  """
  url: URL!
}

"""
The main embed of a comment event.
"""
union CommentEventEmbed = Customer | DraftOrder | Order | Product | ProductVariant

"""
The subject line of a comment event.
"""
interface CommentEventSubject {
  """
  Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!
}

"""
Possible comment policies for a blog.
"""
enum CommentPolicy {
  """
  Readers can post comments to blog articles without moderation.
  """
  AUTO_PUBLISHED

  """
  Readers cannot post comments to blog articles.
  """
  CLOSED

  """
  Readers can post comments to blog articles, but comments must be moderated before they appear.
  """
  MODERATED
}

"""
The set of valid sort keys for the Comment query.
"""
enum CommentSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The status of a comment.
"""
enum CommentStatus {
  """
  The comment is pending approval.
  """
  PENDING

  """
  The comment is published.
  """
  PUBLISHED

  """
  The comment has been removed.
  """
  REMOVED

  """
  The comment is marked as spam.
  """
  SPAM

  """
  The comment is unapproved.
  """
  UNAPPROVED
}

"""
Represents information about a company which is also a customer of the shop.
"""
type Company implements CommentEventSubject & HasEvents & HasMetafieldDefinitions & HasMetafields & Navigable & Node {
  """
  The number of contacts that belong to the company.
  """
  contactCount: Int! @deprecated(reason: "Use `contactsCount` instead.")

  """
  The list of roles for the company contacts.
  """
  contactRoles(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list by the given key.
    """
    sortKey: CompanyContactRoleSortKeys = ID
  ): CompanyContactRoleConnection!

  """
  The list of contacts in the company.
  """
  contacts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | company_id | id |
    | company_location_id | id |
    | created_at | time |
    | email | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | location_name | string |
    | name | string |
    | role_name | string |
    | status | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list by the given key.
    """
    sortKey: CompanyContactSortKeys = ID
  ): CompanyContactConnection!

  """
  The number of contacts that belong to the company.
  """
  contactsCount: Count

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was created in Shopify.
  """
  createdAt: DateTime!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company became the customer.
  """
  customerSince: DateTime!

  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  The role proposed by default for a contact at the company.
  """
  defaultRole: CompanyContactRole

  """
  The list of the company's draft orders.
  """
  draftOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time |
    | customer_id | id |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | source | string |
    | status | string |
    | tag | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DraftOrderSortKeys = ID
  ): DraftOrderConnection!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A unique externally-supplied ID for the company.
  """
  externalId: String

  """
  Whether the merchant added a timeline comment to the company.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The lifetime duration of the company, since it became a customer of the shop. Examples: `2 days`, `3 months`, `1 year`.
  """
  lifetimeDuration: String!

  """
  The list of locations in the company.
  """
  locations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | company_id | id |
    | created_at | time |
    | external_id | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | ids | string |
    | name | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list by the given key.
    """
    sortKey: CompanyLocationSortKeys = ID
  ): CompanyLocationConnection!

  """
  The number of locations that belong to the company.
  """
  locationsCount: Count

  """
  The main contact for the company.
  """
  mainContact: CompanyContact

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The name of the company.
  """
  name: String!

  """
  A note about the company.
  """
  note: String

  """
  The list of the company's orders.
  """
  orders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: OrderSortKeys = ID
  ): OrderConnection!

  """
  The total number of orders placed for this company, across all its locations.
  """
  ordersCount: Count

  """
  The total amount spent by this company, across all its locations.
  """
  totalSpent: MoneyV2!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was last modified.
  """
  updatedAt: DateTime!
}

"""
Represents a billing or shipping address for a company location.
"""
type CompanyAddress implements Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String!

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the company.
  """
  companyName: String!

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: CountryCode!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was created.
  """
  createdAt: DateTime!

  """
  The first name of the recipient.
  """
  firstName: String

  """
  The formatted version of the address.
  """
  formattedAddress(
    """
    Whether to include the company name in the formatted address.
    """
    withCompanyName: Boolean = true

    """
    Whether to include the recipient's name in the formatted address.
    """
    withName: Boolean = false
  ): [String!]!

  """
  A comma-separated list of the values for city, province, and country.
  """
  formattedArea: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The last name of the recipient.
  """
  lastName: String

  """
  A unique phone number for the customer.
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The identity of the recipient e.g. 'Receiving Department'.
  """
  recipient: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company address was last updated.
  """
  updatedAt: DateTime!

  """
  The zip or postal code of the address.
  """
  zip: String

  """
  The alphanumeric code for the region.
  For example, ON.
  """
  zoneCode: String
}

"""
An auto-generated type for paginating through multiple Companies.
"""
type CompanyConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CompanyEdge!]!

  """
  A list of nodes that are contained in CompanyEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Company!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
A person that acts on behalf of company associated to [a
customer](https://shopify.dev/api/admin-graphql/latest/objects/customer).
"""
type CompanyContact implements Node {
  """
  The company to which the contact belongs.
  """
  company: Company!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company contact was created at Shopify.
  """
  createdAt: DateTime!

  """
  The customer associated to this contact.
  """
  customer: Customer!

  """
  The list of draft orders for the company contact.
  """
  draftOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time |
    | customer_id | id |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | source | string |
    | status | string |
    | tag | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DraftOrderSortKeys = ID
  ): DraftOrderConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether the contact is the main contact of the company.
  """
  isMainContact: Boolean!

  """
  The lifetime duration of the company contact, since its creation date on
  Shopify. Examples: `1 year`, `2 months`, `3 days`.
  """
  lifetimeDuration: String!

  """
  The company contact's locale (language).
  """
  locale: String

  """
  The list of orders for the company contact.
  """
  orders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: OrderSortKeys = ID
  ): OrderConnection!

  """
  The list of roles assigned to this company contact.
  """
  roleAssignments(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | company_contact_id | id |
    | company_contact_role_id | id |
    | company_id | id |
    | company_location_id | id |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | location_name | string |
    | role_name | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list by the given key.
    """
    sortKey: CompanyContactRoleAssignmentSortKeys = ID
  ): CompanyContactRoleAssignmentConnection!

  """
  The company contact's job title.
  """
  title: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company contact was last updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple CompanyContacts.
"""
type CompanyContactConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CompanyContactEdge!]!

  """
  A list of nodes that are contained in CompanyContactEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CompanyContact!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CompanyContact and a cursor during pagination.
"""
type CompanyContactEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CompanyContactEdge.
  """
  node: CompanyContact!
}

"""
The role for a [company contact](https://shopify.dev/api/admin-graphql/latest/objects/companycontact).
"""
type CompanyContactRole implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of a role.
  For example, `admin` or `buyer`.
  """
  name: String!

  """
  A note for the role.
  """
  note: String
}

"""
The CompanyContactRoleAssignment describes the company and location associated to a company contact's role.
"""
type CompanyContactRoleAssignment implements Node {
  """
  The company this role assignment belongs to.
  """
  company: Company!

  """
  The company contact for whom this role is assigned.
  """
  companyContact: CompanyContact!

  """
  The company location to which the role is assigned.
  """
  companyLocation: CompanyLocation!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was created.
  """
  createdAt: DateTime!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The role that's assigned to the company contact.
  """
  role: CompanyContactRole!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was last updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple CompanyContactRoleAssignments.
"""
type CompanyContactRoleAssignmentConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CompanyContactRoleAssignmentEdge!]!

  """
  A list of nodes that are contained in CompanyContactRoleAssignmentEdge. You
  can fetch data about an individual node, or you can follow the edges to fetch
  data about a collection of related nodes. At each node, you specify the fields
  that you want to retrieve.
  """
  nodes: [CompanyContactRoleAssignment!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CompanyContactRoleAssignment and a cursor during pagination.
"""
type CompanyContactRoleAssignmentEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CompanyContactRoleAssignmentEdge.
  """
  node: CompanyContactRoleAssignment!
}

"""
The set of valid sort keys for the CompanyContactRoleAssignment query.
"""
enum CompanyContactRoleAssignmentSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `location_name` value.
  """
  LOCATION_NAME

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
An auto-generated type for paginating through multiple CompanyContactRoles.
"""
type CompanyContactRoleConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CompanyContactRoleEdge!]!

  """
  A list of nodes that are contained in CompanyContactRoleEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CompanyContactRole!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CompanyContactRole and a cursor during pagination.
"""
type CompanyContactRoleEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CompanyContactRoleEdge.
  """
  node: CompanyContactRole!
}

"""
The set of valid sort keys for the CompanyContactRole query.
"""
enum CompanyContactRoleSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
The set of valid sort keys for the CompanyContact query.
"""
enum CompanyContactSortKeys {
  """
  Sort by the `company_id` value.
  """
  COMPANY_ID

  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `email` value.
  """
  EMAIL

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `name` value.
  """
  NAME

  """
  Sort by the `name_email` value.
  """
  NAME_EMAIL

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `title` value.
  """
  TITLE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
An auto-generated type which holds one Company and a cursor during pagination.
"""
type CompanyEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CompanyEdge.
  """
  node: Company!
}

"""
A location or branch of a [company that's a
customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the
shop. Configuration of B2B relationship, for example prices lists and checkout
settings, may be done for a location.
"""
type CompanyLocation implements CommentEventSubject & HasEvents & HasMetafieldDefinitions & HasMetafields & Navigable & Node {
  """
  The address used as billing address for the location.
  """
  billingAddress: CompanyAddress

  """
  The configuration for the buyer's B2B checkout.
  """
  buyerExperienceConfiguration: BuyerExperienceConfiguration

  """
  The list of catalogs associated with the company location.
  """
  catalogs(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CatalogConnection!

  """
  The number of catalogs associated with the company location. Limited to a maximum of 10000.
  """
  catalogsCount: Count

  """
  The company that the company location belongs to.
  """
  company: Company!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company location was created in Shopify.
  """
  createdAt: DateTime!

  """
  The location's currency based on the shipping address. If the shipping address
  is empty, then the value is the shop's primary market.
  """
  currency: CurrencyCode!

  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  The list of draft orders for the company location.
  """
  draftOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time |
    | customer_id | id |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | source | string |
    | status | string |
    | tag | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DraftOrderSortKeys = ID
  ): DraftOrderConnection!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A unique externally-supplied ID for the company location.
  """
  externalId: String

  """
  Whether the merchant added a timeline comment to the company location.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether the company location is assigned a specific catalog.
  """
  inCatalog(
    """
    The ID of the catalog.
    """
    catalogId: ID!
  ): Boolean!

  """
  The preferred locale of the company location.
  """
  locale: String

  """
  The market that includes the location's shipping address. If the shipping
  address is empty, then the value is the shop's primary market.
  """
  market: Market!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The name of the company location.
  """
  name: String!

  """
  A note about the company location.
  """
  note: String

  """
  The total number of orders placed for the location.
  """
  orderCount: Int! @deprecated(reason: "Use `ordersCount` instead.")

  """
  The list of orders for the company location.
  """
  orders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: OrderSortKeys = ID
  ): OrderConnection!

  """
  The total number of orders placed for the location.
  """
  ordersCount: Count

  """
  The phone number of the company location.
  """
  phone: String

  """
  The list of roles assigned to the company location.
  """
  roleAssignments(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | company_contact_id | id |
    | company_contact_role_id | id |
    | company_id | id |
    | company_location_id | id |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | location_name | string |
    | role_name | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list by the given key.
    """
    sortKey: CompanyContactRoleAssignmentSortKeys = ID
  ): CompanyContactRoleAssignmentConnection!

  """
  The address used as shipping address for the location.
  """
  shippingAddress: CompanyAddress

  """
  The list of staff members assigned to the company location.
  """
  staffMemberAssignments(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | company_location_id | id |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | staff_member_id | id |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list by the given key.
    """
    sortKey: CompanyLocationStaffMemberAssignmentSortKeys = ID
  ): CompanyLocationStaffMemberAssignmentConnection!

  """
  The list of tax exemptions applied to the location.
  """
  taxExemptions: [TaxExemption!]! @deprecated(reason: "Use `taxSettings` instead.")

  """
  The tax registration ID for the company location.
  """
  taxRegistrationId: String @deprecated(reason: "Use `taxSettings` instead.")

  """
  The tax settings for the company location.
  """
  taxSettings: CompanyLocationTaxSettings!

  """
  The total amount spent by the location.
  """
  totalSpent: MoneyV2!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company location was last modified.
  """
  updatedAt: DateTime!
}

"""
A list of products with publishing and pricing information associated with company locations.
"""
type CompanyLocationCatalog implements Catalog & Node {
  """
  The company locations associated with the catalog.
  """
  companyLocations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | company_id | id |
    | created_at | time |
    | external_id | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | ids | string |
    | name | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list by the given key.
    """
    sortKey: CompanyLocationSortKeys = ID
  ): CompanyLocationConnection!

  """
  The number of company locations associated with the catalog.
  """
  companyLocationsCount: Count

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Most recent catalog operations.
  """
  operations: [ResourceOperation!]!

  """
  The price list associated with the catalog.
  """
  priceList: PriceList

  """
  A group of products and collections that's published to a catalog.
  """
  publication: Publication

  """
  The status of the catalog.
  """
  status: CatalogStatus!

  """
  The name of the catalog.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple CompanyLocations.
"""
type CompanyLocationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CompanyLocationEdge!]!

  """
  A list of nodes that are contained in CompanyLocationEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CompanyLocation!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CompanyLocation and a cursor during pagination.
"""
type CompanyLocationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CompanyLocationEdge.
  """
  node: CompanyLocation!
}

"""
The set of valid sort keys for the CompanyLocation query.
"""
enum CompanyLocationSortKeys {
  """
  Sort by the `company_and_location_name` value.
  """
  COMPANY_AND_LOCATION_NAME

  """
  Sort by the `company_id` value.
  """
  COMPANY_ID

  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `name` value.
  """
  NAME

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
A representation of store's staff member who is assigned to a [company
location](https://shopify.dev/api/admin-graphql/latest/objects/CompanyLocation)
of the shop. The staff member's actions will be limited to objects associated
with the assigned company location.
"""
type CompanyLocationStaffMemberAssignment implements Node {
  """
  The company location the staff member is assigned to.
  """
  companyLocation: CompanyLocation!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Represents the data of a staff member who's assigned to a company location.
  """
  staffMember: StaffMember!
}

"""
An auto-generated type for paginating through multiple CompanyLocationStaffMemberAssignments.
"""
type CompanyLocationStaffMemberAssignmentConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CompanyLocationStaffMemberAssignmentEdge!]!

  """
  A list of nodes that are contained in
  CompanyLocationStaffMemberAssignmentEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [CompanyLocationStaffMemberAssignment!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CompanyLocationStaffMemberAssignment and a cursor during pagination.
"""
type CompanyLocationStaffMemberAssignmentEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CompanyLocationStaffMemberAssignmentEdge.
  """
  node: CompanyLocationStaffMemberAssignment!
}

"""
The set of valid sort keys for the CompanyLocationStaffMemberAssignment query.
"""
enum CompanyLocationStaffMemberAssignmentSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
Represents the tax settings for a company location.
"""
type CompanyLocationTaxSettings {
  """
  Whether the location is exempt from taxes.
  """
  taxExempt: Boolean!

  """
  The list of tax exemptions applied to the location.
  """
  taxExemptions: [TaxExemption!]!

  """
  The tax registration ID for the company location.
  """
  taxRegistrationId: String
}

"""
The set of valid sort keys for the Company query.
"""
enum CompanySortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `name` value.
  """
  NAME

  """
  Sort by the `order_count` value.
  """
  ORDER_COUNT

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `since_date` value.
  """
  SINCE_DATE

  """
  Sort by the `total_spent` value.
  """
  TOTAL_SPENT

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
The input fields for the context data that determines the pricing of a variant. Refer to [Product](https://shopify.dev/docs/api/admin-graphql/latest/queries/product?example=Get+the+price+range+for+a+product+for+buyers+from+Canada)for
more information on how to use this input object.
"""
input ContextualPricingContext {
  """
  The CompanyLocation ID used to fetch company location specific prices.
  """
  companyLocationId: ID

  """
  The country code used to fetch country-specific prices.
  """
  country: CountryCode
}

"""
The context data that determines the publication status of a product.
"""
input ContextualPublicationContext {
  """
  The company location ID used to fetch company-specific publication.
  """
  companyLocationId: ID

  """
  The country code used to fetch country-specific publication.
  """
  country: CountryCode
}

"""
Details for count of elements.
"""
type Count {
  """
  The count of elements.
  """
  count: Int!

  """
  The count's precision, or the exactness of the value.
  """
  precision: CountPrecision!
}

"""
The precision of the value returned by a count field.
"""
enum CountPrecision {
  """
  The count is at least the value. A limit was imposed and reached.
  """
  AT_LEAST

  """
  The count is exactly the value.
  """
  EXACT
}

"""
The list of all the countries from the combined shipping zones for the shop.
"""
type CountriesInShippingZones {
  """
  The list of all the countries from all the combined shipping zones.
  """
  countryCodes: [CountryCode!]!

  """
  Whether 'Rest of World' has been defined in any of the shipping zones.
  """
  includeRestOfWorld: Boolean!
}

"""
The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
of another country. For example, the territories associated with Spain are represented by the country code `ES`,
and the territories associated with the United States of America are represented by the country code `US`.
"""
enum CountryCode {
  """
  Ascension Island.
  """
  AC

  """
  Andorra.
  """
  AD

  """
  United Arab Emirates.
  """
  AE

  """
  Afghanistan.
  """
  AF

  """
  Antigua & Barbuda.
  """
  AG

  """
  Anguilla.
  """
  AI

  """
  Albania.
  """
  AL

  """
  Armenia.
  """
  AM

  """
  Netherlands Antilles.
  """
  AN

  """
  Angola.
  """
  AO

  """
  Argentina.
  """
  AR

  """
  Austria.
  """
  AT

  """
  Australia.
  """
  AU

  """
  Aruba.
  """
  AW

  """
  Åland Islands.
  """
  AX

  """
  Azerbaijan.
  """
  AZ

  """
  Bosnia & Herzegovina.
  """
  BA

  """
  Barbados.
  """
  BB

  """
  Bangladesh.
  """
  BD

  """
  Belgium.
  """
  BE

  """
  Burkina Faso.
  """
  BF

  """
  Bulgaria.
  """
  BG

  """
  Bahrain.
  """
  BH

  """
  Burundi.
  """
  BI

  """
  Benin.
  """
  BJ

  """
  St. Barthélemy.
  """
  BL

  """
  Bermuda.
  """
  BM

  """
  Brunei.
  """
  BN

  """
  Bolivia.
  """
  BO

  """
  Caribbean Netherlands.
  """
  BQ

  """
  Brazil.
  """
  BR

  """
  Bahamas.
  """
  BS

  """
  Bhutan.
  """
  BT

  """
  Bouvet Island.
  """
  BV

  """
  Botswana.
  """
  BW

  """
  Belarus.
  """
  BY

  """
  Belize.
  """
  BZ

  """
  Canada.
  """
  CA

  """
  Cocos (Keeling) Islands.
  """
  CC

  """
  Congo - Kinshasa.
  """
  CD

  """
  Central African Republic.
  """
  CF

  """
  Congo - Brazzaville.
  """
  CG

  """
  Switzerland.
  """
  CH

  """
  Côte d’Ivoire.
  """
  CI

  """
  Cook Islands.
  """
  CK

  """
  Chile.
  """
  CL

  """
  Cameroon.
  """
  CM

  """
  China.
  """
  CN

  """
  Colombia.
  """
  CO

  """
  Costa Rica.
  """
  CR

  """
  Cuba.
  """
  CU

  """
  Cape Verde.
  """
  CV

  """
  Curaçao.
  """
  CW

  """
  Christmas Island.
  """
  CX

  """
  Cyprus.
  """
  CY

  """
  Czechia.
  """
  CZ

  """
  Germany.
  """
  DE

  """
  Djibouti.
  """
  DJ

  """
  Denmark.
  """
  DK

  """
  Dominica.
  """
  DM

  """
  Dominican Republic.
  """
  DO

  """
  Algeria.
  """
  DZ

  """
  Ecuador.
  """
  EC

  """
  Estonia.
  """
  EE

  """
  Egypt.
  """
  EG

  """
  Western Sahara.
  """
  EH

  """
  Eritrea.
  """
  ER

  """
  Spain.
  """
  ES

  """
  Ethiopia.
  """
  ET

  """
  Finland.
  """
  FI

  """
  Fiji.
  """
  FJ

  """
  Falkland Islands.
  """
  FK

  """
  Faroe Islands.
  """
  FO

  """
  France.
  """
  FR

  """
  Gabon.
  """
  GA

  """
  United Kingdom.
  """
  GB

  """
  Grenada.
  """
  GD

  """
  Georgia.
  """
  GE

  """
  French Guiana.
  """
  GF

  """
  Guernsey.
  """
  GG

  """
  Ghana.
  """
  GH

  """
  Gibraltar.
  """
  GI

  """
  Greenland.
  """
  GL

  """
  Gambia.
  """
  GM

  """
  Guinea.
  """
  GN

  """
  Guadeloupe.
  """
  GP

  """
  Equatorial Guinea.
  """
  GQ

  """
  Greece.
  """
  GR

  """
  South Georgia & South Sandwich Islands.
  """
  GS

  """
  Guatemala.
  """
  GT

  """
  Guinea-Bissau.
  """
  GW

  """
  Guyana.
  """
  GY

  """
  Hong Kong SAR.
  """
  HK

  """
  Heard & McDonald Islands.
  """
  HM

  """
  Honduras.
  """
  HN

  """
  Croatia.
  """
  HR

  """
  Haiti.
  """
  HT

  """
  Hungary.
  """
  HU

  """
  Indonesia.
  """
  ID

  """
  Ireland.
  """
  IE

  """
  Israel.
  """
  IL

  """
  Isle of Man.
  """
  IM

  """
  India.
  """
  IN

  """
  British Indian Ocean Territory.
  """
  IO

  """
  Iraq.
  """
  IQ

  """
  Iran.
  """
  IR

  """
  Iceland.
  """
  IS

  """
  Italy.
  """
  IT

  """
  Jersey.
  """
  JE

  """
  Jamaica.
  """
  JM

  """
  Jordan.
  """
  JO

  """
  Japan.
  """
  JP

  """
  Kenya.
  """
  KE

  """
  Kyrgyzstan.
  """
  KG

  """
  Cambodia.
  """
  KH

  """
  Kiribati.
  """
  KI

  """
  Comoros.
  """
  KM

  """
  St. Kitts & Nevis.
  """
  KN

  """
  North Korea.
  """
  KP

  """
  South Korea.
  """
  KR

  """
  Kuwait.
  """
  KW

  """
  Cayman Islands.
  """
  KY

  """
  Kazakhstan.
  """
  KZ

  """
  Laos.
  """
  LA

  """
  Lebanon.
  """
  LB

  """
  St. Lucia.
  """
  LC

  """
  Liechtenstein.
  """
  LI

  """
  Sri Lanka.
  """
  LK

  """
  Liberia.
  """
  LR

  """
  Lesotho.
  """
  LS

  """
  Lithuania.
  """
  LT

  """
  Luxembourg.
  """
  LU

  """
  Latvia.
  """
  LV

  """
  Libya.
  """
  LY

  """
  Morocco.
  """
  MA

  """
  Monaco.
  """
  MC

  """
  Moldova.
  """
  MD

  """
  Montenegro.
  """
  ME

  """
  St. Martin.
  """
  MF

  """
  Madagascar.
  """
  MG

  """
  North Macedonia.
  """
  MK

  """
  Mali.
  """
  ML

  """
  Myanmar (Burma).
  """
  MM

  """
  Mongolia.
  """
  MN

  """
  Macao SAR.
  """
  MO

  """
  Martinique.
  """
  MQ

  """
  Mauritania.
  """
  MR

  """
  Montserrat.
  """
  MS

  """
  Malta.
  """
  MT

  """
  Mauritius.
  """
  MU

  """
  Maldives.
  """
  MV

  """
  Malawi.
  """
  MW

  """
  Mexico.
  """
  MX

  """
  Malaysia.
  """
  MY

  """
  Mozambique.
  """
  MZ

  """
  Namibia.
  """
  NA

  """
  New Caledonia.
  """
  NC

  """
  Niger.
  """
  NE

  """
  Norfolk Island.
  """
  NF

  """
  Nigeria.
  """
  NG

  """
  Nicaragua.
  """
  NI

  """
  Netherlands.
  """
  NL

  """
  Norway.
  """
  NO

  """
  Nepal.
  """
  NP

  """
  Nauru.
  """
  NR

  """
  Niue.
  """
  NU

  """
  New Zealand.
  """
  NZ

  """
  Oman.
  """
  OM

  """
  Panama.
  """
  PA

  """
  Peru.
  """
  PE

  """
  French Polynesia.
  """
  PF

  """
  Papua New Guinea.
  """
  PG

  """
  Philippines.
  """
  PH

  """
  Pakistan.
  """
  PK

  """
  Poland.
  """
  PL

  """
  St. Pierre & Miquelon.
  """
  PM

  """
  Pitcairn Islands.
  """
  PN

  """
  Palestinian Territories.
  """
  PS

  """
  Portugal.
  """
  PT

  """
  Paraguay.
  """
  PY

  """
  Qatar.
  """
  QA

  """
  Réunion.
  """
  RE

  """
  Romania.
  """
  RO

  """
  Serbia.
  """
  RS

  """
  Russia.
  """
  RU

  """
  Rwanda.
  """
  RW

  """
  Saudi Arabia.
  """
  SA

  """
  Solomon Islands.
  """
  SB

  """
  Seychelles.
  """
  SC

  """
  Sudan.
  """
  SD

  """
  Sweden.
  """
  SE

  """
  Singapore.
  """
  SG

  """
  St. Helena.
  """
  SH

  """
  Slovenia.
  """
  SI

  """
  Svalbard & Jan Mayen.
  """
  SJ

  """
  Slovakia.
  """
  SK

  """
  Sierra Leone.
  """
  SL

  """
  San Marino.
  """
  SM

  """
  Senegal.
  """
  SN

  """
  Somalia.
  """
  SO

  """
  Suriname.
  """
  SR

  """
  South Sudan.
  """
  SS

  """
  São Tomé & Príncipe.
  """
  ST

  """
  El Salvador.
  """
  SV

  """
  Sint Maarten.
  """
  SX

  """
  Syria.
  """
  SY

  """
  Eswatini.
  """
  SZ

  """
  Tristan da Cunha.
  """
  TA

  """
  Turks & Caicos Islands.
  """
  TC

  """
  Chad.
  """
  TD

  """
  French Southern Territories.
  """
  TF

  """
  Togo.
  """
  TG

  """
  Thailand.
  """
  TH

  """
  Tajikistan.
  """
  TJ

  """
  Tokelau.
  """
  TK

  """
  Timor-Leste.
  """
  TL

  """
  Turkmenistan.
  """
  TM

  """
  Tunisia.
  """
  TN

  """
  Tonga.
  """
  TO

  """
  Türkiye.
  """
  TR

  """
  Trinidad & Tobago.
  """
  TT

  """
  Tuvalu.
  """
  TV

  """
  Taiwan.
  """
  TW

  """
  Tanzania.
  """
  TZ

  """
  Ukraine.
  """
  UA

  """
  Uganda.
  """
  UG

  """
  U.S. Outlying Islands.
  """
  UM

  """
  United States.
  """
  US

  """
  Uruguay.
  """
  UY

  """
  Uzbekistan.
  """
  UZ

  """
  Vatican City.
  """
  VA

  """
  St. Vincent & Grenadines.
  """
  VC

  """
  Venezuela.
  """
  VE

  """
  British Virgin Islands.
  """
  VG

  """
  Vietnam.
  """
  VN

  """
  Vanuatu.
  """
  VU

  """
  Wallis & Futuna.
  """
  WF

  """
  Samoa.
  """
  WS

  """
  Kosovo.
  """
  XK

  """
  Yemen.
  """
  YE

  """
  Mayotte.
  """
  YT

  """
  South Africa.
  """
  ZA

  """
  Zambia.
  """
  ZM

  """
  Zimbabwe.
  """
  ZW

  """
  Unknown Region.
  """
  ZZ
}

"""
The country-specific harmonized system code and ISO country code for an inventory item.
"""
type CountryHarmonizedSystemCode {
  """
  The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
  """
  countryCode: CountryCode!

  """
  The country-specific harmonized system code. These are usually longer than 6 digits.
  """
  harmonizedSystemCode: String!
}

"""
An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.
"""
type CountryHarmonizedSystemCodeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CountryHarmonizedSystemCodeEdge!]!

  """
  A list of nodes that are contained in CountryHarmonizedSystemCodeEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [CountryHarmonizedSystemCode!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.
"""
type CountryHarmonizedSystemCodeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CountryHarmonizedSystemCodeEdge.
  """
  node: CountryHarmonizedSystemCode!
}

"""
The part of the image that should remain after cropping.
"""
enum CropRegion {
  """
  Keep the bottom of the image.
  """
  BOTTOM

  """
  Keep the center of the image.
  """
  CENTER

  """
  Keep the left of the image.
  """
  LEFT

  """
  Keep the right of the image.
  """
  RIGHT

  """
  Keep the top of the image.
  """
  TOP
}

"""
The three-letter currency codes that represent the world currencies used in
stores. These include standard ISO 4217 codes, legacy codes,
and non-standard codes.
"""
enum CurrencyCode {
  """
  United Arab Emirates Dirham (AED).
  """
  AED

  """
  Afghan Afghani (AFN).
  """
  AFN

  """
  Albanian Lek (ALL).
  """
  ALL

  """
  Armenian Dram (AMD).
  """
  AMD

  """
  Netherlands Antillean Guilder.
  """
  ANG

  """
  Angolan Kwanza (AOA).
  """
  AOA

  """
  Argentine Pesos (ARS).
  """
  ARS

  """
  Australian Dollars (AUD).
  """
  AUD

  """
  Aruban Florin (AWG).
  """
  AWG

  """
  Azerbaijani Manat (AZN).
  """
  AZN

  """
  Bosnia and Herzegovina Convertible Mark (BAM).
  """
  BAM

  """
  Barbadian Dollar (BBD).
  """
  BBD

  """
  Bangladesh Taka (BDT).
  """
  BDT

  """
  Bulgarian Lev (BGN).
  """
  BGN

  """
  Bahraini Dinar (BHD).
  """
  BHD

  """
  Burundian Franc (BIF).
  """
  BIF

  """
  Bermudian Dollar (BMD).
  """
  BMD

  """
  Brunei Dollar (BND).
  """
  BND

  """
  Bolivian Boliviano (BOB).
  """
  BOB

  """
  Brazilian Real (BRL).
  """
  BRL

  """
  Bahamian Dollar (BSD).
  """
  BSD

  """
  Bhutanese Ngultrum (BTN).
  """
  BTN

  """
  Botswana Pula (BWP).
  """
  BWP

  """
  Belarusian Ruble (BYN).
  """
  BYN

  """
  Belarusian Ruble (BYR).
  """
  BYR @deprecated(reason: "`BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.")

  """
  Belize Dollar (BZD).
  """
  BZD

  """
  Canadian Dollars (CAD).
  """
  CAD

  """
  Congolese franc (CDF).
  """
  CDF

  """
  Swiss Francs (CHF).
  """
  CHF

  """
  Chilean Peso (CLP).
  """
  CLP

  """
  Chinese Yuan Renminbi (CNY).
  """
  CNY

  """
  Colombian Peso (COP).
  """
  COP

  """
  Costa Rican Colones (CRC).
  """
  CRC

  """
  Cape Verdean escudo (CVE).
  """
  CVE

  """
  Czech Koruny (CZK).
  """
  CZK

  """
  Djiboutian Franc (DJF).
  """
  DJF

  """
  Danish Kroner (DKK).
  """
  DKK

  """
  Dominican Peso (DOP).
  """
  DOP

  """
  Algerian Dinar (DZD).
  """
  DZD

  """
  Egyptian Pound (EGP).
  """
  EGP

  """
  Eritrean Nakfa (ERN).
  """
  ERN

  """
  Ethiopian Birr (ETB).
  """
  ETB

  """
  Euro (EUR).
  """
  EUR

  """
  Fijian Dollars (FJD).
  """
  FJD

  """
  Falkland Islands Pounds (FKP).
  """
  FKP

  """
  United Kingdom Pounds (GBP).
  """
  GBP

  """
  Georgian Lari (GEL).
  """
  GEL

  """
  Ghanaian Cedi (GHS).
  """
  GHS

  """
  Gibraltar Pounds (GIP).
  """
  GIP

  """
  Gambian Dalasi (GMD).
  """
  GMD

  """
  Guinean Franc (GNF).
  """
  GNF

  """
  Guatemalan Quetzal (GTQ).
  """
  GTQ

  """
  Guyanese Dollar (GYD).
  """
  GYD

  """
  Hong Kong Dollars (HKD).
  """
  HKD

  """
  Honduran Lempira (HNL).
  """
  HNL

  """
  Croatian Kuna (HRK).
  """
  HRK

  """
  Haitian Gourde (HTG).
  """
  HTG

  """
  Hungarian Forint (HUF).
  """
  HUF

  """
  Indonesian Rupiah (IDR).
  """
  IDR

  """
  Israeli New Shekel (NIS).
  """
  ILS

  """
  Indian Rupees (INR).
  """
  INR

  """
  Iraqi Dinar (IQD).
  """
  IQD

  """
  Iranian Rial (IRR).
  """
  IRR

  """
  Icelandic Kronur (ISK).
  """
  ISK

  """
  Jersey Pound.
  """
  JEP

  """
  Jamaican Dollars (JMD).
  """
  JMD

  """
  Jordanian Dinar (JOD).
  """
  JOD

  """
  Japanese Yen (JPY).
  """
  JPY

  """
  Kenyan Shilling (KES).
  """
  KES

  """
  Kyrgyzstani Som (KGS).
  """
  KGS

  """
  Cambodian Riel.
  """
  KHR

  """
  Kiribati Dollar (KID).
  """
  KID

  """
  Comorian Franc (KMF).
  """
  KMF

  """
  South Korean Won (KRW).
  """
  KRW

  """
  Kuwaiti Dinar (KWD).
  """
  KWD

  """
  Cayman Dollars (KYD).
  """
  KYD

  """
  Kazakhstani Tenge (KZT).
  """
  KZT

  """
  Laotian Kip (LAK).
  """
  LAK

  """
  Lebanese Pounds (LBP).
  """
  LBP

  """
  Sri Lankan Rupees (LKR).
  """
  LKR

  """
  Liberian Dollar (LRD).
  """
  LRD

  """
  Lesotho Loti (LSL).
  """
  LSL

  """
  Lithuanian Litai (LTL).
  """
  LTL

  """
  Latvian Lati (LVL).
  """
  LVL

  """
  Libyan Dinar (LYD).
  """
  LYD

  """
  Moroccan Dirham.
  """
  MAD

  """
  Moldovan Leu (MDL).
  """
  MDL

  """
  Malagasy Ariary (MGA).
  """
  MGA

  """
  Macedonia Denar (MKD).
  """
  MKD

  """
  Burmese Kyat (MMK).
  """
  MMK

  """
  Mongolian Tugrik.
  """
  MNT

  """
  Macanese Pataca (MOP).
  """
  MOP

  """
  Mauritanian Ouguiya (MRU).
  """
  MRU

  """
  Mauritian Rupee (MUR).
  """
  MUR

  """
  Maldivian Rufiyaa (MVR).
  """
  MVR

  """
  Malawian Kwacha (MWK).
  """
  MWK

  """
  Mexican Pesos (MXN).
  """
  MXN

  """
  Malaysian Ringgits (MYR).
  """
  MYR

  """
  Mozambican Metical.
  """
  MZN

  """
  Namibian Dollar.
  """
  NAD

  """
  Nigerian Naira (NGN).
  """
  NGN

  """
  Nicaraguan Córdoba (NIO).
  """
  NIO

  """
  Norwegian Kroner (NOK).
  """
  NOK

  """
  Nepalese Rupee (NPR).
  """
  NPR

  """
  New Zealand Dollars (NZD).
  """
  NZD

  """
  Omani Rial (OMR).
  """
  OMR

  """
  Panamian Balboa (PAB).
  """
  PAB

  """
  Peruvian Nuevo Sol (PEN).
  """
  PEN

  """
  Papua New Guinean Kina (PGK).
  """
  PGK

  """
  Philippine Peso (PHP).
  """
  PHP

  """
  Pakistani Rupee (PKR).
  """
  PKR

  """
  Polish Zlotych (PLN).
  """
  PLN

  """
  Paraguayan Guarani (PYG).
  """
  PYG

  """
  Qatari Rial (QAR).
  """
  QAR

  """
  Romanian Lei (RON).
  """
  RON

  """
  Serbian dinar (RSD).
  """
  RSD

  """
  Russian Rubles (RUB).
  """
  RUB

  """
  Rwandan Franc (RWF).
  """
  RWF

  """
  Saudi Riyal (SAR).
  """
  SAR

  """
  Solomon Islands Dollar (SBD).
  """
  SBD

  """
  Seychellois Rupee (SCR).
  """
  SCR

  """
  Sudanese Pound (SDG).
  """
  SDG

  """
  Swedish Kronor (SEK).
  """
  SEK

  """
  Singapore Dollars (SGD).
  """
  SGD

  """
  Saint Helena Pounds (SHP).
  """
  SHP

  """
  Sierra Leonean Leone (SLL).
  """
  SLL

  """
  Somali Shilling (SOS).
  """
  SOS

  """
  Surinamese Dollar (SRD).
  """
  SRD

  """
  South Sudanese Pound (SSP).
  """
  SSP

  """
  Sao Tome And Principe Dobra (STD).
  """
  STD @deprecated(reason: "`STD` is deprecated. Use `STN` available from version `2022-07` onwards instead.")

  """
  Sao Tome And Principe Dobra (STN).
  """
  STN

  """
  Syrian Pound (SYP).
  """
  SYP

  """
  Swazi Lilangeni (SZL).
  """
  SZL

  """
  Thai baht (THB).
  """
  THB

  """
  Tajikistani Somoni (TJS).
  """
  TJS

  """
  Turkmenistani Manat (TMT).
  """
  TMT

  """
  Tunisian Dinar (TND).
  """
  TND

  """
  Tongan Pa'anga (TOP).
  """
  TOP

  """
  Turkish Lira (TRY).
  """
  TRY

  """
  Trinidad and Tobago Dollars (TTD).
  """
  TTD

  """
  Taiwan Dollars (TWD).
  """
  TWD

  """
  Tanzanian Shilling (TZS).
  """
  TZS

  """
  Ukrainian Hryvnia (UAH).
  """
  UAH

  """
  Ugandan Shilling (UGX).
  """
  UGX

  """
  United States Dollars (USD).
  """
  USD

  """
  Uruguayan Pesos (UYU).
  """
  UYU

  """
  Uzbekistan som (UZS).
  """
  UZS

  """
  Venezuelan Bolivares (VED).
  """
  VED

  """
  Venezuelan Bolivares (VEF).
  """
  VEF @deprecated(reason: "`VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.")

  """
  Venezuelan Bolivares Soberanos (VES).
  """
  VES

  """
  Vietnamese đồng (VND).
  """
  VND

  """
  Vanuatu Vatu (VUV).
  """
  VUV

  """
  Samoan Tala (WST).
  """
  WST

  """
  Central African CFA Franc (XAF).
  """
  XAF

  """
  East Caribbean Dollar (XCD).
  """
  XCD

  """
  West African CFA franc (XOF).
  """
  XOF

  """
  CFP Franc (XPF).
  """
  XPF

  """
  Unrecognized currency.
  """
  XXX

  """
  Yemeni Rial (YER).
  """
  YER

  """
  South African Rand (ZAR).
  """
  ZAR

  """
  Zambian Kwacha (ZMW).
  """
  ZMW
}

"""
Currency formats configured for the merchant. These formats are available to use within Liquid.
"""
type CurrencyFormats {
  """
  Money without currency in HTML.
  """
  moneyFormat: FormattedString!

  """
  Money without currency in emails.
  """
  moneyInEmailsFormat: String!

  """
  Money with currency in HTML.
  """
  moneyWithCurrencyFormat: FormattedString!

  """
  Money with currency in emails.
  """
  moneyWithCurrencyInEmailsFormat: String!
}

"""
A setting for a presentment currency.
"""
type CurrencySetting {
  """
  The currency's ISO code.
  """
  currencyCode: CurrencyCode!

  """
  The full name of the currency.
  """
  currencyName: String!

  """
  Whether the currency is enabled or not. An enabled currency setting is visible
  to buyers and allows orders to be generated with that currency as presentment.
  """
  enabled: Boolean!

  """
  The date and time when the active exchange rate for the currency was last
  modified. It can be the automatic rate's creation date, or the manual rate's
  last updated at date if active.
  """
  rateUpdatedAt: DateTime
}

"""
An auto-generated type for paginating through multiple CurrencySettings.
"""
type CurrencySettingConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CurrencySettingEdge!]!

  """
  A list of nodes that are contained in CurrencySettingEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CurrencySetting!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CurrencySetting and a cursor during pagination.
"""
type CurrencySettingEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CurrencySettingEdge.
  """
  node: CurrencySetting!
}

"""
Represents information about a customer of the shop, such as the customer's contact details, their order
history, and whether they've agreed to receive marketing material by email.

**Caution:** Only use this data if it's required for your app's functionality.
Shopify will restrict [access to
scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
legitimate use for the associated data.
"""
type Customer implements CommentEventSubject & HasEvents & HasMetafieldDefinitions & HasMetafields & HasStoreCreditAccounts & LegacyInteroperability & Node {
  """
  A list of addresses associated with the customer.
  """
  addresses(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [MailingAddress!]!

  """
  The addresses associated with the customer.
  """
  addressesV2(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MailingAddressConnection!

  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  amountSpent: MoneyV2!

  """
  Whether the merchant can delete the customer from their store.

  A customer can be deleted from a store only if they haven't yet made an order. After a customer makes an
  order, they can't be deleted from a store.
  """
  canDelete: Boolean!

  """
  A list of the customer's company contact profiles.
  """
  companyContactProfiles: [CompanyContact!]!

  """
  The date and time when the customer was added to the store.
  """
  createdAt: DateTime!

  """
  Whether the customer has opted out of having their data sold.
  """
  dataSaleOptOut: Boolean!

  """
  The default address associated with the customer.
  """
  defaultAddress: MailingAddress

  """
  The full name of the customer, based on the values for first_name and last_name. If the first_name and
  last_name are not available, then this falls back to the customer's email
  address, and if that is not available, the customer's phone number.
  """
  displayName: String!

  """
  The customer's email address.
  """
  email: String

  """
  The current email marketing state for the customer.
  If the customer doesn't have an email address, then this property is `null`.
  """
  emailMarketingConsent: CustomerEmailMarketingConsentState

  """
  A list of events associated with the customer.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  The customer's first name.
  """
  firstName: String

  """
  Whether the merchant has added timeline comments about the customer on the customer's page.
  """
  hasTimelineComment: Boolean! @deprecated(reason: "To query for comments on the timeline, use the events connection and a `query` argument containing `verb:comment`, or look for a `CommentEvent` in the `__typename` of events.")

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The image associated with the customer.
  """
  image(
    """
    Image width and height (1 - 2048 pixels).
    """
    size: Int @deprecated(reason: "Use `maxWidth` or `maxHeight` on `Image.transformedSrc` instead.")
  ): Image!

  """
  The customer's last name.
  """
  lastName: String

  """
  The customer's last order.
  """
  lastOrder: Order

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The amount of time since the customer was first added to the store.

  Example: 'about 12 years'.
  """
  lifetimeDuration: String!

  """
  The customer's locale.
  """
  locale: String!

  """
  The market that includes the customer’s default address.
  """
  market: Market

  """
  Whether the customer can be merged with another customer.
  """
  mergeable: CustomerMergeable!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  A unique identifier for the customer that's used with Multipass login.
  """
  multipassIdentifier: String

  """
  A note about the customer.
  """
  note: String

  """
  The number of orders that the customer has made at the store in their lifetime.
  """
  numberOfOrders: UnsignedInt64!

  """
  A list of the customer's orders.
  """
  orders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | cart_token | string | Filter by the cart token's unique value, which
    references the cart that's associated with an order. | | | -
    `cart_token:abc123` |
    | channel | string | Filter by the channel information [`handle`](https://shopify.dev/api/admin-graphql/latest/objects/ChannelInformation#field-channeldefinition)
    (`ChannelInformation.channelDefinition.handle`) field. | | | -
    `channel:web`<br/> - `channel:web,pos` |
    | channel_id | id | Filter by the channel [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Channel#field-id)
    field. | | | - `channel_id:123` |
    | chargeback_status | string | Filter by the order's chargeback status. A
    chargeback occurs when a customer questions the legitimacy of a charge with
    their financial institution. | - `accepted`<br/> - `charge_refunded`<br/> -
    `lost`<br/> - `needs_response`<br/> - `under_review`<br/> - `won` | | -
    `chargeback_status:accepted` |
    | checkout_token | string | Filter by the checkout token's unique value,
    which references the checkout that's associated with an order. | | | -
    `checkout_token:abc123` |
    | confirmation_number | string | Filter by the randomly generated
    alpha-numeric identifier for an order that can be displayed to the customer
    instead of the sequential order name. This value isn't guaranteed to be
    unique. | | | - `confirmation_number:ABC123` |
    | created_at | time | Filter by the date and time when the order was created
    in Shopify's system. | | | - `created_at:2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | credit_card_last4 | string | Filter by the last four digits of the credit
    card that was used to pay for the order. | | | - `credit_card_last4:1234` |
    | customer_id | id | Filter orders by the customer [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Customer#field-id)
    field. | | | - `customer_id:123` |
    | delivery_method | string | Filter by the delivery [`methodType`](https://shopify.dev/api/admin-graphql/2024-07/objects/DeliveryMethod#field-methodtype)
    field. | - `shipping`<br/> - `pick-up`<br/> - `retail`<br/> - `local`<br/> -
    `pickup-point`<br/> - `none` | | - `delivery_method:shipping` |
    | discount_code | string | Filter by the case-insensitive discount code that
    was applied to the order at checkout. Maximum characters: 255. | | | -
    `discount_code:ABC123` |
    | email | string | Filter by the email address that's associated with the order. | | | - `email:example@shopify.com` |
    | financial_status | string | Filter by the order [`displayFinancialStatus`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-displayfinancialstatus)
    field. | - `paid`<br/> - `pending`<br/> - `authorized`<br/> -
    `partially_paid`<br/> - `partially_refunded`<br/> - `refunded`<br/> -
    `voided`<br/> - `expired` | | - `financial_status:authorized` |
    | fraud_protection_level | string | Filter by the level of fraud protection
    that's applied to the order. | - `fully_protected`<br/> -
    `partially_protected`<br/> - `not_protected`<br/> - `pending`<br/> -
    `not_eligible`<br/> - `not_available` | | -
    `fraud_protection_level:fully_protected` |
    | fulfillment_location_id | id | Filter by the fulfillment location [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment#field-location)
    (`Fulfillment.location.id`) field. | | | - `fulfillment_location_id:123` |
    | fulfillment_status | string | Filter by the order's fulfillment status. |
    - `unshipped`<br/> - `shipped`<br/> - `fulfilled`<br/> - `partial`<br/> -
    `scheduled`<br/> - `on_hold`<br/> - `unfulfilled`<br/> - `request_declined`
    | | - `fulfillment_status:fulfilled` |
    | gateway | string | Filter by the order [`paymentGatewayNames`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-paymentgatewaynames)
    field. | | | - `gateway:shopify_payments` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | location_id | id | Filter by the ID of the location that's associated with the order. | | | - `location_id:123` |
    | name | string | Filter by the order [`name`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-name)
    field. | | | - `name:1001-A` |
    | payment_id | string | Filter by the ID of the payment that's associated with the order. | | | - `payment_id:abc123` |
    | payment_provider_id | id | Filter by the ID of the payment provider that's
    associated with the order. | | | - `payment_provider_id:123` |
    | po_number | string | Filter by the order [`poNumber`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-ponumber)
    field. | | | - `po_number:P01001` |
    | processed_at | time | Filter by the order [`processedAt`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-processedat)
    field. | | | - `processed_at:2021-01-01T00:00:00Z` |
    | reference_location_id | id | Filter by the ID of a location that's
    associated with the order, such as locations from fulfillments, refunds, or
    the shop's primary location. | | | - `reference_location_id:123` |
    | return_status | string | Filter by the order's return status. | -
    `return_requested`<br/> - `in_progress`<br/> - `inspection_complete`<br/> -
    `returned`<br/> - `return_failed`<br/> - `no_return` | | -
    `return_status:in_progress` |
    | risk_level | string | Filter by the order risk assessment [`riskLevel`](https://shopify.dev/api/admin-graphql/latest/objects/OrderRiskAssessment#field-risklevel)
    field. | - `high`<br/> - `medium`<br/> - `low`<br/> - `none`<br/> -
    `pending` | | - `risk_level:high` |
    | sales_channel | string | Filter by the sales channel that the order is
    attributed to. | | | - `sales_channel: some_sales_channel` |
    | sku | string | Filter by the product variant [`sku`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | - `sku:ABC123` |
    | source_identifier | string | Filter by the ID of the order placed on the
    originating platform, such as a unique POS or third-party identifier. This
    value doesn't correspond to the Shopify ID that's generated from a completed
    draft order. | | | - `source_identifier:1234-12-1000` |
    | source_name | string | Filter by the name of the originating platform
    that's associated with the checkout for the order. | | | -
    `source_name:web`<br/> - `source_name:shopify_draft_order` |
    | status | string | Filter by the order status. | - `open`<br/> -
    `closed`<br/> - `cancelled`<br/> - `not_closed` | | - `status:open` |
    | subtotal_line_items_quantity | string |
    | tag | string | Filter objects by the `tag` field. | | | - `tag:my_tag` |
    | tag_not | string | Filter by objects that don’t have the specified tag. | | | - `tag_not:my_tag` |
    | test | boolean | Filter by test orders. Test orders are made using the [Shopify Bogus
    Gateway](https://help.shopify.com/manual/checkout-settings/test-orders) or a
    payment provider with test mode enabled. | | | - `test:true` |
    | updated_at | time | Filter by the date and time when the order was last
    updated in Shopify's system. | | | - `updated_at:2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: OrderSortKeys = ID
  ): OrderConnection!

  """
  A list of the customer's payment methods.
  """
  paymentMethods(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Whether to show the customer's revoked payment method.
    """
    showRevoked: Boolean = false
  ): CustomerPaymentMethodConnection!

  """
  The customer's phone number.
  """
  phone: String

  """
  Possible subscriber states of a customer defined by their subscription contracts.
  """
  productSubscriberStatus: CustomerProductSubscriberStatus!

  """
  The current SMS marketing state for the customer's phone number.

  If the customer does not have a phone number, then this property is `null`.
  """
  smsMarketingConsent: CustomerSmsMarketingConsentState

  """
  The state of the customer's account with the shop.

  Please note that this only meaningful when Classic Customer Accounts is active.
  """
  state: CustomerState!

  """
  The statistics for a given customer.
  """
  statistics: CustomerStatistics!

  """
  Returns a list of store credit accounts that belong to the owner resource.
  A store credit account owner can hold multiple accounts each with a different currency.
  """
  storeCreditAccounts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | currency_code | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String
  ): StoreCreditAccountConnection!

  """
  A list of the customer's subscription contracts.
  """
  subscriptionContracts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionContractConnection!

  """
  A comma separated list of tags that have been added to the customer.
  """
  tags: [String!]!

  """
  Whether the customer is exempt from being charged taxes on their orders.
  """
  taxExempt: Boolean!

  """
  The list of tax exemptions applied to the customer.
  """
  taxExemptions: [TaxExemption!]!

  """
  The URL to unsubscribe the customer from the mailing list.
  """
  unsubscribeUrl: URL!

  """
  The date and time when the customer was last updated.
  """
  updatedAt: DateTime!

  """
  Whether the email address is formatted correctly.

  Returns `true` when the email is formatted correctly and
  belongs to an existing domain. This doesn't guarantee that
  the email address actually exists.
  """
  validEmailAddress: Boolean!

  """
  Whether the customer has verified their email address. Defaults to `true` if
  the customer is created through the Shopify admin or API.
  """
  verifiedEmail: Boolean!
}

"""
An app extension page for the customer account navigation menu.
"""
type CustomerAccountAppExtensionPage implements CustomerAccountPage & Navigable & Node {
  """
  The UUID of the app extension.
  """
  appExtensionUuid: String

  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  A unique, human-friendly string for the customer account page.
  """
  handle: String!

  """
  The unique ID for the customer account page.
  """
  id: ID!

  """
  The title of the customer account page.
  """
  title: String!
}

"""
A native page for the customer account navigation menu.
"""
type CustomerAccountNativePage implements CustomerAccountPage & Navigable & Node {
  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  A unique, human-friendly string for the customer account page.
  """
  handle: String!

  """
  The unique ID for the customer account page.
  """
  id: ID!

  """
  The type of customer account native page.
  """
  pageType: CustomerAccountNativePagePageType!

  """
  The title of the customer account page.
  """
  title: String!
}

"""
The type of customer account native page.
"""
enum CustomerAccountNativePagePageType {
  """
  An orders page type.
  """
  NATIVE_ORDERS

  """
  A profile page type.
  """
  NATIVE_PROFILE

  """
  A settings page type.
  """
  NATIVE_SETTINGS

  """
  An unknown page type. Represents new page types that may be added in future versions.
  """
  UNKNOWN
}

"""
An object with an ID field to support global identification, in accordance with the
[Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
"""
interface CustomerAccountPage implements Navigable & Node {
  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  A unique, human-friendly string for the customer account page.
  """
  handle: String!

  """
  The unique ID for the customer account page.
  """
  id: ID!

  """
  The title of the customer account page.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple CustomerAccountPages.
"""
type CustomerAccountPageConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CustomerAccountPageEdge!]!

  """
  A list of nodes that are contained in CustomerAccountPageEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CustomerAccountPage!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CustomerAccountPage and a cursor during pagination.
"""
type CustomerAccountPageEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CustomerAccountPageEdge.
  """
  node: CustomerAccountPage!
}

"""
Information about the shop's customer accounts.
"""
type CustomerAccountsV2 {
  """
  Indicates which version of customer accounts the merchant is using in online store and checkout.
  """
  customerAccountsVersion: CustomerAccountsVersion!

  """
  Login links are shown in online store and checkout.
  """
  loginLinksVisibleOnStorefrontAndCheckout: Boolean!

  """
  Customers are required to log in to their account before checkout.
  """
  loginRequiredAtCheckout: Boolean!

  """
  The root url for the customer accounts pages.
  """
  url: URL
}

"""
The login redirection target for customer accounts.
"""
enum CustomerAccountsVersion {
  """
  The customer is redirected to the classic customer accounts login page.
  """
  CLASSIC

  """
  The customer is redirected to the new customer accounts login page.
  """
  NEW_CUSTOMER_ACCOUNTS
}

"""
An auto-generated type for paginating through multiple Customers.
"""
type CustomerConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CustomerEdge!]!

  """
  A list of nodes that are contained in CustomerEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [Customer!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
The source that collected the customer's consent to receive marketing materials.
"""
enum CustomerConsentCollectedFrom {
  """
  The customer consent was collected outside of Shopify.
  """
  OTHER

  """
  The customer consent was collected by Shopify.
  """
  SHOPIFY
}

"""
Represents a card instrument for customer payment method.
"""
type CustomerCreditCard {
  """
  The billing address of the card.
  """
  billingAddress: CustomerCreditCardBillingAddress

  """
  The brand of the card.
  """
  brand: String!

  """
  Whether the card is about to expire.
  """
  expiresSoon: Boolean!

  """
  The expiry month of the card.
  """
  expiryMonth: Int!

  """
  The expiry year of the card.
  """
  expiryYear: Int!

  """
  The card's BIN number.
  """
  firstDigits: String

  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """
  The last 4 digits of the card.
  """
  lastDigits: String!

  """
  The masked card number with only the last 4 digits displayed.
  """
  maskedNumber: String!

  """
  The name of the card holder.
  """
  name: String!

  """
  The source of the card if coming from a wallet such as Apple Pay.
  """
  source: String

  """
  The last 4 digits of the Device Account Number.
  """
  virtualLastDigits: String
}

"""
The billing address of a credit card payment instrument.
"""
type CustomerCreditCardBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: CountryCode

  """
  The first name in the billing address.
  """
  firstName: String

  """
  The last name in the billing address.
  """
  lastName: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The alphanumeric code for the region.
  For example, ON.
  """
  provinceCode: String

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
An auto-generated type which holds one Customer and a cursor during pagination.
"""
type CustomerEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CustomerEdge.
  """
  node: Customer!
}

"""
Represents an email address.
"""
type CustomerEmailAddress {
  """
  The customer's default email address.
  """
  emailAddress: String!

  """
  Whether the customer has subscribed to email marketing.
  """
  marketingState: CustomerEmailAddressMarketingState!

  """
  The URL to unsubscribe a member from all mailing lists.
  """
  marketingUnsubscribeUrl: URL!

  """
  Whether the customer has opted in to having their opened emails tracked.
  """
  openTrackingLevel: CustomerEmailAddressOpenTrackingLevel!

  """
  The URL that can be used to opt a customer in or out of email open tracking.
  """
  openTrackingUrl: URL!
}

"""
Possible marketing states for the customer’s email address.
"""
enum CustomerEmailAddressMarketingState {
  """
  The customer’s email address marketing state is invalid.
  """
  INVALID

  """
  The customer is not subscribed to email marketing.
  """
  NOT_SUBSCRIBED

  """
  The customer is in the process of subscribing to email marketing.
  """
  PENDING

  """
  The customer is subscribed to email marketing.
  """
  SUBSCRIBED

  """
  The customer is not subscribed to email marketing but was previously subscribed.
  """
  UNSUBSCRIBED
}

"""
The different levels related to whether a customer has opted in to having their opened emails tracked.
"""
enum CustomerEmailAddressOpenTrackingLevel {
  """
  The customer has opted in to having their open emails tracked.
  """
  OPTED_IN

  """
  The customer has opted out of having their open emails tracked.
  """
  OPTED_OUT

  """
  The customer has not specified whether they want to opt in or out of having their open emails tracked.
  """
  UNKNOWN
}

"""
The record of when a customer consented to receive marketing material by email.
"""
type CustomerEmailMarketingConsentState {
  """
  The date and time at which the customer consented to receive marketing material by email.
  The customer's consent state reflects the consent record with the most recent `consent_updated_at` date.
  If no date is provided, then the date and time at which the consent information was sent is used.
  """
  consentUpdatedAt: DateTime

  """
  The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
  that the customer gave when they consented to receive marketing material by email.
  """
  marketingOptInLevel: CustomerMarketingOptInLevel

  """
  The current email marketing state for the customer.
  """
  marketingState: CustomerEmailMarketingState!
}

"""
The possible email marketing states for a customer.
"""
enum CustomerEmailMarketingState {
  """
  The customer’s email address marketing state is invalid.
  """
  INVALID

  """
  The customer isn't subscribed to email marketing.
  """
  NOT_SUBSCRIBED

  """
  The customer is in the process of subscribing to email marketing.
  """
  PENDING

  """
  The customer's personal data is erased. This value is internally-set and read-only.
  """
  REDACTED

  """
  The customer is subscribed to email marketing.
  """
  SUBSCRIBED

  """
  The customer isn't currently subscribed to email marketing but was previously subscribed.
  """
  UNSUBSCRIBED
}

"""
The input fields for identifying a customer.
"""
input CustomerIdentifierInput @oneOf {
  """
  The [custom ID](https://shopify.dev/docs/apps/build/custom-data/metafields/working-with-custom-ids) of the customer.
  """
  customId: UniqueMetafieldValueInput

  """
  The email address of the customer.
  """
  emailAddress: String

  """
  The ID of the customer.
  """
  id: ID

  """
  The phone number of the customer.
  """
  phoneNumber: String
}

"""
Represents a customer's visiting activities on a shop's online store.
"""
type CustomerJourney {
  """
  The position of the current order within the customer's order history.
  """
  customerOrderIndex: Int!

  """
  The amount of days between first session and order creation date. First
  session represents first session since the last order, or first session within
  the 30 day attribution window, if more than 30 days has passed since the last order.
  """
  daysToConversion: Int!

  """
  The customer's first session going into the shop.
  """
  firstVisit: CustomerVisit!

  """
  The last session before an order is made.
  """
  lastVisit: CustomerVisit

  """
  Events preceding a customer order, such as shop sessions.
  """
  moments: [CustomerMoment!]!
}

"""
Represents a customer's visiting activities on a shop's online store.
"""
type CustomerJourneySummary {
  """
  The position of the current order within the customer's order history. Test orders aren't included.
  """
  customerOrderIndex: Int

  """
  The number of days between the first session and the order creation date. The
  first session represents the first session since the last order, or the first
  session within the 30 day attribution window, if more than 30 days have passed
  since the last order.
  """
  daysToConversion: Int

  """
  The customer's first session going into the shop.
  """
  firstVisit: CustomerVisit

  """
  The last session before an order is made.
  """
  lastVisit: CustomerVisit

  """
  The events preceding a customer's order, such as shop sessions.
  """
  moments(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CustomerMomentConnection

  """
  The total number of customer moments associated with this order. Returns null
  if the order is still in the process of being attributed.
  """
  momentsCount: Count

  """
  Whether the attributed sessions for the order have been created yet.
  """
  ready: Boolean!
}

"""
The possible values for the marketing subscription opt-in level enabled at the
time the customer consented to receive marketing information.

The levels are defined by [the M3AAWG best practices guideline
  document](https://www.m3aawg.org/sites/maawg/files/news/M3AAWG_Senders_BCP_Ver3-2015-02.pdf).
"""
enum CustomerMarketingOptInLevel {
  """
  After providing their information, the customer receives a confirmation and is required to
  perform a intermediate step before receiving marketing information.
  """
  CONFIRMED_OPT_IN

  """
  After providing their information, the customer receives marketing information without any
  intermediate steps.
  """
  SINGLE_OPT_IN

  """
  The customer receives marketing information but how they were opted in is unknown.
  """
  UNKNOWN
}

"""
The error blocking a customer merge.
"""
type CustomerMergeError {
  """
  The list of fields preventing the customer from being merged.
  """
  errorFields: [CustomerMergeErrorFieldType!]!

  """
  The customer merge error message.
  """
  message: String!
}

"""
The types of the hard blockers preventing a customer from being merged to another customer.
"""
enum CustomerMergeErrorFieldType {
  """
  The customer is a company contact.
  """
  COMPANY_CONTACT

  """
  The customer has payment methods.
  """
  CUSTOMER_PAYMENT_METHODS

  """
  The customer does not exist.
  """
  DELETED_AT

  """
  The customer has gift cards.
  """
  GIFT_CARDS

  """
  The customer has a merge in progress.
  """
  MERGE_IN_PROGRESS

  """
  The customer has a multipass identifier.
  """
  MULTIPASS_IDENTIFIER

  """
  The customer has a pending data request.
  """
  PENDING_DATA_REQUEST

  """
  The customer has a pending or completed redaction.
  """
  REDACTED_AT

  """
  The customer has store credit.
  """
  STORE_CREDIT

  """
  The customer has a subscription history.
  """
  SUBSCRIPTIONS
}

"""
The input fields to override default customer merge rules.
"""
input CustomerMergeOverrideFields {
  """
  The ID of the customer whose default address will be kept.
  """
  customerIdOfDefaultAddressToKeep: ID

  """
  The ID of the customer whose email will be kept.
  """
  customerIdOfEmailToKeep: ID

  """
  The ID of the customer whose first name will be kept.
  """
  customerIdOfFirstNameToKeep: ID

  """
  The ID of the customer whose last name will be kept.
  """
  customerIdOfLastNameToKeep: ID

  """
  The ID of the customer whose phone number will be kept.
  """
  customerIdOfPhoneNumberToKeep: ID

  """
  The note to keep.
  """
  note: String

  """
  The tags to keep.
  """
  tags: [String!]
}

"""
A preview of the results of a customer merge request.
"""
type CustomerMergePreview {
  """
  The fields that can be used to override the default fields.
  """
  alternateFields: CustomerMergePreviewAlternateFields

  """
  The fields that will block the merge if the two customers are merged.
  """
  blockingFields: CustomerMergePreviewBlockingFields

  """
  The errors blocking the customer merge.
  """
  customerMergeErrors: [CustomerMergeError!]

  """
  The fields that will be kept if the two customers are merged.
  """
  defaultFields: CustomerMergePreviewDefaultFields

  """
  The resulting customer ID if the two customers are merged.
  """
  resultingCustomerId: ID
}

"""
The fields that can be used to override the default fields.
"""
type CustomerMergePreviewAlternateFields {
  """
  The default address of a customer.
  """
  defaultAddress: MailingAddress

  """
  The email state of a customer.
  """
  email: CustomerEmailAddress

  """
  The first name of a customer.
  """
  firstName: String

  """
  The last name of a customer.
  """
  lastName: String

  """
  The phone number state of a customer.
  """
  phoneNumber: CustomerPhoneNumber
}

"""
The blocking fields of a customer merge preview. These fields will block customer merge unless edited.
"""
type CustomerMergePreviewBlockingFields {
  """
  The merged note resulting from a customer merge. The merged note is over the
  5000 character limit and will block customer merge.
  """
  note: String

  """
  The merged tags resulting from a customer merge. The merged tags are over the 250 limit and will block customer merge.
  """
  tags: [String!]!
}

"""
The fields that will be kept as part of a customer merge preview.
"""
type CustomerMergePreviewDefaultFields {
  """
  The merged addresses resulting from a customer merge.
  """
  addresses(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MailingAddressConnection!

  """
  The default address resulting from a customer merge.
  """
  defaultAddress: MailingAddress

  """
  The total number of customer-specific discounts resulting from a customer merge.
  """
  discountNodeCount: UnsignedInt64!

  """
  The merged customer-specific discounts resulting from a customer merge.
  """
  discountNodes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DiscountSortKeys = CREATED_AT
  ): DiscountNodeConnection!

  """
  The full name of the customer, based on the values for `first_name` and
  `last_name`. If `first_name` and `last_name` aren't available, then this field
  falls back to the customer's email address. If the customer's email isn't
  available, then this field falls back to the customer's phone number.
  """
  displayName: String!

  """
  The total number of merged draft orders.
  """
  draftOrderCount: UnsignedInt64!

  """
  The merged draft orders resulting from a customer merge.
  """
  draftOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DraftOrderSortKeys = UPDATED_AT
  ): DraftOrderConnection!

  """
  The email state of a customer.
  """
  email: CustomerEmailAddress

  """
  The first name resulting from a customer merge.
  """
  firstName: String

  """
  The total number of merged gift cards.
  """
  giftCardCount: UnsignedInt64!

  """
  The merged gift cards resulting from a customer merge.
  """
  giftCards(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: GiftCardSortKeys = CREATED_AT
  ): GiftCardConnection!

  """
  The last name resulting from a customer merge.
  """
  lastName: String

  """
  The total number of merged metafields.
  """
  metafieldCount: UnsignedInt64!

  """
  The merged note resulting from a customer merge.
  """
  note: String

  """
  The total number of merged orders.
  """
  orderCount: UnsignedInt64!

  """
  The merged orders resulting from a customer merge.
  """
  orders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: OrderSortKeys = PROCESSED_AT
  ): OrderConnection!

  """
  The phone number state of a customer.
  """
  phoneNumber: CustomerPhoneNumber

  """
  The merged tags resulting from a customer merge.
  """
  tags: [String!]!
}

"""
A merge request for merging two customers.
"""
type CustomerMergeRequest {
  """
  The merge errors that occurred during the customer merge request.
  """
  customerMergeErrors: [CustomerMergeError!]!

  """
  The UUID of the merge job.
  """
  jobId: ID

  """
  The ID of the customer resulting from the merge.
  """
  resultingCustomerId: ID!

  """
  The status of the customer merge request.
  """
  status: CustomerMergeRequestStatus!
}

"""
The status of the customer merge request.
"""
enum CustomerMergeRequestStatus {
  """
  The customer merge request has been completed.
  """
  COMPLETED

  """
  The customer merge request has failed.
  """
  FAILED

  """
  The customer merge request is currently in progress.
  """
  IN_PROGRESS

  """
  The customer merge request has been requested.
  """
  REQUESTED
}

"""
An object that represents whether a customer can be merged with another customer.
"""
type CustomerMergeable {
  """
  The list of fields preventing the customer from being merged.
  """
  errorFields: [CustomerMergeErrorFieldType!]!

  """
  Whether the customer can be merged with another customer.
  """
  isMergeable: Boolean!

  """
  The merge request if one is currently in progress.
  """
  mergeInProgress: CustomerMergeRequest

  """
  The reason why the customer can't be merged with another customer.
  """
  reason: String
}

"""
Represents a session preceding an order, often used for building a timeline of events leading to an order.
"""
interface CustomerMoment {
  """
  The date and time when the customer's session occurred.
  """
  occurredAt: DateTime!
}

"""
An auto-generated type for paginating through multiple CustomerMoments.
"""
type CustomerMomentConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CustomerMomentEdge!]!

  """
  A list of nodes that are contained in CustomerMomentEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CustomerMoment!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CustomerMoment and a cursor during pagination.
"""
type CustomerMomentEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CustomerMomentEdge.
  """
  node: CustomerMoment!
}

"""
All possible instruments for CustomerPaymentMethods.
"""
union CustomerPaymentInstrument = CustomerCreditCard | CustomerPaypalBillingAgreement | CustomerShopPayAgreement

"""
The billing address of a payment instrument.
"""
type CustomerPaymentInstrumentBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: CountryCode

  """
  The name of the buyer of the address.
  """
  name: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The alphanumeric code for the region.
  For example, ON.
  """
  provinceCode: String

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
A customer's payment method.
"""
type CustomerPaymentMethod implements Node {
  """
  The customer to whom the payment method belongs.
  """
  customer: Customer

  """
  The ID of this payment method.
  """
  id: ID!

  """
  The instrument for this payment method.
  """
  instrument: CustomerPaymentInstrument

  """
  The time that the payment method was revoked.
  """
  revokedAt: DateTime

  """
  The revocation reason for this payment method.
  """
  revokedReason: CustomerPaymentMethodRevocationReason

  """
  List Subscription Contracts.
  """
  subscriptionContracts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionContractConnection!
}

"""
An auto-generated type for paginating through multiple CustomerPaymentMethods.
"""
type CustomerPaymentMethodConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CustomerPaymentMethodEdge!]!

  """
  A list of nodes that are contained in CustomerPaymentMethodEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [CustomerPaymentMethod!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.
"""
type CustomerPaymentMethodEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CustomerPaymentMethodEdge.
  """
  node: CustomerPaymentMethod!
}

"""
The revocation reason types for a customer payment method.
"""
enum CustomerPaymentMethodRevocationReason {
  """
  The Authorize.net payment gateway is not enabled.
  """
  AUTHORIZE_NET_GATEWAY_NOT_ENABLED

  """
  Authorize.net did not return any payment methods. Make sure that the correct Authorize.net account is linked.
  """
  AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD

  """
  Failed to contact Braintree API.
  """
  BRAINTREE_API_AUTHENTICATION_ERROR

  """
  The Braintree payment gateway is not enabled.
  """
  BRAINTREE_GATEWAY_NOT_ENABLED

  """
  The Braintree payment method type should be a credit card or Apple Pay card.
  """
  BRAINTREE_PAYMENT_METHOD_NOT_CARD

  """
  Braintree returned no payment methods. Make sure the correct Braintree account is linked.
  """
  BRAINTREE_RETURNED_NO_PAYMENT_METHOD

  """
  The billing address failed to retrieve.
  """
  FAILED_TO_RETRIEVE_BILLING_ADDRESS

  """
  The credit card failed to update.
  """
  FAILED_TO_UPDATE_CREDIT_CARD

  """
  The payment method was manually revoked.
  """
  MANUALLY_REVOKED

  """
  The payment method was replaced with an existing payment method. The
  associated contracts have been migrated to the other payment method.
  """
  MERGED

  """
  Verification of payment method failed.
  """
  PAYMENT_METHOD_VERIFICATION_FAILED

  """
  Failed to contact the Stripe API.
  """
  STRIPE_API_AUTHENTICATION_ERROR

  """
  Invalid request. Failed to retrieve payment method from Stripe.
  """
  STRIPE_API_INVALID_REQUEST_ERROR

  """
  The Stripe payment gateway is not enabled.
  """
  STRIPE_GATEWAY_NOT_ENABLED

  """
  The Stripe payment method type should be card.
  """
  STRIPE_PAYMENT_METHOD_NOT_CARD

  """
  Stripe did not return any payment methods. Make sure that the correct Stripe account is linked.
  """
  STRIPE_RETURNED_NO_PAYMENT_METHOD

  """
  Verification of the payment method failed due to 3DS not being supported.
  """
  THREE_D_SECURE_FLOW_IN_VERIFICATION_NOT_IMPLEMENTED
}

"""
Represents a PayPal instrument for customer payment method.
"""
type CustomerPaypalBillingAgreement {
  """
  The billing address of this payment method.
  """
  billingAddress: CustomerPaymentInstrumentBillingAddress

  """
  Whether the PayPal billing agreement is inactive.
  """
  inactive: Boolean!

  """
  Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """
  The customers's PayPal account email address.
  """
  paypalAccountEmail: String
}

"""
A phone number.
"""
type CustomerPhoneNumber {
  """
  Whether the customer has subscribed to SMS marketing material.
  """
  marketingState: CustomerSmsMarketingState!

  """
  A customer's phone number.
  """
  phoneNumber: String!
}

"""
The valid tiers for the predicted spend of a customer with a shop.
"""
enum CustomerPredictedSpendTier {
  """
  The customer's spending is predicted to be in the top spending range for the shop in the following year.
  """
  HIGH

  """
  The customer's spending is predicted to be zero, or in the lowest spending range for the shop in the following year.
  """
  LOW

  """
  The customer's spending is predicted to be in the normal spending range for the shop in the following year.
  """
  MEDIUM
}

"""
The possible product subscription states for a customer, as defined by the customer's subscription contracts.
"""
enum CustomerProductSubscriberStatus {
  """
  The customer has at least one active subscription contract.
  """
  ACTIVE

  """
  The customer's last subscription contract was cancelled and there are no other active or paused
  subscription contracts.
  """
  CANCELLED

  """
  The customer's last subscription contract expired and there are no other active or paused
  subscription contracts.
  """
  EXPIRED

  """
  The customer's last subscription contract failed and there are no other active or paused
  subscription contracts.
  """
  FAILED

  """
  The customer has never had a subscription contract.
  """
  NEVER_SUBSCRIBED

  """
  The customer has at least one paused subscription contract and there are no other active
  subscription contracts.
  """
  PAUSED
}

"""
The set of valid sort keys for the CustomerSavedSearch query.
"""
enum CustomerSavedSearchSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `name` value.
  """
  NAME

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The member of a segment.
"""
type CustomerSegmentMember implements HasMetafields {
  """
  The total amount of money that the member has spent on orders.
  """
  amountSpent: MoneyV2

  """
  The member's default address.
  """
  defaultAddress: MailingAddress

  """
  The member's default email address.
  """
  defaultEmailAddress: CustomerEmailAddress

  """
  The member's default phone number.
  """
  defaultPhoneNumber: CustomerPhoneNumber

  """
  The full name of the member, which is based on the values of the `first_name`
  and `last_name` fields. If the member's first name and last name aren't
  available, then the customer's email address is used. If the customer's email
  address isn't available, then the customer's phone number is used.
  """
  displayName: String!

  """
  The member's first name.
  """
  firstName: String

  """
  The member’s ID.
  """
  id: ID!

  """
  The member's last name.
  """
  lastName: String

  """
  The ID of the member's most recent order.
  """
  lastOrderId: ID

  """
  Whether the customer can be merged with another customer.
  """
  mergeable: CustomerMergeable!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  A note about the member.
  """
  note: String

  """
  The total number of orders that the member has made.
  """
  numberOfOrders: UnsignedInt64
}

"""
The connection type for the `CustomerSegmentMembers` object.
"""
type CustomerSegmentMemberConnection {
  """
  A list of edges.
  """
  edges: [CustomerSegmentMemberEdge!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!

  """
  The statistics for a given segment.
  """
  statistics: SegmentStatistics!

  """
  The total number of members in a given segment.
  """
  totalCount: Int!
}

"""
An auto-generated type which holds one CustomerSegmentMember and a cursor during pagination.
"""
type CustomerSegmentMemberEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CustomerSegmentMemberEdge.
  """
  node: CustomerSegmentMember!
}

"""
A job to determine a list of members, such as customers, that are associated with an individual segment.
"""
type CustomerSegmentMembersQuery implements JobResult & Node {
  """
  The current total number of members in a given segment.
  """
  currentCount: Int!

  """
  This indicates if the job is still queued or has been run.
  """
  done: Boolean!

  """
  A globally-unique ID that's returned when running an asynchronous mutation.
  """
  id: ID!
}

"""
Represents a Shop Pay card instrument for customer payment method.
"""
type CustomerShopPayAgreement {
  """
  The billing address of the card.
  """
  billingAddress: CustomerCreditCardBillingAddress

  """
  Whether the card is about to expire.
  """
  expiresSoon: Boolean!

  """
  The expiry month of the card.
  """
  expiryMonth: Int!

  """
  The expiry year of the card.
  """
  expiryYear: Int!

  """
  Whether the Shop Pay billing agreement is inactive.
  """
  inactive: Boolean!

  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """
  The last 4 digits of the card.
  """
  lastDigits: String!

  """
  The masked card number with only the last 4 digits displayed.
  """
  maskedNumber: String!

  """
  The name of the card holder.
  """
  name: String!
}

"""
The record of when a customer consented to receive marketing material by SMS.

The customer's consent state reflects the record with the most recent date when consent was updated.
"""
type CustomerSmsMarketingConsentState {
  """
  The source from which the SMS marketing information for the customer was collected.
  """
  consentCollectedFrom: CustomerConsentCollectedFrom

  """
  The date and time when the customer consented to receive marketing material by SMS.
  If no date is provided, then the date and time when the consent information was sent is used.
  """
  consentUpdatedAt: DateTime

  """
  The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
  """
  marketingOptInLevel: CustomerMarketingOptInLevel!

  """
  The current SMS marketing state for the customer.
  """
  marketingState: CustomerSmsMarketingState!
}

"""
The valid SMS marketing states for a customer’s phone number.
"""
enum CustomerSmsMarketingState {
  """
  The customer hasn't subscribed to SMS marketing.
  """
  NOT_SUBSCRIBED

  """
  The customer is in the process of subscribing to SMS marketing.
  """
  PENDING

  """
  The customer's personal data is erased. This value is internally-set and read-only.
  """
  REDACTED

  """
  The customer is subscribed to SMS marketing.
  """
  SUBSCRIBED

  """
  The customer isn't currently subscribed to SMS marketing but was previously subscribed.
  """
  UNSUBSCRIBED
}

"""
The set of valid sort keys for the Customer query.
"""
enum CustomerSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `location` value.
  """
  LOCATION

  """
  Sort by the `name` value.
  """
  NAME

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
The valid values for the state of a customer's account with a shop.
"""
enum CustomerState {
  """
  The customer declined the email invite to create an account.
  """
  DECLINED

  """
  The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time.
  """
  DISABLED

  """
  The customer has created an account.
  """
  ENABLED

  """
  The customer has received an email invite to create an account.
  """
  INVITED
}

"""
A customer's computed statistics.
"""
type CustomerStatistics {
  """
  The predicted spend tier of a customer with a shop.
  """
  predictedSpendTier: CustomerPredictedSpendTier
}

"""
Represents a customer's session visiting a shop's online store, including
information about the marketing activity attributed to starting the session.
"""
type CustomerVisit implements CustomerMoment & Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  URL of the first page the customer landed on for the session.
  """
  landingPage: URL

  """
  Landing page information with URL linked in HTML. For example, the first page
  the customer visited was store.myshopify.com/products/1.
  """
  landingPageHtml: HTML

  """
  Represent actions taken by an app, on behalf of a merchant,
  to market Shopify resources such as products, collections, and discounts.
  """
  marketingEvent: MarketingEvent

  """
  The date and time when the customer's session occurred.
  """
  occurredAt: DateTime!

  """
  Marketing referral code from the link that the customer clicked to visit the store.
  Supports the following URL attributes: _ref_, _source_, or _r_.
  For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
  """
  referralCode: String

  """
  Referral information with URLs linked in HTML.
  """
  referralInfoHtml: FormattedString!

  """
  Webpage where the customer clicked a link that sent them to the online store.
  For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
  """
  referrerUrl: URL

  """
  Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
  a website domain, QR code, or unknown.
  """
  source: String!

  """
  Describes the source explicitly for first or last session.
  """
  sourceDescription: String

  """
  Type of marketing tactic.
  """
  sourceType: MarketingTactic

  """
  A set of UTM parameters gathered from the URL parameters of the referrer.
  """
  utmParameters: UTMParameters
}

"""
This type returns the information about the product and product variant from a customer visit.
"""
type CustomerVisitProductInfo {
  """
  The product information. If `null`, then the product was deleted from the store.
  """
  product: Product

  """
  The quantity of the product that the customer requested.
  """
  quantity: Int!

  """
  The product variant information, if the product variant exists.
  """
  variant: ProductVariant
}

"""
An auto-generated type for paginating through multiple CustomerVisitProductInfos.
"""
type CustomerVisitProductInfoConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [CustomerVisitProductInfoEdge!]!

  """
  A list of nodes that are contained in CustomerVisitProductInfoEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [CustomerVisitProductInfo!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one CustomerVisitProductInfo and a cursor during pagination.
"""
type CustomerVisitProductInfoEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of CustomerVisitProductInfoEdge.
  """
  node: CustomerVisitProductInfo!
}

"""
Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date string.
For example, September 7, 2019 is represented as `"2019-07-16"`.
"""
scalar Date

"""
Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date and time string.
For example, 3:50 pm on September 7, 2019 in the time zone of UTC (Coordinated Universal Time) is
represented as `"2019-09-07T15:50:00Z`".
"""
scalar DateTime

"""
Days of the week from Monday to Sunday.
"""
enum DayOfTheWeek {
  """
  Friday.
  """
  FRIDAY

  """
  Monday.
  """
  MONDAY

  """
  Saturday.
  """
  SATURDAY

  """
  Sunday.
  """
  SUNDAY

  """
  Thursday.
  """
  THURSDAY

  """
  Tuesday.
  """
  TUESDAY

  """
  Wednesday.
  """
  WEDNESDAY
}

"""
A signed decimal number, which supports arbitrary precision and is serialized as a string.

Example values: `"29.99"`, `"29.999"`.
"""
scalar Decimal

"""
Deletion events chronicle the destruction of resources (e.g. products and collections).
Once deleted, the deletion event is the only trace of the original's existence,
as the resource itself has been removed and can no longer be accessed.
"""
type DeletionEvent {
  """
  The date and time when the deletion event for the related resource was generated.
  """
  occurredAt: DateTime!

  """
  The ID of the resource that was deleted.
  """
  subjectId: ID!

  """
  The type of resource that was deleted.
  """
  subjectType: DeletionEventSubjectType!
}

"""
An auto-generated type for paginating through multiple DeletionEvents.
"""
type DeletionEventConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DeletionEventEdge!]!

  """
  A list of nodes that are contained in DeletionEventEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DeletionEvent!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DeletionEvent and a cursor during pagination.
"""
type DeletionEventEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DeletionEventEdge.
  """
  node: DeletionEvent!
}

"""
The set of valid sort keys for the DeletionEvent query.
"""
enum DeletionEventSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The supported subject types of deletion events.
"""
enum DeletionEventSubjectType {
  COLLECTION
  PRODUCT
}

"""
A shipping service and a list of countries that the service is available for.
"""
type DeliveryAvailableService {
  """
  The countries the service provider ships to.
  """
  countries: DeliveryCountryCodesOrRestOfWorld!

  """
  The name of the service.
  """
  name: String!
}

"""
Represents a branded promise presented to buyers.
"""
type DeliveryBrandedPromise {
  """
  The handle of the branded promise.  For example: `shop_promise`.
  """
  handle: String!

  """
  The name of the branded promise.  For example: `Shop Promise`.
  """
  name: String!
}

"""
A carrier service (also known as a carrier calculated service or shipping
service) provides real-time shipping rates to Shopify. Some common carrier
services include Canada Post, FedEx, UPS, and USPS. The term **carrier** is
often used interchangeably with the terms **shipping company** and **rate provider**.

Using the CarrierService resource, you can add a carrier service to a shop and
then provide a list of applicable shipping rates at checkout. You can even use
the cart data to adjust shipping rates and offer shipping discounts based on
what is in the customer's cart.

## Requirements for accessing the CarrierService resource
To access the CarrierService resource, add the `write_shipping` permission to
your app's requested scopes. For more information, see [API access
scopes](https://shopify.dev/docs/admin-api/access-scopes).

Your app's request to create a carrier service will fail unless the store
installing your carrier service meets one of the following requirements:
* It's on the Advanced Shopify plan or higher.
* It's on the Shopify plan with yearly billing, or the carrier service feature
has been added to the store for a monthly fee. For more information, contact
[Shopify Support](https://help.shopify.com/questions).
* It's a development store.

> Note:
> If a store changes its Shopify plan, then the store's association with a
carrier service is deactivated if the store no long meets one of the
requirements above.

## Providing shipping rates to Shopify
When adding a carrier service to a store, you need to provide a POST endpoint
rooted in the `callbackUrl` property where Shopify can retrieve applicable
shipping rates. The callback URL should be a public endpoint that expects these
requests from Shopify.

### Example shipping rate request sent to a carrier service

```json
{
  "rate": {
    "origin": {
      "country": "CA",
      "postal_code": "K2P1L4",
      "province": "ON",
      "city": "Ottawa",
      "name": null,
      "address1": "150 Elgin St.",
      "address2": "",
      "address3": null,
      "phone": null,
      "fax": null,
      "email": null,
      "address_type": null,
      "company_name": "Jamie D's Emporium"
    },
    "destination": {
      "country": "CA",
      "postal_code": "K1M1M4",
      "province": "ON",
      "city": "Ottawa",
      "name": "Bob Norman",
      "address1": "24 Sussex Dr.",
      "address2": "",
      "address3": null,
      "phone": null,
      "fax": null,
      "email": null,
      "address_type": null,
      "company_name": null
    },
    "items": [{
      "name": "Short Sleeve T-Shirt",
      "sku": "",
      "quantity": 1,
      "grams": 1000,
      "price": 1999,
      "vendor": "Jamie D's Emporium",
      "requires_shipping": true,
      "taxable": true,
      "fulfillment_service": "manual",
      "properties": null,
      "product_id": 48447225880,
      "variant_id": 258644705304
    }],
    "currency": "USD",
    "locale": "en"
  }
}
```

### Example response
```json
{
   "rates": [
       {
           "service_name": "canadapost-overnight",
           "service_code": "ON",
           "total_price": "1295",
           "description": "This is the fastest option by far",
           "currency": "CAD",
           "min_delivery_date": "2013-04-12 14:48:45 -0400",
           "max_delivery_date": "2013-04-12 14:48:45 -0400"
       },
       {
           "service_name": "fedex-2dayground",
           "service_code": "2D",
           "total_price": "2934",
           "currency": "USD",
           "min_delivery_date": "2013-04-12 14:48:45 -0400",
           "max_delivery_date": "2013-04-12 14:48:45 -0400"
       },
       {
           "service_name": "fedex-priorityovernight",
           "service_code": "1D",
           "total_price": "3587",
           "currency": "USD",
           "min_delivery_date": "2013-04-12 14:48:45 -0400",
           "max_delivery_date": "2013-04-12 14:48:45 -0400"
       }
   ]
}
```

The `address3`, `fax`, `address_type`, and `company_name` fields are returned by
specific [ActiveShipping](https://github.com/Shopify/active_shipping) providers.
For API-created carrier services, you should use only the following shipping
address fields:
* `address1`
* `address2`
* `city`
* `zip`
* `province`
* `country`

Other values remain as `null` and are not sent to the callback URL.

### Response fields

When Shopify requests shipping rates using your callback URL, the response
object `rates` must be a JSON array of objects with the following fields.
Required fields must be included in the response for the carrier service
integration to work properly.

| Field                   | Required | Description

                                                                                  |
| ----------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `service_name`          | Yes      | The name of the rate, which customers see
at checkout. For example: `Expedited Mail`.
                                                                                  |
| `description`           | Yes      | A description of the rate, which
customers see at checkout. For example: `Includes tracking and insurance`.
                                                                                           |
| `service_code`          | Yes      | A unique code associated with the rate.
For example: `expedited_mail`.
                                                                                    |
| `currency`              | Yes      | The currency of the shipping rate.

                                                                                  |
| `total_price`           | Yes      | The total price expressed in subunits. If
the currency doesn't use subunits, then the value must be multiplied by 100. For
example: `"total_price": 500` for 5.00 CAD, `"total_price": 100000` for 1000 JPY. |
| `phone_required`        | No       | Whether the customer must provide a phone
number at checkout.
                                                                                  |
| `min_delivery_date`     | No       | The earliest delivery date for the
displayed rate.
                                                                                         |
| `max_delivery_date`     | No       | The latest delivery date for the
displayed rate to still be valid.
                                                                                           |

### Special conditions

* To indicate that this carrier service cannot handle this shipping request,
return an empty array and any successful (20x) HTTP code.
* To force backup rates instead, return a 40x or 50x HTTP code with any content.
A good choice is the regular 404 Not Found code.
* Redirects (30x codes) will only be followed for the same domain as the
original callback URL. Attempting to redirect to a different domain will trigger backup rates.
* There is no retry mechanism. The response must be successful on the first try,
within the time budget listed below. Timeouts or errors will trigger backup rates.

## Response Timeouts

The read timeout for rate requests are dynamic, based on the number of requests
per minute (RPM). These limits are applied to each shop-app pair. The timeout
values are as follows.

| RPM Range     | Timeout    |
| ------------- | ---------- |
| Under 1500    | 10s        |
| 1500 to 3000  | 5s         |
| Over 3000     | 3s         |

> Note:
> These values are upper limits and should not be interpretted as a goal to
develop towards. Shopify is constantly evaluating the performance of the
platform and working towards improving resilience as well as app capabilities.
As such, these numbers may be adjusted outside of our normal versioning timelines.

## Server-side caching of requests
Shopify provides server-side caching to reduce the number of requests it makes.
Any shipping rate request that identically matches the following fields will be
retrieved from Shopify's cache of the initial response:
* variant IDs
* default shipping box weight and dimensions
* variant quantities
* carrier service ID
* origin address
* destination address
* item weights and signatures

If any of these fields differ, or if the cache has expired since the original
request, then new shipping rates are requested. The cache expires 15 minutes
after rates are successfully returned. If an error occurs, then the cache
expires after 30 seconds.
"""
type DeliveryCarrierService implements Node {
  """
  Whether the carrier service is active.
  """
  active: Boolean!

  """
  The list of services offered for given destinations.
  """
  availableServicesForCountries(
    """
    The country codes of the destinations.
    """
    countryCodes: [CountryCode!]

    """
    The locations of the possible origins.
    """
    origins: [ID!]

    """
    Whether to use 'Rest of World' as the destination.
    """
    restOfWorld: Boolean!
  ): [DeliveryAvailableService!]!

  """
  The URL endpoint that Shopify needs to retrieve shipping rates.
  """
  callbackUrl: URL

  """
  The properly formatted name of the shipping service provider, ready to display.
  """
  formattedName: String

  """
  The logo of the service provider.
  """
  icon: Image!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the shipping service provider.
  """
  name: String

  """
  Whether merchants are able to send dummy data to your service through the Shopify admin to see shipping rate examples.
  """
  supportsServiceDiscovery: Boolean!
}

"""
A carrier service and the associated list of shop locations.
"""
type DeliveryCarrierServiceAndLocations {
  """
  The carrier service.
  """
  carrierService: DeliveryCarrierService!

  """
  The list of locations that support this carrier service.
  """
  locations: [Location!]!
}

"""
An auto-generated type for paginating through multiple DeliveryCarrierServices.
"""
type DeliveryCarrierServiceConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DeliveryCarrierServiceEdge!]!

  """
  A list of nodes that are contained in DeliveryCarrierServiceEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [DeliveryCarrierService!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DeliveryCarrierService and a cursor during pagination.
"""
type DeliveryCarrierServiceEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DeliveryCarrierServiceEdge.
  """
  node: DeliveryCarrierService!
}

"""
A condition that must pass for a delivery method definition to be applied to an order.
"""
type DeliveryCondition implements Node {
  """
  The value (weight or price) that the condition field is compared to.
  """
  conditionCriteria: DeliveryConditionCriteria!

  """
  The field to compare the criterion value against, using the operator.
  """
  field: DeliveryConditionField!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The operator to compare the field and criterion value.
  """
  operator: DeliveryConditionOperator!
}

"""
The value (weight or price) that the condition field is compared to.
"""
union DeliveryConditionCriteria = MoneyV2 | Weight

"""
The field type that the condition will be applied to.
"""
enum DeliveryConditionField {
  """
  The condition will check against the total price of the order.
  """
  TOTAL_PRICE

  """
  The condition will check against the total weight of the order.
  """
  TOTAL_WEIGHT
}

"""
The operator to use to determine if the condition passes.
"""
enum DeliveryConditionOperator {
  """
  The condition will check whether the field is greater than or equal to the criterion.
  """
  GREATER_THAN_OR_EQUAL_TO

  """
  The condition will check if the field is less than or equal to the criterion.
  """
  LESS_THAN_OR_EQUAL_TO
}

"""
A country that is used to define a shipping zone.
"""
type DeliveryCountry implements Node {
  """
  A two-letter country code in ISO 3166-1 alpha-2 standard.
  It also includes a flag indicating whether the country should be
  a part of the 'Rest Of World' shipping zone.
  """
  code: DeliveryCountryCodeOrRestOfWorld!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The full name of the country.
  """
  name: String!

  """
  The list of regions associated with this country.
  """
  provinces: [DeliveryProvince!]!

  """
  The translated name of the country. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""
The country details and the associated shipping zone.
"""
type DeliveryCountryAndZone {
  """
  The country details.
  """
  country: DeliveryCountry!

  """
  The name of the shipping zone.
  """
  zone: String!
}

"""
The country code and whether the country is a part of the 'Rest Of World' shipping zone.
"""
type DeliveryCountryCodeOrRestOfWorld {
  """
  The country code in the ISO 3166-1 alpha-2 format.
  """
  countryCode: CountryCode

  """
  Whether the country is a part of the 'Rest of World' shipping zone.
  """
  restOfWorld: Boolean!
}

"""
The list of country codes and information whether the countries
are a part of the 'Rest Of World' shipping zone.
"""
type DeliveryCountryCodesOrRestOfWorld {
  """
  List of applicable country codes in the ISO 3166-1 alpha-2 format.
  """
  countryCodes: [CountryCode!]!

  """
  Whether the countries are a part of the 'Rest of World' shipping zone.
  """
  restOfWorld: Boolean!
}

"""
A delivery customization.
"""
type DeliveryCustomization implements HasMetafieldDefinitions & HasMetafields & Node {
  """
  The enabled status of the delivery customization.
  """
  enabled: Boolean!

  """
  The error history on the most recent version of the delivery customization.
  """
  errorHistory: FunctionsErrorHistory

  """
  The ID of the Shopify Function implementing the delivery customization.
  """
  functionId: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The Shopify Function implementing the delivery customization.
  """
  shopifyFunction: ShopifyFunction!

  """
  The title of the delivery customization.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple DeliveryCustomizations.
"""
type DeliveryCustomizationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DeliveryCustomizationEdge!]!

  """
  A list of nodes that are contained in DeliveryCustomizationEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DeliveryCustomization!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DeliveryCustomization and a cursor during pagination.
"""
type DeliveryCustomizationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DeliveryCustomizationEdge.
  """
  node: DeliveryCustomization!
}

"""
Whether the shop is blocked from converting to full multi-location delivery
profiles mode. If the shop is blocked, then the blocking reasons are also returned.
"""
type DeliveryLegacyModeBlocked {
  """
  Whether the shop can convert to full multi-location delivery profiles mode.
  """
  blocked: Boolean!

  """
  The reasons why the shop is blocked from converting to full multi-location delivery profiles mode.
  """
  reasons: [DeliveryLegacyModeBlockedReason!]
}

"""
Reasons the shop is blocked from converting to full multi-location delivery profiles mode.
"""
enum DeliveryLegacyModeBlockedReason {
  """
  Multi-Location mode is disabled. The shop can't convert to full multi-location delivery profiles mode.
  """
  MULTI_LOCATION_DISABLED @deprecated(reason: "All shops are now using multi-location mode.")

  """
  There are no locations for this store that can fulfill online orders.
  """
  NO_LOCATIONS_FULFILLING_ONLINE_ORDERS
}

"""
Local pickup settings associated with a location.
"""
type DeliveryLocalPickupSettings {
  """
  Additional instructions or information related to the local pickup.
  """
  instructions: String!

  """
  The estimated pickup time to show customers at checkout.
  """
  pickupTime: DeliveryLocalPickupTime!
}

"""
Possible pickup time values that a location enabled for local pickup can have.
"""
enum DeliveryLocalPickupTime {
  """
  Usually ready in 5+ days.
  """
  FIVE_OR_MORE_DAYS

  """
  Usually ready in 4 hours.
  """
  FOUR_HOURS

  """
  Usually ready in 1 hour.
  """
  ONE_HOUR

  """
  Usually ready in 24 hours.
  """
  TWENTY_FOUR_HOURS

  """
  Usually ready in 2 hours.
  """
  TWO_HOURS

  """
  Usually ready in 2-4 days.
  """
  TWO_TO_FOUR_DAYS
}

"""
A location group is a collection of locations. They share zones and delivery methods across delivery
profiles.
"""
type DeliveryLocationGroup implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  A list of all locations that are part of this location group.
  """
  locations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    Whether to include the locations that are deactivated.
    """
    includeInactive: Boolean = false

    """
    Whether to include the legacy locations of fulfillment services.
    """
    includeLegacy: Boolean = false

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | active | string |
    | address1 | string |
    | address2 | string |
    | city | string |
    | country | string |
    | created_at | time |
    | geolocated | boolean |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | legacy | boolean |
    | location_id | id |
    | name | string |
    | pickup_in_store | string | | - `enabled`<br/> - `disabled` |
    | province | string |
    | zip | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: LocationSortKeys = NAME
  ): LocationConnection!

  """
  A count of all locations that are part of this location group.
  """
  locationsCount: Count
}

"""
Links a location group with a zone and the associated method definitions.
"""
type DeliveryLocationGroupZone {
  """
  The number of method definitions for the zone.
  """
  methodDefinitionCounts: DeliveryMethodDefinitionCounts!

  """
  The method definitions associated to a zone and location group.
  """
  methodDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Return only eligible or ineligible method definitions.
    """
    eligible: Boolean

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MethodDefinitionSortKeys = ID

    """
    Return only merchant or participant method definitions.
    """
    type: DeliveryMethodDefinitionType
  ): DeliveryMethodDefinitionConnection!

  """
  The zone associated to a location group.
  """
  zone: DeliveryZone!
}

"""
An auto-generated type for paginating through multiple DeliveryLocationGroupZones.
"""
type DeliveryLocationGroupZoneConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DeliveryLocationGroupZoneEdge!]!

  """
  A list of nodes that are contained in DeliveryLocationGroupZoneEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [DeliveryLocationGroupZone!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.
"""
type DeliveryLocationGroupZoneEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DeliveryLocationGroupZoneEdge.
  """
  node: DeliveryLocationGroupZone!
}

"""
The delivery method used by a fulfillment order.
"""
type DeliveryMethod implements Node {
  """
  The Additional information to consider when performing the delivery.
  """
  additionalInformation: DeliveryMethodAdditionalInformation

  """
  The branded promise that was presented to the buyer during checkout.  For example: Shop Promise.
  """
  brandedPromise: DeliveryBrandedPromise

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The latest delivery date and time when the fulfillment is expected to arrive at the buyer's location.
  """
  maxDeliveryDateTime: DateTime

  """
  The type of the delivery method.
  """
  methodType: DeliveryMethodType!

  """
  The earliest delivery date and time when the fulfillment is expected to arrive at the buyer's location.
  """
  minDeliveryDateTime: DateTime

  """
  The name of the delivery option that was presented to the buyer during checkout.
  """
  presentedName: String

  """
  A reference to the shipping method.
  """
  serviceCode: String

  """
  Source reference is promise provider specific data associated with delivery promise.
  """
  sourceReference: String
}

"""
Additional information included on a delivery method that will help during the delivery process.
"""
type DeliveryMethodAdditionalInformation {
  """
  The delivery instructions to follow when performing the delivery.
  """
  instructions: String

  """
  The phone number to contact when performing the delivery.
  """
  phone: String
}

"""
A method definition contains the delivery rate and the conditions that must be met for the method to be
applied.
"""
type DeliveryMethodDefinition implements Node {
  """
  Whether this method definition is active.
  """
  active: Boolean!

  """
  The description of the method definition. Only available on shipping rates that are custom.
  """
  description: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The method conditions that must pass for this method definition to be applied to an order.
  """
  methodConditions: [DeliveryCondition!]!

  """
  The name of the method definition.
  """
  name: String!

  """
  The provided rate for this method definition, from a rate definition or participant.
  """
  rateProvider: DeliveryRateProvider!
}

"""
An auto-generated type for paginating through multiple DeliveryMethodDefinitions.
"""
type DeliveryMethodDefinitionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DeliveryMethodDefinitionEdge!]!

  """
  A list of nodes that are contained in DeliveryMethodDefinitionEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [DeliveryMethodDefinition!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
The number of method definitions for a zone, separated into merchant-owned and participant definitions.
"""
type DeliveryMethodDefinitionCounts {
  """
  The number of participant method definitions for the specified zone.
  """
  participantDefinitionsCount: Int!

  """
  The number of merchant-defined method definitions for the specified zone.
  """
  rateDefinitionsCount: Int!
}

"""
An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.
"""
type DeliveryMethodDefinitionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DeliveryMethodDefinitionEdge.
  """
  node: DeliveryMethodDefinition!
}

"""
The different types of method definitions to filter by.
"""
enum DeliveryMethodDefinitionType {
  """
  A static merchant-defined rate.
  """
  MERCHANT

  """
  A dynamic participant rate.
  """
  PARTICIPANT
}

"""
Possible method types that a delivery method can have.
"""
enum DeliveryMethodType {
  """
  The order is delivered using a local delivery service.
  """
  LOCAL

  """
  Non-physical items, no delivery needed.
  """
  NONE

  """
  The order is delivered to a pickup point.
  """
  PICKUP_POINT

  """
  The order is picked up by the customer.
  """
  PICK_UP

  """
  In-store sale, no delivery needed.
  """
  RETAIL

  """
  The order is shipped.
  """
  SHIPPING
}

"""
A participant defines carrier-calculated rates for shipping services
with a possible merchant-defined fixed fee or a percentage-of-rate fee.
"""
type DeliveryParticipant implements Node {
  """
  Whether to display new shipping services automatically to the customer when the service becomes available.
  """
  adaptToNewServicesFlag: Boolean!

  """
  The carrier used for this participant.
  """
  carrierService: DeliveryCarrierService!

  """
  The merchant-defined fixed fee for this participant.
  """
  fixedFee: MoneyV2

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The carrier-specific services offered by the participant, and whether each service is active.
  """
  participantServices: [DeliveryParticipantService!]!

  """
  The merchant-defined percentage-of-rate fee for this participant.
  """
  percentageOfRateFee: Float!
}

"""
A mail service provided by the participant.
"""
type DeliveryParticipantService {
  """
  Whether the service is active.
  """
  active: Boolean!

  """
  The name of the service.
  """
  name: String!
}

"""
How many product variants are in a profile. This count is capped at 500.
"""
type DeliveryProductVariantsCount {
  """
  Whether the count has reached the cap of 500.
  """
  capped: Boolean!

  """
  The product variant count.
  """
  count: Int!
}

"""
A shipping profile. In Shopify, a shipping profile is a set of shipping rates
scoped to a set of products or variants that can be shipped from selected
locations to zones. Learn more about [building with delivery profiles](https://shopify.dev/apps/build/purchase-options/deferred/delivery-and-deferment/build-delivery-profiles).
"""
type DeliveryProfile implements Node {
  """
  The number of active shipping rates for the profile.
  """
  activeMethodDefinitionsCount: Int!

  """
  Whether this is the default profile.
  """
  default: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether this shop has enabled legacy compatibility mode for delivery profiles.
  """
  legacyMode: Boolean!

  """
  The number of locations without rates defined.
  """
  locationsWithoutRatesCount: Int!

  """
  The name of the delivery profile.
  """
  name: String!

  """
  The number of active origin locations for the profile.
  """
  originLocationCount: Int!

  """
  How many product variants are in this profile.
  """
  productVariantsCount: Count

  """
  How many product variants are in this profile.
  """
  productVariantsCountV2: DeliveryProductVariantsCount! @deprecated(reason: "Use `productVariantsCount` instead.")

  """
  The products and variants associated with this profile.
  """
  profileItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ProfileItemSortKeys = ID @deprecated(reason: "Profile item sorting is no longer supported.")
  ): DeliveryProfileItemConnection!

  """
  The location groups and associated zones using this profile.
  """
  profileLocationGroups(
    """
    Filter the location groups of the profile by location group ID.
    """
    locationGroupId: ID
  ): [DeliveryProfileLocationGroup!]!

  """
  Selling plan groups associated with the specified delivery profile.
  """
  sellingPlanGroups(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SellingPlanGroupConnection!

  """
  List of locations that haven't been assigned to a location group for this profile.
  """
  unassignedLocations: [Location!]!

  """
  List of locations that have not been assigned to a location group for this profile.
  """
  unassignedLocationsPaginated(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): LocationConnection!

  """
  The number of countries with active rates to deliver to.
  """
  zoneCountryCount: Int!
}

"""
An auto-generated type for paginating through multiple DeliveryProfiles.
"""
type DeliveryProfileConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DeliveryProfileEdge!]!

  """
  A list of nodes that are contained in DeliveryProfileEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DeliveryProfile!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DeliveryProfile and a cursor during pagination.
"""
type DeliveryProfileEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DeliveryProfileEdge.
  """
  node: DeliveryProfile!
}

"""
A product and the subset of associated variants that are part of this delivery profile.
"""
type DeliveryProfileItem implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  A product associated with this profile.
  """
  product: Product!

  """
  The product variants associated with this delivery profile.
  """
  variants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ProductVariantSortKeys = ID @deprecated(reason: "Profile item variant sorting is no longer supported.")
  ): ProductVariantConnection!
}

"""
An auto-generated type for paginating through multiple DeliveryProfileItems.
"""
type DeliveryProfileItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DeliveryProfileItemEdge!]!

  """
  A list of nodes that are contained in DeliveryProfileItemEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DeliveryProfileItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.
"""
type DeliveryProfileItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DeliveryProfileItemEdge.
  """
  node: DeliveryProfileItem!
}

"""
Links a location group with zones. Both are associated to a delivery profile.
"""
type DeliveryProfileLocationGroup {
  """
  The countries already selected in any zone for the specified location group.
  """
  countriesInAnyZone: [DeliveryCountryAndZone!]!

  """
  The collection of locations that make up the specified location group.
  """
  locationGroup: DeliveryLocationGroup!

  """
  The applicable zones associated to the specified location group.
  """
  locationGroupZones(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): DeliveryLocationGroupZoneConnection!
}

"""
Returns enabled delivery promise participants.
"""
type DeliveryPromiseParticipant implements Node {
  """
  The ID of the promise participant.
  """
  id: ID!

  """
  The resource that the participant is attached to.
  """
  owner: DeliveryPromiseParticipantOwner

  """
  The owner type of the participant.
  """
  ownerType: DeliveryPromiseParticipantOwnerType!
}

"""
An auto-generated type for paginating through multiple DeliveryPromiseParticipants.
"""
type DeliveryPromiseParticipantConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DeliveryPromiseParticipantEdge!]!

  """
  A list of nodes that are contained in DeliveryPromiseParticipantEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [DeliveryPromiseParticipant!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DeliveryPromiseParticipant and a cursor during pagination.
"""
type DeliveryPromiseParticipantEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DeliveryPromiseParticipantEdge.
  """
  node: DeliveryPromiseParticipant!
}

"""
The object that the participant references.
"""
union DeliveryPromiseParticipantOwner = ProductVariant

"""
The type of object that the participant is attached to.
"""
enum DeliveryPromiseParticipantOwnerType {
  """
  A product variant.
  """
  PRODUCTVARIANT
}

"""
A delivery promise provider. Currently restricted to select approved delivery promise partners.
"""
type DeliveryPromiseProvider implements Node {
  """
  Whether the delivery promise provider is active. Defaults to `true` when creating a provider.
  """
  active: Boolean!

  """
  The number of seconds to add to the current time as a buffer when looking up
  delivery promises. Represents how long the shop requires before releasing an
  order to the fulfillment provider.
  """
  fulfillmentDelay: Int

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The location associated with this delivery promise provider.
  """
  location: Location!

  """
  The time zone to be used for interpreting day of week and cutoff times in
  delivery schedules when looking up delivery promises.
  """
  timeZone: String!
}

"""
The delivery promise settings.
"""
type DeliveryPromiseSetting {
  """
  Whether delivery dates is enabled.
  """
  deliveryDatesEnabled: Boolean!

  """
  The number of business days required for processing the order before the
  package is handed off to the carrier. Expressed as an ISO8601 duration.
  """
  processingTime: String
}

"""
A region that is used to define a shipping zone.
"""
type DeliveryProvince implements Node {
  """
  The code of the region.
  """
  code: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The full name of the region.
  """
  name: String!

  """
  The translated name of the region. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""
The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition).
"""
type DeliveryRateDefinition implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The price of this rate.
  """
  price: MoneyV2!
}

"""
A rate provided by a merchant-defined rate or a participant.
"""
union DeliveryRateProvider = DeliveryParticipant | DeliveryRateDefinition

"""
The `DeliverySetting` object enables you to manage shop-wide shipping settings.
You can enable legacy compatibility mode for the multi-location delivery profiles feature
if the legacy mode isn't blocked.
"""
type DeliverySetting {
  """
  Whether the shop is blocked from converting to full multi-location delivery
  profiles mode. If the shop is blocked, then the blocking reasons are also returned.
  """
  legacyModeBlocked: DeliveryLegacyModeBlocked!

  """
  Enables legacy compatability mode for the multi-location delivery profiles feature.
  """
  legacyModeProfiles: Boolean!
}

"""
A zone is a group of countries that have the same shipping rates. Customers can
order products from a store only if they choose a shipping destination that's
included in one of the store's zones.
"""
type DeliveryZone implements Node {
  """
  The list of countries within the zone.
  """
  countries: [DeliveryCountry!]!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the zone.
  """
  name: String!
}

"""
Configuration of the deposit.
"""
union DepositConfiguration = DepositPercentage

"""
A percentage deposit.
"""
type DepositPercentage {
  """
  The percentage value of the deposit.
  """
  percentage: Float!
}

"""
Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
"""
enum DigitalWallet {
  """
  Android Pay.
  """
  ANDROID_PAY

  """
  Apple Pay.
  """
  APPLE_PAY

  """
  Google Pay.
  """
  GOOGLE_PAY

  """
  Shopify Pay.
  """
  SHOPIFY_PAY
}

"""
A discount.
"""
union Discount = DiscountAutomaticApp | DiscountAutomaticBasic | DiscountAutomaticBxgy | DiscountAutomaticFreeShipping | DiscountCodeApp | DiscountCodeBasic | DiscountCodeBxgy | DiscountCodeFreeShipping

"""
An amount that's allocated to a line based on an associated discount application.
"""
type DiscountAllocation {
  """
  The money amount that's allocated to a line based on the associated discount application.
  """
  allocatedAmount: MoneyV2! @deprecated(reason: "Use `allocatedAmountSet` instead.")

  """
  The money amount that's allocated to a line based on the associated discount
  application in shop and presentment currencies.
  """
  allocatedAmountSet: MoneyBag!

  """
  The discount application that the allocated amount originated from.
  """
  discountApplication: DiscountApplication!
}

"""
An auto-generated type for paginating through multiple DiscountAllocations.
"""
type DiscountAllocationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DiscountAllocationEdge!]!

  """
  A list of nodes that are contained in DiscountAllocationEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DiscountAllocation!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DiscountAllocation and a cursor during pagination.
"""
type DiscountAllocationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DiscountAllocationEdge.
  """
  node: DiscountAllocation!
}

"""
The fixed amount value of a discount, and whether the amount is applied to each
entitled item or spread evenly across the entitled items.
"""
type DiscountAmount {
  """
  The value of the discount.
  """
  amount: MoneyV2!

  """
  If true, then the discount is applied to each of the entitled items. If false,
  then the amount is split across all of the entitled items.
  """
  appliesOnEachItem: Boolean!
}

"""
Discount applications capture the intentions of a discount source at
the time of application on an order's line items or shipping lines.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
interface DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
The method by which the discount's value is allocated onto its entitled lines.
"""
enum DiscountApplicationAllocationMethod {
  """
  The value is spread across all entitled lines.
  """
  ACROSS

  """
  The value is applied onto every entitled line.
  """
  EACH

  """
  The value is specifically applied onto a particular line.
  """
  ONE @deprecated(reason: "Use ACROSS instead.")
}

"""
An auto-generated type for paginating through multiple DiscountApplications.
"""
type DiscountApplicationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DiscountApplicationEdge!]!

  """
  A list of nodes that are contained in DiscountApplicationEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DiscountApplication!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DiscountApplication and a cursor during pagination.
"""
type DiscountApplicationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DiscountApplicationEdge.
  """
  node: DiscountApplication!
}

"""
The level at which the discount's value is applied.
"""
enum DiscountApplicationLevel {
  """
  The discount is applied at the line level.
  Line level discounts are factored into the discountedUnitPriceSet on line items.
  """
  LINE

  """
  The discount is applied at the order level.
  Order level discounts are not factored into the discountedUnitPriceSet on line items.
  """
  ORDER
}

"""
The lines on the order to which the discount is applied, of the type defined by
the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of
`LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.
"""
enum DiscountApplicationTargetSelection {
  """
  The discount is allocated onto all the lines.
  """
  ALL

  """
  The discount is allocated onto only the lines that it's entitled for.
  """
  ENTITLED

  """
  The discount is allocated onto explicitly chosen lines.
  """
  EXPLICIT
}

"""
The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.
"""
enum DiscountApplicationTargetType {
  """
  The discount applies onto line items.
  """
  LINE_ITEM

  """
  The discount applies onto shipping lines.
  """
  SHIPPING_LINE
}

"""
The type of discount associated to the automatic discount. For example, the
automatic discount might offer a basic discount using a fixed percentage, or a
fixed amount, on specific products from the order. The automatic discount may
also be a BXGY discount, which offers customer discounts on select products if
they add a specific product to their order.
"""
union DiscountAutomatic = DiscountAutomaticApp | DiscountAutomaticBasic | DiscountAutomaticBxgy | DiscountAutomaticFreeShipping

"""
The `DiscountAutomaticApp` object stores information about automatic discounts
that are managed by an app using
[Shopify Functions](https://shopify.dev/docs/apps/build/functions).
Use `DiscountAutomaticApp`when you need advanced, custom, or
dynamic discount capabilities that aren't supported by
[Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).

Learn more about creating
[custom discount functionality](https://shopify.dev/docs/apps/build/discounts/build-discount-function).

> Note:
> The [`DiscountCodeApp`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeApp)
object has similar functionality to the `DiscountAutomaticApp` object, with the exception that `DiscountCodeApp`
stores information about discount codes that are managed by an app using Shopify Functions.
"""
type DiscountAutomaticApp {
  """
  The details about the app extension that's providing the
  [discount type](https://help.shopify.com/manual/discounts/discount-types).
  This information includes the app extension's name and
  [client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets),
  [App Bridge configuration](https://shopify.dev/docs/api/app-bridge),
  [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations),
  [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries),
  and other metadata about the discount type, including the discount type's name and description.
  """
  appDiscountType: AppDiscountType!

  """
  Whether the discount applies on one-time purchases.
  """
  appliesOnOneTimePurchase: Boolean!

  """
  Whether the discount applies on subscription items.
  [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
  enable customers to purchase products
  on a recurring basis.
  """
  appliesOnSubscription: Boolean!

  """
  The number of times that the discount has been used.
  For example, if a "Buy 3, Get 1 Free" t-shirt discount
  is automatically applied in 200 transactions, then the
  discount has been used 200 times.
  This value is updated asynchronously. As a result,
  it might be lower than the actual usage count until the
  asynchronous process is completed.
  """
  asyncUsageCount: Int!

  """
  The
  [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that you can use in combination with
  [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
  """
  combinesWith: DiscountCombinesWith!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The
  [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that's used to control how discounts can be combined.
  """
  discountClass: DiscountClass!

  """
  The [globally-unique ID](https://shopify.dev/docs/api/usage/gids)
  for the discount.
  """
  discountId: ID!

  """
  The date and time when the discount expires and is no longer available to customers.
  For discounts without a fixed expiration date, specify `null`.
  """
  endsAt: DateTime

  """
  The [error history](https://shopify.dev/docs/apps/build/functions/monitoring-and-errors)
  for the latest version of the discount type that the app provides.
  """
  errorHistory: FunctionsErrorHistory

  """
  The number of billing cycles for which the discount can be applied,
  which is useful for subscription-based discounts. For example, if you set this field
  to `3`, then the discount only applies to the first three billing cycles of a
  subscription. If you specify `0`, then the discount applies indefinitely.
  """
  recurringCycleLimit: Int!

  """
  The date and time when the discount becomes active and is available to customers.
  """
  startsAt: DateTime!

  """
  The status of the discount that describes its availability,
  expiration, or pending activation.
  """
  status: DiscountStatus!

  """
  The discount's name that displays to merchants in the Shopify admin and to customers.
  """
  title: String!

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!
}

"""
The `DiscountAutomaticBasic` object lets you manage
[amount off discounts](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
that are automatically applied on a cart and at checkout. Amount off discounts give customers a
fixed value or a percentage off the products in an order, but don't apply to shipping costs.

The `DiscountAutomaticBasic` object stores information about automatic amount off discounts that apply to
specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
[collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).

Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
including limitations and considerations.

> Note:
> The [`DiscountCodeBasic`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeBasic)
object has similar functionality to the `DiscountAutomaticBasic` object, but customers need to enter a code to
receive a discount.
"""
type DiscountAutomaticBasic {
  """
  The number of times that the discount has been used.
  For example, if a "Buy 3, Get 1 Free" t-shirt discount
  is automatically applied in 200 transactions, then the
  discount has been used 200 times.
  This value is updated asynchronously. As a result,
  it might be lower than the actual usage count until the
  asynchronous process is completed.
  """
  asyncUsageCount: Int!

  """
  The
  [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that you can use in combination with
  [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
  """
  combinesWith: DiscountCombinesWith!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The items in the order that qualify for the discount, their quantities, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """
  The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that's used to control how discounts can be combined.
  """
  discountClass: MerchandiseDiscountClass!

  """
  The date and time when the discount expires and is no longer available to customers.
  For discounts without a fixed expiration date, specify `null`.
  """
  endsAt: DateTime

  """
  The minimum subtotal or quantity of items that are required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirement

  """
  The number of billing cycles for which the discount can be applied,
  which is useful for subscription-based discounts. For example, if you set this field
  to `3`, then the discount only applies to the first three billing cycles of a
  subscription. If you specify `0`, then the discount applies indefinitely.
  """
  recurringCycleLimit: Int!

  """
  An abbreviated version of the discount
  [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticBasic#field-summary)
  field.
  """
  shortSummary: String!

  """
  The date and time when the discount becomes active and is available to customers.
  """
  startsAt: DateTime!

  """
  The status of the discount that describes its availability,
  expiration, or pending activation.
  """
  status: DiscountStatus!

  """
  A detailed explanation of what the discount is,
  who can use it, when and where it applies, and any associated
  rules or limitations.
  """
  summary: String!

  """
  The discount's name that displays to merchants in the Shopify admin and to customers.
  """
  title: String!

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The number of times that the discount has been used.
  """
  usageCount: Int! @deprecated(reason: "Use `asyncUsageCount` instead.")
}

"""
The `DiscountAutomaticBxgy` object lets you manage
[buy X get Y discounts (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
that are automatically applied on a cart and at checkout. BXGY discounts incentivize customers by offering
them additional items at a discounted price or for free when they purchase a specified quantity of items.

The `DiscountAutomaticBxgy` object stores information about automatic BXGY discounts that apply to
specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
[collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).

Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
including limitations and considerations.

> Note:
> The [`DiscountCodeBxgy`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeBxgy)
object has similar functionality to the `DiscountAutomaticBxgy` object, but customers need to enter a code to
receive a discount.
"""
type DiscountAutomaticBxgy implements HasEvents & Node {
  """
  The number of times that the discount has been used.
  For example, if a "Buy 3, Get 1 Free" t-shirt discount
  is automatically applied in 200 transactions, then the
  discount has been used 200 times.
  This value is updated asynchronously. As a result,
  it might be lower than the actual usage count until the
  asynchronous process is completed.
  """
  asyncUsageCount: Int!

  """
  The
  [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that you can use in combination with
  [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
  """
  combinesWith: DiscountCombinesWith!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The items eligible for the discount and the required quantity of each to receive the discount.
  """
  customerBuys: DiscountCustomerBuys!

  """
  The items in the order that qualify for the discount, their quantities, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """
  The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that's used to control how discounts can be combined.
  """
  discountClass: MerchandiseDiscountClass!

  """
  The date and time when the discount expires and is no longer available to customers.
  For discounts without a fixed expiration date, specify `null`.
  """
  endsAt: DateTime

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A legacy unique ID for the discount.
  """
  id: ID! @deprecated(reason: "Use DiscountAutomaticNode.id instead.")

  """
  The date and time when the discount becomes active and is available to customers.
  """
  startsAt: DateTime!

  """
  The status of the discount that describes its availability,
  expiration, or pending activation.
  """
  status: DiscountStatus!

  """
  A detailed explanation of what the discount is,
  who can use it, when and where it applies, and any associated
  rules or limitations.
  """
  summary: String!

  """
  The discount's name that displays to merchants in the Shopify admin and to customers.
  """
  title: String!

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The number of times that the discount has been used.
  """
  usageCount: Int! @deprecated(reason: "Use `asyncUsageCount` instead.")

  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
}

"""
An auto-generated type for paginating through multiple DiscountAutomatics.
"""
type DiscountAutomaticConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DiscountAutomaticEdge!]!

  """
  A list of nodes that are contained in DiscountAutomaticEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DiscountAutomatic!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DiscountAutomatic and a cursor during pagination.
"""
type DiscountAutomaticEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DiscountAutomaticEdge.
  """
  node: DiscountAutomatic!
}

"""
The `DiscountAutomaticFreeShipping` object lets you manage
[free shipping discounts](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
that are automatically applied on a cart and at checkout. Free shipping discounts are promotional deals that
merchants offer to customers to waive shipping costs and encourage online purchases.

The `DiscountAutomaticFreeShipping` object stores information about automatic free shipping discounts that apply to
specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
[collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).

Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
including limitations and considerations.

> Note:
> The [`DiscountCodeFreeShipping`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeFreeShipping)
object has similar functionality to the `DiscountAutomaticFreeShipping` object, but customers need to enter a code to
receive a discount.
"""
type DiscountAutomaticFreeShipping {
  """
  Whether the discount applies on one-time purchases.
  A one-time purchase is a transaction where you pay a
  single time for a product, without any ongoing
  commitments or recurring charges.
  """
  appliesOnOneTimePurchase: Boolean!

  """
  Whether the discount applies on subscription items.
  [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
  enable customers to purchase products
  on a recurring basis.
  """
  appliesOnSubscription: Boolean!

  """
  The number of times that the discount has been used.
  For example, if a "Buy 3, Get 1 Free" t-shirt discount
  is automatically applied in 200 transactions, then the
  discount has been used 200 times.
  This value is updated asynchronously. As a result,
  it might be lower than the actual usage count until the
  asynchronous process is completed.
  """
  asyncUsageCount: Int!

  """
  The
  [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that you can use in combination with
  [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
  """
  combinesWith: DiscountCombinesWith!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The countries that qualify for the discount.
  You can define
  [a list of countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountries)
  or specify [all countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountryAll)
  to be eligible for the discount.
  """
  destinationSelection: DiscountShippingDestinationSelection!

  """
  The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that's used to control how discounts can be combined.
  """
  discountClass: ShippingDiscountClass!

  """
  The date and time when the discount expires and is no longer available to customers.
  For discounts without a fixed expiration date, specify `null`.
  """
  endsAt: DateTime

  """
  Whether there are
  [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
  associated with the discount.
  """
  hasTimelineComment: Boolean!

  """
  The maximum shipping price amount accepted to qualify for the discount.
  """
  maximumShippingPrice: MoneyV2

  """
  The minimum subtotal or quantity of items that are required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirement

  """
  The number of billing cycles for which the discount can be applied,
  which is useful for subscription-based discounts. For example, if you set this field
  to `3`, then the discount only applies to the first three billing cycles of a
  subscription. If you specify `0`, then the discount applies indefinitely.
  """
  recurringCycleLimit: Int!

  """
  An abbreviated version of the discount
  [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticFreeShipping#field-summary)
  field.
  """
  shortSummary: String!

  """
  The date and time when the discount becomes active and is available to customers.
  """
  startsAt: DateTime!

  """
  The status of the discount that describes its availability,
  expiration, or pending activation.
  """
  status: DiscountStatus!

  """
  A detailed explanation of what the discount is,
  who can use it, when and where it applies, and any associated
  rules or limitations.
  """
  summary: String!

  """
  The discount's name that displays to merchants in the Shopify admin and to customers.
  """
  title: String!

  """
  The total sales from orders where the discount was used.
  """
  totalSales: MoneyV2

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!
}

"""
The `DiscountAutomaticNode` object enables you to manage [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts)
that are applied when an order meets specific criteria. You can create amount
off, free shipping, or buy X get Y automatic discounts. For example, you can
offer customers a free shipping discount that applies when conditions are met.
Or you can offer customers a buy X get Y discount that's automatically applied
when customers spend a specified amount of money, or a specified quantity of products.

Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
including related queries, mutations, limitations, and considerations.
"""
type DiscountAutomaticNode implements HasEvents & HasMetafieldDefinitions & HasMetafields & Node {
  """
  A discount that's applied automatically when an order meets specific criteria.
  Learn more about [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts).
  """
  automaticDiscount: DiscountAutomatic!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!
}

"""
An auto-generated type for paginating through multiple DiscountAutomaticNodes.
"""
type DiscountAutomaticNodeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DiscountAutomaticNodeEdge!]!

  """
  A list of nodes that are contained in DiscountAutomaticNodeEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DiscountAutomaticNode!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination.
"""
type DiscountAutomaticNodeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DiscountAutomaticNodeEdge.
  """
  node: DiscountAutomaticNode!
}

"""
The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
that's used to control how discounts can be combined.
"""
enum DiscountClass {
  """
  The discount is combined with an
  [order discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  class.
  """
  ORDER

  """
  The discount is combined with a
  [product discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  class.
  """
  PRODUCT

  """
  The discount is combined with a
  [shipping discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  class.
  """
  SHIPPING
}

"""
The type of discount associated with the discount code. For example, the
discount code might offer a basic discount of a fixed percentage, or a fixed
amount, on specific products or the order. Alternatively, the discount might
offer the customer free shipping on their order. A third option is a Buy X, Get
Y (BXGY) discount, which offers a customer discounts on select products if they
add a specific product to their order.
"""
union DiscountCode = DiscountCodeApp | DiscountCodeBasic | DiscountCodeBxgy | DiscountCodeFreeShipping

"""
The `DiscountCodeApp` object stores information about code discounts
that are managed by an app using
[Shopify Functions](https://shopify.dev/docs/apps/build/functions).
Use `DiscountCodeApp` when you need advanced, custom, or
dynamic discount capabilities that aren't supported by
[Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).

Learn more about creating
[custom discount functionality](https://shopify.dev/docs/apps/build/discounts/build-discount-function).

> Note:
> The [`DiscountAutomaticApp`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticApp)
object has similar functionality to the `DiscountCodeApp` object, with the exception that `DiscountAutomaticApp`
stores information about automatic discounts that are managed by an app using Shopify Functions.
"""
type DiscountCodeApp {
  """
  The details about the app extension that's providing the
  [discount type](https://help.shopify.com/manual/discounts/discount-types).
  This information includes the app extension's name and
  [client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets),
  [App Bridge configuration](https://shopify.dev/docs/api/app-bridge),
  [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations),
  [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries),
  and other metadata about the discount type, including the discount type's name and description.
  """
  appDiscountType: AppDiscountType!

  """
  Whether the discount applies on regular one-time-purchase items.
  """
  appliesOnOneTimePurchase: Boolean!

  """
  Whether the discount applies to subscriptions items.
  """
  appliesOnSubscription: Boolean!

  """
  Whether a customer can only use the discount once.
  """
  appliesOncePerCustomer: Boolean!

  """
  The number of times that the discount has been used.
  For example, if a "Buy 3, Get 1 Free" t-shirt discount
  is automatically applied in 200 transactions, then the
  discount has been used 200 times.
  This value is updated asynchronously. As a result,
  it might be lower than the actual usage count until the
  asynchronous process is completed.
  """
  asyncUsageCount: Int!

  """
  A list codes that customers can use to redeem the discount.
  """
  codes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | times_used | integer |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DiscountCodeSortKeys = ID
  ): DiscountRedeemCodeConnection!

  """
  The number of codes that a customer can use to redeem the discount.
  """
  codesCount: Count

  """
  The
  [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that you can use in combination with
  [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
  """
  combinesWith: DiscountCombinesWith!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The customers that can use the discount.
  """
  customerSelection: DiscountCustomerSelection!

  """
  The
  [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that's used to control how discounts can be combined.
  """
  discountClass: DiscountClass!

  """
  The [globally-unique ID](https://shopify.dev/docs/api/usage/gids)
  for the discount.
  """
  discountId: ID!

  """
  The date and time when the discount expires and is no longer available to customers.
  For discounts without a fixed expiration date, specify `null`.
  """
  endsAt: DateTime

  """
  The [error history](https://shopify.dev/docs/apps/build/functions/monitoring-and-errors)
  for the latest version of the discount type that the app provides.
  """
  errorHistory: FunctionsErrorHistory

  """
  Whether there are
  [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
  associated with the discount.
  """
  hasTimelineComment: Boolean!

  """
  The number of billing cycles for which the discount can be applied,
  which is useful for subscription-based discounts. For example, if you set this field
  to `3`, then the discount only applies to the first three billing cycles of a
  subscription. If you specify `0`, then the discount applies indefinitely.
  """
  recurringCycleLimit: Int

  """
  A list of URLs that the app can use to share the discount.
  """
  shareableUrls: [DiscountShareableUrl!]!

  """
  The date and time when the discount becomes active and is available to customers.
  """
  startsAt: DateTime!

  """
  The status of the discount that describes its availability,
  expiration, or pending activation.
  """
  status: DiscountStatus!

  """
  The discount's name that displays to merchants in the Shopify admin and to customers.
  """
  title: String!

  """
  The total sales from orders where the discount was used.
  """
  totalSales: MoneyV2

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The maximum number of times that a customer can use the discount.
  For discounts with unlimited usage, specify `null`.
  """
  usageLimit: Int
}

"""
Discount code applications capture the intentions of a discount code at
the time that it is applied onto an order.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type DiscountCodeApplication implements DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
The `DiscountCodeBasic` object lets you manage
[amount off discounts](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
that are applied on a cart and at checkout when a customer enters a code. Amount off discounts give customers a
fixed value or a percentage off the products in an order, but don't apply to shipping costs.

The `DiscountCodeBasic` object stores information about amount off code discounts that apply to
specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
[collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).

Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
including limitations and considerations.

> Note:
> The [`DiscountAutomaticBasic`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticBasic)
object has similar functionality to the `DiscountCodeBasic` object, but discounts are automatically applied,
without the need for customers to enter a code.
"""
type DiscountCodeBasic {
  """
  Whether a customer can only use the discount once.
  """
  appliesOncePerCustomer: Boolean!

  """
  The number of times that the discount has been used.
  For example, if a "Buy 3, Get 1 Free" t-shirt discount
  is automatically applied in 200 transactions, then the
  discount has been used 200 times.
  This value is updated asynchronously. As a result,
  it might be lower than the actual usage count until the
  asynchronous process is completed.
  """
  asyncUsageCount: Int!

  """
  A list codes that customers can use to redeem the discount.
  """
  codes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | times_used | integer |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DiscountCodeSortKeys = ID
  ): DiscountRedeemCodeConnection!

  """
  The number of codes that a customer can use to redeem the discount.
  """
  codesCount: Count

  """
  The
  [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that you can use in combination with
  [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
  """
  combinesWith: DiscountCombinesWith!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The items in the order that qualify for the discount, their quantities, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """
  The customers that can use the discount.
  """
  customerSelection: DiscountCustomerSelection!

  """
  The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that's used to control how discounts can be combined.
  """
  discountClass: MerchandiseDiscountClass!

  """
  The date and time when the discount expires and is no longer available to customers.
  For discounts without a fixed expiration date, specify `null`.
  """
  endsAt: DateTime

  """
  Whether there are
  [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
  associated with the discount.
  """
  hasTimelineComment: Boolean!

  """
  The minimum subtotal or quantity of items that are required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirement

  """
  The number of billing cycles for which the discount can be applied,
  which is useful for subscription-based discounts. For example, if you set this field
  to `3`, then the discount only applies to the first three billing cycles of a
  subscription. If you specify `0`, then the discount applies indefinitely.
  """
  recurringCycleLimit: Int

  """
  A list of URLs that the app can use to share the discount.
  """
  shareableUrls: [DiscountShareableUrl!]!

  """
  An abbreviated version of the discount
  [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeBasic#field-summary)
  field.
  """
  shortSummary: String!

  """
  The date and time when the discount becomes active and is available to customers.
  """
  startsAt: DateTime!

  """
  The status of the discount that describes its availability,
  expiration, or pending activation.
  """
  status: DiscountStatus!

  """
  A detailed explanation of what the discount is,
  who can use it, when and where it applies, and any associated
  rules or limitations.
  """
  summary: String!

  """
  The discount's name that displays to merchants in the Shopify admin and to customers.
  """
  title: String!

  """
  The total sales from orders where the discount was used.
  """
  totalSales: MoneyV2

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The maximum number of times that a customer can use the discount.
  For discounts with unlimited usage, specify `null`.
  """
  usageLimit: Int
}

"""
The `DiscountCodeBxgy` object lets you manage
[buy X get Y discounts (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
that are applied on a cart and at checkout when a customer enters a code. BXGY discounts incentivize customers
by offering them additional items at a discounted price or for free when they purchase a specified quantity
of items.

The `DiscountCodeBxgy` object stores information about BXGY code discounts that apply to
specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
[collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).

Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
including limitations and considerations.

> Note:
> The [`DiscountAutomaticBxgy`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticBxgy)
object has similar functionality to the `DiscountCodeBxgy` object, but discounts are automatically applied,
without the need for customers to enter a code.
"""
type DiscountCodeBxgy {
  """
  Whether a customer can only use the discount once.
  """
  appliesOncePerCustomer: Boolean!

  """
  The number of times that the discount has been used.
  For example, if a "Buy 3, Get 1 Free" t-shirt discount
  is automatically applied in 200 transactions, then the
  discount has been used 200 times.
  This value is updated asynchronously. As a result,
  it might be lower than the actual usage count until the
  asynchronous process is completed.
  """
  asyncUsageCount: Int!

  """
  A list codes that customers can use to redeem the discount.
  """
  codes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | times_used | integer |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DiscountCodeSortKeys = ID
  ): DiscountRedeemCodeConnection!

  """
  The number of codes that a customer can use to redeem the discount.
  """
  codesCount: Count

  """
  The
  [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that you can use in combination with
  [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
  """
  combinesWith: DiscountCombinesWith!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The items eligible for the discount and the required quantity of each to receive the discount.
  """
  customerBuys: DiscountCustomerBuys!

  """
  The items in the order that qualify for the discount, their quantities, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """
  The customers that can use the discount.
  """
  customerSelection: DiscountCustomerSelection!

  """
  The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that's used to control how discounts can be combined.
  """
  discountClass: MerchandiseDiscountClass!

  """
  The date and time when the discount expires and is no longer available to customers.
  For discounts without a fixed expiration date, specify `null`.
  """
  endsAt: DateTime

  """
  Whether there are
  [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
  associated with the discount.
  """
  hasTimelineComment: Boolean!

  """
  A list of URLs that the app can use to share the discount.
  """
  shareableUrls: [DiscountShareableUrl!]!

  """
  The date and time when the discount becomes active and is available to customers.
  """
  startsAt: DateTime!

  """
  The status of the discount that describes its availability,
  expiration, or pending activation.
  """
  status: DiscountStatus!

  """
  A detailed explanation of what the discount is,
  who can use it, when and where it applies, and any associated
  rules or limitations.
  """
  summary: String!

  """
  The discount's name that displays to merchants in the Shopify admin and to customers.
  """
  title: String!

  """
  The total sales from orders where the discount was used.
  """
  totalSales: MoneyV2

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The maximum number of times that a customer can use the discount.
  For discounts with unlimited usage, specify `null`.
  """
  usageLimit: Int

  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
}

"""
The `DiscountCodeFreeShipping` object lets you manage
[free shipping discounts](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
that are applied on a cart and at checkout when a customer enters a code. Free shipping discounts are
promotional deals that merchants offer to customers to waive shipping costs and encourage online purchases.

The `DiscountCodeFreeShipping` object stores information about free shipping code discounts that apply to
specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
[collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).

Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
including limitations and considerations.

> Note:
> The
[`DiscountAutomaticFreeShipping`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticFreeShipping)
object has similar functionality to the `DiscountCodeFreeShipping` object, but discounts are automatically applied,
without the need for customers to enter a code.
"""
type DiscountCodeFreeShipping {
  """
  Whether the discount applies on one-time purchases.
  A one-time purchase is a transaction where you pay a
  single time for a product, without any ongoing
  commitments or recurring charges.
  """
  appliesOnOneTimePurchase: Boolean!

  """
  Whether the discount applies on subscription items.
  [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
  enable customers to purchase products
  on a recurring basis.
  """
  appliesOnSubscription: Boolean!

  """
  Whether a customer can only use the discount once.
  """
  appliesOncePerCustomer: Boolean!

  """
  The number of times that the discount has been used.
  For example, if a "Buy 3, Get 1 Free" t-shirt discount
  is automatically applied in 200 transactions, then the
  discount has been used 200 times.
  This value is updated asynchronously. As a result,
  it might be lower than the actual usage count until the
  asynchronous process is completed.
  """
  asyncUsageCount: Int!

  """
  A list codes that customers can use to redeem the discount.
  """
  codes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | times_used | integer |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DiscountCodeSortKeys = ID
  ): DiscountRedeemCodeConnection!

  """
  The number of codes that a customer can use to redeem the discount.
  """
  codesCount: Count

  """
  The
  [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that you can use in combination with
  [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
  """
  combinesWith: DiscountCombinesWith!

  """
  The date and time when the discount was created.
  """
  createdAt: DateTime!

  """
  The customers that can use the discount.
  """
  customerSelection: DiscountCustomerSelection!

  """
  The countries that qualify for the discount.
  You can define
  [a list of countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountries)
  or specify [all countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountryAll)
  to be eligible for the discount.
  """
  destinationSelection: DiscountShippingDestinationSelection!

  """
  The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that's used to control how discounts can be combined.
  """
  discountClass: ShippingDiscountClass!

  """
  The date and time when the discount expires and is no longer available to customers.
  For discounts without a fixed expiration date, specify `null`.
  """
  endsAt: DateTime

  """
  Whether there are
  [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
  associated with the discount.
  """
  hasTimelineComment: Boolean!

  """
  The maximum shipping price amount accepted to qualify for the discount.
  """
  maximumShippingPrice: MoneyV2

  """
  The minimum subtotal or quantity of items that are required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirement

  """
  The number of billing cycles for which the discount can be applied,
  which is useful for subscription-based discounts. For example, if you set this field
  to `3`, then the discount only applies to the first three billing cycles of a
  subscription. If you specify `0`, then the discount applies indefinitely.
  """
  recurringCycleLimit: Int

  """
  A list of URLs that the app can use to share the discount.
  """
  shareableUrls: [DiscountShareableUrl!]!

  """
  An abbreviated version of the discount
  [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeFreeShipping#field-summary)
  field.
  """
  shortSummary: String!

  """
  The date and time when the discount becomes active and is available to customers.
  """
  startsAt: DateTime!

  """
  The status of the discount that describes its availability,
  expiration, or pending activation.
  """
  status: DiscountStatus!

  """
  A detailed explanation of what the discount is,
  who can use it, when and where it applies, and any associated
  rules or limitations.
  """
  summary: String!

  """
  The discount's name that displays to merchants in the Shopify admin and to customers.
  """
  title: String!

  """
  The total sales from orders where the discount was used.
  """
  totalSales: MoneyV2

  """
  The date and time when the discount was updated.
  """
  updatedAt: DateTime!

  """
  The maximum number of times that a customer can use the discount.
  For discounts with unlimited usage, specify `null`.
  """
  usageLimit: Int
}

"""
The `DiscountCodeNode` object enables you to manage [code discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes)
that are applied when customers enter a code at checkout. For example, you can
offer discounts where customers have to enter a code to redeem an amount off
discount on products, variants, or collections in a store. Or, you can offer
discounts where customers have to enter a code to get free shipping. Merchants
can create and share discount codes individually with customers.

Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
including related queries, mutations, limitations, and considerations.
"""
type DiscountCodeNode implements HasEvents & HasMetafieldDefinitions & HasMetafields & Node {
  """
  The underlying code discount object.
  """
  codeDiscount: DiscountCode!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!
}

"""
An auto-generated type for paginating through multiple DiscountCodeNodes.
"""
type DiscountCodeNodeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DiscountCodeNodeEdge!]!

  """
  A list of nodes that are contained in DiscountCodeNodeEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DiscountCodeNode!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DiscountCodeNode and a cursor during pagination.
"""
type DiscountCodeNodeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DiscountCodeNodeEdge.
  """
  node: DiscountCodeNode!
}

"""
The set of valid sort keys for the DiscountCode query.
"""
enum DiscountCodeSortKeys {
  """
  Sort by the `code` value.
  """
  CODE

  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
A list of collections that the discount can have as a prerequisite or a list of
collections to which the discount can be applied.
"""
type DiscountCollections {
  """
  The list of collections that the discount can have as a prerequisite or the
  list of collections to which the discount can be applied.
  """
  collections(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CollectionConnection!
}

"""
The [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
that you can use in combination with
[Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
"""
type DiscountCombinesWith {
  """
  Whether the discount combines with the
  [order discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  class.
  """
  orderDiscounts: Boolean!

  """
  Whether the discount combines with the
  [product discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  class.
  """
  productDiscounts: Boolean!

  """
  Whether the discount combines with the
  [shipping discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  class.
  """
  shippingDiscounts: Boolean!
}

"""
The shipping destinations where the discount can be applied.
"""
type DiscountCountries {
  """
  The codes for the countries where the discount can be applied.
  """
  countries: [CountryCode!]!

  """
  Whether the discount is applicable to countries that haven't been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean!
}

"""
The `DiscountCountryAll` object lets you target all countries as shipping destination for discount eligibility.
"""
type DiscountCountryAll {
  """
  Whether the discount can be applied to all countries as shipping destination. This value is always `true`.
  """
  allCountries: Boolean!
}

"""
The `DiscountCustomerAll` object lets you target all customers for discount eligibility.
"""
type DiscountCustomerAll {
  """
  Whether the discount can be applied by all customers. This value is always `true`.
  """
  allCustomers: Boolean!
}

"""
The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable.
"""
type DiscountCustomerBuys {
  """
  If the discount is applicable when a customer buys a one-time purchase.
  """
  isOneTimePurchase: Boolean!

  """
  If the discount is applicable when a customer buys a subscription purchase.
  """
  isSubscription: Boolean!

  """
  The items required for the discount to be applicable.
  """
  items: DiscountItems!

  """
  The prerequisite value.
  """
  value: DiscountCustomerBuysValue!
}

"""
The prerequisite for the discount to be applicable. For example, the discount
might require a customer to buy a minimum quantity of select items.
Alternatively, the discount might require a customer to spend a minimum amount
on select items.
"""
union DiscountCustomerBuysValue = DiscountPurchaseAmount | DiscountQuantity

"""
The items in the order that qualify for the discount, their quantities, and the total value of the discount.
"""
type DiscountCustomerGets {
  """
  Whether the discount applies on regular one-time-purchase items.
  """
  appliesOnOneTimePurchase: Boolean!

  """
  Whether the discount applies on subscription items.
  [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
  enable customers to purchase products
  on a recurring basis.
  """
  appliesOnSubscription: Boolean!

  """
  The items to which the discount applies.
  """
  items: DiscountItems!

  """
  Entitled quantity and the discount value.
  """
  value: DiscountCustomerGetsValue!
}

"""
The type of the discount value and how it will be applied. For example, it might
be a percentage discount on a fixed number of items. Alternatively, it might be
a fixed amount evenly distributed across all items or on each individual item. A
third example is a percentage discount on all items.
"""
union DiscountCustomerGetsValue = DiscountAmount | DiscountOnQuantity | DiscountPercentage

"""
A list of customer segments that contain the customers that the discount applies to.
"""
type DiscountCustomerSegments {
  """
  A list of customer segments that contain the customers who can use the discount.
  """
  segments: [Segment!]!
}

"""
The type used for targeting a set of customers who are eligible for the
discount. For example, the discount might be available to all customers or it
might only be available to a specific set of customers. You can define the set
of customers by targeting a list of customer segments, or by targeting a list of
specific customers.
"""
union DiscountCustomerSelection = DiscountCustomerAll | DiscountCustomerSegments | DiscountCustomers

"""
A list of customers eligible for the discount.
"""
type DiscountCustomers {
  """
  The list of customers eligible for the discount.
  """
  customers: [Customer!]!
}

"""
The type of discount that will be applied. Currently, only a percentage discount is supported.
"""
union DiscountEffect = DiscountAmount | DiscountPercentage

"""
Possible error codes that can be returned by `DiscountUserError`.
"""
enum DiscountErrorCode {
  """
  The active period overlaps with other automatic discounts. At any given time, only one automatic discount can be active.
  """
  ACTIVE_PERIOD_OVERLAP

  """
  A discount cannot have both appliesOnOneTimePurchase and appliesOnSubscription set to false.
  """
  APPLIES_ON_NOTHING

  """
  The input value is blank.
  """
  BLANK

  """
  The attribute selection contains conflicting settings.
  """
  CONFLICT

  """
  The input value is already present.
  """
  DUPLICATE

  """
  The input value should be equal to the value allowed.
  """
  EQUAL_TO

  """
  The value exceeded the maximum allowed value.
  """
  EXCEEDED_MAX

  """
  The input value should be greater than the minimum allowed value.
  """
  GREATER_THAN

  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO

  """
  The value is already present through another selection.
  """
  IMPLICIT_DUPLICATE

  """
  The input value isn't included in the list.
  """
  INCLUSION

  """
  Unexpected internal error happened.
  """
  INTERNAL_ERROR

  """
  The input value is invalid.
  """
  INVALID

  """
  The `combinesWith` settings are invalid for the discount class.
  """
  INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS

  """
  The discountClass is invalid for the price rule.
  """
  INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE

  """
  The input value should be less than the maximum value allowed.
  """
  LESS_THAN

  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO

  """
  The active period overlaps with too many other app-provided discounts. There's
  a limit on the number of app discounts that can be active at any given time.
  """
  MAX_APP_DISCOUNTS

  """
  Specify a minimum subtotal or a quantity, but not both.
  """
  MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT

  """
  Missing a required argument.
  """
  MISSING_ARGUMENT

  """
  Recurring cycle limit must be 1 when discount does not apply to subscription items.
  """
  MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS

  """
  The input value needs to be blank.
  """
  PRESENT

  """
  Recurring cycle limit must be a valid integer greater than or equal to 0.
  """
  RECURRING_CYCLE_LIMIT_NOT_A_VALID_INTEGER

  """
  The input value is already taken.
  """
  TAKEN

  """
  The input value is too long.
  """
  TOO_LONG

  """
  Too many arguments provided.
  """
  TOO_MANY_ARGUMENTS

  """
  The input value is too short.
  """
  TOO_SHORT

  """
  The value is outside of the allowed range.
  """
  VALUE_OUTSIDE_RANGE
}

"""
The type used to target the items required for discount eligibility, or the
items to which the application of a discount might apply. For example, for a
customer to be eligible for a discount, they're required to add an item from a
specified collection to their order. Alternatively, a customer might be required
to add a specific product or product variant. When using this type to target
which items the discount will apply to, the discount might apply to all items on
the order, or to specific products and product variants, or items in a given collection.
"""
union DiscountItems = AllDiscountItems | DiscountCollections | DiscountProducts

"""
The minimum quantity of items required for the discount to apply.
"""
type DiscountMinimumQuantity {
  """
  The minimum quantity of items that's required for the discount to be applied.
  """
  greaterThanOrEqualToQuantity: UnsignedInt64!
}

"""
The type of minimum requirement that must be met for the discount to be applied.
For example, a customer must spend a minimum subtotal to be eligible for the
discount. Alternatively, a customer must purchase a minimum quantity of items to
be eligible for the discount.
"""
union DiscountMinimumRequirement = DiscountMinimumQuantity | DiscountMinimumSubtotal

"""
The minimum subtotal required for the discount to apply.
"""
type DiscountMinimumSubtotal {
  """
  The minimum subtotal that's required for the discount to be applied.
  """
  greaterThanOrEqualToSubtotal: MoneyV2!
}

"""
The `DiscountNode` object enables you to manage
[discounts](https://help.shopify.com/manual/discounts), which are applied at
checkout or on a cart.


Discounts are a way for merchants to promote sales and special offers, or as
customer loyalty rewards. Discounts can apply to [orders, products, or
shipping](https://shopify.dev/docs/apps/build/discounts#discount-classes), and
can be either automatic or code-based. For example, you can offer customers a
buy X get Y discount that's automatically applied when purchases meet specific
criteria. Or, you can offer discounts where customers have to enter a code to
redeem an amount off discount on products, variants, or collections in a store.

Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
including related mutations, limitations, and considerations.
"""
type DiscountNode implements HasEvents & HasMetafieldDefinitions & HasMetafields & Node {
  """
  A discount that's applied at checkout or on cart.


  Discounts can be [automatic or code-based](https://shopify.dev/docs/apps/build/discounts#discount-methods).
  """
  discount: Discount!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!
}

"""
An auto-generated type for paginating through multiple DiscountNodes.
"""
type DiscountNodeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DiscountNodeEdge!]!

  """
  A list of nodes that are contained in DiscountNodeEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DiscountNode!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DiscountNode and a cursor during pagination.
"""
type DiscountNodeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DiscountNodeEdge.
  """
  node: DiscountNode!
}

"""
The quantity of items discounted, the discount value, and how the discount will be applied.
"""
type DiscountOnQuantity {
  """
  The discount's effect on qualifying items.
  """
  effect: DiscountEffect!

  """
  The number of items being discounted. The customer must have at least this
  many items of specified products or product variants in their order to be
  eligible for the discount.
  """
  quantity: DiscountQuantity!
}

"""
A discount effect that gives customers a percentage off of specified items on their order.
"""
type DiscountPercentage {
  """
  The percentage value of the discount.
  """
  percentage: Float!
}

"""
A list of products and product variants that the discount can have as a
prerequisite or a list of products and product variants to which the discount
can be applied.
"""
type DiscountProducts {
  """
  The list of product variants that the discount can have as a prerequisite or
  the list of product variants to which the discount can be applied.
  """
  productVariants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductVariantConnection!

  """
  The list of products that the discount can have as a prerequisite or the list
  of products to which the discount can be applied.
  """
  products(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductConnection!
}

"""
A purchase amount in the context of a discount. This object can be used to
define the minimum purchase amount required for a discount to be applicable.
"""
type DiscountPurchaseAmount {
  """
  The purchase amount in decimal format.
  """
  amount: Decimal!
}

"""
A quantity of items in the context of a discount. This object can be used to
define the minimum quantity of items required to apply a discount.
Alternatively, it can be used to define the quantity of items that can be discounted.
"""
type DiscountQuantity {
  """
  The quantity of items.
  """
  quantity: UnsignedInt64!
}

"""
A code that a customer can use at checkout to receive a discount. For example, a
customer can use the redeem code 'SUMMER20' at checkout to receive a 20%
discount on their entire order.
"""
type DiscountRedeemCode {
  """
  The number of times that the discount redeem code has been used. This value is
  updated asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!

  """
  The code that a customer can use at checkout to receive a discount.
  """
  code: String!

  """
  The application that created the discount redeem code.
  """
  createdBy: App

  """
  A globally-unique ID of the discount redeem code.
  """
  id: ID!
}

"""
The properties and status of a bulk discount redeem code creation operation.
"""
type DiscountRedeemCodeBulkCreation implements Node {
  """
  The result of each code creation operation associated with the bulk creation
  operation including any errors that might have occurred during the operation.
  """
  codes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): DiscountRedeemCodeBulkCreationCodeConnection!

  """
  The number of codes to create.
  """
  codesCount: Int!

  """
  The date and time when the bulk creation was created.
  """
  createdAt: DateTime!

  """
  The code discount associated with the created codes.
  """
  discountCode: DiscountCodeNode

  """
  Whether the bulk creation is still queued (`false`) or has been run (`true`).
  """
  done: Boolean!

  """
  The number of codes that weren't created successfully.
  """
  failedCount: Int!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The number of codes created successfully.
  """
  importedCount: Int!
}

"""
A result of a discount redeem code creation operation created by a bulk creation.
"""
type DiscountRedeemCodeBulkCreationCode {
  """
  The code to use in the discount redeem code creation operation.
  """
  code: String!

  """
  The successfully created discount redeem code.

  If the discount redeem code couldn't be created, then this field is `null``.
  """
  discountRedeemCode: DiscountRedeemCode

  """
  A list of errors that occurred during the creation operation of the discount redeem code.
  """
  errors: [DiscountUserError!]!
}

"""
An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes.
"""
type DiscountRedeemCodeBulkCreationCodeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DiscountRedeemCodeBulkCreationCodeEdge!]!

  """
  A list of nodes that are contained in DiscountRedeemCodeBulkCreationCodeEdge.
  You can fetch data about an individual node, or you can follow the edges to
  fetch data about a collection of related nodes. At each node, you specify the
  fields that you want to retrieve.
  """
  nodes: [DiscountRedeemCodeBulkCreationCode!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.
"""
type DiscountRedeemCodeBulkCreationCodeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DiscountRedeemCodeBulkCreationCodeEdge.
  """
  node: DiscountRedeemCodeBulkCreationCode!
}

"""
An auto-generated type for paginating through multiple DiscountRedeemCodes.
"""
type DiscountRedeemCodeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DiscountRedeemCodeEdge!]!

  """
  A list of nodes that are contained in DiscountRedeemCodeEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DiscountRedeemCode!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.
"""
type DiscountRedeemCodeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DiscountRedeemCodeEdge.
  """
  node: DiscountRedeemCode!
}

"""
A shareable URL for a discount code.
"""
type DiscountShareableUrl {
  """
  The image URL of the item (product or collection) to which the discount applies.
  """
  targetItemImage: Image

  """
  The type of page that's associated with the URL.
  """
  targetType: DiscountShareableUrlTargetType!

  """
  The title of the page that's associated with the URL.
  """
  title: String!

  """
  The URL for the discount code.
  """
  url: URL!
}

"""
The type of page where a shareable discount URL lands.
"""
enum DiscountShareableUrlTargetType {
  """
  The URL lands on a collection page.
  """
  COLLECTION

  """
  The URL lands on a home page.
  """
  HOME

  """
  The URL lands on a product page.
  """
  PRODUCT
}

"""
The type used to target the eligible countries of an order's shipping
destination for which the discount applies. For example, the discount might be
applicable when shipping to all countries, or only to a set of countries.
"""
union DiscountShippingDestinationSelection = DiscountCountries | DiscountCountryAll

"""
The set of valid sort keys for the Discount query.
"""
enum DiscountSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `ends_at` value.
  """
  ENDS_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `starts_at` value.
  """
  STARTS_AT

  """
  Sort by the `title` value.
  """
  TITLE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
The status of the discount that describes its availability,
expiration, or pending activation.
"""
enum DiscountStatus {
  """
  The discount is currently available for use.
  """
  ACTIVE

  """
  The discount has reached its end date and is no longer valid.
  """
  EXPIRED

  """
  The discount is set to become active at a future date.
  """
  SCHEDULED
}

"""
The type of line (line item or shipping line) on an order that the subscription discount is applicable towards.
"""
enum DiscountTargetType {
  """
  The discount applies onto line items.
  """
  LINE_ITEM

  """
  The discount applies onto shipping lines.
  """
  SHIPPING_LINE
}

"""
The type of the subscription discount.
"""
enum DiscountType {
  """
  Automatic discount type.
  """
  AUTOMATIC_DISCOUNT

  """
  Code discount type.
  """
  CODE_DISCOUNT

  """
  Manual discount type.
  """
  MANUAL
}

"""
An error that occurs during the execution of a discount mutation.
"""
type DiscountUserError implements DisplayableError {
  """
  The error code.
  """
  code: DiscountErrorCode

  """
  Extra information about this error.
  """
  extraInfo: String

  """
  The path to the input field that caused the error.
  """
  field: [String!]

  """
  The error message.
  """
  message: String!
}

"""
Represents an error in the input of a mutation.
"""
interface DisplayableError {
  """
  The path to the input field that caused the error.
  """
  field: [String!]

  """
  The error message.
  """
  message: String!
}

"""
The possible statuses of a dispute.
"""
enum DisputeStatus {
  ACCEPTED

  """
  Status previously used by Stripe to indicate that a dispute led to a refund.
  """
  CHARGE_REFUNDED @deprecated(reason: "CHARGE_REFUNDED is no longer supported.")
  LOST
  NEEDS_RESPONSE
  UNDER_REVIEW
  WON
}

"""
The possible types for a dispute.
"""
enum DisputeType {
  """
  The dispute has turned into a chargeback.
  """
  CHARGEBACK

  """
  The dispute is in the inquiry phase.
  """
  INQUIRY
}

"""
A unique string that represents the address of a Shopify store on the Internet.
"""
type Domain implements Node {
  """
  The host name of the domain. For example, `example.com`.
  """
  host: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The localization of the domain, if the domain doesn't redirect.
  """
  localization: DomainLocalization

  """
  The web presence of the domain.
  """
  marketWebPresence: MarketWebPresence

  """
  Whether SSL is enabled.
  """
  sslEnabled: Boolean!

  """
  The URL of the domain (for example, `https://example.com`).
  """
  url: URL!
}

"""
The country and language settings assigned to a domain.
"""
type DomainLocalization {
  """
  The ISO codes for the domain’s alternate locales. For example, `["en"]`.
  """
  alternateLocales: [String!]!

  """
  The ISO code for the country assigned to the domain. For example, `"CA"` or "*" for a domain set to "Rest of world".
  """
  country: String

  """
  The ISO code for the domain’s default locale. For example, `"en"`.
  """
  defaultLocale: String!
}

"""
An order that a merchant creates on behalf of a customer. Draft orders are
useful for merchants that need to do the following tasks:

- Create new orders for sales made by phone, in person, by chat, or elsewhere.
When a merchant accepts payment for a draft order, an order is created.
- Send invoices to customers to pay with a secure checkout link.
- Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
- Re-create orders manually from active sales channels.
- Sell products at discount or wholesale rates.
- Take pre-orders.
- Save an order as a draft and resume working on it later.

For draft orders in multiple currencies `presentment_money` is the source of
truth for what a customer is going to be charged and `shop_money` is an estimate
of what the merchant might receive in their shop currency.

**Caution:** Only use this data if it's required for your app's functionality.
Shopify will restrict [access to
scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
legitimate use for the associated data.
"""
type DraftOrder implements CommentEventSubject & HasEvents & HasLocalizationExtensions & HasLocalizedFields & HasMetafields & LegacyInteroperability & Navigable & Node {
  """
  Whether or not to accept automatic discounts on the draft order during calculation.
  If false, only discount codes and custom draft order discounts (see `appliedDiscount`) will be applied.
  If true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.
  """
  acceptAutomaticDiscounts: Boolean

  """
  Whether all variant prices have been overridden.
  """
  allVariantPricesOverridden: Boolean!

  """
  Whether discount codes are allowed during checkout of this draft order.
  """
  allowDiscountCodesInCheckout: Boolean!

  """
  Whether any variant prices have been overridden.
  """
  anyVariantPricesOverridden: Boolean!

  """
  The custom order-level discount applied.
  """
  appliedDiscount: DraftOrderAppliedDiscount

  """
  The billing address of the customer.
  """
  billingAddress: MailingAddress

  """
  Whether the billing address matches the shipping address.
  """
  billingAddressMatchesShippingAddress: Boolean!

  """
  The date and time when the draft order was converted to a new order,
  and had it's status changed to **Completed**.
  """
  completedAt: DateTime

  """
  The date and time when the draft order was created in Shopify.
  """
  createdAt: DateTime!

  """
  The shop currency used for calculation.
  """
  currencyCode: CurrencyCode!

  """
  The custom information added to the draft order on behalf of the customer.
  """
  customAttributes: [Attribute!]!

  """
  The customer who will be sent an invoice.
  """
  customer: Customer

  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  All discount codes applied.
  """
  discountCodes: [String!]!

  """
  The email address of the customer, which is used to send notifications.
  """
  email: String

  """
  The list of events associated with the draft order.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  Whether the merchant has added timeline comments to the draft order.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The subject defined for the draft invoice email template.
  """
  invoiceEmailTemplateSubject: String!

  """
  The date and time when the invoice was last emailed to the customer.
  """
  invoiceSentAt: DateTime

  """
  The link to the checkout, which is sent to the customer in the invoice email.
  """
  invoiceUrl: URL

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The list of the line items in the draft order.
  """
  lineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): DraftOrderLineItemConnection!

  """
  A subtotal of the line items and corresponding discounts,
  excluding include shipping charges, shipping discounts, taxes, or order discounts.
  """
  lineItemsSubtotalPrice: MoneyBag!

  """
  List of localization extensions for the resource.
  """
  localizationExtensions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The country codes of the extensions.
    """
    countryCodes: [CountryCode!]

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The purpose of the extensions.
    """
    purposes: [LocalizationExtensionPurpose!]

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): LocalizationExtensionConnection! @deprecated(reason: "This connection will be removed in a future version. Use `localizedFields` instead.")

  """
  List of localized fields for the resource.
  """
  localizedFields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The country codes of the extensions.
    """
    countryCodes: [CountryCode!]

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The purpose of the extensions.
    """
    purposes: [LocalizedFieldPurpose!]

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): LocalizedFieldConnection!

  """
  The name of the selected market.
  """
  marketName: String! @deprecated(reason: "This field is now incompatible with Markets.")

  """
  The selected country code that determines the pricing.
  """
  marketRegionCountryCode: CountryCode! @deprecated(reason: "This field is now incompatible with Markets.")

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The identifier for the draft order, which is unique within the store. For example, _#D1223_.
  """
  name: String!

  """
  The text from an optional note attached to the draft order.
  """
  note2: String

  """
  The order that was created from the draft order.
  """
  order: Order

  """
  The associated payment terms for this draft order.
  """
  paymentTerms: PaymentTerms

  """
  The assigned phone number.
  """
  phone: String

  """
  The list of platform discounts applied.
  """
  platformDiscounts: [DraftOrderPlatformDiscount!]!

  """
  The purchase order number.
  """
  poNumber: String

  """
  The payment currency used for calculation.
  """
  presentmentCurrencyCode: CurrencyCode!

  """
  The purchasing entity.
  """
  purchasingEntity: PurchasingEntity

  """
  Whether the draft order is ready and can be completed.
  Draft orders might have asynchronous operations that can take time to finish.
  """
  ready: Boolean!

  """
  The time after which inventory will automatically be restocked.
  """
  reserveInventoryUntil: DateTime

  """
  The shipping address of the customer.
  """
  shippingAddress: MailingAddress

  """
  The line item containing the shipping information and costs.
  """
  shippingLine: ShippingLine

  """
  The status of the draft order.
  """
  status: DraftOrderStatus!

  """
  The subtotal, in shop currency, of the line items and their discounts,
  excluding shipping charges, shipping discounts, and taxes.
  """
  subtotalPrice: Money! @deprecated(reason: "Use `subtotalPriceSet` instead.")

  """
  The subtotal, of the line items and their discounts, excluding shipping charges, shipping discounts, and taxes.
  """
  subtotalPriceSet: MoneyBag!

  """
  The comma separated list of tags associated with the draft order.
  Updating `tags` overwrites any existing tags that were previously added to the draft order.
  To add new tags without overwriting existing tags, use the
  [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
  """
  tags: [String!]!

  """
  Whether the draft order is tax exempt.
  """
  taxExempt: Boolean!

  """
  The list of of taxes lines charged for each line item and shipping line.
  """
  taxLines: [TaxLine!]!

  """
  Whether the line item prices include taxes.
  """
  taxesIncluded: Boolean!

  """
  Total discounts.
  """
  totalDiscountsSet: MoneyBag!

  """
  Total price of line items.
  """
  totalLineItemsPriceSet: MoneyBag!

  """
  The total price, in shop currency, includes taxes, shipping charges, and discounts.
  """
  totalPrice: Money! @deprecated(reason: "Use `totalPriceSet` instead.")

  """
  The total price, includes taxes, shipping charges, and discounts.
  """
  totalPriceSet: MoneyBag!

  """
  The sum of individual line item quantities.
  If the draft order has bundle items, this is the sum containing the quantities of individual items in the bundle.
  """
  totalQuantityOfLineItems: Int!

  """
  The total shipping price in shop currency.
  """
  totalShippingPrice: Money! @deprecated(reason: "Use `totalShippingPriceSet` instead.")

  """
  The total shipping price.
  """
  totalShippingPriceSet: MoneyBag!

  """
  The total tax in shop currency.
  """
  totalTax: Money! @deprecated(reason: "Use `totalTaxSet` instead.")

  """
  The total tax.
  """
  totalTaxSet: MoneyBag!

  """
  The total weight in grams of the draft order.
  """
  totalWeight: UnsignedInt64!

  """
  Fingerprint of the current cart.
  In order to have bundles work, the fingerprint must be passed to
  each request as it was previously returned, unmodified.
  """
  transformerFingerprint: String

  """
  The date and time when the draft order was last changed.
  The format is YYYY-MM-DD HH:mm:ss. For example, 2016-02-05 17:04:01.
  """
  updatedAt: DateTime!

  """
  Whether the draft order will be visible to the customer on the self-serve portal.
  """
  visibleToCustomer: Boolean!

  """
  The list of warnings raised while calculating.
  """
  warnings: [DraftOrderWarning!]!
}

"""
The order-level discount applied to a draft order.
"""
type DraftOrderAppliedDiscount {
  """
  Amount of the order-level discount that's applied to the draft order in shop currency.
  """
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The amount of money discounted, with values shown in both shop currency and presentment currency.
  """
  amountSet: MoneyBag!

  """
  Amount of money discounted.
  """
  amountV2: MoneyV2! @deprecated(reason: "Use `amountSet` instead.")

  """
  Description of the order-level discount.
  """
  description: String!

  """
  Name of the order-level discount.
  """
  title: String

  """
  The order level discount amount. If `valueType` is `"percentage"`,
  then `value` is the percentage discount.
  """
  value: Float!

  """
  Type of the order-level discount.
  """
  valueType: DraftOrderAppliedDiscountType!
}

"""
The valid discount types that can be applied to a draft order.
"""
enum DraftOrderAppliedDiscountType {
  """
  A fixed amount in the store's currency.
  """
  FIXED_AMOUNT

  """
  A percentage of the order subtotal.
  """
  PERCENTAGE
}

"""
A warning indicating that a bundle was added to a draft order.
"""
type DraftOrderBundleAddedWarning implements DraftOrderWarning {
  """
  The error code.
  """
  errorCode: String!

  """
  The input field that the warning applies to.
  """
  field: String!

  """
  The warning message.
  """
  message: String!
}

"""
An auto-generated type for paginating through multiple DraftOrders.
"""
type DraftOrderConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DraftOrderEdge!]!

  """
  A list of nodes that are contained in DraftOrderEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DraftOrder!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
A warning indicating that a discount cannot be applied to a draft order.
"""
type DraftOrderDiscountNotAppliedWarning implements DraftOrderWarning {
  """
  The code of the discount that can't be applied.
  """
  discountCode: String

  """
  The title of the discount that can't be applied.
  """
  discountTitle: String

  """
  The error code.
  """
  errorCode: String!

  """
  The input field that the warning applies to.
  """
  field: String!

  """
  The warning message.
  """
  message: String!

  """
  The price rule that can't be applied.
  """
  priceRule: PriceRule
}

"""
An auto-generated type which holds one DraftOrder and a cursor during pagination.
"""
type DraftOrderEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DraftOrderEdge.
  """
  node: DraftOrder!
}

"""
The line item for a draft order.
"""
type DraftOrderLineItem implements Node {
  """
  The custom applied discount.
  """
  appliedDiscount: DraftOrderAppliedDiscount

  """
  The `discountedTotal` divided by `quantity`,
  equal to the average value of the line item price per unit after discounts are applied.
  This value doesn't include discounts applied to the entire draft order.
  """
  approximateDiscountedUnitPriceSet: MoneyBag!

  """
  The list of bundle components if applicable.
  """
  bundleComponents: [DraftOrderLineItem!]!

  """
  Whether the line item is custom (`true`) or contains a product variant (`false`).
  """
  custom: Boolean!

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The list of additional information (metafields) with the associated types.
  """
  customAttributesV2: [TypedAttribute!]!

  """
  The line item price, in shop currency, after discounts are applied.
  """
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead.")

  """
  The total price with discounts applied.
  """
  discountedTotalSet: MoneyBag!

  """
  The `discountedTotal` divided by `quantity`, equal to the value of the discount per unit in the shop currency.
  """
  discountedUnitPrice: Money! @deprecated(reason: "Use `approximateDiscountedUnitPriceSet` instead.")

  """
  The unit price with discounts applied.
  """
  discountedUnitPriceSet: MoneyBag! @deprecated(reason: "Use `approximateDiscountedUnitPriceSet` instead.")

  """
  Name of the service provider who fulfilled the order.

  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.

  Deleted fulfillment services will return null.
  """
  fulfillmentService: FulfillmentService

  """
  The weight of the line item in grams.
  """
  grams: Int @deprecated(reason: "Use `weight` instead.")

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The image of the product variant.
  """
  image(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1 @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  Whether the line item represents the purchase of a gift card.
  """
  isGiftCard: Boolean!

  """
  The name of the product.
  """
  name: String!

  """
  The total price, in shop currency, excluding discounts, equal to the original unit price multiplied by quantity.
  """
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead.")

  """
  The total price excluding discounts, equal to the original unit price multiplied by quantity.
  """
  originalTotalSet: MoneyBag!

  """
  The price, in shop currency, without any discounts applied.
  """
  originalUnitPrice: Money! @deprecated(reason: "Use `originalUnitPriceWithCurrency` instead.")

  """
  The price without any discounts applied.
  """
  originalUnitPriceSet: MoneyBag!

  """
  The original custom line item input price.
  """
  originalUnitPriceWithCurrency: MoneyV2

  """
  The price override for the line item.
  """
  priceOverride: MoneyV2

  """
  The product for the line item.
  """
  product: Product

  """
  The quantity of items. For a bundle item, this is the quantity of bundles,
  not the quantity of items contained in the bundles themselves.
  """
  quantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  The SKU number of the product variant.
  """
  sku: String

  """
  A list of tax lines.
  """
  taxLines: [TaxLine!]!

  """
  Whether the variant is taxable.
  """
  taxable: Boolean!

  """
  The title of the product or variant. This field only applies to custom line items.
  """
  title: String!

  """
  The total discount applied in shop currency.
  """
  totalDiscount: Money! @deprecated(reason: "Use `totalDiscountSet` instead.")

  """
  The total discount amount.
  """
  totalDiscountSet: MoneyBag!

  """
  The UUID of the draft order line item. Must be unique and consistent across requests.
  This field is mandatory in order to manipulate drafts with bundles.
  """
  uuid: String!

  """
  The product variant for the line item.
  """
  variant: ProductVariant

  """
  The name of the variant.
  """
  variantTitle: String

  """
  The name of the vendor who created the product variant.
  """
  vendor: String

  """
  The weight unit and value.
  """
  weight: Weight
}

"""
An auto-generated type for paginating through multiple DraftOrderLineItems.
"""
type DraftOrderLineItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [DraftOrderLineItemEdge!]!

  """
  A list of nodes that are contained in DraftOrderLineItemEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [DraftOrderLineItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.
"""
type DraftOrderLineItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of DraftOrderLineItemEdge.
  """
  node: DraftOrderLineItem!
}

"""
The platform discounts applied to the draft order.
"""
type DraftOrderPlatformDiscount {
  """
  Price reduction allocations across the draft order's lines.
  """
  allocations: [DraftOrderPlatformDiscountAllocation!]!

  """
  Whether the discount is an automatic discount.
  """
  automaticDiscount: Boolean!

  """
  Whether the discount is a buy x get y discount.
  """
  bxgyDiscount: Boolean!

  """
  If a code-based discount, the code used to add the discount.
  """
  code: String

  """
  The discount class.
  """
  discountClass: DiscountClass!

  """
  The discount node for the platform discount.
  """
  discountNode: DiscountNode

  """
  The ID of the discount.
  """
  id: ID

  """
  Whether the discount is line, order or shipping level.
  """
  presentationLevel: String!

  """
  The short summary of the discount.
  """
  shortSummary: String!

  """
  The summary of the discount.
  """
  summary: String!

  """
  The name of the discount.
  """
  title: String!

  """
  The discount total amount in shop currency.
  """
  totalAmount: MoneyV2!

  """
  The amount of money discounted, with values shown in both shop currency and presentment currency.
  """
  totalAmountPriceSet: MoneyBag!
}

"""
Price reduction allocations across the draft order's lines.
"""
type DraftOrderPlatformDiscountAllocation {
  """
  The ID of the allocation.
  """
  id: ID

  """
  The quantity of the target being discounted.
  """
  quantity: Int

  """
  Amount of the discount allocated to the target.
  """
  reductionAmount: MoneyV2!

  """
  Amount of the discount allocated to the target in both shop currency and presentment currency.
  """
  reductionAmountSet: MoneyBag!

  """
  The element of the draft being discounted.
  """
  target: DraftOrderPlatformDiscountAllocationTarget
}

"""
The element of the draft being discounted.
"""
union DraftOrderPlatformDiscountAllocationTarget = CalculatedDraftOrderLineItem | DraftOrderLineItem | ShippingLine

"""
The set of valid sort keys for the DraftOrder query.
"""
enum DraftOrderSortKeys {
  """
  Sort by the `customer_name` value.
  """
  CUSTOMER_NAME

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `number` value.
  """
  NUMBER

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `status` value.
  """
  STATUS

  """
  Sort by the `total_price` value.
  """
  TOTAL_PRICE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
The valid statuses for a draft order.
"""
enum DraftOrderStatus {
  """
  The draft order has been paid.
  """
  COMPLETED

  """
  An invoice for the draft order has been sent to the customer.
  """
  INVOICE_SENT

  """
  The draft order is open. It has not been paid, and an invoice hasn't been sent.
  """
  OPEN
}

"""
Represents a draft order tag.
"""
type DraftOrderTag implements Node {
  """
  Handle of draft order tag.
  """
  handle: String!

  """
  ID of draft order tag.
  """
  id: ID!

  """
  Title of draft order tag.
  """
  title: String!
}

"""
A warning that is displayed to the merchant when a change is made to a draft order.
"""
interface DraftOrderWarning {
  """
  The error code.
  """
  errorCode: String!

  """
  The input field that the warning applies to.
  """
  field: String!

  """
  The warning message.
  """
  message: String!
}

"""
The duty details for a line item.
"""
type Duty implements Node {
  """
  The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
  """
  countryCodeOfOrigin: CountryCode

  """
  The harmonized system code of the item used in calculating the duty.
  """
  harmonizedSystemCode: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The amount of the duty.
  """
  price: MoneyBag!

  """
  A list of taxes charged on the duty.
  """
  taxLines: [TaxLine!]!
}

"""
A sale associated with a duty charge.
"""
type DutySale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The duty for the associated sale.
  """
  duty: Duty!

  """
  The unique ID for the sale.
  """
  id: ID!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
The attribute editable information.
"""
type EditableProperty {
  """
  Whether the attribute is locked for editing.
  """
  locked: Boolean!

  """
  The reason the attribute is locked for editing.
  """
  reason: FormattedString
}

"""
Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
addition of a product.
"""
interface Event {
  """
  The action that occured.
  """
  action: String!

  """
  The name of the app that created the event.
  """
  appTitle: String

  """
  Whether the event was created by an app.
  """
  attributeToApp: Boolean!

  """
  Whether the event was caused by an admin user.
  """
  attributeToUser: Boolean!

  """
  The date and time when the event was created.
  """
  createdAt: DateTime!

  """
  Whether the event is critical.
  """
  criticalAlert: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Human readable text that describes the event.
  """
  message: FormattedString!
}

"""
An auto-generated type for paginating through multiple Events.
"""
type EventConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [EventEdge!]!

  """
  A list of nodes that are contained in EventEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Event!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Event and a cursor during pagination.
"""
type EventEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of EventEdge.
  """
  node: Event!
}

"""
The set of valid sort keys for the Event query.
"""
enum EventSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The type of the resource that generated the event.
"""
enum EventSubjectType {
  """
  A Article resource generated the event.
  """
  ARTICLE

  """
  A Blog resource generated the event.
  """
  BLOG

  """
  A Collection resource generated the event.
  """
  COLLECTION

  """
  A Comment resource generated the event.
  """
  COMMENT

  """
  A Company resource generated the event.
  """
  COMPANY

  """
  A CompanyLocation resource generated the event.
  """
  COMPANY_LOCATION

  """
  A Customer resource generated the event.
  """
  CUSTOMER

  """
  A DiscountAutomaticBxgy resource generated the event.
  """
  DISCOUNT_AUTOMATIC_BXGY

  """
  A DiscountAutomaticNode resource generated the event.
  """
  DISCOUNT_AUTOMATIC_NODE

  """
  A DiscountCodeNode resource generated the event.
  """
  DISCOUNT_CODE_NODE

  """
  A DiscountNode resource generated the event.
  """
  DISCOUNT_NODE

  """
  A DraftOrder resource generated the event.
  """
  DRAFT_ORDER

  """
  A Order resource generated the event.
  """
  ORDER

  """
  A Page resource generated the event.
  """
  PAGE

  """
  A PriceRule resource generated the event.
  """
  PRICE_RULE

  """
  A Product resource generated the event.
  """
  PRODUCT

  """
  A ProductVariant resource generated the event.
  """
  PRODUCT_VARIANT

  """
  Subject type is not available. This usually means that the subject isn't available in the current
          version of the API, using a newer API version may resolve this.
  """
  UNKNOWN
}

"""
An item for exchange.
"""
type ExchangeLineItem implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The order line item for the exchange.
  """
  lineItem: LineItem
}

"""
The input fields for an applied discount on a calculated exchange line item.
"""
input ExchangeLineItemAppliedDiscountInput {
  """
  The description of the discount.
  """
  description: String

  """
  The value of the discount as a fixed amount or a percentage.
  """
  value: ExchangeLineItemAppliedDiscountValueInput!
}

"""
The input value for an applied discount on a calculated exchange line item.
Can either specify the value as a fixed amount or a percentage.
"""
input ExchangeLineItemAppliedDiscountValueInput @oneOf {
  """
  The value of the discount as a fixed amount.
  """
  amount: MoneyInput

  """
  The value of the discount as a percentage.
  """
  percentage: Float
}

"""
An auto-generated type for paginating through multiple ExchangeLineItems.
"""
type ExchangeLineItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ExchangeLineItemEdge!]!

  """
  A list of nodes that are contained in ExchangeLineItemEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ExchangeLineItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ExchangeLineItem and a cursor during pagination.
"""
type ExchangeLineItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ExchangeLineItemEdge.
  """
  node: ExchangeLineItem!
}

"""
An exchange where existing items on an order are returned and new items are added to the order.
"""
type ExchangeV2 implements Node {
  """
  The details of the new items in the exchange.
  """
  additions: ExchangeV2Additions!

  """
  The date and time when the exchange was completed.
  """
  completedAt: DateTime

  """
  The date and time when the exchange was created.
  """
  createdAt: DateTime!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The location where the exchange happened.
  """
  location: Location

  """
  The text of an optional note that a shop owner can attach to the exchange.
  """
  note: String

  """
  The refunds processed during the exchange.
  """
  refunds: [Refund!]!

  """
  The details of the returned items in the exchange.
  """
  returns: ExchangeV2Returns!

  """
  The staff member associated with the exchange.
  """
  staffMember: StaffMember

  """
  The amount of money that was paid or refunded as part of the exchange.
  """
  totalAmountProcessedSet: MoneyBag!

  """
  The difference in values of the items that were exchanged.
  """
  totalPriceSet: MoneyBag!

  """
  The order transactions related to the exchange.
  """
  transactions: [OrderTransaction!]!
}

"""
New items associated to the exchange.
"""
type ExchangeV2Additions {
  """
  The list of new items for the exchange.
  """
  lineItems: [ExchangeV2LineItem!]!

  """
  The subtotal of the items being added, including discounts.
  """
  subtotalPriceSet: MoneyBag!

  """
  The summary of all taxes of the items being added.
  """
  taxLines: [TaxLine!]!

  """
  The total price of the items being added, including discounts and taxes.
  """
  totalPriceSet: MoneyBag!
}

"""
An auto-generated type for paginating through multiple ExchangeV2s.
"""
type ExchangeV2Connection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ExchangeV2Edge!]!

  """
  A list of nodes that are contained in ExchangeV2Edge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ExchangeV2!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ExchangeV2 and a cursor during pagination.
"""
type ExchangeV2Edge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ExchangeV2Edge.
  """
  node: ExchangeV2!
}

"""
Contains information about an item in the exchange.
"""
type ExchangeV2LineItem {
  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The total line price, in shop and presentment currencies, after discounts are applied.
  """
  discountedTotalSet: MoneyBag!

  """
  The price, in shop and presentment currencies,
  of a single variant unit after line item discounts are applied.
  """
  discountedUnitPriceSet: MoneyBag!

  """
  Name of the service provider who fulfilled the order.

  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.

  Deleted fulfillment services will return null.
  """
  fulfillmentService: FulfillmentService

  """
  Indiciates if this line item is a gift card.
  """
  giftCard: Boolean!

  """
  The gift cards associated with the line item.
  """
  giftCards: [GiftCard!]!

  """
  Whether the line item represents the purchase of a gift card.
  """
  isGiftCard: Boolean!

  """
  The line item associated with this object.
  """
  lineItem: LineItem

  """
  The name of the product.
  """
  name: String!

  """
  The total price, in shop and presentment currencies, before discounts are applied.
  """
  originalTotalSet: MoneyBag!

  """
  The price, in shop and presentment currencies,
  of a single variant unit before line item discounts are applied.
  """
  originalUnitPriceSet: MoneyBag!

  """
  The number of products that were purchased.
  """
  quantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  The SKU number of the product variant.
  """
  sku: String

  """
  The TaxLine object connected to this line item.
  """
  taxLines: [TaxLine!]!

  """
  Whether the variant is taxable.
  """
  taxable: Boolean!

  """
  The title of the product or variant. This field only applies to custom line items.
  """
  title: String!

  """
  The product variant of the line item.
  """
  variant: ProductVariant

  """
  The name of the variant.
  """
  variantTitle: String

  """
  The name of the vendor who created the product variant.
  """
  vendor: String
}

"""
Return items associated to the exchange.
"""
type ExchangeV2Returns {
  """
  The list of return items for the exchange.
  """
  lineItems: [ExchangeV2LineItem!]!

  """
  The amount of the order-level discount for the items and shipping being
  returned, which doesn't contain any line item discounts.
  """
  orderDiscountAmountSet: MoneyBag!

  """
  The amount of money to be refunded for shipping.
  """
  shippingRefundAmountSet: MoneyBag!

  """
  The subtotal of the items being returned.
  """
  subtotalPriceSet: MoneyBag!

  """
  The summary of all taxes of the items being returned.
  """
  taxLines: [TaxLine!]!

  """
  The amount of money to be refunded for tip.
  """
  tipRefundAmountSet: MoneyBag!

  """
  The total value of the items being returned.
  """
  totalPriceSet: MoneyBag!
}

"""
Represents a video hosted outside of Shopify.
"""
type ExternalVideo implements File & Media & Node {
  """
  A word or phrase to describe the contents or the function of a file.
  """
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """
  The embed URL of the video for the respective host.
  """
  embedUrl: URL!

  """
  The URL.
  """
  embeddedUrl: URL! @deprecated(reason: "Use `originUrl` instead.")

  """
  Any errors that have occurred on the file.
  """
  fileErrors: [FileError!]!

  """
  The status of the file.
  """
  fileStatus: FileStatus!

  """
  The host of the external video.
  """
  host: MediaHost!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The media content type.
  """
  mediaContentType: MediaContentType!

  """
  Any errors which have occurred on the media.
  """
  mediaErrors: [MediaError!]!

  """
  The warnings attached to the media.
  """
  mediaWarnings: [MediaWarning!]!

  """
  The origin URL of the video on the respective host.
  """
  originUrl: URL!

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  Current status of the media.
  """
  status: MediaStatus!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
  """
  updatedAt: DateTime!
}

"""
Requirements that must be met before an app can be installed.
"""
type FailedRequirement {
  """
  Action to be taken to resolve a failed requirement, including URL link.
  """
  action: NavigationItem

  """
  A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
  encounters when trying to make use of their Shop and its resources.
  """
  message: String!
}

"""
A additional cost, charged by the merchant, on an order. Examples include return shipping fees and restocking fees.
"""
interface Fee {
  """
  The unique ID for the Fee.
  """
  id: ID!
}

"""
A sale associated with a fee.
"""
type FeeSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The fee associated with the sale.
  """
  fee: Fee!

  """
  The unique ID for the sale.
  """
  id: ID!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
A file interface.
"""
interface File {
  """
  A word or phrase to describe the contents or the function of a file.
  """
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """
  Any errors that have occurred on the file.
  """
  fileErrors: [FileError!]!

  """
  The status of the file.
  """
  fileStatus: FileStatus!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple Files.
"""
type FileConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [FileEdge!]!

  """
  A list of nodes that are contained in FileEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [File!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one File and a cursor during pagination.
"""
type FileEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of FileEdge.
  """
  node: File!
}

"""
A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.
Check the file before attempting to upload again.
"""
type FileError {
  """
  Code representing the type of error.
  """
  code: FileErrorCode!

  """
  Additional details regarding the error.
  """
  details: String

  """
  Translated error message.
  """
  message: String!
}

"""
The error types for a file.
"""
enum FileErrorCode {
  """
  File could not be created because a file with the same name already exists.
  """
  DUPLICATE_FILENAME_ERROR

  """
  File could not be created because embed permissions are disabled for this video.
  """
  EXTERNAL_VIDEO_EMBED_DISABLED

  """
  File could not be created because video is either not found or still transcoding.
  """
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING

  """
  File could not be created because the external video has an invalid aspect ratio.
  """
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO

  """
  File could not be created because the external video could not be found.
  """
  EXTERNAL_VIDEO_NOT_FOUND

  """
  File could not be created because the external video is not listed or is private.
  """
  EXTERNAL_VIDEO_UNLISTED

  """
  File could not be created because the cumulative file storage limit would be exceeded.
  """
  FILE_STORAGE_LIMIT_EXCEEDED

  """
  File could not be processed because the source could not be downloaded.
  """
  GENERIC_FILE_DOWNLOAD_FAILURE

  """
  File could not be created because the size is too large.
  """
  GENERIC_FILE_INVALID_SIZE

  """
  File could not be processed because the image could not be downloaded.
  """
  IMAGE_DOWNLOAD_FAILURE

  """
  File could not be processed because the image could not be processed.
  """
  IMAGE_PROCESSING_FAILURE

  """
  File could not be created because the image has an invalid aspect ratio.
  """
  INVALID_IMAGE_ASPECT_RATIO

  """
  File could not be created because the image size is too large.
  """
  INVALID_IMAGE_FILE_SIZE

  """
  File could not be created because the image's resolution exceeds the max limit.
  """
  INVALID_IMAGE_RESOLUTION

  """
  File could not be processed because the signed URL was invalid.
  """
  INVALID_SIGNED_URL

  """
  File timed out because it is currently being modified by another operation.
  """
  MEDIA_TIMEOUT_ERROR

  """
  File could not be created because the model file failed processing.
  """
  MODEL3D_GLB_OUTPUT_CREATION_ERROR

  """
  File could not be created because the model can't be converted to USDZ format.
  """
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR

  """
  File could not be created because the model file failed processing.
  """
  MODEL3D_PROCESSING_FAILURE

  """
  File could not be created because the model's thumbnail generation failed.
  """
  MODEL3D_THUMBNAIL_GENERATION_ERROR

  """
  There was an issue while trying to generate a new thumbnail.
  """
  MODEL3D_THUMBNAIL_REGENERATION_ERROR

  """
  Model failed validation.
  """
  MODEL3D_VALIDATION_ERROR

  """
  File error has occurred for an unknown reason.
  """
  UNKNOWN

  """
  File could not be created because the image is an unsupported file type.
  """
  UNSUPPORTED_IMAGE_FILE_TYPE

  """
  File could not be created because it has an invalid file type.
  """
  VIDEO_INVALID_FILETYPE_ERROR

  """
  File could not be created because it does not meet the maximum duration requirement.
  """
  VIDEO_MAX_DURATION_ERROR

  """
  File could not be created because it does not meet the maximum height requirement.
  """
  VIDEO_MAX_HEIGHT_ERROR

  """
  File could not be created because it does not meet the maximum width requirement.
  """
  VIDEO_MAX_WIDTH_ERROR

  """
  File could not be created because the metadata could not be read.
  """
  VIDEO_METADATA_READ_ERROR

  """
  File could not be created because it does not meet the minimum duration requirement.
  """
  VIDEO_MIN_DURATION_ERROR

  """
  File could not be created because it does not meet the minimum height requirement.
  """
  VIDEO_MIN_HEIGHT_ERROR

  """
  File could not be created because it does not meet the minimum width requirement.
  """
  VIDEO_MIN_WIDTH_ERROR

  """
  Video failed validation.
  """
  VIDEO_VALIDATION_ERROR
}

"""
The set of valid sort keys for the File query.
"""
enum FileSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `filename` value.
  """
  FILENAME

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `original_upload_size` value.
  """
  ORIGINAL_UPLOAD_SIZE

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
The possible statuses for a file object.
"""
enum FileStatus {
  """
  File processing has failed.
  """
  FAILED

  """
  File is being processed.
  """
  PROCESSING

  """
  File is ready to be displayed.
  """
  READY

  """
  File has been uploaded but hasn't been processed.
  """
  UPLOADED
}

"""
A filter option is one possible value in a search filter.
"""
type FilterOption {
  """
  The filter option's label for display purposes.
  """
  label: String!

  """
  The filter option's value.
  """
  value: String!
}

"""
An amount that's allocated to a line item based on an associated discount application.
"""
type FinancialSummaryDiscountAllocation {
  """
  The money amount that's allocated per unit on the associated line based on the
  discount application in shop and presentment currencies. If the allocated
  amount for the line cannot be evenly divided by the quantity, then this amount
  will be an approximate amount, avoiding fractional pennies. For example, if
  the associated line had a quantity of 3 with a discount of 4 cents, then the
  discount distribution would be [0.01, 0.01, 0.02]. This field returns the
  highest number of the distribution. In this example, this would be 0.02.
  """
  approximateAllocatedAmountPerItem: MoneyBag!

  """
  The discount application that the allocated amount originated from.
  """
  discountApplication: FinancialSummaryDiscountApplication!
}

"""
Discount applications capture the intentions of a discount source at
the time of application on an order's line items or shipping lines.
"""
type FinancialSummaryDiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!
}

"""
A string containing a strict subset of HTML code. Non-allowed tags will be stripped out.
Allowed tags:
* `a` (allowed attributes: `href`, `target`)
* `b`
* `br`
* `em`
* `i`
* `strong`
* `u`
Use [HTML](https://shopify.dev/api/admin-graphql/latest/scalars/HTML) instead if you need to
include other HTML tags.

Example value: `"Your current domain is <strong>example.myshopify.com</strong>."`
"""
scalar FormattedString

"""
Represents a fulfillment.
In Shopify, a fulfillment represents a shipment of one or more items in an order.
When an order has been completely fulfilled, it means that all the items that are included
in the order have been sent to the customer.
There can be more than one fulfillment for an order.
"""
type Fulfillment implements LegacyInteroperability & Node {
  """
  The date and time when the fulfillment was created.
  """
  createdAt: DateTime!

  """
  The date that this fulfillment was delivered.
  """
  deliveredAt: DateTime

  """
  Human readable display status for this fulfillment.
  """
  displayStatus: FulfillmentDisplayStatus

  """
  The estimated date that this fulfillment will arrive.
  """
  estimatedDeliveryAt: DateTime

  """
  The history of events associated with this fulfillment.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: FulfillmentEventSortKeys = HAPPENED_AT
  ): FulfillmentEventConnection!

  """
  List of the fulfillment's line items.
  """
  fulfillmentLineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): FulfillmentLineItemConnection!

  """
  A paginated list of fulfillment orders for the fulfillment.
  """
  fulfillmentOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): FulfillmentOrderConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The date and time when the fulfillment went into transit.
  """
  inTransitAt: DateTime

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The location that the fulfillment was processed at.
  """
  location: Location

  """
  Human readable reference identifier for this fulfillment.
  """
  name: String!

  """
  The order for which the fulfillment was created.
  """
  order: Order!

  """
  The address at which the fulfillment occurred. This field is intended for tax
  purposes, as a full address is required for tax providers to accurately
  calculate taxes. Typically this is the address of the warehouse or fulfillment
  center. To retrieve a fulfillment location's address, use the
  `assignedLocation` field on the
  [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder)
  object instead.
  """
  originAddress: FulfillmentOriginAddress

  """
  Whether any of the line items in the fulfillment require shipping.
  """
  requiresShipping: Boolean!

  """
  Fulfillment service associated with the fulfillment.
  """
  service: FulfillmentService

  """
  The status of the fulfillment.
  """
  status: FulfillmentStatus!

  """
  Sum of all line item quantities for the fulfillment.
  """
  totalQuantity: Int!

  """
  Tracking information associated with the fulfillment,
  such as the tracking company, tracking number, and tracking URL.
  """
  trackingInfo(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [FulfillmentTrackingInfo!]!

  """
  The date and time when the fulfillment was last modified.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple Fulfillments.
"""
type FulfillmentConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [FulfillmentEdge!]!

  """
  A list of nodes that are contained in FulfillmentEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [Fulfillment!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
A fulfillment constraint rule.
"""
type FulfillmentConstraintRule implements HasMetafields & Node {
  """
  Delivery method types that the function is associated with.
  """
  deliveryMethodTypes: [DeliveryMethodType!]!

  """
  The ID for the fulfillment constraint function.
  """
  function: ShopifyFunction!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!
}

"""
The display status of a fulfillment.
"""
enum FulfillmentDisplayStatus {
  """
  Displayed as **Attempted delivery**.
  """
  ATTEMPTED_DELIVERY

  """
  Displayed as **Canceled**.
  """
  CANCELED

  """
  Displayed as **Confirmed**.
  """
  CONFIRMED

  """
  Displayed as **Delayed**.
  """
  DELAYED

  """
  Displayed as **Delivered**.
  """
  DELIVERED

  """
  Displayed as **Failure**.
  """
  FAILURE

  """
  Displayed as **Fulfilled**.
  """
  FULFILLED

  """
  Displayed as **In transit**.
  """
  IN_TRANSIT

  """
  Displayed as **Label printed**.
  """
  LABEL_PRINTED

  """
  Displayed as **Label purchased**.
  """
  LABEL_PURCHASED

  """
  Displayed as **Label voided**.
  """
  LABEL_VOIDED

  """
  Displayed as **Marked as fulfilled**.
  """
  MARKED_AS_FULFILLED

  """
  Displayed as **Not delivered**.
  """
  NOT_DELIVERED

  """
  Displayed as **Out for delivery**.
  """
  OUT_FOR_DELIVERY

  """
  Displayed as **Picked up**.
  """
  PICKED_UP

  """
  Displayed as **Ready for pickup**.
  """
  READY_FOR_PICKUP

  """
  Displayed as **Submitted**.
  """
  SUBMITTED
}

"""
An auto-generated type which holds one Fulfillment and a cursor during pagination.
"""
type FulfillmentEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of FulfillmentEdge.
  """
  node: Fulfillment!
}

"""
The fulfillment event that describes the fulfilllment status at a particular time.
"""
type FulfillmentEvent implements Node {
  """
  The street address where this fulfillment event occurred.
  """
  address1: String

  """
  The city where this fulfillment event occurred.
  """
  city: String

  """
  The country where this fulfillment event occurred.
  """
  country: String

  """
  The date and time when the fulfillment event was created.
  """
  createdAt: DateTime!

  """
  The estimated delivery date and time of the fulfillment.
  """
  estimatedDeliveryAt: DateTime

  """
  The time at which this fulfillment event happened.
  """
  happenedAt: DateTime!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The latitude where this fulfillment event occurred.
  """
  latitude: Float

  """
  The longitude where this fulfillment event occurred.
  """
  longitude: Float

  """
  A message associated with this fulfillment event.
  """
  message: String

  """
  The province where this fulfillment event occurred.
  """
  province: String

  """
  The status of this fulfillment event.
  """
  status: FulfillmentEventStatus!

  """
  The zip code of the location where this fulfillment event occurred.
  """
  zip: String
}

"""
An auto-generated type for paginating through multiple FulfillmentEvents.
"""
type FulfillmentEventConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [FulfillmentEventEdge!]!

  """
  A list of nodes that are contained in FulfillmentEventEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [FulfillmentEvent!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.
"""
type FulfillmentEventEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of FulfillmentEventEdge.
  """
  node: FulfillmentEvent!
}

"""
The set of valid sort keys for the FulfillmentEvent query.
"""
enum FulfillmentEventSortKeys {
  """
  Sort by the `happened_at` value.
  """
  HAPPENED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The status that describes a fulfillment or delivery event.
"""
enum FulfillmentEventStatus {
  """
  A delivery was attempted.
  """
  ATTEMPTED_DELIVERY

  """
  The fulfillment is confirmed. This is the default value when no other information is available.
  """
  CONFIRMED

  """
  The fulfillment is delayed.
  """
  DELAYED

  """
  The fulfillment was successfully delivered.
  """
  DELIVERED

  """
  The fulfillment request failed.
  """
  FAILURE

  """
  The fulfillment is in transit.
  """
  IN_TRANSIT

  """
  A purchased shipping label has been printed.
  """
  LABEL_PRINTED

  """
  A shipping label has been purchased.
  """
  LABEL_PURCHASED

  """
  The fulfillment is out for delivery.
  """
  OUT_FOR_DELIVERY

  """
  The fulfillment is ready to be picked up.
  """
  READY_FOR_PICKUP
}

"""
A fulfillment hold currently applied on a fulfillment order.
"""
type FulfillmentHold implements Node {
  """
  The localized reason for the fulfillment hold for display purposes.
  """
  displayReason: String!

  """
  An identifier an app can use to reference one of many holds it applied to a fulfillment order.
  This field must be unique among the holds that a single app applies to a single fulfillment order.
  """
  handle: String

  """
  The app that created the fulfillment hold.
  """
  heldByApp: App

  """
  A boolean value that indicates whether the requesting app created the fulfillment hold.
  """
  heldByRequestingApp: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The reason for the fulfillment hold.
  """
  reason: FulfillmentHoldReason!

  """
  Additional information about the fulfillment hold reason.
  """
  reasonNotes: String
}

"""
The reason for a fulfillment hold.
"""
enum FulfillmentHoldReason {
  """
  The fulfillment hold is applied because payment is pending.
  """
  AWAITING_PAYMENT

  """
  The fulfillment hold is applied because of return items not yet received during an exchange.
  """
  AWAITING_RETURN_ITEMS

  """
  The fulfillment hold is applied because of a high risk of fraud.
  """
  HIGH_RISK_OF_FRAUD

  """
  The fulfillment hold is applied because of an incorrect address.
  """
  INCORRECT_ADDRESS

  """
  The fulfillment hold is applied because inventory is out of stock.
  """
  INVENTORY_OUT_OF_STOCK

  """
  The fulfillment hold is applied because of a post purchase upsell offer.
  """
  ONLINE_STORE_POST_PURCHASE_CROSS_SELL

  """
  The fulfillment hold is applied for another reason.
  """
  OTHER

  """
  The fulfillment hold is applied because of an unknown delivery date.
  """
  UNKNOWN_DELIVERY_DATE
}

"""
Represents a line item from an order that's included in a fulfillment.
"""
type FulfillmentLineItem implements Node {
  """
  The total price after discounts are applied.
  """
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead.")

  """
  The total price after discounts are applied in shop and presentment
  currencies. This value doesn't include order-level discounts.
  """
  discountedTotalSet: MoneyBag!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The associated order's line item.
  """
  lineItem: LineItem!

  """
  The total price before discounts are applied.
  """
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead.")

  """
  The total price before discounts are applied in shop and presentment currencies.
  """
  originalTotalSet: MoneyBag!

  """
  Number of line items in the fulfillment.
  """
  quantity: Int
}

"""
An auto-generated type for paginating through multiple FulfillmentLineItems.
"""
type FulfillmentLineItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [FulfillmentLineItemEdge!]!

  """
  A list of nodes that are contained in FulfillmentLineItemEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [FulfillmentLineItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
"""
type FulfillmentLineItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of FulfillmentLineItemEdge.
  """
  node: FulfillmentLineItem!
}

"""
The FulfillmentOrder object represents either an item or a group of items in an
[Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
that are expected to be fulfilled from the same location.
There can be more than one fulfillment order for an
[order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
at a given location.

{{ '/api/reference/fulfillment_order_relationships.png' | image }}

Fulfillment orders represent the work which is intended to be done in relation to an order.
When fulfillment has started for one or more line items, a
[Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
is created by a merchant or third party to represent the ongoing or completed work of fulfillment.

[See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).

> Note:
> Shopify creates fulfillment orders automatically when an order is created.
> It is not possible to manually create fulfillment orders.
>
> [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).

## Retrieving fulfillment orders

### Fulfillment orders from an order

All fulfillment orders related to a given order can be retrieved with the
[Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
connection.

[API access scopes](#api-access-scopes)
govern which fulfillments orders are returned to clients.
An API client will only receive a subset of the fulfillment orders which belong to an order
if they don't have the necessary access scopes to view all of the fulfillment orders.

### Fulfillment orders assigned to the app for fulfillment

Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
[assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
connection.
Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
should be returned or only those where a merchant has sent a
[fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
and it has yet to be responded to.

The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
the assigned fulfillment orders.

### All fulfillment orders

Apps can retrieve all fulfillment orders with the
[fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
which are accessible to the app according to the
[fulfillment order access scopes](#api-access-scopes) it was granted with.

## The lifecycle of a fulfillment order

### Fulfillment Order Creation

After an order is created, a background worker performs the order routing process which determines
which locations will be responsible for fulfilling the purchased items.
Once the order routing process is complete, one or more fulfillment orders will be created
and assigned to these locations. It is not possible to manually create fulfillment orders.

Once a fulfillment order has been created, it will have one of two different lifecycles depending on
the type of location which the fulfillment order is assigned to.

### The lifecycle of a fulfillment order at a merchant managed location

Fulfillment orders are completed by creating
[fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
Fulfillments represents the work done.

For digital products a merchant or an order management app would create a fulfilment once the digital asset
has been provisioned.
For example, in the case of a digital gift card, a merchant would to do this once
the gift card has been activated - before the email has been shipped.

On the other hand, for a traditional shipped order,
a merchant or an order management app would create a fulfillment after picking and packing the items relating
to a fulfillment order, but before the courier has collected the goods.

[Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).

### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service

For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
a merchant or an Order Management App can
[send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
to the fulfillment service which operates the location to request that they fulfill the associated items.
A fulfillment service has the option to
[accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
this fulfillment request.

Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
or order management app and instead a
[cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
to the fulfillment service.

Once a fulfillment service accepts a fulfillment request,
then after they are ready to pack items and send them for delivery, they create fulfillments with the
[fulfillmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentCreate)
mutation.
They can provide tracking information right away or create fulfillments without it and then
update the tracking information for fulfillments with the
[fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentTrackingInfoUpdate)
mutation.

[Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).

## API access scopes

Fulfillment orders are governed by the following API access scopes:

* The `read_merchant_managed_fulfillment_orders` and
  `write_merchant_managed_fulfillment_orders` access scopes
  grant access to fulfillment orders assigned to merchant-managed locations.
* The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
  access scopes are intended for fulfillment services.
  These scopes grant access to fulfillment orders assigned to locations that are being managed
  by fulfillment services.
* The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
  access scopes grant access to fulfillment orders
  assigned to locations managed by other fulfillment services.

### Fulfillment service app access scopes

Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
and don't have the `*_third_party_fulfillment_orders`
or `*_merchant_managed_fulfillment_orders` access scopes.
The app will only have access to the fulfillment orders assigned to their location
(or multiple locations if the app registers multiple fulfillment services on the shop).
The app will not have access to fulfillment orders assigned to merchant-managed locations
or locations owned by other fulfillment service apps.

### Order management app access scopes

**Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
`write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
on behalf of a merchant.

If an app combines the functions of an order management app and a fulfillment service,
then the app should request all
access scopes to manage all assigned and all unassigned fulfillment orders.

## Notifications about fulfillment orders

Fulfillment services are required to
[register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
whenever a merchant submits a fulfillment or cancellation request.

Both merchants and apps can
[subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
to the
[fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
to be notified whenever fulfillment order related domain events occur.

[Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
"""
type FulfillmentOrder implements Node {
  """
  The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.

  The fulfillment order's assigned location might change in the following cases:

  - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
    ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
    ) field within the mutation's response.
  - Work on the fulfillment order hasn't yet begun, which means that the fulfillment order has the
      [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
      [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
      [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
      status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
  """
  assignedLocation: FulfillmentOrderAssignedLocation!

  """
  ID of the channel that created the order.
  """
  channelId: ID

  """
  Date and time when the fulfillment order was created.
  """
  createdAt: DateTime!

  """
  Delivery method of this fulfillment order.
  """
  deliveryMethod: DeliveryMethod

  """
  The destination where the items should be sent.
  """
  destination: FulfillmentOrderDestination

  """
  The date and time at which the fulfillment order will be fulfillable. When
  this date and time is reached, the scheduled fulfillment order is
  automatically transitioned to open. For example, the `fulfill_at` date for a
  subscription order might be the 1st of each month, a pre-order `fulfill_at`
  date would be `nil`, and a standard order `fulfill_at` date would be the order creation date.
  """
  fulfillAt: DateTime

  """
  The latest date and time by which all items in the fulfillment order need to be fulfilled.
  """
  fulfillBy: DateTime

  """
  The fulfillment holds applied on the fulfillment order.
  """
  fulfillmentHolds: [FulfillmentHold!]!

  """
  Fulfillment orders eligible for merging with the given fulfillment order.
  """
  fulfillmentOrdersForMerge(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): FulfillmentOrderConnection!

  """
  A list of fulfillments for the fulfillment order.
  """
  fulfillments(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): FulfillmentConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The duties delivery method of this fulfillment order.
  """
  internationalDuties: FulfillmentOrderInternationalDuties

  """
  A list of the fulfillment order's line items.
  """
  lineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): FulfillmentOrderLineItemConnection!

  """
  A list of locations that the fulfillment order can potentially move to.
  """
  locationsForMove(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter to a list of Fulfillment Order Line Items.
    """
    lineItemIds: [ID!] = []

    """
    Specific Location ids to check for the movability for a fulfillment order.
    """
    locationIds: [ID!]

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | active | string |
    | address1 | string |
    | address2 | string |
    | city | string |
    | country | string |
    | created_at | time |
    | geolocated | boolean |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | legacy | boolean |
    | location_id | id |
    | name | string |
    | pickup_in_store | string | | - `enabled`<br/> - `disabled` |
    | province | string |
    | zip | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): FulfillmentOrderLocationForMoveConnection!

  """
  A list of requests sent by the merchant or an order management app to the fulfillment service for the fulfillment order.
  """
  merchantRequests(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The kind of request the merchant sent.
    """
    kind: FulfillmentOrderMerchantRequestKind

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): FulfillmentOrderMerchantRequestConnection!

  """
  The order that's associated with the fulfillment order.
  """
  order: Order!

  """
  ID of the order that's associated with the fulfillment order.
  """
  orderId: ID!

  """
  The unique identifier for the order that appears on the order page in the Shopify admin and the <b>Order status</b> page.
  For example, "#1001", "EN1001", or "1001-A".
  This value isn't unique across multiple stores.
  """
  orderName: String!

  """
  The date and time when the order was processed.
  This date and time might not match the date and time when the order was created.
  """
  orderProcessedAt: DateTime!

  """
  The request status of the fulfillment order.
  """
  requestStatus: FulfillmentOrderRequestStatus!

  """
  The status of the fulfillment order.
  """
  status: FulfillmentOrderStatus!

  """
  The actions that can be performed on this fulfillment order.
  """
  supportedActions: [FulfillmentOrderSupportedAction!]!

  """
  The date and time when the fulfillment order was last updated.
  """
  updatedAt: DateTime!
}

"""
The actions that can be taken on a fulfillment order.
"""
enum FulfillmentOrderAction {
  """
  Cancels a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderCancel`.
  """
  CANCEL_FULFILLMENT_ORDER

  """
  Creates a fulfillment for selected line items in the fulfillment order. The
  corresponding mutation for this action is `fulfillmentCreateV2`.
  """
  CREATE_FULFILLMENT

  """
  Opens an external URL to initiate the fulfillment process outside Shopify.
  This action should be paired with
  `FulfillmentOrderSupportedAction.externalUrl`.
  """
  EXTERNAL

  """
  Applies a fulfillment hold on the fulfillment order. The corresponding mutation for this action is `fulfillmentOrderHold`.
  """
  HOLD

  """
  Marks the fulfillment order as open. The corresponding mutation for this action is `fulfillmentOrderOpen`.
  """
  MARK_AS_OPEN

  """
  Merges a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMerge`.
  """
  MERGE

  """
  Moves a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMove`.
  """
  MOVE

  """
  Releases the fulfillment hold on the fulfillment order. The corresponding
  mutation for this action is `fulfillmentOrderReleaseHold`.
  """
  RELEASE_HOLD

  """
  Sends a cancellation request to the fulfillment service of a fulfillment
  order. The corresponding mutation for this action is
  `fulfillmentOrderSubmitCancellationRequest`.
  """
  REQUEST_CANCELLATION

  """
  Sends a request for fulfilling selected line items in a fulfillment order to a
  fulfillment service. The corresponding mutation for this action is
  `fulfillmentOrderSubmitFulfillmentRequest`.
  """
  REQUEST_FULFILLMENT

  """
  Splits a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSplit`.
  """
  SPLIT
}

"""
The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.

 The fulfillment order's assigned location might change in the following cases:

  - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
    ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
    ) field within the mutation's response.

  - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
      [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
      [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
      [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
      status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).

If the [fulfillmentOrderMove](
https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
) mutation has moved the fulfillment order's line items to a new location,
but hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location
doesn't change.
This happens if the fulfillment order is being split during the move, or if all line items can be moved
to an existing fulfillment order at a new location.

Once the fulfillment order has been taken into work or canceled,
which means that the fulfillment order has the
[IN_PROGRESS](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-inprogress),
[CLOSED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-closed),
[CANCELLED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-cancelled), or
[INCOMPLETE](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-incomplete)
status, `FulfillmentOrderAssignedLocation` acts as a snapshot of the shop's location content.
Up-to-date shop's location data may be queried through [location](
  https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderAssignedLocation#field-fulfillmentorderassignedlocation-location
) connection.
"""
type FulfillmentOrderAssignedLocation {
  """
  The first line of the address for the location.
  """
  address1: String

  """
  The second line of the address for the location.
  """
  address2: String

  """
  The city of the location.
  """
  city: String

  """
  The two-letter country code of the location.
  """
  countryCode: CountryCode!

  """
  The location where the fulfillment is expected to happen. This value might be different from
  `FulfillmentOrderAssignedLocation` if the location's attributes were updated
  after the fulfillment order was taken into work of canceled.
  """
  location: Location

  """
  The name of the location.
  """
  name: String!

  """
  The phone number of the location.
  """
  phone: String

  """
  The province of the location.
  """
  province: String

  """
  The ZIP code of the location.
  """
  zip: String
}

"""
The assigment status to be used to filter fulfillment orders.
"""
enum FulfillmentOrderAssignmentStatus {
  """
  Fulfillment orders for which the merchant has requested cancellation of
  the previously accepted fulfillment request.
  """
  CANCELLATION_REQUESTED

  """
  Fulfillment orders for which the merchant's fulfillment request has been accepted.
  Any number of fulfillments can be created on these fulfillment orders
  to completely fulfill the requested items.
  """
  FULFILLMENT_ACCEPTED

  """
  Fulfillment orders for which the merchant has requested fulfillment.
  """
  FULFILLMENT_REQUESTED

  """
  Fulfillment orders for which the merchant hasn't yet requested fulfillment.
  """
  FULFILLMENT_UNSUBMITTED
}

"""
An auto-generated type for paginating through multiple FulfillmentOrders.
"""
type FulfillmentOrderConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [FulfillmentOrderEdge!]!

  """
  A list of nodes that are contained in FulfillmentOrderEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [FulfillmentOrder!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Represents the destination where the items should be sent upon fulfillment.
"""
type FulfillmentOrderDestination implements Node {
  """
  The first line of the address of the destination.
  """
  address1: String

  """
  The second line of the address of the destination.
  """
  address2: String

  """
  The city of the destination.
  """
  city: String

  """
  The company of the destination.
  """
  company: String

  """
  The two-letter country code of the destination.
  """
  countryCode: CountryCode

  """
  The email of the customer at the destination.
  """
  email: String

  """
  The first name of the customer at the destination.
  """
  firstName: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The last name of the customer at the destination.
  """
  lastName: String

  """
  The location designated for the pick-up of the fulfillment order.
  """
  location: Location

  """
  The phone number of the customer at the destination.
  """
  phone: String

  """
  The province of the destination.
  """
  province: String

  """
  The ZIP code of the destination.
  """
  zip: String
}

"""
An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.
"""
type FulfillmentOrderEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of FulfillmentOrderEdge.
  """
  node: FulfillmentOrder!
}

"""
The international duties relevant to a fulfillment order.
"""
type FulfillmentOrderInternationalDuties {
  """
  The method of duties payment. Example values: `DDP`, `DAP`.
  """
  incoterm: String!
}

"""
Associates an order line item with quantities requiring fulfillment from the respective fulfillment order.
"""
type FulfillmentOrderLineItem implements Node {
  """
  The financial summary for the Fulfillment Order's Line Items.
  """
  financialSummaries: [FulfillmentOrderLineItemFinancialSummary!]!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The image associated to the line item's variant.
  """
  image: Image

  """
  The ID of the inventory item.
  """
  inventoryItemId: ID

  """
  The associated order line item.
  """
  lineItem: LineItem!

  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: MoneyBag! @deprecated(reason: "Use `financialSummaries` instead.")

  """
  The title of the product.
  """
  productTitle: String!

  """
  The number of units remaining to be fulfilled.
  """
  remainingQuantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  The variant SKU number.
  """
  sku: String

  """
  The total number of units to be fulfilled.
  """
  totalQuantity: Int!

  """
  The product variant associated to the fulfillment order line item.
  """
  variant: ProductVariant

  """
  The name of the variant.
  """
  variantTitle: String

  """
  The name of the vendor who made the variant.
  """
  vendor: String

  """
  Warning messages for a fulfillment order line item.
  """
  warnings: [FulfillmentOrderLineItemWarning!]!

  """
  The weight of a line item unit.
  """
  weight: Weight
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
"""
type FulfillmentOrderLineItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [FulfillmentOrderLineItemEdge!]!

  """
  A list of nodes that are contained in FulfillmentOrderLineItemEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [FulfillmentOrderLineItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.
"""
type FulfillmentOrderLineItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of FulfillmentOrderLineItemEdge.
  """
  node: FulfillmentOrderLineItem!
}

"""
The financial details of a fulfillment order line item.
"""
type FulfillmentOrderLineItemFinancialSummary {
  """
  The approximate split price of a line item unit, in shop and presentment
  currencies. This value doesn't include discounts applied to the entire
  order.For the full picture of applied discounts, see discountAllocations.
  """
  approximateDiscountedUnitPriceSet: MoneyBag!

  """
  The discounts that have been allocated onto the line item by discount applications, not including order edits and refunds.
  """
  discountAllocations: [FinancialSummaryDiscountAllocation!]!

  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: MoneyBag!

  """
  Number of line items that this financial summary applies to.
  """
  quantity: Int!
}

"""
A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected.
"""
type FulfillmentOrderLineItemWarning {
  """
  The description of warning.
  """
  description: String

  """
  The title of warning.
  """
  title: String
}

"""
A location that a fulfillment order can potentially move to.
"""
type FulfillmentOrderLocationForMove {
  """
  Fulfillment order line items that can be moved from their current location to the given location.
  """
  availableLineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): FulfillmentOrderLineItemConnection!

  """
  Total number of fulfillment order line items that can be moved from their current assigned location to the
  given location.
  """
  availableLineItemsCount: Count

  """
  The location being considered as the fulfillment order's new assigned location.
  """
  location: Location!

  """
  A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
  moved to the location.
  """
  message: String

  """
  Whether the fulfillment order can be moved to the location.
  """
  movable: Boolean!

  """
  Fulfillment order line items that cannot be moved from their current location to the given location.
  """
  unavailableLineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): FulfillmentOrderLineItemConnection!

  """
  Total number of fulfillment order line items that can't be moved from their current assigned location to the
  given location.
  """
  unavailableLineItemsCount: Count
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.
"""
type FulfillmentOrderLocationForMoveConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [FulfillmentOrderLocationForMoveEdge!]!

  """
  A list of nodes that are contained in FulfillmentOrderLocationForMoveEdge. You
  can fetch data about an individual node, or you can follow the edges to fetch
  data about a collection of related nodes. At each node, you specify the fields
  that you want to retrieve.
  """
  nodes: [FulfillmentOrderLocationForMove!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.
"""
type FulfillmentOrderLocationForMoveEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of FulfillmentOrderLocationForMoveEdge.
  """
  node: FulfillmentOrderLocationForMove!
}

"""
A request made by the merchant or an order management app to a fulfillment service
for a fulfillment order.
"""
type FulfillmentOrderMerchantRequest implements Node {
  """
  The fulfillment order associated with the merchant request.
  """
  fulfillmentOrder: FulfillmentOrder!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The kind of request made.
  """
  kind: FulfillmentOrderMerchantRequestKind!

  """
  The optional message that the merchant included in the request.
  """
  message: String

  """
  Additional options requested by the merchant. These depend on the `kind` of the request.
  For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
  merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
  `notifyCustomer` when making calls to `FulfillmentCreate`.
  """
  requestOptions: JSON

  """
  The response from the fulfillment service.
  """
  responseData: JSON

  """
  The timestamp when the request was made.
  """
  sentAt: DateTime!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.
"""
type FulfillmentOrderMerchantRequestConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [FulfillmentOrderMerchantRequestEdge!]!

  """
  A list of nodes that are contained in FulfillmentOrderMerchantRequestEdge. You
  can fetch data about an individual node, or you can follow the edges to fetch
  data about a collection of related nodes. At each node, you specify the fields
  that you want to retrieve.
  """
  nodes: [FulfillmentOrderMerchantRequest!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.
"""
type FulfillmentOrderMerchantRequestEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of FulfillmentOrderMerchantRequestEdge.
  """
  node: FulfillmentOrderMerchantRequest!
}

"""
The kinds of request merchants can make to a fulfillment service.
"""
enum FulfillmentOrderMerchantRequestKind {
  """
  The merchant requests cancellation of an `IN_PROGRESS` fulfillment order.
  """
  CANCELLATION_REQUEST

  """
  The merchant requests fulfillment for an `OPEN` fulfillment order.
  """
  FULFILLMENT_REQUEST
}

"""
The request status of a fulfillment order.
"""
enum FulfillmentOrderRequestStatus {
  """
  The fulfillment service accepted the merchant's fulfillment request.
  """
  ACCEPTED

  """
  The fulfillment service accepted the merchant's fulfillment cancellation request.
  """
  CANCELLATION_ACCEPTED

  """
  The fulfillment service rejected the merchant's fulfillment cancellation request.
  """
  CANCELLATION_REJECTED

  """
  The merchant requested a cancellation of the fulfillment request for this fulfillment order.
  """
  CANCELLATION_REQUESTED

  """
  The fulfillment service closed the fulfillment order without completing it.
  """
  CLOSED

  """
  The fulfillment service rejected the merchant's fulfillment request.
  """
  REJECTED

  """
  The merchant requested fulfillment for this fulfillment order.
  """
  SUBMITTED

  """
  The initial request status for the newly-created fulfillment orders. This is the only valid
  request status for fulfillment orders that aren't assigned to a fulfillment service.
  """
  UNSUBMITTED
}

"""
The set of valid sort keys for the FulfillmentOrder query.
"""
enum FulfillmentOrderSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
The status of a fulfillment order.
"""
enum FulfillmentOrderStatus {
  """
  The fulfillment order has been cancelled by the merchant.
  """
  CANCELLED

  """
  The fulfillment order has been completed and closed.
  """
  CLOSED

  """
  The fulfillment order cannot be completed as requested.
  """
  INCOMPLETE

  """
  The fulfillment order is being processed.
  """
  IN_PROGRESS

  """
  The fulfillment order is on hold. The fulfillment process can't be initiated
  until the hold on the fulfillment order is released.
  """
  ON_HOLD

  """
  The fulfillment order is ready for fulfillment.
  """
  OPEN

  """
  The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`.
  """
  SCHEDULED
}

"""
One of the actions that the fulfillment order supports in its current state.
"""
type FulfillmentOrderSupportedAction {
  """
  The action value.
  """
  action: FulfillmentOrderAction!

  """
  The external URL to be used to initiate the fulfillment process outside Shopify.
  Applicable only when the `action` value is `EXTERNAL`.
  """
  externalUrl: URL
}

"""
The address at which the fulfillment occurred. This object is intended for tax
purposes, as a full address is required for tax providers to accurately
calculate taxes. Typically this is the address of the warehouse or fulfillment
center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the
[`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder)
object instead.
"""
type FulfillmentOriginAddress {
  """
  The street address of the fulfillment location.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The city in which the fulfillment location is located.
  """
  city: String

  """
  The country code of the fulfillment location.
  """
  countryCode: String!

  """
  The province code of the fulfillment location.
  """
  provinceCode: String

  """
  The zip code of the fulfillment location.
  """
  zip: String
}

"""
A **Fulfillment Service** is a third party warehouse that prepares and ships orders
on behalf of the store owner. Fulfillment services charge a fee to package and ship items
and update product inventory levels. Some well known fulfillment services with Shopify integrations
include: Amazon, Shipwire, and Rakuten. When an app registers a new `FulfillmentService` on a store,
Shopify automatically creates a `Location` that's associated to the fulfillment service.
To learn more about fulfillment services, refer to
[Manage fulfillments as a fulfillment service app](https://shopify.dev/apps/fulfillment/fulfillment-service-apps)
guide.

## Mutations

You can work with the `FulfillmentService` object with the
[fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate),
[fulfillmentServiceUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceUpdate),
and [fulfillmentServiceDelete](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceDelete)
mutations.

## Hosted endpoints

Fulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that
Shopify can query on certain conditions.
These endpoints must have a common prefix, and this prefix should be supplied in the `callbackUrl` parameter
in the
[fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate)
mutation.

- Shopify sends POST requests to the `<callbackUrl>/fulfillment_order_notification` endpoint
  to notify the fulfillment service about fulfillment requests and fulfillment cancellation requests.

  For more information, refer to
  [Receive fulfillment requests and cancellations](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
- Shopify sends GET requests to the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers for orders,
  if `trackingSupport` is set to `true`.

  For more information, refer to
  [Enable tracking support](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-8-enable-tracking-support-optional).

  Fulfillment services can also update tracking information with the
  [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentTrackingInfoUpdate) mutation,
  rather than waiting for Shopify to ask for tracking numbers.
- Shopify sends GET requests to the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
  if `inventoryManagement` is set to `true`.

  For more information, refer to
  [Sharing inventory levels with Shopify](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-9-share-inventory-levels-with-shopify-optional).

To make sure you have everything set up correctly, you can test the `callbackUrl`-prefixed endpoints
in your development store.

## Resources and webhooks

There are a variety of objects and webhooks that enable a fulfillment service to work.
To exchange fulfillment information with Shopify, fulfillment services use the
[FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder),
[Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment) and
[Order](https://shopify.dev/api/admin-graphql/latest/objects/Order) objects and related mutations.
To act on fulfillment process events that happen on the Shopify side,
besides awaiting calls to `callbackUrl`-prefixed endpoints,
fulfillment services can subscribe to the
[fulfillment order](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
and [order](https://shopify.dev/api/admin-rest/latest/resources/webhook)
webhooks.
"""
type FulfillmentService {
  """
  The callback URL that the fulfillment service has registered for requests. The following considerations apply:

  - Shopify queries the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers
      for orders, if `trackingSupport` is set to `true`.
  - Shopify queries the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
      if `inventoryManagement` is set to `true`.
  - Shopify uses the `<callbackUrl>/fulfillment_order_notification` endpoint to send
      [fulfillment and cancellation requests](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations),
      if the fulfillment service has opted in to the fulfillment order based workflow for managing fulfillments
      (`fulfillmentOrdersOptIn` is set to `true`).
  """
  callbackUrl: URL

  """
  Whether the fulfillment service uses the [fulfillment order based workflow](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments)
  for managing fulfillments.

  As the migration is now finished, the `fulfillmentOrdersOptIn` property is [deprecated](
  https://shopify.dev/changelog/deprecation-of-the-fulfillmentservice-fulfillmentordersoptin-field)
  and is always set to `true` on correctly functioning fulfillment services.
  """
  fulfillmentOrdersOptIn: Boolean! @deprecated(reason: "Migration period ended. All correctly functioning fulfillment services have `fulfillmentOrdersOptIn` set to `true`.")

  """
  Human-readable unique identifier for this fulfillment service.
  """
  handle: String!

  """
  The ID of the fulfillment service.
  """
  id: ID!

  """
  Whether the fulfillment service tracks product inventory and provides updates to Shopify.
  """
  inventoryManagement: Boolean!

  """
  Location associated with the fulfillment service.
  """
  location: Location

  """
  Whether the fulfillment service can stock inventory alongside other locations.
  """
  permitsSkuSharing: Boolean!

  """
  The name of the fulfillment service as seen by merchants.
  """
  serviceName: String!

  """
  Whether the fulfillment service implemented the /fetch_tracking_numbers endpoint.
  """
  trackingSupport: Boolean!

  """
  Type associated with the fulfillment service.
  """
  type: FulfillmentServiceType!
}

"""
The type of a fulfillment service.
"""
enum FulfillmentServiceType {
  """
  Fulfillment by gift card.
  """
  GIFT_CARD

  """
  Manual fulfillment by the merchant.
  """
  MANUAL

  """
  Fullfillment by a third-party fulfillment service.
  """
  THIRD_PARTY
}

"""
The status of a fulfillment.
"""
enum FulfillmentStatus {
  """
  The fulfillment was canceled.
  """
  CANCELLED

  """
  There was an error with the fulfillment request.
  """
  ERROR

  """
  The fulfillment request failed.
  """
  FAILURE

  """
  The third-party fulfillment service has acknowledged the fulfillment and is processing it.
  """
  OPEN @deprecated(reason: "This is a legacy status and is due to be deprecated.")

  """
  Shopify has created the fulfillment and is waiting for the third-party
  fulfillment service to transition it to `open` or `success`.
  """
  PENDING @deprecated(reason: "This is a legacy status and is due to be deprecated.")

  """
  The fulfillment was completed successfully.
  """
  SUCCESS
}

"""
Represents the tracking information for a fulfillment.
"""
type FulfillmentTrackingInfo {
  """
  The name of the tracking company.

  For tracking company names from the list below
  Shopify will automatically build tracking URLs for all provided tracking numbers,
  which will make the tracking numbers clickable in the interface.

  Additionally, for the tracking companies listed on the
  [Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
  Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.

  ### Supported tracking companies

  The following tracking companies display for shops located in any country:

    * 4PX
    * AGS
    * Amazon
    * Amazon Logistics UK
    * An Post
    * Anjun Logistics
    * APC
    * Asendia USA
    * Australia Post
    * Bonshaw
    * BPost
    * BPost International
    * Canada Post
    * Canpar
    * CDL Last Mile
    * China Post
    * Chronopost
    * Chukou1
    * Colissimo
    * Comingle
    * Coordinadora
    * Correios
    * Correos
    * CTT
    * CTT Express
    * Cyprus Post
    * Delnext
    * Deutsche Post
    * DHL eCommerce
    * DHL eCommerce Asia
    * DHL Express
    * DPD
    * DPD Local
    * DPD UK
    * DTD Express
    * DX
    * Eagle
    * Estes
    * Evri
    * FedEx
    * First Global Logistics
    * First Line
    * FSC
    * Fulfilla
    * GLS
    * Guangdong Weisuyi Information Technology (WSE)
    * Heppner Internationale Spedition GmbH & Co.
    * Iceland Post
    * IDEX
    * Israel Post
    * Japan Post (EN)
    * Japan Post (JA)
    * La Poste
    * Lasership
    * Latvia Post
    * Lietuvos Paštas
    * Logisters
    * Lone Star Overnight
    * M3 Logistics
    * Meteor Space
    * Mondial Relay
    * New Zealand Post
    * NinjaVan
    * North Russia Supply Chain (Shenzhen) Co.
    * OnTrac
    * Packeta
    * Pago Logistics
    * Ping An Da Tengfei Express
    * Pitney Bowes
    * Portal PostNord
    * Poste Italiane
    * PostNL
    * PostNord DK
    * PostNord NO
    * PostNord SE
    * Purolator
    * Qxpress
    * Qyun Express
    * Royal Mail
    * Royal Shipments
    * Sagawa (EN)
    * Sagawa (JA)
    * Sendle
    * SF Express
    * SFC Fulfillment
    * SHREE NANDAN COURIER
    * Singapore Post
    * Southwest Air Cargo
    * StarTrack
    * Step Forward Freight
    * Swiss Post
    * TForce Final Mile
    * Tinghao
    * TNT
    * Toll IPEC
    * United Delivery Service
    * UPS
    * USPS
    * Venipak
    * We Post
    * Whistl
    * Wizmo
    * WMYC
    * Xpedigo
    * XPO Logistics
    * Yamato (EN)
    * Yamato (JA)
    * YiFan Express
    * YunExpress

  The following tracking companies are displayed for shops located in specific countries:

    * **Australia**: Australia Post, Sendle, Aramex Australia, TNT Australia,
  Hunter Express, Couriers Please, Bonds, Allied Express, Direct Couriers,
  Northline, GO Logistics
    * **Austria**: Österreichische Post
    * **Bulgaria**: Speedy
    * **Canada**: Intelcom, BoxKnight, Loomis, GLS
    * **China**: China Post, DHL eCommerce Asia, WanbExpress, YunExpress, Anjun Logistics, SFC Fulfillment, FSC
    * **Czechia**: Zásilkovna
    * **Germany**: Deutsche Post (DE), Deutsche Post (EN), DHL, DHL Express, Swiship, Hermes, GLS
    * **Spain**: SEUR
    * **France**: Colissimo, Mondial Relay, Colis Privé, GLS
    * **United Kingdom**: Evri, DPD UK, Parcelforce, Yodel, DHL Parcel, Tuffnells
    * **Greece**: ACS Courier
    * **Hong Kong SAR**: SF Express
    * **Ireland**: Fastway, DPD Ireland
    * **India**: DTDC, India Post, Delhivery, Gati KWE, Professional Couriers,
  XpressBees, Ecom Express, Ekart, Shadowfax, Bluedart
    * **Italy**: BRT, GLS Italy
    * **Japan**: エコ配, 西濃運輸, 西濃スーパーエキスプレス, 福山通運, 日本通運, 名鉄運輸, 第一貨物
    * **Netherlands**: DHL Parcel, DPD
    * **Norway**: Bring
    * **Poland**: Inpost
    * **Turkey**: PTT, Yurtiçi Kargo, Aras Kargo, Sürat Kargo
    * **United States**: GLS, Alliance Air Freight, Pilot Freight, LSO, Old
  Dominion, Pandion, R+L Carriers, Southwest Air Cargo
    * **South Africa**: Fastway, Skynet.
  """
  company: String

  """
  The tracking number of the fulfillment.

  The tracking number is clickable in the interface if one of the following applies
  (the highest in the list has the highest priority):

  * Tracking url provided in the `url` field.
  * [Shopify-known tracking company name](#supported-tracking-companies) specified in the `company` field.
    Shopify will build the tracking URL automatically based on the tracking number specified.
  * The tracking number has a Shopify-known format.
    Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
    Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
    This can result in an invalid tracking URL.
    It is highly recommended that you send the tracking company and the tracking URL.
  """
  number: String

  """
  The URLs to track the fulfillment.

  The tracking URL is displayed in the merchant's admin on the order page.
  The tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.
  When accounts are enabled, it's also displayed in the customer's order history.
  """
  url: URL
}

"""
The App Bridge information for a Shopify Function.
"""
type FunctionsAppBridge {
  """
  The relative path for creating a customization.
  """
  createPath: String!

  """
  The relative path for viewing a customization.
  """
  detailsPath: String!
}

"""
The error history from running a Shopify Function.
"""
type FunctionsErrorHistory {
  """
  The date and time that the first error occurred.
  """
  errorsFirstOccurredAt: DateTime!

  """
  The date and time that the first error occurred.
  """
  firstOccurredAt: DateTime!

  """
  Whether the merchant has shared all the recent errors with the developer.
  """
  hasBeenSharedSinceLastError: Boolean!

  """
  Whether the merchant has shared all the recent errors with the developer.
  """
  hasSharedRecentErrors: Boolean!
}

"""
Represents any file other than HTML.
"""
type GenericFile implements File & Node {
  """
  A word or phrase to describe the contents or the function of a file.
  """
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """
  Any errors that have occurred on the file.
  """
  fileErrors: [FileError!]!

  """
  The status of the file.
  """
  fileStatus: FileStatus!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The generic file's MIME type.
  """
  mimeType: String

  """
  The generic file's size in bytes.
  """
  originalFileSize: Int

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
  """
  updatedAt: DateTime!

  """
  The generic file's URL.
  """
  url: URL
}

"""
Represents an issued gift card.
"""
type GiftCard implements Node {
  """
  The gift card's remaining balance.
  """
  balance: MoneyV2!

  """
  The date and time at which the gift card was created.
  """
  createdAt: DateTime!

  """
  The customer who will receive the gift card.
  """
  customer: Customer

  """
  The date and time at which the gift card was deactivated.
  """
  deactivatedAt: DateTime

  """
  Whether the gift card is enabled.
  """
  enabled: Boolean!

  """
  The date at which the gift card will expire.
  """
  expiresOn: Date

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The initial value of the gift card.
  """
  initialValue: MoneyV2!

  """
  The final four characters of the gift card code.
  """
  lastCharacters: String!

  """
  The gift card code. Everything but the final four characters is masked.
  """
  maskedCode: String!

  """
  The note associated with the gift card, which isn't visible to the customer.
  """
  note: String

  """
  The order associated with the gift card. This value is `null` if the gift card was issued manually.
  """
  order: Order

  """
  The recipient who will receive the gift card.
  """
  recipientAttributes: GiftCardRecipient

  """
  The theme template used to render the gift card online.
  """
  templateSuffix: String

  """
  The transaction history of the gift card.
  """
  transactions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): GiftCardTransactionConnection

  """
  The date and time at which the gift card was updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple GiftCards.
"""
type GiftCardConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [GiftCardEdge!]!

  """
  A list of nodes that are contained in GiftCardEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [GiftCard!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
A credit transaction which increases the gift card balance.
"""
type GiftCardCreditTransaction implements GiftCardTransaction & HasMetafields & Node {
  """
  The amount of the transaction.
  """
  amount: MoneyV2!

  """
  The gift card that the transaction belongs to.
  """
  giftCard: GiftCard!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  A note about the transaction.
  """
  note: String

  """
  The date and time when the transaction was processed.
  """
  processedAt: DateTime!
}

"""
A debit transaction which decreases the gift card balance.
"""
type GiftCardDebitTransaction implements GiftCardTransaction & HasMetafields & Node {
  """
  The amount of the transaction.
  """
  amount: MoneyV2!

  """
  The gift card that the transaction belongs to.
  """
  giftCard: GiftCard!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  A note about the transaction.
  """
  note: String

  """
  The date and time when the transaction was processed.
  """
  processedAt: DateTime!
}

"""
An auto-generated type which holds one GiftCard and a cursor during pagination.
"""
type GiftCardEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of GiftCardEdge.
  """
  node: GiftCard!
}

"""
Represents a recipient who will receive the issued gift card.
"""
type GiftCardRecipient {
  """
  The message sent with the gift card.
  """
  message: String

  """
  The preferred name of the recipient who will receive the gift card.
  """
  preferredName: String

  """
  The recipient who will receive the gift card.
  """
  recipient: Customer!

  """
  The scheduled datetime on which the gift card will be sent to the recipient.
  The gift card will be sent within an hour of the specified datetime.
  """
  sendNotificationAt: DateTime
}

"""
A sale associated with a gift card.
"""
type GiftCardSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique ID for the sale.
  """
  id: ID!

  """
  The line item for the associated sale.
  """
  lineItem: LineItem!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
The set of valid sort keys for the GiftCard query.
"""
enum GiftCardSortKeys {
  """
  Sort by the `amount_spent` value.
  """
  AMOUNT_SPENT

  """
  Sort by the `balance` value.
  """
  BALANCE

  """
  Sort by the `code` value.
  """
  CODE

  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `customer_name` value.
  """
  CUSTOMER_NAME

  """
  Sort by the `disabled_at` value.
  """
  DISABLED_AT

  """
  Sort by the `expires_on` value.
  """
  EXPIRES_ON

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `initial_value` value.
  """
  INITIAL_VALUE

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
Represents information about the metafields associated to the specified resource.
"""
interface GiftCardTransaction implements HasMetafields {
  """
  The amount of the transaction.
  """
  amount: MoneyV2!

  """
  The gift card that the transaction belongs to.
  """
  giftCard: GiftCard!

  """
  The unique ID for the transaction.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  A note about the transaction.
  """
  note: String

  """
  The date and time when the transaction was processed.
  """
  processedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple GiftCardTransactions.
"""
type GiftCardTransactionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [GiftCardTransactionEdge!]!

  """
  A list of nodes that are contained in GiftCardTransactionEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [GiftCardTransaction!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one GiftCardTransaction and a cursor during pagination.
"""
type GiftCardTransactionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of GiftCardTransactionEdge.
  """
  node: GiftCardTransaction!
}

"""
A string containing HTML code. Refer to the [HTML spec](https://html.spec.whatwg.org/#elements-3) for a
complete list of HTML elements.

Example value: `"<p>Grey cotton knit sweater.</p>"`
"""
scalar HTML

"""
Represents a summary of the current version of data in a resource.

The `compare_digest` field can be used as input for mutations that implement a compare-and-swap mechanism.
"""
interface HasCompareDigest {
  """
  The data stored in the resource, represented as a digest.
  """
  compareDigest: String!
}

"""
Represents an object that has a list of events.
"""
interface HasEvents {
  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!
}

"""
Localization extensions associated with the specified resource. For example, the tax id for government invoice.
"""
interface HasLocalizationExtensions {
  """
  List of localization extensions for the resource.
  """
  localizationExtensions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The country codes of the extensions.
    """
    countryCodes: [CountryCode!]

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The purpose of the extensions.
    """
    purposes: [LocalizationExtensionPurpose!]

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): LocalizationExtensionConnection! @deprecated(reason: "This connection will be removed in a future version. Use `localizedFields` instead.")
}

"""
Localized fields associated with the specified resource.
"""
interface HasLocalizedFields {
  """
  List of localized fields for the resource.
  """
  localizedFields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The country codes of the extensions.
    """
    countryCodes: [CountryCode!]

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The purpose of the extensions.
    """
    purposes: [LocalizedFieldPurpose!]

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): LocalizedFieldConnection!
}

"""
Resources that metafield definitions can be applied to.
"""
interface HasMetafieldDefinitions {
  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")
}

"""
Represents information about the metafields associated to the specified resource.
"""
interface HasMetafields {
  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!
}

"""
Published translations associated with the resource.
"""
interface HasPublishedTranslations {
  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!
}

"""
Represents information about the store credit accounts associated to the specified owner.
"""
interface HasStoreCreditAccounts {
  """
  Returns a list of store credit accounts that belong to the owner resource.
  A store credit account owner can hold multiple accounts each with a different currency.
  """
  storeCreditAccounts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | currency_code | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String
  ): StoreCreditAccountConnection!
}

"""
Represents a unique identifier, often used to refetch an object.
The ID type appears in a JSON response as a String, but it is not intended to be human-readable.

Example value: `"gid://shopify/Product/10079785100"`
"""
scalar ID

"""
Represents an image resource.
"""
type Image implements HasMetafields {
  """
  A word or phrase to share the nature or contents of an image.
  """
  altText: String

  """
  The original height of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
  """
  height: Int

  """
  A unique ID for the image.
  """
  id: ID

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The location of the original image as a URL.

  If there are any existing transformations in the original source URL, they will remain and not be stripped.
  """
  originalSrc: URL! @deprecated(reason: "Use `url` instead.")

  """
  The location of the image as a URL.
  """
  src: URL! @deprecated(reason: "Use `url` instead.")

  """
  The location of the transformed image as a URL.

  All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
  Otherwise any transformations which an image type doesn't support will be ignored.
  """
  transformedSrc(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion

    """
    Image height in pixels between 1 and 5760.
    """
    maxHeight: Int

    """
    Image width in pixels between 1 and 5760.
    """
    maxWidth: Int

    """
    Best effort conversion of image into content type (SVG -> PNG, Anything -> JPG, Anything -> WEBP are supported).
    """
    preferredContentType: ImageContentType

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1
  ): URL! @deprecated(reason: "Use `url(transform:)` instead")

  """
  The location of the image as a URL.

  If no transform options are specified, then the original image will be preserved including any pre-applied transforms.

  All transformation options are considered "best-effort". Any transformation
  that the original image type doesn't support will be ignored.

  If you need multiple variations of the same image, then you can use [GraphQL
  aliases](https://graphql.org/learn/queries/#aliases).
  """
  url(
    """
    A set of options to transform the original image.
    """
    transform: ImageTransformInput
  ): URL!

  """
  The original width of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
  """
  width: Int
}

"""
An auto-generated type for paginating through multiple Images.
"""
type ImageConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ImageEdge!]!

  """
  A list of nodes that are contained in ImageEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Image!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
List of supported image content types.
"""
enum ImageContentType {
  """
  A JPG image.
  """
  JPG

  """
  A PNG image.
  """
  PNG

  """
  A WEBP image.
  """
  WEBP
}

"""
An auto-generated type which holds one Image and a cursor during pagination.
"""
type ImageEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ImageEdge.
  """
  node: Image!
}

"""
The available options for transforming an image.

All transformation options are considered best effort. Any transformation that
the original image type doesn't support will be ignored.
"""
input ImageTransformInput {
  """
  The region of the image to remain after cropping.
  Must be used in conjunction with the `maxWidth` and/or `maxHeight` fields,
  where the `maxWidth` and `maxHeight` aren't equal.
  The `crop` argument should coincide with the smaller value. A smaller `maxWidth` indicates a `LEFT` or `RIGHT` crop, while
  a smaller `maxHeight` indicates a `TOP` or `BOTTOM` crop. For example, `{
  maxWidth: 5, maxHeight: 10, crop: LEFT }` will result
  in an image with a width of 5 and height of 10, where the right side of the image is removed.
  """
  crop: CropRegion

  """
  Image height in pixels between 1 and 5760.
  """
  maxHeight: Int

  """
  Image width in pixels between 1 and 5760.
  """
  maxWidth: Int

  """
  Convert the source image into the preferred content type.
  Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
  """
  preferredContentType: ImageContentType

  """
  Image size multiplier for high-resolution retina displays. Must be within 1..3.
  """
  scale: Int = 1
}

"""
Represents a group of adjustments made as part of the same operation.
"""
type InventoryAdjustmentGroup implements Node {
  """
  The app that triggered the inventory event, if one exists.
  """
  app: App

  """
  The set of inventory quantity changes that occurred in the inventory event.
  """
  changes(
    """
    The IDs of the inventory items to filter changes by.
    """
    inventoryItemIds: [ID!]

    """
    The IDs of the locations to filter changes by.
    """
    locationIds: [ID!]

    """
    The [names](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
    of the requested inventory quantities.
    """
    quantityNames: [String!]
  ): [InventoryChange!]!

  """
  The date and time the inventory adjustment group was created.
  """
  createdAt: DateTime!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The reason for the group of adjustments.
  """
  reason: String!

  """
  A freeform URI that represents why the inventory change happened. This can be the entity adjusting inventory
  quantities or the Shopify resource that's associated with the inventory adjustment. For example, a unit in a
  draft order might have been previously reserved, and a merchant later creates an order from the draft order.
  In this case, the `referenceDocumentUri` for the inventory adjustment is a URI referencing the order ID.
  """
  referenceDocumentUri: String

  """
  The staff member associated with the inventory event.
  """
  staffMember: StaffMember
}

"""
Represents a change in an inventory quantity of an inventory item at a location.
"""
type InventoryChange {
  """
  The amount by which the inventory quantity was changed.
  """
  delta: Int!

  """
  The inventory item associated with this inventory change.
  """
  item: InventoryItem

  """
  A URI that represents what the inventory quantity change was applied to.
  """
  ledgerDocumentUri: String

  """
  The location associated with this inventory change.
  """
  location: Location

  """
  The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
  of the inventory quantity that was changed.
  """
  name: String!

  """
  The quantity of named inventory after the change.
  """
  quantityAfterChange: Int
}

"""
Represents the goods available to be shipped to a customer.
It holds essential information about the goods, including SKU and whether it is tracked.
Learn [more about the relationships between inventory objects](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states#inventory-object-relationships).
"""
type InventoryItem implements LegacyInteroperability & Node {
  """
  The ISO 3166-1 alpha-2 country code of where the item originated from.
  """
  countryCodeOfOrigin: CountryCode

  """
  A list of country specific harmonized system codes.
  """
  countryHarmonizedSystemCodes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CountryHarmonizedSystemCodeConnection!

  """
  The date and time when the inventory item was created.
  """
  createdAt: DateTime!

  """
  The number of inventory items that share the same SKU with this item.
  """
  duplicateSkuCount: Int!

  """
  The harmonized system code of the item.
  """
  harmonizedSystemCode: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The URL that points to the inventory history for the item.
  """
  inventoryHistoryUrl: URL

  """
  The inventory item's quantities at the specified location.
  """
  inventoryLevel(
    """
    ID of the location for which the inventory level is requested.
    """
    locationId: ID!
  ): InventoryLevel

  """
  A list of the inventory item's quantities for each location that the inventory item can be stocked at.
  """
  inventoryLevels(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | inventory_group_id | id |
    | inventory_item_id | id |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): InventoryLevelConnection!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The number of locations where this inventory item is stocked.
  """
  locationsCount: Count

  """
  The packaging dimensions of the inventory item.
  """
  measurement: InventoryItemMeasurement!

  """
  The ISO 3166-2 alpha-2 province code of where the item originated from.
  """
  provinceCodeOfOrigin: String

  """
  Whether the inventory item requires shipping.
  """
  requiresShipping: Boolean!

  """
  Inventory item SKU. Case-sensitive string.
  """
  sku: String

  """
  Whether inventory levels are tracked for the item.
  """
  tracked: Boolean!

  """
  Whether the value of the `tracked` field for the inventory item can be changed.
  """
  trackedEditable: EditableProperty!

  """
  Unit cost associated with the inventory item. Note: the user must have "View
  product costs" permission granted in order to access this field once product
  granular permissions are enabled.
  """
  unitCost: MoneyV2

  """
  The date and time when the inventory item was updated.
  """
  updatedAt: DateTime!

  """
  The variant that owns this inventory item.
  """
  variant: ProductVariant!
}

"""
An auto-generated type for paginating through multiple InventoryItems.
"""
type InventoryItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [InventoryItemEdge!]!

  """
  A list of nodes that are contained in InventoryItemEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [InventoryItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one InventoryItem and a cursor during pagination.
"""
type InventoryItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of InventoryItemEdge.
  """
  node: InventoryItem!
}

"""
Represents the packaged dimension for an inventory item.
"""
type InventoryItemMeasurement implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The weight of the inventory item.
  """
  weight: Weight
}

"""
The quantities of an inventory item that are related to a specific location.
Learn [more about the relationships between inventory objects](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states#inventory-object-relationships).
"""
type InventoryLevel implements Node {
  """
  Whether the inventory items associated with the inventory level can be deactivated.
  """
  canDeactivate: Boolean!

  """
  The date and time when the inventory level was created.
  """
  createdAt: DateTime!

  """
  Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated.
  """
  deactivationAlert: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Inventory item associated with the inventory level.
  """
  item: InventoryItem!

  """
  The location associated with the inventory level.
  """
  location: Location!

  """
  Quantities for the requested names.
  """
  quantities(
    """
    The
    [names](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
    of the requested inventory quantities.
    """
    names: [String!]!
  ): [InventoryQuantity!]!

  """
  Scheduled changes for the requested quantity names.
  """
  scheduledChanges(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | expected_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | quantity_names | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ScheduledChangeSortKeys = ID
  ): InventoryScheduledChangeConnection!

  """
  The date and time when the inventory level was updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple InventoryLevels.
"""
type InventoryLevelConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [InventoryLevelEdge!]!

  """
  A list of nodes that are contained in InventoryLevelEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [InventoryLevel!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one InventoryLevel and a cursor during pagination.
"""
type InventoryLevelEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of InventoryLevelEdge.
  """
  node: InventoryLevel!
}

"""
General inventory properties for the shop.
"""
type InventoryProperties {
  """
  All the quantity names.
  """
  quantityNames: [InventoryQuantityName!]!
}

"""
Represents a quantity of an inventory item at a specific location, for a specific name.
"""
type InventoryQuantity implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
  that identifies the inventory quantity.
  """
  name: String!

  """
  The quantity for the quantity name.
  """
  quantity: Int!

  """
  When the quantity was last updated.
  """
  updatedAt: DateTime
}

"""
Details about an individual quantity name.
"""
type InventoryQuantityName {
  """
  List of quantity names that this quantity name belongs to.
  """
  belongsTo: [String!]!

  """
  List of quantity names that comprise this quantity name.
  """
  comprises: [String!]!

  """
  The display name for quantity names translated into applicable language.
  """
  displayName: String

  """
  Whether the quantity name has been used by the merchant.
  """
  isInUse: Boolean!

  """
  The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states) of
  the inventory quantity. Used by
  [inventory queries and mutations](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#graphql-queries-and-mutations).
  """
  name: String!
}

"""
Returns the scheduled changes to inventory states related to the ledger document.
"""
type InventoryScheduledChange {
  """
  The date and time that the scheduled change is expected to happen.
  """
  expectedAt: DateTime!

  """
  The quantity
  [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
  to transition from.
  """
  fromName: String!

  """
  The quantities of an inventory item that are related to a specific location.
  """
  inventoryLevel: InventoryLevel!

  """
  A freeform URI that represents what changed the inventory quantities.
  """
  ledgerDocumentUri: URL!

  """
  The quantity of the scheduled change associated with the ledger document in the `fromName` state.
  """
  quantity: Int!

  """
  The quantity
  [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
  to transition to.
  """
  toName: String!
}

"""
An auto-generated type for paginating through multiple InventoryScheduledChanges.
"""
type InventoryScheduledChangeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [InventoryScheduledChangeEdge!]!

  """
  A list of nodes that are contained in InventoryScheduledChangeEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [InventoryScheduledChange!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one InventoryScheduledChange and a cursor during pagination.
"""
type InventoryScheduledChangeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of InventoryScheduledChangeEdge.
  """
  node: InventoryScheduledChange!
}

"""
A [JSON](https://www.json.org/json-en.html) object.

Example value:
`{
  "product": {
    "id": "gid://shopify/Product/1346443542550",
    "title": "White T-shirt",
    "options": [{
      "name": "Size",
      "values": ["M", "L"]
    }]
  }
}`
"""
scalar JSON

"""
A job corresponds to some long running task that the client should poll for status.
"""
type Job {
  """
  This indicates if the job is still queued or has been run.
  """
  done: Boolean!

  """
  A globally-unique ID that's returned when running an asynchronous mutation.
  """
  id: ID!

  """
  This field will only resolve once the job is done. Can be used to ask for object(s) that have been changed by the job.
  """
  query: QueryRoot
}

"""
A job corresponds to some long running task that the client should poll for status.
"""
interface JobResult {
  """
  This indicates if the job is still queued or has been run.
  """
  done: Boolean!

  """
  A globally-unique ID that's returned when running an asynchronous mutation.
  """
  id: ID!
}

"""
Language codes supported by Shopify.
"""
enum LanguageCode {
  """
  Afrikaans.
  """
  AF

  """
  Akan.
  """
  AK

  """
  Amharic.
  """
  AM

  """
  Arabic.
  """
  AR

  """
  Assamese.
  """
  AS

  """
  Azerbaijani.
  """
  AZ

  """
  Belarusian.
  """
  BE

  """
  Bulgarian.
  """
  BG

  """
  Bambara.
  """
  BM

  """
  Bangla.
  """
  BN

  """
  Tibetan.
  """
  BO

  """
  Breton.
  """
  BR

  """
  Bosnian.
  """
  BS

  """
  Catalan.
  """
  CA

  """
  Chechen.
  """
  CE

  """
  Central Kurdish.
  """
  CKB

  """
  Czech.
  """
  CS

  """
  Church Slavic.
  """
  CU

  """
  Welsh.
  """
  CY

  """
  Danish.
  """
  DA

  """
  German.
  """
  DE

  """
  Dzongkha.
  """
  DZ

  """
  Ewe.
  """
  EE

  """
  Greek.
  """
  EL

  """
  English.
  """
  EN

  """
  Esperanto.
  """
  EO

  """
  Spanish.
  """
  ES

  """
  Estonian.
  """
  ET

  """
  Basque.
  """
  EU

  """
  Persian.
  """
  FA

  """
  Fulah.
  """
  FF

  """
  Finnish.
  """
  FI

  """
  Filipino.
  """
  FIL

  """
  Faroese.
  """
  FO

  """
  French.
  """
  FR

  """
  Western Frisian.
  """
  FY

  """
  Irish.
  """
  GA

  """
  Scottish Gaelic.
  """
  GD

  """
  Galician.
  """
  GL

  """
  Gujarati.
  """
  GU

  """
  Manx.
  """
  GV

  """
  Hausa.
  """
  HA

  """
  Hebrew.
  """
  HE

  """
  Hindi.
  """
  HI

  """
  Croatian.
  """
  HR

  """
  Hungarian.
  """
  HU

  """
  Armenian.
  """
  HY

  """
  Interlingua.
  """
  IA

  """
  Indonesian.
  """
  ID

  """
  Igbo.
  """
  IG

  """
  Sichuan Yi.
  """
  II

  """
  Icelandic.
  """
  IS

  """
  Italian.
  """
  IT

  """
  Japanese.
  """
  JA

  """
  Javanese.
  """
  JV

  """
  Georgian.
  """
  KA

  """
  Kikuyu.
  """
  KI

  """
  Kazakh.
  """
  KK

  """
  Kalaallisut.
  """
  KL

  """
  Khmer.
  """
  KM

  """
  Kannada.
  """
  KN

  """
  Korean.
  """
  KO

  """
  Kashmiri.
  """
  KS

  """
  Kurdish.
  """
  KU

  """
  Cornish.
  """
  KW

  """
  Kyrgyz.
  """
  KY

  """
  Luxembourgish.
  """
  LB

  """
  Ganda.
  """
  LG

  """
  Lingala.
  """
  LN

  """
  Lao.
  """
  LO

  """
  Lithuanian.
  """
  LT

  """
  Luba-Katanga.
  """
  LU

  """
  Latvian.
  """
  LV

  """
  Malagasy.
  """
  MG

  """
  Māori.
  """
  MI

  """
  Macedonian.
  """
  MK

  """
  Malayalam.
  """
  ML

  """
  Mongolian.
  """
  MN

  """
  Marathi.
  """
  MR

  """
  Malay.
  """
  MS

  """
  Maltese.
  """
  MT

  """
  Burmese.
  """
  MY

  """
  Norwegian (Bokmål).
  """
  NB

  """
  North Ndebele.
  """
  ND

  """
  Nepali.
  """
  NE

  """
  Dutch.
  """
  NL

  """
  Norwegian Nynorsk.
  """
  NN

  """
  Norwegian.
  """
  NO

  """
  Oromo.
  """
  OM

  """
  Odia.
  """
  OR

  """
  Ossetic.
  """
  OS

  """
  Punjabi.
  """
  PA

  """
  Polish.
  """
  PL

  """
  Pashto.
  """
  PS

  """
  Portuguese.
  """
  PT

  """
  Portuguese (Brazil).
  """
  PT_BR

  """
  Portuguese (Portugal).
  """
  PT_PT

  """
  Quechua.
  """
  QU

  """
  Romansh.
  """
  RM

  """
  Rundi.
  """
  RN

  """
  Romanian.
  """
  RO

  """
  Russian.
  """
  RU

  """
  Kinyarwanda.
  """
  RW

  """
  Sanskrit.
  """
  SA

  """
  Sardinian.
  """
  SC

  """
  Sindhi.
  """
  SD

  """
  Northern Sami.
  """
  SE

  """
  Sango.
  """
  SG

  """
  Sinhala.
  """
  SI

  """
  Slovak.
  """
  SK

  """
  Slovenian.
  """
  SL

  """
  Shona.
  """
  SN

  """
  Somali.
  """
  SO

  """
  Albanian.
  """
  SQ

  """
  Serbian.
  """
  SR

  """
  Sundanese.
  """
  SU

  """
  Swedish.
  """
  SV

  """
  Swahili.
  """
  SW

  """
  Tamil.
  """
  TA

  """
  Telugu.
  """
  TE

  """
  Tajik.
  """
  TG

  """
  Thai.
  """
  TH

  """
  Tigrinya.
  """
  TI

  """
  Turkmen.
  """
  TK

  """
  Tongan.
  """
  TO

  """
  Turkish.
  """
  TR

  """
  Tatar.
  """
  TT

  """
  Uyghur.
  """
  UG

  """
  Ukrainian.
  """
  UK

  """
  Urdu.
  """
  UR

  """
  Uzbek.
  """
  UZ

  """
  Vietnamese.
  """
  VI

  """
  Volapük.
  """
  VO

  """
  Wolof.
  """
  WO

  """
  Xhosa.
  """
  XH

  """
  Yiddish.
  """
  YI

  """
  Yoruba.
  """
  YO

  """
  Chinese.
  """
  ZH

  """
  Chinese (Simplified).
  """
  ZH_CN

  """
  Chinese (Traditional).
  """
  ZH_TW

  """
  Zulu.
  """
  ZU
}

"""
Interoperability metadata for types that directly correspond to a REST Admin API resource.
For example, on the Product type, LegacyInteroperability returns metadata for
the corresponding [Product
object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the
REST Admin API.
"""
interface LegacyInteroperability {
  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!
}

"""
The total number of pending orders on a shop if less then a maximum, or that maximum.
The atMax field indicates when this maximum has been reached.
"""
type LimitedPendingOrderCount {
  """
  This is set when the number of pending orders has reached the maximum.
  """
  atMax: Boolean!

  """
  The number of pendings orders on the shop.
  Limited to a maximum of 10000.
  """
  count: Int!
}

"""
Represents individual products and quantities purchased in the associated order.
"""
type LineItem implements Node {
  """
  Whether the line item can be restocked.
  """
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead.")

  """
  The subscription contract associated with this line item.
  """
  contract: SubscriptionContract

  """
  The number of units ordered, excluding refunded and removed units.
  """
  currentQuantity: Int!

  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The discounts that have been allocated to the line item by discount
  applications, including discounts allocated to refunded and removed quantities.
  """
  discountAllocations: [DiscountAllocation!]!

  """
  The total discounted price of the line item in shop currency, including
  refunded and removed quantities. This value doesn't include order-level discounts.
  """
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead.")

  """
  The total discounted price of the line item in shop and presentment
  currencies, including refunded and removed quantities. This value doesn't
  include order-level discounts. Code-based discounts aren't included by default.
  """
  discountedTotalSet(
    """
    Whether to include code-based discounts in the total.
    """
    withCodeDiscounts: Boolean = false
  ): MoneyBag!

  """
  The approximate unit price of the line item in shop currency. This value
  includes line-level discounts and discounts applied to refunded and removed
  quantities. It doesn't include order-level or code-based discounts.
  """
  discountedUnitPrice: Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead.")

  """
  The approximate unit price of the line item in shop and presentment
  currencies. This value includes discounts applied to refunded and removed quantities.
  """
  discountedUnitPriceAfterAllDiscountsSet: MoneyBag!

  """
  The approximate unit price of the line item in shop and presentment
  currencies. This value includes line-level discounts and discounts applied to
  refunded and removed quantities. It doesn't include order-level or code-based discounts.
  """
  discountedUnitPriceSet: MoneyBag!

  """
  The duties associated with the line item.
  """
  duties: [Duty!]!

  """
  The total number of units to fulfill.
  """
  fulfillableQuantity: Int! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead.")

  """
  The fulfillment service that stocks the product variant belonging to a line item.

  This is a third-party fulfillment service in the following scenarios:

  **Scenario 1**
  - The product variant is stocked by a single fulfillment service.
  - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService)
  is a third-party fulfillment service. Third-party fulfillment services don't
  have a handle with the value `manual`.

  **Scenario 2**
  - Multiple fulfillment services stock the product variant.
  - The last time that the line item was unfulfilled, it was awaiting
  fulfillment by a third-party fulfillment service. Third-party fulfillment
  services don't have a handle with the value `manual`.

  If none of the above conditions are met, then the fulfillment service has the `manual` handle.
  """
  fulfillmentService: FulfillmentService @deprecated(reason: "\nThe [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [inventoryItem field](/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryitem) if you need to determine where a product variant is stocked.\n\nIf you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available.\n\nAltering the locations which stock a product variant won't change the value of this field for existing orders.\n\nLearn about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states).\n")

  """
  The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
  'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
  """
  fulfillmentStatus: String! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead")

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The image associated to the line item's variant.
  """
  image(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1 @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  Whether the line item represents the purchase of a gift card.
  """
  isGiftCard: Boolean!

  """
  The line item group associated to the line item.
  """
  lineItemGroup: LineItemGroup

  """
  Whether the line item can be edited or not.
  """
  merchantEditable: Boolean!

  """
  The title of the product, optionally appended with the title of the variant (if applicable).
  """
  name: String!

  """
  The total number of units that can't be fulfilled. For example, if items have
  been refunded, or the item is not something that can be fulfilled, like a tip. Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder)
  object for more fulfillment details.
  """
  nonFulfillableQuantity: Int!

  """
  In shop currency, the total price of the line item when the order was created.
  This value doesn't include discounts.
  """
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead.")

  """
  In shop and presentment currencies, the total price of the line item when the order was created.
  This value doesn't include discounts.
  """
  originalTotalSet: MoneyBag!

  """
  In shop currency, the unit price of the line item when the order was created. This value doesn't include discounts.
  """
  originalUnitPrice: Money! @deprecated(reason: "Use `originalUnitPriceSet` instead.")

  """
  In shop and presentment currencies, the unit price of the line item when the
  order was created. This value doesn't include discounts.
  """
  originalUnitPriceSet: MoneyBag!

  """
  The Product object associated with this line item's variant.
  """
  product: Product

  """
  The number of units ordered, including refunded and removed units.
  """
  quantity: Int!

  """
  The number of units ordered, excluding refunded units.
  """
  refundableQuantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  Whether the line item can be restocked.
  """
  restockable: Boolean!

  """
  The selling plan details associated with the line item.
  """
  sellingPlan: LineItemSellingPlan

  """
  The variant SKU number.
  """
  sku: String

  """
  Staff attributed to the line item.
  """
  staffMember: StaffMember

  """
  The taxes charged for the line item, including taxes charged for refunded and removed quantities.
  """
  taxLines(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [TaxLine!]!

  """
  Whether the variant is taxable.
  """
  taxable: Boolean!

  """
  The title of the product at time of order creation.
  """
  title: String!

  """
  The total discount allocated to the line item in shop currency, including the
  total allocated to refunded and removed quantities. This value doesn't include
  order-level discounts.
  """
  totalDiscount: Money! @deprecated(reason: "Use `totalDiscountSet` instead.")

  """
  The total discount allocated to the line item in shop and presentment
  currencies, including the total allocated to refunded and removed quantities.
  This value doesn't include order-level discounts.
  """
  totalDiscountSet: MoneyBag!

  """
  In shop currency, the total discounted price of the unfulfilled quantity for the line item.
  """
  unfulfilledDiscountedTotal: Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead.")

  """
  In shop and presentment currencies, the total discounted price of the unfulfilled quantity for the line item.
  """
  unfulfilledDiscountedTotalSet: MoneyBag!

  """
  In shop currency, the total price of the unfulfilled quantity for the line item. This value doesn't include discounts.
  """
  unfulfilledOriginalTotal: Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead.")

  """
  In shop and presentment currencies, the total price of the unfulfilled
  quantity for the line item. This value doesn't include discounts.
  """
  unfulfilledOriginalTotalSet: MoneyBag!

  """
  The number of units not yet fulfilled.
  """
  unfulfilledQuantity: Int!

  """
  The Variant object associated with this line item.
  """
  variant: ProductVariant

  """
  The title of the variant at time of order creation.
  """
  variantTitle: String

  """
  The name of the vendor who made the variant.
  """
  vendor: String
}

"""
An auto-generated type for paginating through multiple LineItems.
"""
type LineItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [LineItemEdge!]!

  """
  A list of nodes that are contained in LineItemEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [LineItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one LineItem and a cursor during pagination.
"""
type LineItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of LineItemEdge.
  """
  node: LineItem!
}

"""
A line item group (bundle) to which a line item belongs to.
"""
type LineItemGroup implements Node {
  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Quantity of the line item group on the order.
  """
  quantity: Int!

  """
  Title of the line item group.
  """
  title: String!

  """
  ID of the variant of the line item group.
  """
  variantId: ID

  """
  SKU of the variant of the line item group.
  """
  variantSku: String
}

"""
Represents the selling plan for a line item.
"""
type LineItemSellingPlan {
  """
  The name of the selling plan for display purposes.
  """
  name: String!

  """
  The ID of the selling plan associated with the line item.
  """
  sellingPlanId: ID
}

"""
A link to direct users to.
"""
type Link implements HasPublishedTranslations {
  """
  A context-sensitive label for the link.
  """
  label: String!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!

  """
  The URL that the link visits.
  """
  url: URL!
}

"""
The identifier for the metafield linked to this option.

This API is currently in early access. See [Metafield-linked product options](https://shopify.dev/docs/api/admin/migrate/new-product-model/metafield-linked)
for more details.
"""
type LinkedMetafield {
  """
  Key of the metafield the option is linked to.
  """
  key: String

  """
  Namespace of the metafield the option is linked to.
  """
  namespace: String
}

"""
Local payment methods payment details related to a transaction.
"""
type LocalPaymentMethodsPaymentDetails implements BasePaymentDetails {
  """
  The descriptor by the payment provider. Only available for Amazon Pay and Buy with Prime.
  """
  paymentDescriptor: String

  """
  The name of payment method used by the buyer.
  """
  paymentMethodName: String
}

"""
A locale.
"""
type Locale {
  """
  Locale ISO code.
  """
  isoCode: String!

  """
  Human-readable locale name.
  """
  name: String!
}

"""
Specifies the type of the underlying localizable content. This can be used to
conditionally render different UI elements such as input fields.
"""
enum LocalizableContentType {
  """
  A file reference.
  """
  FILE_REFERENCE

  """
  An HTML.
  """
  HTML

  """
  An inline rich text.
  """
  INLINE_RICH_TEXT

  """
  A JSON.
  """
  JSON

  """
  A JSON string.
  """
  JSON_STRING

  """
  A link.
  """
  LINK

  """
  A list of file references.
  """
  LIST_FILE_REFERENCE

  """
  A list of links.
  """
  LIST_LINK

  """
  A list of multi-line texts.
  """
  LIST_MULTI_LINE_TEXT_FIELD

  """
  A list of single-line texts.
  """
  LIST_SINGLE_LINE_TEXT_FIELD

  """
  A list of URLs.
  """
  LIST_URL

  """
  A multi-line text.
  """
  MULTI_LINE_TEXT_FIELD

  """
  A rich text.
  """
  RICH_TEXT_FIELD

  """
  A single-line text.
  """
  SINGLE_LINE_TEXT_FIELD

  """
  A string.
  """
  STRING

  """
  A URI.
  """
  URI

  """
  A URL.
  """
  URL
}

"""
Represents the value captured by a localization extension. Localization
extensions are additional fields required by certain countries on international
orders. For example, some countries require additional fields for customs
information or tax identification numbers.
"""
type LocalizationExtension {
  """
  Country ISO 3166-1 alpha-2 code.
  """
  countryCode: CountryCode!

  """
  The localized extension keys that are allowed.
  """
  key: LocalizationExtensionKey!

  """
  The purpose of this localization extension.
  """
  purpose: LocalizationExtensionPurpose!

  """
  The localized extension title.
  """
  title: String!

  """
  The value of the field.
  """
  value: String!
}

"""
An auto-generated type for paginating through multiple LocalizationExtensions.
"""
type LocalizationExtensionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [LocalizationExtensionEdge!]!

  """
  A list of nodes that are contained in LocalizationExtensionEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [LocalizationExtension!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one LocalizationExtension and a cursor during pagination.
"""
type LocalizationExtensionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of LocalizationExtensionEdge.
  """
  node: LocalizationExtension!
}

"""
The key of a localization extension.
"""
enum LocalizationExtensionKey {
  """
  Extension key 'shipping_credential_br' for country BR.
  """
  SHIPPING_CREDENTIAL_BR

  """
  Extension key 'shipping_credential_cl' for country CL.
  """
  SHIPPING_CREDENTIAL_CL

  """
  Extension key 'shipping_credential_cn' for country CN.
  """
  SHIPPING_CREDENTIAL_CN

  """
  Extension key 'shipping_credential_co' for country CO.
  """
  SHIPPING_CREDENTIAL_CO

  """
  Extension key 'shipping_credential_cr' for country CR.
  """
  SHIPPING_CREDENTIAL_CR

  """
  Extension key 'shipping_credential_ec' for country EC.
  """
  SHIPPING_CREDENTIAL_EC

  """
  Extension key 'shipping_credential_es' for country ES.
  """
  SHIPPING_CREDENTIAL_ES

  """
  Extension key 'shipping_credential_gt' for country GT.
  """
  SHIPPING_CREDENTIAL_GT

  """
  Extension key 'shipping_credential_id' for country ID.
  """
  SHIPPING_CREDENTIAL_ID

  """
  Extension key 'shipping_credential_kr' for country KR.
  """
  SHIPPING_CREDENTIAL_KR

  """
  Extension key 'shipping_credential_mx' for country MX.
  """
  SHIPPING_CREDENTIAL_MX

  """
  Extension key 'shipping_credential_my' for country MY.
  """
  SHIPPING_CREDENTIAL_MY

  """
  Extension key 'shipping_credential_pe' for country PE.
  """
  SHIPPING_CREDENTIAL_PE

  """
  Extension key 'shipping_credential_pt' for country PT.
  """
  SHIPPING_CREDENTIAL_PT

  """
  Extension key 'shipping_credential_py' for country PY.
  """
  SHIPPING_CREDENTIAL_PY

  """
  Extension key 'shipping_credential_tr' for country TR.
  """
  SHIPPING_CREDENTIAL_TR

  """
  Extension key 'shipping_credential_tw' for country TW.
  """
  SHIPPING_CREDENTIAL_TW

  """
  Extension key 'shipping_credential_type_co' for country CO.
  """
  SHIPPING_CREDENTIAL_TYPE_CO

  """
  Extension key 'tax_credential_br' for country BR.
  """
  TAX_CREDENTIAL_BR

  """
  Extension key 'tax_credential_cl' for country CL.
  """
  TAX_CREDENTIAL_CL

  """
  Extension key 'tax_credential_co' for country CO.
  """
  TAX_CREDENTIAL_CO

  """
  Extension key 'tax_credential_cr' for country CR.
  """
  TAX_CREDENTIAL_CR

  """
  Extension key 'tax_credential_ec' for country EC.
  """
  TAX_CREDENTIAL_EC

  """
  Extension key 'tax_credential_es' for country ES.
  """
  TAX_CREDENTIAL_ES

  """
  Extension key 'tax_credential_gt' for country GT.
  """
  TAX_CREDENTIAL_GT

  """
  Extension key 'tax_credential_id' for country ID.
  """
  TAX_CREDENTIAL_ID

  """
  Extension key 'tax_credential_it' for country IT.
  """
  TAX_CREDENTIAL_IT

  """
  Extension key 'tax_credential_mx' for country MX.
  """
  TAX_CREDENTIAL_MX

  """
  Extension key 'tax_credential_my' for country MY.
  """
  TAX_CREDENTIAL_MY

  """
  Extension key 'tax_credential_pe' for country PE.
  """
  TAX_CREDENTIAL_PE

  """
  Extension key 'tax_credential_pt' for country PT.
  """
  TAX_CREDENTIAL_PT

  """
  Extension key 'tax_credential_py' for country PY.
  """
  TAX_CREDENTIAL_PY

  """
  Extension key 'tax_credential_tr' for country TR.
  """
  TAX_CREDENTIAL_TR

  """
  Extension key 'tax_credential_type_co' for country CO.
  """
  TAX_CREDENTIAL_TYPE_CO

  """
  Extension key 'tax_credential_type_mx' for country MX.
  """
  TAX_CREDENTIAL_TYPE_MX

  """
  Extension key 'tax_credential_use_mx' for country MX.
  """
  TAX_CREDENTIAL_USE_MX

  """
  Extension key 'tax_email_it' for country IT.
  """
  TAX_EMAIL_IT
}

"""
The purpose of a localization extension.
"""
enum LocalizationExtensionPurpose {
  """
  Extensions that are used for shipping purposes, for example, customs clearance.
  """
  SHIPPING

  """
  Extensions that are used for taxes purposes, for example, invoicing.
  """
  TAX
}

"""
Represents the value captured by a localized field. Localized fields are
additional fields required by certain countries on international orders. For
example, some countries require additional fields for customs information or tax
identification numbers.
"""
type LocalizedField {
  """
  Country ISO 3166-1 alpha-2 code.
  """
  countryCode: CountryCode!

  """
  The localized field keys that are allowed.
  """
  key: LocalizedFieldKey!

  """
  The purpose of this localized field.
  """
  purpose: LocalizedFieldPurpose!

  """
  The localized field title.
  """
  title: String!

  """
  The value of the field.
  """
  value: String!
}

"""
An auto-generated type for paginating through multiple LocalizedFields.
"""
type LocalizedFieldConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [LocalizedFieldEdge!]!

  """
  A list of nodes that are contained in LocalizedFieldEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [LocalizedField!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one LocalizedField and a cursor during pagination.
"""
type LocalizedFieldEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of LocalizedFieldEdge.
  """
  node: LocalizedField!
}

"""
The key of a localized field.
"""
enum LocalizedFieldKey {
  """
  Localized field key 'shipping_credential_br' for country Brazil.
  """
  SHIPPING_CREDENTIAL_BR

  """
  Localized field key 'shipping_credential_cl' for country Chile.
  """
  SHIPPING_CREDENTIAL_CL

  """
  Localized field key 'shipping_credential_cn' for country China.
  """
  SHIPPING_CREDENTIAL_CN

  """
  Localized field key 'shipping_credential_co' for country Colombia.
  """
  SHIPPING_CREDENTIAL_CO

  """
  Localized field key 'shipping_credential_cr' for country Costa Rica.
  """
  SHIPPING_CREDENTIAL_CR

  """
  Localized field key 'shipping_credential_ec' for country Ecuador.
  """
  SHIPPING_CREDENTIAL_EC

  """
  Localized field key 'shipping_credential_es' for country Spain.
  """
  SHIPPING_CREDENTIAL_ES

  """
  Localized field key 'shipping_credential_gt' for country Guatemala.
  """
  SHIPPING_CREDENTIAL_GT

  """
  Localized field key 'shipping_credential_id' for country Indonesia.
  """
  SHIPPING_CREDENTIAL_ID

  """
  Localized field key 'shipping_credential_kr' for country South Korea.
  """
  SHIPPING_CREDENTIAL_KR

  """
  Localized field key 'shipping_credential_mx' for country Mexico.
  """
  SHIPPING_CREDENTIAL_MX

  """
  Localized field key 'shipping_credential_my' for country Malaysia.
  """
  SHIPPING_CREDENTIAL_MY

  """
  Localized field key 'shipping_credential_pe' for country Peru.
  """
  SHIPPING_CREDENTIAL_PE

  """
  Localized field key 'shipping_credential_pt' for country Portugal.
  """
  SHIPPING_CREDENTIAL_PT

  """
  Localized field key 'shipping_credential_py' for country Paraguay.
  """
  SHIPPING_CREDENTIAL_PY

  """
  Localized field key 'shipping_credential_tr' for country Turkey.
  """
  SHIPPING_CREDENTIAL_TR

  """
  Localized field key 'shipping_credential_tw' for country Taiwan.
  """
  SHIPPING_CREDENTIAL_TW

  """
  Localized field key 'shipping_credential_type_co' for country Colombia.
  """
  SHIPPING_CREDENTIAL_TYPE_CO

  """
  Localized field key 'tax_credential_br' for country Brazil.
  """
  TAX_CREDENTIAL_BR

  """
  Localized field key 'tax_credential_cl' for country Chile.
  """
  TAX_CREDENTIAL_CL

  """
  Localized field key 'tax_credential_co' for country Colombia.
  """
  TAX_CREDENTIAL_CO

  """
  Localized field key 'tax_credential_cr' for country Costa Rica.
  """
  TAX_CREDENTIAL_CR

  """
  Localized field key 'tax_credential_ec' for country Ecuador.
  """
  TAX_CREDENTIAL_EC

  """
  Localized field key 'tax_credential_es' for country Spain.
  """
  TAX_CREDENTIAL_ES

  """
  Localized field key 'tax_credential_gt' for country Guatemala.
  """
  TAX_CREDENTIAL_GT

  """
  Localized field key 'tax_credential_id' for country Indonesia.
  """
  TAX_CREDENTIAL_ID

  """
  Localized field key 'tax_credential_it' for country Italy.
  """
  TAX_CREDENTIAL_IT

  """
  Localized field key 'tax_credential_mx' for country Mexico.
  """
  TAX_CREDENTIAL_MX

  """
  Localized field key 'tax_credential_my' for country Malaysia.
  """
  TAX_CREDENTIAL_MY

  """
  Localized field key 'tax_credential_pe' for country Peru.
  """
  TAX_CREDENTIAL_PE

  """
  Localized field key 'tax_credential_pt' for country Portugal.
  """
  TAX_CREDENTIAL_PT

  """
  Localized field key 'tax_credential_py' for country Paraguay.
  """
  TAX_CREDENTIAL_PY

  """
  Localized field key 'tax_credential_tr' for country Turkey.
  """
  TAX_CREDENTIAL_TR

  """
  Localized field key 'tax_credential_type_co' for country Colombia.
  """
  TAX_CREDENTIAL_TYPE_CO

  """
  Localized field key 'tax_credential_type_mx' for country Mexico.
  """
  TAX_CREDENTIAL_TYPE_MX

  """
  Localized field key 'tax_credential_use_mx' for country Mexico.
  """
  TAX_CREDENTIAL_USE_MX

  """
  Localized field key 'tax_email_it' for country Italy.
  """
  TAX_EMAIL_IT
}

"""
The purpose of a localized field.
"""
enum LocalizedFieldPurpose {
  """
  Fields that are used for shipping purposes, for example, customs clearance.
  """
  SHIPPING

  """
  Fields that are used for taxes purposes, for example, invoicing.
  """
  TAX
}

"""
Represents the location where the physical good resides. You can stock inventory at active locations. Active
locations that have `fulfills_online_orders: true` and are configured with a shipping rate, pickup enabled or
local delivery will be able to sell from their storefront.
"""
type Location implements HasMetafieldDefinitions & HasMetafields & LegacyInteroperability & Node {
  """
  Whether the location can be reactivated. If `false`, then trying to activate the location with the
  [`LocationActivate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/locationActivate)
  mutation will return an error that describes why the location can't be activated.
  """
  activatable: Boolean!

  """
  The address of this location.
  """
  address: LocationAddress!

  """
  Whether the location address has been verified.
  """
  addressVerified: Boolean!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was added to a shop.
  """
  createdAt: DateTime!

  """
  Whether this location can be deactivated. If `true`, then the location can be deactivated by calling the
  [`LocationDeactivate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/locationDeactivate)
  mutation. If `false`, then calling the mutation to deactivate it will return an error that describes why the
  location can't be deactivated.
  """
  deactivatable: Boolean!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  that the location was deactivated at. For example, 3:30 pm on September 7,
  2019 in the time zone of UTC (Universal Time Coordinated) is represented as
  `"2019-09-07T15:50:00Z`".
  """
  deactivatedAt: String

  """
  Whether this location can be deleted.
  """
  deletable: Boolean!

  """
  Name of the service provider that fulfills from this location.
  """
  fulfillmentService: FulfillmentService

  """
  Whether this location can fulfill online orders.
  """
  fulfillsOnlineOrders: Boolean!

  """
  Whether this location has active inventory.
  """
  hasActiveInventory: Boolean!

  """
  Whether this location has orders that need to be fulfilled.
  """
  hasUnfulfilledOrders: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The quantities of an inventory item at this location.
  """
  inventoryLevel(
    """
    The ID of the inventory item to obtain the inventory level for.
    """
    inventoryItemId: ID!
  ): InventoryLevel

  """
  A list of the quantities of the inventory items that can be stocked at this location.
  """
  inventoryLevels(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | inventory_group_id | id |
    | inventory_item_id | id |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): InventoryLevelConnection!

  """
  Whether the location is active. A deactivated location can be activated (change `isActive: true`) if it has
  `activatable` set to `true` by calling the
  [`locationActivate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/locationActivate)
  mutation.
  """
  isActive: Boolean!

  """
  Whether this location is a fulfillment service.
  """
  isFulfillmentService: Boolean!

  """
  Whether the location is your primary location for shipping inventory.
  """
  isPrimary: Boolean! @deprecated(reason: "The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location")

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  Local pickup settings for the location.
  """
  localPickupSettingsV2: DeliveryLocalPickupSettings

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The name of the location.
  """
  name: String!

  """
  Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored.
  """
  shipsInventory: Boolean!

  """
  List of suggested addresses for this location (empty if none).
  """
  suggestedAddresses: [LocationSuggestedAddress!]!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the location was last updated.
  """
  updatedAt: DateTime!
}

"""
Represents the address of a location.
"""
type LocationAddress {
  """
  The first line of the address for the location.
  """
  address1: String

  """
  The second line of the address for the location.
  """
  address2: String

  """
  The city of the location.
  """
  city: String

  """
  The country of the location.
  """
  country: String

  """
  The country code of the location.
  """
  countryCode: String

  """
  A formatted version of the address for the location.
  """
  formatted: [String!]!

  """
  The approximate latitude coordinates of the location.
  """
  latitude: Float

  """
  The approximate longitude coordinates of the location.
  """
  longitude: Float

  """
  The phone number of the location.
  """
  phone: String

  """
  The province of the location.
  """
  province: String

  """
  The code for the province, state, or district of the address of the location.
  """
  provinceCode: String

  """
  The ZIP code of the location.
  """
  zip: String
}

"""
An auto-generated type for paginating through multiple Locations.
"""
type LocationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [LocationEdge!]!

  """
  A list of nodes that are contained in LocationEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [Location!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Location and a cursor during pagination.
"""
type LocationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of LocationEdge.
  """
  node: Location!
}

"""
The set of valid sort keys for the Location query.
"""
enum LocationSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `name` value.
  """
  NAME

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Represents a suggested address for a location.
"""
type LocationSuggestedAddress {
  """
  The first line of the suggested address.
  """
  address1: String

  """
  The second line of the suggested address.
  """
  address2: String

  """
  The city of the suggested address.
  """
  city: String

  """
  The country of the suggested address.
  """
  country: String

  """
  The country code of the suggested address.
  """
  countryCode: CountryCode

  """
  A formatted version of the suggested address.
  """
  formatted: [String!]!

  """
  The province of the suggested address.
  """
  province: String

  """
  The code for the province, state, or district of the suggested address.
  """
  provinceCode: String

  """
  The ZIP code of the suggested address.
  """
  zip: String
}

"""
Represents a customer mailing address.

For example, a customer's default address and an order's billing address are both mailling addresses.
"""
type MailingAddress implements Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the customer's company or organization.
  """
  company: String

  """
  Whether the address corresponds to recognized latitude and longitude values.
  """
  coordinatesValidated: Boolean!

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.

  For example, US.
  """
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead.")

  """
  The two-letter code for the country of the address.

  For example, US.
  """
  countryCodeV2: CountryCode

  """
  The first name of the customer.
  """
  firstName: String

  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """
    Whether to include the customer's company in the formatted address.
    """
    withCompany: Boolean = true

    """
    Whether to include the customer's name in the formatted address.
    """
    withName: Boolean = false
  ): [String!]!

  """
  A comma-separated list of the values for city, province, and country.
  """
  formattedArea: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The last name of the customer.
  """
  lastName: String

  """
  The latitude coordinate of the customer address.
  """
  latitude: Float

  """
  The longitude coordinate of the customer address.
  """
  longitude: Float

  """
  The full name of the customer, based on firstName and lastName.
  """
  name: String

  """
  A unique phone number for the customer.
  """
  phone: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The alphanumeric code for the region.

  For example, ON.
  """
  provinceCode: String

  """
  The time zone of the address.
  """
  timeZone: String

  """
  The validation status that is leveraged by the address validation feature in the Shopify Admin.
  See ["Validating addresses in your Shopify admin"](https://help.shopify.com/manual/fulfillment/managing-orders/validating-order-address)
  for more details.
  """
  validationResultSummary: MailingAddressValidationResult

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
An auto-generated type for paginating through multiple MailingAddresses.
"""
type MailingAddressConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MailingAddressEdge!]!

  """
  A list of nodes that are contained in MailingAddressEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [MailingAddress!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MailingAddress and a cursor during pagination.
"""
type MailingAddressEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MailingAddressEdge.
  """
  node: MailingAddress!
}

"""
The input fields to create or update a mailing address.
"""
input MailingAddressInput {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the customer's company or organization.
  """
  company: String

  """
  The name of the country.
  """
  country: String @deprecated(reason: "Use `countryCode` instead.")

  """
  The two-letter code for the country of the address.
  """
  countryCode: CountryCode

  """
  The first name of the customer.
  """
  firstName: String
  id: ID @deprecated(reason: "Not needed for 90% of mutations, and provided separately where it is needed.")

  """
  The last name of the customer.
  """
  lastName: String

  """
  A unique phone number for the customer.

  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String @deprecated(reason: "Use `provinceCode` instead.")

  """
  The code for the region of the address, such as the province, state, or district.
  For example QC for Quebec, Canada.
  """
  provinceCode: String

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
Highest level of validation concerns identified for the address.
"""
enum MailingAddressValidationResult {
  """
  Indicates that the address has been validated and is very likely to contain invalid information.
  """
  ERROR

  """
  Indicates that the address has been validated and no issues were found.
  """
  NO_ISSUES

  """
  Indicates that the address has been validated and might contain invalid information.
  """
  WARNING
}

"""
Manual discount applications capture the intentions of a discount that was manually created for an order.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type ManualDiscountApplication implements DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The description of the discount application.
  """
  description: String

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The title of the discount application.
  """
  title: String!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
A market is a group of one or more regions that you want to target for international sales.
By creating a market, you can configure a distinct, localized shopping experience for
customers from a specific area of the world. For example, you can
[change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
[configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
"""
type Market implements HasMetafieldDefinitions & HasMetafields & Node {
  """
  The catalogs that belong to the market.
  """
  catalogs(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MarketCatalogConnection!

  """
  The number of catalogs that belong to the market.
  """
  catalogsCount: Count

  """
  The market’s currency settings.
  """
  currencySettings: MarketCurrencySettings!

  """
  Whether the market is enabled to receive visitors and sales. **Note**: Regions in inactive
  markets can't be selected on the storefront or in checkout.
  """
  enabled: Boolean! @deprecated(reason: "Use `status` instead.")

  """
  A short, human-readable unique identifier for the market. This is changeable by the merchant.
  """
  handle: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The name of the market. Not shown to customers.
  """
  name: String!

  """
  The market’s price list, which specifies a percentage-based price adjustment as well as
  fixed price overrides for specific variants.

  Markets with multiple catalogs can have multiple price lists. To query which price lists are connected to
  a market, please query for price lists through the catalogs connection.
  """
  priceList: PriceList @deprecated(reason: "Use `catalogs` instead.")

  """
  Whether the market is the shop’s primary market.
  """
  primary: Boolean! @deprecated(reason: "This field is deprecated and will be removed in the future.")

  """
  The regions that comprise the market.
  """
  regions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MarketRegionConnection! @deprecated(reason: "This field is deprecated and will be removed in the future. Use `conditions.regionConditions` instead.")

  """
  The market’s web presence, which defines its SEO strategy. This can be a different domain,
  subdomain, or subfolders of the primary domain. Each web presence comprises one or more
  language variants. If a market doesn't have its own web presence, then the market is accessible on the
  primary market's domains using [country
  selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
  If it's the primary market and it has multiple web presences, then this field will return the primary domain web presence.
  """
  webPresence: MarketWebPresence @deprecated(reason: "Use `webPresences` instead.")

  """
  The market’s web presences, which defines its SEO strategy. This can be a different domain,
  subdomain, or subfolders of the primary domain. Each web presence comprises one or more
  language variants. If a market doesn't have any web presences, then the market is accessible on the
  primary market's domains using [country
  selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
  """
  webPresences(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MarketWebPresenceConnection!
}

"""
A list of products with publishing and pricing information associated with markets.
"""
type MarketCatalog implements Catalog & Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The markets associated with the catalog.
  """
  markets(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MarketConnection!

  """
  Most recent catalog operations.
  """
  operations: [ResourceOperation!]!

  """
  The price list associated with the catalog.
  """
  priceList: PriceList

  """
  A group of products and collections that's published to a catalog.
  """
  publication: Publication

  """
  The status of the catalog.
  """
  status: CatalogStatus!

  """
  The name of the catalog.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple MarketCatalogs.
"""
type MarketCatalogConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MarketCatalogEdge!]!

  """
  A list of nodes that are contained in MarketCatalogEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [MarketCatalog!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MarketCatalog and a cursor during pagination.
"""
type MarketCatalogEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MarketCatalogEdge.
  """
  node: MarketCatalog!
}

"""
An auto-generated type for paginating through multiple Markets.
"""
type MarketConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MarketEdge!]!

  """
  A list of nodes that are contained in MarketEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Market!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
A market's currency settings.
"""
type MarketCurrencySettings {
  """
  The currency which this market's prices are defined in, and the
  currency which its customers must use if local currencies are disabled.
  """
  baseCurrency: CurrencySetting!

  """
  Whether or not local currencies are enabled. If enabled, then prices will
  be converted to give each customer the best experience based on their
  region. If disabled, then all customers in this market will see prices
  in the market's base currency. For single country markets this will be true when
  the market's base currency is the same as the default currency for the region.
  """
  localCurrencies: Boolean!
}

"""
An auto-generated type which holds one Market and a cursor during pagination.
"""
type MarketEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MarketEdge.
  """
  node: Market!
}

"""
The market localizable content of a resource's field.
"""
type MarketLocalizableContent {
  """
  The hash digest representation of the content value.
  """
  digest: String

  """
  The resource field that's being localized.
  """
  key: String!

  """
  The content value.
  """
  value: String
}

"""
A resource that has market localizable fields.
"""
type MarketLocalizableResource {
  """
  The market localizable content.
  """
  marketLocalizableContent: [MarketLocalizableContent!]!

  """
  Market localizations for the market localizable content.
  """
  marketLocalizations(
    """
    Filters market localizations by market ID.
    """
    marketId: ID!
  ): [MarketLocalization!]!

  """
  The GID of the resource.
  """
  resourceId: ID!
}

"""
An auto-generated type for paginating through multiple MarketLocalizableResources.
"""
type MarketLocalizableResourceConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MarketLocalizableResourceEdge!]!

  """
  A list of nodes that are contained in MarketLocalizableResourceEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [MarketLocalizableResource!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MarketLocalizableResource and a cursor during pagination.
"""
type MarketLocalizableResourceEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MarketLocalizableResourceEdge.
  """
  node: MarketLocalizableResource!
}

"""
The type of resources that are market localizable.
"""
enum MarketLocalizableResourceType {
  """
  A metafield. Market localizable fields: `value`.
  """
  METAFIELD

  """
  A Metaobject. Market Localizable fields are determined by the Metaobject type.
  """
  METAOBJECT
}

"""
The market localization of a field within a resource, which is determined by the market ID.
"""
type MarketLocalization {
  """
  A reference to the value being localized on the resource that this market localization belongs to.
  """
  key: String!

  """
  The market that the localization is specific to.
  """
  market: Market!

  """
  Whether the original content has changed since this market localization was updated.
  """
  outdated: Boolean!

  """
  The date and time when the market localization was updated.
  """
  updatedAt: DateTime

  """
  The value of the market localization.
  """
  value: String
}

"""
A geographic region which comprises a market.
"""
interface MarketRegion {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the region.
  """
  name: String!
}

"""
An auto-generated type for paginating through multiple MarketRegions.
"""
type MarketRegionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MarketRegionEdge!]!

  """
  A list of nodes that are contained in MarketRegionEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [MarketRegion!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
A country which comprises a market.
"""
type MarketRegionCountry implements MarketRegion & Node {
  """
  The ISO code identifying the country.
  """
  code: CountryCode!

  """
  The currency which this country uses given its market settings.
  """
  currency: CurrencySetting!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the region.
  """
  name: String!
}

"""
An auto-generated type which holds one MarketRegion and a cursor during pagination.
"""
type MarketRegionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MarketRegionEdge.
  """
  node: MarketRegion!
}

"""
The market’s web presence, which defines its SEO strategy. This can be a different domain
(e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary
domain (e.g. `example.com/en-ca`). Each web presence comprises one or more language
variants. If a market does not have its own web presence, it is accessible on the shop’s
primary domain via [country
selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).

Note: while the domain/subfolders defined by a market’s web presence are not applicable to
custom storefronts, which must manage their own domains and routing, the languages chosen
here do govern [the languages available on the Storefront
API](https://shopify.dev/custom-storefronts/internationalization/multiple-languages) for the countries in
this market.
"""
type MarketWebPresence implements Node {
  """
  The ShopLocale object for the alternate locales. When a domain is used, these locales will be
  available as language-specific subfolders. For example, if English is an
  alternate locale, and `example.ca` is the market’s domain, then
  `example.ca/en` will load in English.
  """
  alternateLocales: [ShopLocale!]!

  """
  The ShopLocale object for the default locale. When a domain is used, this is the locale that will
  be used when the domain root is accessed. For example, if French is the default locale,
  and `example.ca` is the market’s domain, then `example.ca` will load in French.
  """
  defaultLocale: ShopLocale!

  """
  The web presence’s domain.
  This field will be null if `subfolderSuffix` isn't null.
  """
  domain: Domain

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The associated market.
  """
  market: Market!

  """
  The list of root URLs for each of the web presence’s locales. As of version
  `2024-04` this value will no longer have a trailing slash.
  """
  rootUrls: [MarketWebPresenceRootUrl!]!

  """
  The market-specific suffix of the subfolders defined by the web presence.
  Example: in `/en-us` the subfolder suffix is `us`. This field will be null if
  `domain` isn't null.
  """
  subfolderSuffix: String
}

"""
An auto-generated type for paginating through multiple MarketWebPresences.
"""
type MarketWebPresenceConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MarketWebPresenceEdge!]!

  """
  A list of nodes that are contained in MarketWebPresenceEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [MarketWebPresence!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MarketWebPresence and a cursor during pagination.
"""
type MarketWebPresenceEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MarketWebPresenceEdge.
  """
  node: MarketWebPresence!
}

"""
The URL for the homepage of the online store in the context of a particular market and a
particular locale.
"""
type MarketWebPresenceRootUrl {
  """
  The locale that the storefront loads in.
  """
  locale: String!

  """
  The URL.
  """
  url: URL!
}

"""
The marketing activity resource represents marketing that a
        merchant created through an app.
"""
type MarketingActivity implements Node {
  """
  The URL of the marketing activity listing page in the marketing section.
  """
  activityListUrl: URL

  """
  The amount spent on the marketing activity.
  """
  adSpend: MoneyV2

  """
  The app which created this marketing activity.
  """
  app: App!

  """
  The errors generated when an app publishes the marketing activity.
  """
  appErrors: MarketingActivityExtensionAppErrors

  """
  The allocated budget for the marketing activity.
  """
  budget: MarketingBudget

  """
  The date and time when the marketing activity was created.
  """
  createdAt: DateTime!

  """
  The completed content in the marketing activity creation form.
  """
  formData: String

  """
  The hierarchy level of the marketing activity.
  """
  hierarchyLevel: MarketingActivityHierarchyLevel

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether the marketing activity is in the main workflow version of the marketing automation.
  """
  inMainWorkflowVersion: Boolean!

  """
  The marketing activity represents an external marketing activity.
  """
  isExternal: Boolean!

  """
  The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
  """
  marketingChannel: MarketingChannel! @deprecated(reason: "Use `marketingChannelType` instead.")

  """
  The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
  """
  marketingChannelType: MarketingChannel!

  """
  Associated marketing event of this marketing activity.
  """
  marketingEvent: MarketingEvent

  """
  ID of the parent activity of this marketing activity.
  """
  parentActivityId: ID

  """
  ID of the parent activity of this marketing activity.
  """
  parentRemoteId: String

  """
  A contextual description of the marketing activity based on the platform and tactic used.
  """
  sourceAndMedium: String!

  """
  The current state of the marketing activity.
  """
  status: MarketingActivityStatus!

  """
  The severity of the marketing activity's status.
  """
  statusBadgeType: MarketingActivityStatusBadgeType @deprecated(reason: "Use `statusBadgeTypeV2` instead.")

  """
  The severity of the marketing activity's status.
  """
  statusBadgeTypeV2: BadgeType

  """
  The rendered status of the marketing activity.
  """
  statusLabel: String!

  """
  The [date and time](
            https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
            ) when the activity's status last changed.
  """
  statusTransitionedAt: DateTime

  """
  The method of marketing used for this marketing activity.
  """
  tactic: MarketingTactic!

  """
  The status to which the marketing activity is currently transitioning.
  """
  targetStatus: MarketingActivityStatus

  """
  The marketing activity's title, which is rendered on the marketing listing page.
  """
  title: String!

  """
  The date and time when the marketing activity was updated.
  """
  updatedAt: DateTime!

  """
  The value portion of the URL query parameter used in attributing sessions to this activity.
  """
  urlParameterValue: String

  """
  The set of [Urchin Tracking Module](
            https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
            ) used in the URL for tracking this marketing activity.
  """
  utmParameters: UTMParameters
}

"""
An auto-generated type for paginating through multiple MarketingActivities.
"""
type MarketingActivityConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MarketingActivityEdge!]!

  """
  A list of nodes that are contained in MarketingActivityEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [MarketingActivity!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MarketingActivity and a cursor during pagination.
"""
type MarketingActivityEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MarketingActivityEdge.
  """
  node: MarketingActivity!
}

"""
The error code resulted from the marketing activity extension integration.
"""
enum MarketingActivityExtensionAppErrorCode {
  """
  The app is either not responding or returning unexpected data.
  """
  API_ERROR

  """
  The app needs to be installed.
  """
  INSTALL_REQUIRED_ERROR

  """
  The shop/user must be onboarded to use the app.
  """
  NOT_ONBOARDED_ERROR

  """
  The app has returned an error when invoking the platform.
  """
  PLATFORM_ERROR

  """
  The app has returned validation errors.
  """
  VALIDATION_ERROR
}

"""
Represents errors returned from apps when using the marketing activity extension.
"""
type MarketingActivityExtensionAppErrors {
  """
  The app error type.
  """
  code: MarketingActivityExtensionAppErrorCode!

  """
  The list of errors returned by the app.
  """
  userErrors: [UserError!]!
}

"""
Hierarchy levels for external marketing activities.
"""
enum MarketingActivityHierarchyLevel {
  """
  An advertisement activity. Must be parented by an ad group or a campaign
  activity, and must be assigned tracking parameters (URL or UTM).
  """
  AD

  """
  A group of advertisement activities. Must be parented by a campaign activity.
  """
  AD_GROUP

  """
  A campaign activity. May contain either ad groups or ads as child activities.
  If childless, then the campaign activity should have tracking parameters
  assigned (URL or UTM) otherwise it won't appear in marketing reports.
  """
  CAMPAIGN
}

"""
The set of valid sort keys for the MarketingActivity query.
"""
enum MarketingActivitySortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `title` value.
  """
  TITLE
}

"""
Status helps to identify if this marketing activity has been completed, queued, failed etc.
"""
enum MarketingActivityStatus {
  """
  This marketing activity is currently running.
  """
  ACTIVE

  """
  This marketing activity is permanently unavailable.
  """
  DELETED

  """
  This marketing activity was deleted and it was triggered from outside of Shopify.
  """
  DELETED_EXTERNALLY

  """
  This marketing activity is disconnected and no longer editable.
  """
  DISCONNECTED

  """
  This marketing activity has been edited, but it is not yet created.
  """
  DRAFT

  """
  This marketing activity is unable to run.
  """
  FAILED

  """
  This marketing activity has completed running.
  """
  INACTIVE

  """
  This marketing activity is currently not running.
  """
  PAUSED

  """
  This marketing activity is pending creation on the app's marketing platform.
  """
  PENDING

  """
  This marketing activity is scheduled to run.
  """
  SCHEDULED

  """
  The marketing activity's status is unknown.
  """
  UNDEFINED
}

"""
StatusBadgeType helps to identify the color of the status badge.
"""
enum MarketingActivityStatusBadgeType {
  """
  This status badge has type attention.
  """
  ATTENTION

  """
  This status badge has type default.
  """
  DEFAULT

  """
  This status badge has type info.
  """
  INFO

  """
  This status badge has type success.
  """
  SUCCESS

  """
  This status badge has type warning.
  """
  WARNING
}

"""
This type combines budget amount and its marketing budget type.
"""
type MarketingBudget {
  """
  The budget type for a marketing activity.
  """
  budgetType: MarketingBudgetBudgetType!

  """
  The amount of budget for marketing activity.
  """
  total: MoneyV2!
}

"""
The budget type for a marketing activity.
"""
enum MarketingBudgetBudgetType {
  """
  A daily budget.
  """
  DAILY

  """
  A budget for the lifetime of a marketing activity.
  """
  LIFETIME
}

"""
The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
"""
enum MarketingChannel {
  """
  Displayed ads.
  """
  DISPLAY

  """
  Email.
  """
  EMAIL

  """
  Referral links.
  """
  REFERRAL

  """
  Paid search.
  """
  SEARCH

  """
  Social media.
  """
  SOCIAL
}

"""
Represents actions that market a merchant's store or products.
"""
type MarketingEvent implements LegacyInteroperability & Node {
  """
  The app that the marketing event is attributed to.
  """
  app: App!

  """
  The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
  """
  channel: MarketingChannel @deprecated(reason: "Use `marketingChannelType` instead.")

  """
  The unique string identifier of the channel to which this activity belongs.
  For the correct handle for your channel, contact your partner manager.
  """
  channelHandle: String

  """
  A human-readable description of the marketing event.
  """
  description: String

  """
  The date and time when the marketing event ended.
  """
  endedAt: DateTime

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The URL where the marketing event can be managed.
  """
  manageUrl: URL

  """
  The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
  """
  marketingChannelType: MarketingChannel

  """
  The URL where the marketing event can be previewed.
  """
  previewUrl: URL

  """
  An optional ID that helps Shopify validate engagement data.
  """
  remoteId: String

  """
  The date and time when the marketing event is scheduled to end.
  """
  scheduledToEndAt: DateTime

  """
  Where the `MarketingEvent` occurred and what kind of content was used.
  Because `utmSource` and `utmMedium` are often used interchangeably, this is
  based on a combination of `marketingChannel`, `referringDomain`, and `type` to
  provide a consistent representation for any given piece of marketing
  regardless of the app that created it.
  """
  sourceAndMedium: String!

  """
  The date and time when the marketing event started.
  """
  startedAt: DateTime!

  """
  The display text for the marketing event type.
  """
  targetTypeDisplayText: String! @deprecated(reason: "Use `sourceAndMedium` instead.")

  """
  The marketing event type.
  """
  type: MarketingTactic!

  """
  The name of the marketing campaign.
  """
  utmCampaign: String

  """
  The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
  """
  utmMedium: String

  """
  The referrer of the marketing event. Example values: `google`, `newsletter`.
  """
  utmSource: String
}

"""
An auto-generated type for paginating through multiple MarketingEvents.
"""
type MarketingEventConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MarketingEventEdge!]!

  """
  A list of nodes that are contained in MarketingEventEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [MarketingEvent!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MarketingEvent and a cursor during pagination.
"""
type MarketingEventEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MarketingEventEdge.
  """
  node: MarketingEvent!
}

"""
The set of valid sort keys for the MarketingEvent query.
"""
enum MarketingEventSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `started_at` value.
  """
  STARTED_AT
}

"""
The available types of tactics for a marketing activity.
"""
enum MarketingTactic {
  """
  An abandoned cart recovery email.
  """
  ABANDONED_CART

  """
  An ad, such as a Facebook ad.
  """
  AD

  """
  An affiliate link.
  """
  AFFILIATE

  """
  A link.
  """
  LINK

  """
  A loyalty program.
  """
  LOYALTY

  """
  A messaging app, such as Facebook Messenger.
  """
  MESSAGE

  """
  A newsletter.
  """
  NEWSLETTER

  """
  A notification in the Shopify admin.
  """
  NOTIFICATION

  """
  A blog post.
  """
  POST

  """
  A retargeting ad.
  """
  RETARGETING

  """
  Search engine optimization.
  """
  SEO

  """
  A popup on the online store.
  """
  STOREFRONT_APP

  """
  A transactional email.
  """
  TRANSACTIONAL
}

"""
Represents a media interface.
"""
interface Media {
  """
  A word or phrase to share the nature or contents of a media.
  """
  alt: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The media content type.
  """
  mediaContentType: MediaContentType!

  """
  Any errors which have occurred on the media.
  """
  mediaErrors: [MediaError!]!

  """
  The warnings attached to the media.
  """
  mediaWarnings: [MediaWarning!]!

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  Current status of the media.
  """
  status: MediaStatus!
}

"""
An auto-generated type for paginating through multiple Media.
"""
type MediaConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MediaEdge!]!

  """
  A list of nodes that are contained in MediaEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Media!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
The possible content types for a media object.
"""
enum MediaContentType {
  """
  An externally hosted video.
  """
  EXTERNAL_VIDEO

  """
  A Shopify-hosted image.
  """
  IMAGE

  """
  A 3d model.
  """
  MODEL_3D

  """
  A Shopify-hosted video.
  """
  VIDEO
}

"""
An auto-generated type which holds one Media and a cursor during pagination.
"""
type MediaEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MediaEdge.
  """
  node: Media!
}

"""
Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.
Check the media before attempting to upload again.
"""
type MediaError {
  """
  Code representing the type of error.
  """
  code: MediaErrorCode!

  """
  Additional details regarding the error.
  """
  details: String

  """
  Translated error message.
  """
  message: String!
}

"""
Error types for media.
"""
enum MediaErrorCode {
  """
  Media could not be created because a file with the same name already exists.
  """
  DUPLICATE_FILENAME_ERROR

  """
  Media could not be created because embed permissions are disabled for this video.
  """
  EXTERNAL_VIDEO_EMBED_DISABLED

  """
  Media could not be created because video is either not found or still transcoding.
  """
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING

  """
  Media could not be created because the external video has an invalid aspect ratio.
  """
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO

  """
  Media could not be created because the external video could not be found.
  """
  EXTERNAL_VIDEO_NOT_FOUND

  """
  Media could not be created because the external video is not listed or is private.
  """
  EXTERNAL_VIDEO_UNLISTED

  """
  Media could not be created because the cumulative file storage limit would be exceeded.
  """
  FILE_STORAGE_LIMIT_EXCEEDED

  """
  File could not be processed because the source could not be downloaded.
  """
  GENERIC_FILE_DOWNLOAD_FAILURE

  """
  File could not be created because the size is too large.
  """
  GENERIC_FILE_INVALID_SIZE

  """
  Media could not be processed because the image could not be downloaded.
  """
  IMAGE_DOWNLOAD_FAILURE

  """
  Media could not be processed because the image could not be processed.
  """
  IMAGE_PROCESSING_FAILURE

  """
  Media could not be created because the image has an invalid aspect ratio.
  """
  INVALID_IMAGE_ASPECT_RATIO

  """
  Media could not be created because the image size is too large.
  """
  INVALID_IMAGE_FILE_SIZE

  """
  Media could not be created because the image's resolution exceeds the max limit.
  """
  INVALID_IMAGE_RESOLUTION

  """
  Media could not be processed because the signed URL was invalid.
  """
  INVALID_SIGNED_URL

  """
  Media timed out because it is currently being modified by another operation.
  """
  MEDIA_TIMEOUT_ERROR

  """
  Media could not be created because the model file failed processing.
  """
  MODEL3D_GLB_OUTPUT_CREATION_ERROR

  """
  Media could not be created because the model can't be converted to USDZ format.
  """
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR

  """
  Media could not be created because the model file failed processing.
  """
  MODEL3D_PROCESSING_FAILURE

  """
  Media could not be created because the model's thumbnail generation failed.
  """
  MODEL3D_THUMBNAIL_GENERATION_ERROR

  """
  There was an issue while trying to generate a new thumbnail.
  """
  MODEL3D_THUMBNAIL_REGENERATION_ERROR

  """
  Model failed validation.
  """
  MODEL3D_VALIDATION_ERROR

  """
  Media error has occured for unknown reason.
  """
  UNKNOWN

  """
  Media could not be created because the image is an unsupported file type.
  """
  UNSUPPORTED_IMAGE_FILE_TYPE

  """
  Media could not be created because it has an invalid file type.
  """
  VIDEO_INVALID_FILETYPE_ERROR

  """
  Media could not be created because it does not meet the maximum duration requirement.
  """
  VIDEO_MAX_DURATION_ERROR

  """
  Media could not be created because it does not meet the maximum height requirement.
  """
  VIDEO_MAX_HEIGHT_ERROR

  """
  Media could not be created because it does not meet the maximum width requirement.
  """
  VIDEO_MAX_WIDTH_ERROR

  """
  Media could not be created because the metadata could not be read.
  """
  VIDEO_METADATA_READ_ERROR

  """
  Media could not be created because it does not meet the minimum duration requirement.
  """
  VIDEO_MIN_DURATION_ERROR

  """
  Media could not be created because it does not meet the minimum height requirement.
  """
  VIDEO_MIN_HEIGHT_ERROR

  """
  Media could not be created because it does not meet the minimum width requirement.
  """
  VIDEO_MIN_WIDTH_ERROR

  """
  Video failed validation.
  """
  VIDEO_VALIDATION_ERROR
}

"""
Host for a Media Resource.
"""
enum MediaHost {
  """
  Host for Vimeo embedded videos.
  """
  VIMEO

  """
  Host for YouTube embedded videos.
  """
  YOUTUBE
}

"""
An image hosted on Shopify.
"""
type MediaImage implements File & HasMetafields & Media & Node {
  """
  A word or phrase to share the nature or contents of a media.
  """
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """
  Any errors that have occurred on the file.
  """
  fileErrors: [FileError!]!

  """
  The status of the file.
  """
  fileStatus: FileStatus!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The image for the media. Returns `null` until `status` is `READY`.
  """
  image: Image

  """
  The media content type.
  """
  mediaContentType: MediaContentType!

  """
  Any errors which have occurred on the media.
  """
  mediaErrors: [MediaError!]!

  """
  The warnings attached to the media.
  """
  mediaWarnings: [MediaWarning!]!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The MIME type of the image.
  """
  mimeType: String

  """
  The original source of the image.
  """
  originalSource: MediaImageOriginalSource

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  Current status of the media.
  """
  status: MediaStatus!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
  """
  updatedAt: DateTime!
}

"""
The original source for an image.
"""
type MediaImageOriginalSource {
  """
  The size of the original file in bytes.
  """
  fileSize: Int

  """
  The URL of the original image, valid only for a short period.
  """
  url: URL
}

"""
Represents the preview image for a media.
"""
type MediaPreviewImage {
  """
  The preview image for the media. Returns `null` until `status` is `READY`.
  """
  image: Image

  """
  Current status of the preview image.
  """
  status: MediaPreviewImageStatus!
}

"""
The possible statuses for a media preview image.
"""
enum MediaPreviewImageStatus {
  """
  Preview image processing has failed.
  """
  FAILED

  """
  Preview image is being processed.
  """
  PROCESSING

  """
  Preview image is ready to be displayed.
  """
  READY

  """
  Preview image is uploaded but not yet processed.
  """
  UPLOADED
}

"""
The possible statuses for a media object.
"""
enum MediaStatus {
  """
  Media processing has failed.
  """
  FAILED

  """
  Media is being processed.
  """
  PROCESSING

  """
  Media is ready to be displayed.
  """
  READY

  """
  Media has been uploaded but not yet processed.
  """
  UPLOADED
}

"""
Represents a media warning. This occurs when there is a non-blocking concern regarding your media.
Consider reviewing your media to ensure it is correct and its parameters are as expected.
"""
type MediaWarning {
  """
  The code representing the type of warning.
  """
  code: MediaWarningCode!

  """
  Translated warning message.
  """
  message: String
}

"""
Warning types for media.
"""
enum MediaWarningCode {
  """
  3D model physical size might be invalid. The dimensions of your model are very
  large. Consider reviewing your model to ensure they are correct.
  """
  MODEL_LARGE_PHYSICAL_SIZE

  """
  3D model physical size might be invalid. The dimensions of your model are very
  small. Consider reviewing your model to ensure they are correct.
  """
  MODEL_SMALL_PHYSICAL_SIZE
}

"""
A menu for display on the storefront.
"""
type Menu implements HasPublishedTranslations & Node {
  """
  The menu's handle.
  """
  handle: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether the menu is a default. The handle for default menus can't be updated and default menus can't be deleted.
  """
  isDefault: Boolean!

  """
  A list of items on the menu sorted by position.
  """
  items(
    """
    The number of menu items to be returned.
    """
    limit: Int
  ): [MenuItem!]!

  """
  The menu's title.
  """
  title: String!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!
}

"""
An auto-generated type for paginating through multiple Menus.
"""
type MenuConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MenuEdge!]!

  """
  A list of nodes that are contained in MenuEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Menu!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Menu and a cursor during pagination.
"""
type MenuEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MenuEdge.
  """
  node: Menu!
}

"""
A menu item for display on the storefront.
"""
type MenuItem {
  """
  A globally-unique ID of the navigation menu item.
  """
  id: ID!

  """
  List of the menu items nested under this item sorted by position.
  """
  items: [MenuItem!]!

  """
  The ID of the resource to link to.
  """
  resourceId: ID

  """
  The menu item's tags to filter a collection.
  """
  tags: [String!]!

  """
  The menu item's title.
  """
  title: String!

  """
  The menu item's type.
  """
  type: MenuItemType!

  """
  The menu item's url.
  """
  url: String
}

"""
A menu item type.
"""
enum MenuItemType {
  """
  The article menu item type.
  """
  ARTICLE

  """
  The blog menu item type.
  """
  BLOG

  """
  The catalog menu item type.
  """
  CATALOG

  """
  The collection menu item type.
  """
  COLLECTION

  """
  The collections menu item type.
  """
  COLLECTIONS

  """
  The customer_account_page menu item type.
  """
  CUSTOMER_ACCOUNT_PAGE

  """
  The frontpage menu item type.
  """
  FRONTPAGE

  """
  The http menu item type.
  """
  HTTP

  """
  The metaobject menu item type.
  """
  METAOBJECT

  """
  The page menu item type.
  """
  PAGE

  """
  The product menu item type.
  """
  PRODUCT

  """
  The search menu item type.
  """
  SEARCH

  """
  The shop_policy menu item type.
  """
  SHOP_POLICY
}

"""
The set of valid sort keys for the Menu query.
"""
enum MenuSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `title` value.
  """
  TITLE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
that's used to control how discounts can be combined.
"""
enum MerchandiseDiscountClass {
  """
  The discount is combined with an
  [order discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  class.
  """
  ORDER

  """
  The discount is combined with a
  [product discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  class.
  """
  PRODUCT
}

"""
Merchant approval for accelerated onboarding to channel integration apps.
"""
type MerchantApprovalSignals {
  """
  Whether the shop's Shopify Payments account identity is verified. Returns
  `false` if the identity is unverified or if the shop doesn't have a Shopify
  Payments account.
  """
  identityVerified: Boolean!

  """
  Whether Shopify has pre-verified the merchant's business for onboarding to
  channel integration apps. Returns `false` if the shop isn't marked for verification.
  """
  verifiedByShopify: Boolean!

  """
  Which tier of the Shopify verification was determined for the merchant's
  business for onboarding to channel integration apps.
  """
  verifiedByShopifyTier: String!
}

"""
Metafields enable you to attach additional information to a Shopify resource, such
as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or
a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
Some examples of the data that metafields enable you to store are
specifications, size charts, downloadable documents, release dates, images, or part numbers.
Metafields are identified by an owner resource, namespace, and key. and store a
value along with type information for that value.
"""
type Metafield implements HasCompareDigest & LegacyInteroperability & Node {
  """
  The data stored in the resource, represented as a digest.
  """
  compareDigest: String!

  """
  The date and time when the metafield was created.
  """
  createdAt: DateTime!

  """
  The metafield definition that the metafield belongs to, if any.
  """
  definition: MetafieldDefinition

  """
  The description of the metafield.
  """
  description: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The data stored in the metafield in JSON format.
  """
  jsonValue: JSON!

  """
  The unique identifier for the metafield within its namespace.
  """
  key: String!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The container for a group of metafields that the metafield is associated with.
  """
  namespace: String!

  """
  The resource that the metafield is attached to.
  """
  owner: HasMetafields!

  """
  The type of resource that the metafield is attached to.
  """
  ownerType: MetafieldOwnerType!

  """
  Returns a reference object if the metafield definition's type is a resource reference.
  """
  reference: MetafieldReference

  """
  A list of reference objects if the metafield's type is a resource reference list.
  """
  references(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int
  ): MetafieldReferenceConnection

  """
  The type of data that is stored in the metafield.
  Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
  """
  type: String!

  """
  The date and time when the metafield was updated.
  """
  updatedAt: DateTime!

  """
  The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
  """
  value: String!
}

"""
The access settings for this metafield definition.
"""
type MetafieldAccess {
  """
  The default admin access setting used for the metafields under this definition.
  """
  admin: MetafieldAdminAccess

  """
  The customer account access setting used for the metafields under this definition.
  """
  customerAccount: MetafieldCustomerAccountAccess!

  """
  The explicit grants for this metafield definition, superseding the default admin access
  for the specified grantees.
  """
  grants: [MetafieldAccessGrant!]! @deprecated(reason: "Explicit grants are [deprecated](https://shopify.dev/changelog/deprecating-explicit-access-grants-for-app-owned-metafields).\n")

  """
  The storefront access setting used for the metafields under this definition.
  """
  storefront: MetafieldStorefrontAccess
}

"""
An explicit access grant for the metafields under this definition.

Explicit grants are [deprecated](https://shopify.dev/changelog/deprecating-explicit-access-grants-for-app-owned-metafields).
"""
type MetafieldAccessGrant {
  """
  The level of access the grantee has.
  """
  access: MetafieldGrantAccessLevel!

  """
  The grantee being granted access.
  """
  grantee: String!
}

"""
Possible admin access settings for metafields.
"""
enum MetafieldAdminAccess {
  """
  Owner gets full access. The merchant has read-only access. No one else has access rights.
  """
  MERCHANT_READ

  """
  Owner gets full access. The merchant has read and write access. No one else has access rights.
  """
  MERCHANT_READ_WRITE

  """
  Owner gets full access. No one else has access rights.
  """
  PRIVATE

  """
  Owner gets full access. All applications and the merchant have read-only access.
  """
  PUBLIC_READ

  """
  Owner gets full access. All applications and the merchant have read and write access.
  """
  PUBLIC_READ_WRITE
}

"""
Provides the capabilities of a metafield definition.
"""
type MetafieldCapabilities {
  """
  Indicate whether a metafield definition is configured for filtering.
  """
  adminFilterable: MetafieldCapabilityAdminFilterable!

  """
  Indicate whether a metafield definition can be used as a smart collection condition.
  """
  smartCollectionCondition: MetafieldCapabilitySmartCollectionCondition!

  """
  Indicate whether the metafield values for a metafield definition are required to be unique.
  """
  uniqueValues: MetafieldCapabilityUniqueValues!
}

"""
Information about the admin filterable capability on a metafield definition.
"""
type MetafieldCapabilityAdminFilterable {
  """
  Indicates if the definition is eligible to have the capability.
  """
  eligible: Boolean!

  """
  Indicates if the capability is enabled.
  """
  enabled: Boolean!

  """
  Determines the metafield definition's filter status for use in admin filtering.
  """
  status: MetafieldDefinitionAdminFilterStatus!
}

"""
Information about the smart collection condition capability on a metafield definition.
"""
type MetafieldCapabilitySmartCollectionCondition {
  """
  Indicates if the definition is eligible to have the capability.
  """
  eligible: Boolean!

  """
  Indicates if the capability is enabled.
  """
  enabled: Boolean!
}

"""
Information about the unique values capability on a metafield definition.
"""
type MetafieldCapabilityUniqueValues {
  """
  Indicates if the definition is eligible to have the capability.
  """
  eligible: Boolean!

  """
  Indicates if the capability is enabled.
  """
  enabled: Boolean!
}

"""
An auto-generated type for paginating through multiple Metafields.
"""
type MetafieldConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MetafieldEdge!]!

  """
  A list of nodes that are contained in MetafieldEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [Metafield!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Defines how the metafields of a definition can be accessed in the Customer Account API.
"""
enum MetafieldCustomerAccountAccess {
  """
  The Customer Account API cannot access metafields.
  """
  NONE

  """
  The Customer Account API can read metafields.
  """
  READ

  """
  The Customer Account API can read and write metafields.
  """
  READ_WRITE
}

"""
Metafield definitions enable you to define additional validation constraints for metafields, and enable the
merchant to edit metafield values in context.
"""
type MetafieldDefinition implements Node {
  """
  The access settings associated with the metafield definition.
  """
  access: MetafieldAccess!

  """
  The capabilities of the metafield definition.
  """
  capabilities: MetafieldCapabilities!

  """
  The constraints that determine what subtypes of resources a metafield definition applies to.
  """
  constraints: MetafieldDefinitionConstraints

  """
  The description of the metafield definition.
  """
  description: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The unique identifier for the metafield definition within its namespace.
  """
  key: String!

  """
  The metafields that belong to the metafield definition.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Returns the metafields filtered by the validation status.
    """
    validationStatus: MetafieldValidationStatus = ANY
  ): MetafieldConnection!

  """
  The count of the metafields that belong to the metafield definition.
  """
  metafieldsCount(
    """
    The current validation status.
    """
    validationStatus: MetafieldValidationStatus
  ): Int!

  """
  The human-readable name of the metafield definition.
  """
  name: String!

  """
  The container for a group of metafields that the metafield definition is associated with.
  """
  namespace: String!

  """
  The resource type that the metafield definition is attached to.
  """
  ownerType: MetafieldOwnerType!

  """
  The position of the metafield definition in the pinned list.
  """
  pinnedPosition: Int

  """
  The standard metafield definition template associated with the metafield definition.
  """
  standardTemplate: StandardMetafieldDefinitionTemplate

  """
  The type of data that each of the metafields that belong to the metafield definition will store.
  Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
  """
  type: MetafieldDefinitionType!

  """
  Whether the metafield definition can be used as a collection condition.
  """
  useAsCollectionCondition: Boolean!

  """
  The validation status for the metafields that belong to the metafield definition.
  """
  validationStatus: MetafieldDefinitionValidationStatus!

  """
  A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
  the metafields that belong to the metafield definition. For example, for a metafield definition with the
  type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
  store dates after the specified minimum.
  """
  validations: [MetafieldDefinitionValidation!]!
}

"""
Possible filter statuses associated with a metafield definition for use in admin filtering.
"""
enum MetafieldDefinitionAdminFilterStatus {
  """
  The metafield definition has failed to be enabled for admin filtering.
  """
  FAILED

  """
  The metafield definition allows admin filtering by matching metafield values.
  """
  FILTERABLE

  """
  The metafield definition's metafields are currently being processed for admin filtering.
  """
  IN_PROGRESS

  """
  The metafield definition cannot be used for admin filtering.
  """
  NOT_FILTERABLE
}

"""
An auto-generated type for paginating through multiple MetafieldDefinitions.
"""
type MetafieldDefinitionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MetafieldDefinitionEdge!]!

  """
  A list of nodes that are contained in MetafieldDefinitionEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [MetafieldDefinition!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Metafield definition constraint criteria to filter metafield definitions by.
"""
enum MetafieldDefinitionConstraintStatus {
  """
  Returns both constrained and unconstrained metafield definitions.
  """
  CONSTRAINED_AND_UNCONSTRAINED

  """
  Only returns metafield definitions that are constrained to a resource subtype.
  """
  CONSTRAINED_ONLY

  """
  Only returns metafield definitions that are not constrained to a resource subtype.
  """
  UNCONSTRAINED_ONLY
}

"""
The input fields used to identify a subtype of a resource for the purposes of metafield definition constraints.
"""
input MetafieldDefinitionConstraintSubtypeIdentifier {
  """
  The category of the resource subtype.
  """
  key: String!

  """
  The specific subtype value within the identified subtype category.
  """
  value: String!
}

"""
A constraint subtype value that the metafield definition applies to.
"""
type MetafieldDefinitionConstraintValue {
  """
  The subtype value of the constraint.
  """
  value: String!
}

"""
An auto-generated type for paginating through multiple MetafieldDefinitionConstraintValues.
"""
type MetafieldDefinitionConstraintValueConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MetafieldDefinitionConstraintValueEdge!]!

  """
  A list of nodes that are contained in MetafieldDefinitionConstraintValueEdge.
  You can fetch data about an individual node, or you can follow the edges to
  fetch data about a collection of related nodes. At each node, you specify the
  fields that you want to retrieve.
  """
  nodes: [MetafieldDefinitionConstraintValue!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MetafieldDefinitionConstraintValue and a cursor during pagination.
"""
type MetafieldDefinitionConstraintValueEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MetafieldDefinitionConstraintValueEdge.
  """
  node: MetafieldDefinitionConstraintValue!
}

"""
The constraints that determine what subtypes of resources a metafield definition applies to.
"""
type MetafieldDefinitionConstraints {
  """
  The category of resource subtypes that the definition applies to.
  """
  key: String

  """
  The specific constraint subtype values that the definition applies to.
  """
  values(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldDefinitionConstraintValueConnection!
}

"""
An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.
"""
type MetafieldDefinitionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MetafieldDefinitionEdge.
  """
  node: MetafieldDefinition!
}

"""
Possible metafield definition pinned statuses.
"""
enum MetafieldDefinitionPinnedStatus {
  """
  All metafield definitions.
  """
  ANY

  """
  Only metafield definitions that are pinned.
  """
  PINNED

  """
  Only metafield definitions that are not pinned.
  """
  UNPINNED
}

"""
The set of valid sort keys for the MetafieldDefinition query.
"""
enum MetafieldDefinitionSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `name` value.
  """
  NAME

  """
  Sort by the `pinned_position` value.
  """
  PINNED_POSITION

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The type and name for the optional validation configuration of a metafield.

For example, a supported validation might consist of a `max` name and a `number_integer` type.
This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
"""
type MetafieldDefinitionSupportedValidation {
  """
  The name of the metafield definition validation.
  """
  name: String!

  """
  The type of input for the validation.
  """
  type: String!
}

"""
A metafield definition type provides basic foundation and validation for a metafield.
"""
type MetafieldDefinitionType {
  """
  The category associated with the metafield definition type.
  """
  category: String!

  """
  The name of the type for the metafield definition.
  See the list of [supported types](https://shopify.dev/apps/metafields/types).
  """
  name: String!

  """
  The supported validations for a metafield definition type.
  """
  supportedValidations: [MetafieldDefinitionSupportedValidation!]!

  """
  Whether metafields without a definition can be migrated to a definition of this type.
  """
  supportsDefinitionMigrations: Boolean!

  """
  The value type for a metafield created with this definition type.
  """
  valueType: MetafieldValueType! @deprecated(reason: "`valueType` is deprecated and `name` should be used for type information.")
}

"""
A configured metafield definition validation.

For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.

Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
"""
type MetafieldDefinitionValidation {
  """
  The validation name.
  """
  name: String!

  """
  The name for the metafield type of this validation.
  """
  type: String!

  """
  The validation value.
  """
  value: String
}

"""
Possible metafield definition validation statuses.
"""
enum MetafieldDefinitionValidationStatus {
  """
  All of this definition's metafields are valid.
  """
  ALL_VALID

  """
  Asynchronous validation of this definition's metafields is in progress.
  """
  IN_PROGRESS

  """
  Some of this definition's metafields are invalid.
  """
  SOME_INVALID
}

"""
An auto-generated type which holds one Metafield and a cursor during pagination.
"""
type MetafieldEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MetafieldEdge.
  """
  node: Metafield!
}

"""
Possible access levels for explicit metafield access grants.
"""
enum MetafieldGrantAccessLevel {
  """
  Read metafield access.
  """
  READ

  """
  Read and write metafield access.
  """
  READ_WRITE
}

"""
Possible types of a metafield's owner resource.
"""
enum MetafieldOwnerType {
  """
  The Api Permission metafield owner type.
  """
  API_PERMISSION

  """
  The Article metafield owner type.
  """
  ARTICLE

  """
  The Blog metafield owner type.
  """
  BLOG

  """
  The Cart Transform metafield owner type.
  """
  CARTTRANSFORM

  """
  The Collection metafield owner type.
  """
  COLLECTION

  """
  The Company metafield owner type.
  """
  COMPANY

  """
  The Company Location metafield owner type.
  """
  COMPANY_LOCATION

  """
  The Customer metafield owner type.
  """
  CUSTOMER

  """
  The Delivery Customization metafield owner type.
  """
  DELIVERY_CUSTOMIZATION

  """
  The Discount metafield owner type.
  """
  DISCOUNT

  """
  The draft order metafield owner type.
  """
  DRAFTORDER

  """
  The Fulfillment Constraint Rule metafield owner type.
  """
  FULFILLMENT_CONSTRAINT_RULE

  """
  The GiftCardTransaction metafield owner type.
  """
  GIFT_CARD_TRANSACTION

  """
  The Location metafield owner type.
  """
  LOCATION

  """
  The Market metafield owner type.
  """
  MARKET

  """
  The Media Image metafield owner type.
  """
  MEDIA_IMAGE @deprecated(reason: "`MEDIA_IMAGE` is deprecated.")

  """
  The Order metafield owner type.
  """
  ORDER

  """
  The Order Routing Location Rule metafield owner type.
  """
  ORDER_ROUTING_LOCATION_RULE

  """
  The Page metafield owner type.
  """
  PAGE

  """
  The Payment Customization metafield owner type.
  """
  PAYMENT_CUSTOMIZATION

  """
  The Product metafield owner type.
  """
  PRODUCT

  """
  The Product Variant metafield owner type.
  """
  PRODUCTVARIANT

  """
  The Selling Plan metafield owner type.
  """
  SELLING_PLAN

  """
  The Shop metafield owner type.
  """
  SHOP

  """
  The Validation metafield owner type.
  """
  VALIDATION
}

"""
The resource referenced by the metafield value.
"""
union MetafieldReference = Collection | Company | Customer | GenericFile | MediaImage | Metaobject | Model3d | Order | Page | Product | ProductVariant | TaxonomyValue | Video

"""
An auto-generated type for paginating through multiple MetafieldReferences.
"""
type MetafieldReferenceConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MetafieldReferenceEdge!]!

  """
  A list of nodes that are contained in MetafieldReferenceEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [MetafieldReference]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MetafieldReference and a cursor during pagination.
"""
type MetafieldReferenceEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MetafieldReferenceEdge.
  """
  node: MetafieldReference
}

"""
Types of resources that may use metafields to reference other resources.
"""
union MetafieldReferencer = AppInstallation | Article | Blog | Collection | Company | CompanyLocation | Customer | DeliveryCustomization | DiscountAutomaticNode | DiscountCodeNode | DiscountNode | DraftOrder | FulfillmentOrder | Location | Market | Metaobject | Order | Page | PaymentCustomization | Product | ProductVariant | Shop

"""
Defines a relation between two resources via a reference metafield.
The referencer owns the joining field with a given namespace and key,
while the target is referenced by the field.
"""
type MetafieldRelation {
  """
  The key of the field making the reference.
  """
  key: String!

  """
  The name of the field making the reference.
  """
  name: String!

  """
  The namespace of the metafield making the reference, or type of the metaobject.
  """
  namespace: String!

  """
  The resource making the reference.
  """
  referencer: MetafieldReferencer!

  """
  The referenced resource.
  """
  target: MetafieldReference!
}

"""
An auto-generated type for paginating through multiple MetafieldRelations.
"""
type MetafieldRelationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MetafieldRelationEdge!]!

  """
  A list of nodes that are contained in MetafieldRelationEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [MetafieldRelation!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MetafieldRelation and a cursor during pagination.
"""
type MetafieldRelationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MetafieldRelationEdge.
  """
  node: MetafieldRelation!
}

"""
Defines how the metafields of a definition can be accessed in Storefront API
surface areas, including Liquid and the GraphQL Storefront API.
"""
enum MetafieldStorefrontAccess {
  """
  Metafields are not accessible in any Storefront API surface area.
  """
  NONE

  """
  Metafields are accessible in the GraphQL Storefront API and online store Liquid templates.
  """
  PUBLIC_READ
}

"""
Possible metafield validation statuses.
"""
enum MetafieldValidationStatus {
  """
  Any validation status (valid or invalid).
  """
  ANY

  """
  Invalid (according to definition).
  """
  INVALID

  """
  Valid (according to definition).
  """
  VALID
}

"""
Legacy type information for the stored value.
Replaced by `type`.
"""
enum MetafieldValueType {
  """
  A `true` or `false` value.
  """
  BOOLEAN

  """
  A whole number.
  """
  INTEGER

  """
  A JSON string.
  """
  JSON_STRING

  """
  A text field.
  """
  STRING
}

"""
Provides an object instance represented by a MetaobjectDefinition.
"""
type Metaobject implements Node {
  """
  Metaobject capabilities for this Metaobject.
  """
  capabilities: MetaobjectCapabilityData!

  """
  The app used to create the object.
  """
  createdBy: App!

  """
  The app used to create the object.
  """
  createdByApp: App!

  """
  The staff member who created the metaobject.
  """
  createdByStaff: StaffMember

  """
  The MetaobjectDefinition that models this object type.
  """
  definition: MetaobjectDefinition!

  """
  The preferred display name field value of the metaobject.
  """
  displayName: String!

  """
  The field for an object key, or null if the key has no field definition.
  """
  field(
    """
    The metaobject key to access.
    """
    key: String!
  ): MetaobjectField

  """
  All ordered fields of the metaobject with their definitions and values.
  """
  fields: [MetaobjectField!]!

  """
  The unique handle of the object, useful as a custom ID.
  """
  handle: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  List of back references metafields that belong to the resource.
  """
  referencedBy(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldRelationConnection!

  """
  The staff member who created the metaobject.
  """
  staffMember: StaffMember @deprecated(reason: "Use `createdByStaff` instead.")

  """
  The recommended field to visually represent this metaobject. May be a file reference or color         field.
  """
  thumbnailField: MetaobjectField

  """
  The type of the metaobject.
  """
  type: String!

  """
  When the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Provides metaobject definition's access configuration.
"""
type MetaobjectAccess {
  """
  Access configuration for Admin API surface areas, including the GraphQL Admin API.
  """
  admin: MetaobjectAdminAccess!

  """
  Access configuration for Storefront surface areas, including the GraphQL Storefront API and Liquid.
  """
  storefront: MetaobjectStorefrontAccess!
}

"""
Defines how the metaobjects of a definition can be accessed in admin API surface areas.
"""
enum MetaobjectAdminAccess {
  """
  Applications that act on behalf of merchants can read metaobjects.
  Only the owning application can write metaobjects.
  """
  MERCHANT_READ

  """
  The owning application, as well as applications that act on behalf of merchants can read and write metaobjects.
  No other applications can read or write metaobjects.
  """
  MERCHANT_READ_WRITE

  """
  Only the application that owns a metaobject can read and write to it.
  """
  PRIVATE

  """
  All applications with the `metaobjects` access scope can read metaobjects.
  Only the owning application can write metaobjects.
  """
  PUBLIC_READ

  """
  All applications with the `metaobjects` access scope can read and write metaobjects.
  """
  PUBLIC_READ_WRITE
}

"""
Provides the capabilities of a metaobject definition.
"""
type MetaobjectCapabilities {
  """
  Indicates whether a metaobject definition can be displayed as a page on the Online Store.
  """
  onlineStore: MetaobjectCapabilitiesOnlineStore

  """
  Indicate whether a metaobject definition is publishable.
  """
  publishable: MetaobjectCapabilitiesPublishable!

  """
  Indicate whether a metaobject definition is renderable and exposes SEO data.
  """
  renderable: MetaobjectCapabilitiesRenderable

  """
  Indicate whether a metaobject definition is translatable.
  """
  translatable: MetaobjectCapabilitiesTranslatable!
}

"""
The Online Store capability of a metaobject definition.
"""
type MetaobjectCapabilitiesOnlineStore {
  """
  The data associated with the Online Store capability.
  """
  data: MetaobjectCapabilityDefinitionDataOnlineStore

  """
  Indicates if the capability is enabled.
  """
  enabled: Boolean!
}

"""
The publishable capability of a metaobject definition.
"""
type MetaobjectCapabilitiesPublishable {
  """
  Indicates if the capability is enabled.
  """
  enabled: Boolean!
}

"""
The renderable capability of a metaobject definition.
"""
type MetaobjectCapabilitiesRenderable {
  """
  The data associated with the renderable capability.
  """
  data: MetaobjectCapabilityDefinitionDataRenderable

  """
  Indicates if the capability is enabled.
  """
  enabled: Boolean!
}

"""
The translatable capability of a metaobject definition.
"""
type MetaobjectCapabilitiesTranslatable {
  """
  Indicates if the capability is enabled.
  """
  enabled: Boolean!
}

"""
Provides the capabilities of a metaobject.
"""
type MetaobjectCapabilityData {
  """
  The Online Store capability for this metaobject.
  """
  onlineStore: MetaobjectCapabilityDataOnlineStore

  """
  The publishable capability for this metaobject.
  """
  publishable: MetaobjectCapabilityDataPublishable
}

"""
The Online Store capability for the parent metaobject.
"""
type MetaobjectCapabilityDataOnlineStore {
  """
  The theme template used when viewing the metaobject in a store.
  """
  templateSuffix: String
}

"""
The publishable capability for the parent metaobject.
"""
type MetaobjectCapabilityDataPublishable {
  """
  The visibility status of this metaobject across all channels.
  """
  status: MetaobjectStatus!
}

"""
The Online Store capability data for the metaobject definition.
"""
type MetaobjectCapabilityDefinitionDataOnlineStore {
  """
  Flag indicating if a sufficient number of redirects are available to redirect all published entries.
  """
  canCreateRedirects: Boolean!

  """
  The URL handle for accessing pages of this metaobject type in the Online Store.
  """
  urlHandle: String!
}

"""
The renderable capability data for the metaobject definition.
"""
type MetaobjectCapabilityDefinitionDataRenderable {
  """
  The metaobject field used as an alias for the SEO page description.
  """
  metaDescriptionKey: String

  """
  The metaobject field used as an alias for the SEO page title.
  """
  metaTitleKey: String
}

"""
An auto-generated type for paginating through multiple Metaobjects.
"""
type MetaobjectConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MetaobjectEdge!]!

  """
  A list of nodes that are contained in MetaobjectEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [Metaobject!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Provides the definition of a generic object structure composed of metafields.
"""
type MetaobjectDefinition implements Node {
  """
  Access configuration for the metaobject definition.
  """
  access: MetaobjectAccess!

  """
  The capabilities of the metaobject definition.
  """
  capabilities: MetaobjectCapabilities!

  """
  The app used to create the metaobject definition.
  """
  createdByApp: App!

  """
  The staff member who created the metaobject definition.
  """
  createdByStaff: StaffMember

  """
  The administrative description.
  """
  description: String

  """
  The key of a field to reference as the display name for each object.
  """
  displayNameKey: String

  """
  The fields defined for this object type.
  """
  fieldDefinitions: [MetaobjectFieldDefinition!]!

  """
  Whether this metaobject definition has field whose type can visually represent
  a metaobject with        the `thumbnailField`.
  """
  hasThumbnailField: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A paginated connection to the metaobjects associated with the definition.
  """
  metaobjects(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetaobjectConnection!

  """
  The count of metaobjects created for the definition.
  """
  metaobjectsCount: Int!

  """
  The human-readable name.
  """
  name: String!

  """
  The type of the object definition. Defines the namespace of associated metafields.
  """
  type: String!
}

"""
An auto-generated type for paginating through multiple MetaobjectDefinitions.
"""
type MetaobjectDefinitionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MetaobjectDefinitionEdge!]!

  """
  A list of nodes that are contained in MetaobjectDefinitionEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [MetaobjectDefinition!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MetaobjectDefinition and a cursor during pagination.
"""
type MetaobjectDefinitionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MetaobjectDefinitionEdge.
  """
  node: MetaobjectDefinition!
}

"""
An auto-generated type which holds one Metaobject and a cursor during pagination.
"""
type MetaobjectEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MetaobjectEdge.
  """
  node: Metaobject!
}

"""
Provides a field definition and the data value assigned to it.
"""
type MetaobjectField {
  """
  The field definition for this object key.
  """
  definition: MetaobjectFieldDefinition!

  """
  The assigned field value in JSON format.
  """
  jsonValue: JSON

  """
  The object key of this field.
  """
  key: String!

  """
  For resource reference fields, provides the referenced object.
  """
  reference: MetafieldReference

  """
  For resource reference list fields, provides the list of referenced objects.
  """
  references(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int
  ): MetafieldReferenceConnection

  """
  For file reference or color fields, provides visual attributes for this field.
  """
  thumbnail: MetaobjectThumbnail

  """
  The type of the field.
  """
  type: String!

  """
  The assigned field value, always stored as a string regardless of the field type.
  """
  value: String
}

"""
Defines a field for a MetaobjectDefinition with properties
such as the field's data type and validations.
"""
type MetaobjectFieldDefinition {
  """
  The administrative description.
  """
  description: String

  """
  A key name used to identify the field within the metaobject composition.
  """
  key: String!

  """
  The human-readable name.
  """
  name: String!

  """
  Required status of the field within the metaobject composition.
  """
  required: Boolean!

  """
  The type of data that the field stores.
  """
  type: MetafieldDefinitionType!

  """
  A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
  the field. For example, a field with the type `date` can set a minimum date requirement.
  """
  validations: [MetafieldDefinitionValidation!]!
}

"""
The input fields for retrieving a metaobject by handle.
"""
input MetaobjectHandleInput {
  """
  The handle of the metaobject to create or update.
  """
  handle: String!

  """
  The type of the metaobject. Must match an existing metaobject definition type.
  """
  type: String!
}

"""
Defines visibility status for metaobjects.
"""
enum MetaobjectStatus {
  """
  The metaobjects is active for public use.
  """
  ACTIVE

  """
  The metaobjects is an internal record.
  """
  DRAFT
}

"""
Defines how the metaobjects of a definition can be accessed in Storefront API
surface areas, including Liquid and the GraphQL Storefront API.
"""
enum MetaobjectStorefrontAccess {
  """
  Metaobjects are not accessible in any Storefront API surface area.
  """
  NONE

  """
  Metaobjects are accessible in the GraphQL Storefront API by any application
  with the `unauthenticated_read_metaobjects` access scope.
  Metaobjects are accessible in online store Liquid templates.
  """
  PUBLIC_READ
}

"""
Provides attributes for visual representation.
"""
type MetaobjectThumbnail {
  """
  The file to be used for visual representation of this metaobject.
  """
  file: File

  """
  The hexadecimal color code to be used for respresenting this metaobject.
  """
  hex: String
}

"""
The set of valid sort keys for the MethodDefinition query.
"""
enum MethodDefinitionSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `rate_provider_type` value.
  """
  RATE_PROVIDER_TYPE

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
You can use the `MobilePlatformApplication` resource to enable
[shared web credentials](https://developer.apple.com/documentation/security/shared_web_credentials) for Shopify iOS apps,
as well as to create [iOS universal link](https://developer.apple.com/ios/universal-links/)
or [Android app link](https://developer.android.com/training/app-links/)
verification endpoints for merchant Shopify iOS or Android apps.
Shared web credentials let iOS users access a native app after logging into the
respective website in Safari without re-entering
their username and password. If a user changes their credentials in the app, then those changes are reflected in Safari.
You must use a custom domain to integrate shared web credentials with Shopify. With each platform's link system,
users can tap a link to a shop's website and get seamlessly redirected to a merchant's installed app without going
through a browser or manually selecting an app.

For full configuration instructions on iOS shared web credentials,
see the [associated domains setup](https://developer.apple.com/documentation/security/password_autofill/setting_up_an_app_s_associated_domains)
technical documentation.

For full configuration instructions on iOS universal links or Android App Links,
see the respective [iOS universal link](https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content)
or [Android app link](https://developer.android.com/training/app-links) technical documentation.
"""
union MobilePlatformApplication = AndroidApplication | AppleApplication

"""
An auto-generated type for paginating through multiple MobilePlatformApplications.
"""
type MobilePlatformApplicationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [MobilePlatformApplicationEdge!]!

  """
  A list of nodes that are contained in MobilePlatformApplicationEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [MobilePlatformApplication!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one MobilePlatformApplication and a cursor during pagination.
"""
type MobilePlatformApplicationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of MobilePlatformApplicationEdge.
  """
  node: MobilePlatformApplication!
}

"""
Represents a Shopify hosted 3D model.
"""
type Model3d implements File & Media & Node {
  """
  A word or phrase to describe the contents or the function of a file.
  """
  alt: String

  """
  The 3d model's bounding box information.
  """
  boundingBox: Model3dBoundingBox

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """
  Any errors that have occurred on the file.
  """
  fileErrors: [FileError!]!

  """
  The status of the file.
  """
  fileStatus: FileStatus!

  """
  The 3d model's filename.
  """
  filename: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The media content type.
  """
  mediaContentType: MediaContentType!

  """
  Any errors which have occurred on the media.
  """
  mediaErrors: [MediaError!]!

  """
  The warnings attached to the media.
  """
  mediaWarnings: [MediaWarning!]!

  """
  The 3d model's original source.
  """
  originalSource: Model3dSource

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  The 3d model's sources.
  """
  sources: [Model3dSource!]!

  """
  Current status of the media.
  """
  status: MediaStatus!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
  """
  updatedAt: DateTime!
}

"""
Bounding box information of a 3d model.
"""
type Model3dBoundingBox {
  """
  Size in meters of the smallest volume which contains the 3d model.
  """
  size: Vector3!
}

"""
A source for a Shopify-hosted 3d model.

Types of sources include GLB and USDZ formatted 3d models, where the former
is an original 3d model and the latter has been converted from the original.

If the original source is in GLB format and over 15 MBs in size, then both the
original and the USDZ formatted source are optimized to reduce the file size.
"""
type Model3dSource {
  """
  The 3d model source's filesize.
  """
  filesize: Int!

  """
  The 3d model source's format.
  """
  format: String!

  """
  The 3d model source's MIME type.
  """
  mimeType: String!

  """
  The 3d model source's URL.
  """
  url: String!
}

"""
A monetary value string without a currency symbol or code. Example value: `"100.57"`.
"""
scalar Money

"""
A collection of monetary values in their respective currencies. Typically used
in the context of multi-currency pricing and transactions,
when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
"""
type MoneyBag {
  """
  Amount in presentment currency.
  """
  presentmentMoney: MoneyV2!

  """
  Amount in shop currency.
  """
  shopMoney: MoneyV2!
}

"""
The input fields for a monetary value with currency.
"""
input MoneyInput {
  """
  Decimal money amount.
  """
  amount: Decimal!

  """
  Currency of the money.
  """
  currencyCode: CurrencyCode!
}

"""
A monetary value with currency.
"""
type MoneyV2 {
  """
  Decimal money amount.
  """
  amount: Decimal!

  """
  Currency of the money.
  """
  currencyCode: CurrencyCode!
}

"""
A default cursor that you can use in queries to paginate your results. Each edge in a connection can
return a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as
the starting point to retrieve the nodes before or after it in a connection.

To learn more about using cursor-based pagination, refer to
[Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).
"""
interface Navigable {
  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
}

"""
A navigation item, holding basic link attributes.
"""
type NavigationItem {
  """
  The unique identifier of the navigation item.
  """
  id: String!

  """
  The name of the navigation item.
  """
  title: String!

  """
  The URL of the page that the navigation item links to.
  """
  url: URL!
}

"""
An object with an ID field to support global identification, in accordance with the
[Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
"""
interface Node {
  """
  A globally-unique ID.
  """
  id: ID!
}

"""
The shop's online store channel.
"""
type OnlineStore {
  """
  Storefront password information.
  """
  passwordProtection: OnlineStorePasswordProtection!
}

"""
Storefront password information.
"""
type OnlineStorePasswordProtection {
  """
  Whether the storefront password is enabled.
  """
  enabled: Boolean!
}

"""
Online Store preview URL of the object.
"""
interface OnlineStorePreviewable {
  """
  The [preview URL](https://help.shopify.com/manual/online-store/setting-up#preview-your-store) for the online store.
  """
  onlineStorePreviewUrl: URL
}

"""
A theme for display on the storefront.
"""
type OnlineStoreTheme implements HasPublishedTranslations & Node {
  """
  The date and time when the theme was created.
  """
  createdAt: DateTime!

  """
  The files in the theme.
  """
  files(
    """
    A cursor for use in pagination.
    """
    after: String

    """
    The filenames of the theme files. At most 50 filenames can be specified. Use '*' to match zero or more characters.
    """
    filenames: [String!]

    """
    Returns at most the first n files for this theme. Fewer than n files may be
    returned to stay within the payload size limit, or when the end of the list
    is reached. At most 250 can be fetched at once.
    """
    first: Int = 50
  ): OnlineStoreThemeFileConnection

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the theme, set by the merchant.
  """
  name: String!

  """
  The prefix of the theme.
  """
  prefix: String!

  """
  Whether the theme is processing.
  """
  processing: Boolean!

  """
  Whether the theme processing failed.
  """
  processingFailed: Boolean!

  """
  The role of the theme.
  """
  role: ThemeRole!

  """
  The theme store ID.
  """
  themeStoreId: Int

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!

  """
  The date and time when the theme was last updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple OnlineStoreThemes.
"""
type OnlineStoreThemeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [OnlineStoreThemeEdge!]!

  """
  A list of nodes that are contained in OnlineStoreThemeEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [OnlineStoreTheme!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one OnlineStoreTheme and a cursor during pagination.
"""
type OnlineStoreThemeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of OnlineStoreThemeEdge.
  """
  node: OnlineStoreTheme!
}

"""
Represents a theme file.
"""
type OnlineStoreThemeFile {
  """
  The body of the theme file.
  """
  body: OnlineStoreThemeFileBody!

  """
  The md5 digest of the theme file for data integrity.
  """
  checksumMd5: String

  """
  The content type of the theme file.
  """
  contentType: String!

  """
  The date and time when the theme file was created.
  """
  createdAt: DateTime!

  """
  The unique identifier of the theme file.
  """
  filename: String!

  """
  The size of the theme file in bytes.
  """
  size: UnsignedInt64!

  """
  The date and time when the theme file was last updated.
  """
  updatedAt: DateTime!
}

"""
Represents the body of a theme file.
"""
union OnlineStoreThemeFileBody = OnlineStoreThemeFileBodyBase64 | OnlineStoreThemeFileBodyText | OnlineStoreThemeFileBodyUrl

"""
Represents the base64 encoded body of a theme file.
"""
type OnlineStoreThemeFileBodyBase64 {
  """
  The body of the theme file, base64 encoded.
  """
  contentBase64: String!
}

"""
Represents the body of a theme file.
"""
type OnlineStoreThemeFileBodyText {
  """
  The body of the theme file.
  """
  content: String!
}

"""
Represents the url of the body of a theme file.
"""
type OnlineStoreThemeFileBodyUrl {
  """
  The short lived url for the body of the theme file.
  """
  url: URL!
}

"""
An auto-generated type for paginating through multiple OnlineStoreThemeFiles.
"""
type OnlineStoreThemeFileConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [OnlineStoreThemeFileEdge!]!

  """
  A list of nodes that are contained in OnlineStoreThemeFileEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [OnlineStoreThemeFile!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!

  """
  List of errors that occurred during the request.
  """
  userErrors: [OnlineStoreThemeFileReadResult!]!
}

"""
An auto-generated type which holds one OnlineStoreThemeFile and a cursor during pagination.
"""
type OnlineStoreThemeFileEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of OnlineStoreThemeFileEdge.
  """
  node: OnlineStoreThemeFile!
}

"""
Represents the result of a read operation performed on a theme asset.
"""
type OnlineStoreThemeFileReadResult {
  """
  Type that indicates the result of the operation.
  """
  code: OnlineStoreThemeFileResultType!

  """
  Unique identifier associated with the operation and the theme file.
  """
  filename: String!
}

"""
Type of a theme file operation result.
"""
enum OnlineStoreThemeFileResultType {
  """
  Operation was malformed or invalid.
  """
  BAD_REQUEST

  """
  Operation faced a conflict with the current state of the file.
  """
  CONFLICT

  """
  Operation encountered an error.
  """
  ERROR

  """
  Operation file could not be found.
  """
  NOT_FOUND

  """
  Operation was successful.
  """
  SUCCESS

  """
  Operation timed out.
  """
  TIMEOUT

  """
  Operation could not be processed due to issues with input data.
  """
  UNPROCESSABLE_ENTITY
}

"""
An order is a customer's request to purchase one or more products from a shop.
You can retrieve and update orders using the `Order` object.
Learn more about
[editing an existing order with the GraphQL Admin
API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).

Only the last 60 days' worth of orders from a store are accessible from the
`Order` object by default. If you want to access older orders,
then you need to [request access to all
orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
[Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by
this change and are automatically granted the scope.

**Caution:** Only use this data if it's required for your app's functionality.
Shopify will restrict [access to
scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
legitimate use for the associated data.
"""
type Order implements CommentEventSubject & HasEvents & HasLocalizationExtensions & HasLocalizedFields & HasMetafieldDefinitions & HasMetafields & LegacyInteroperability & Node {
  """
  A list of additional fees applied to the order.
  """
  additionalFees: [AdditionalFee!]!

  """
  A list of sales agreements associated with the order.
  """
  agreements(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | happened_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SalesAgreementConnection!

  """
  A list of messages that appear on the order page in the Shopify admin.
  """
  alerts: [ResourceAlert!]!

  """
  The application that created the order.
  """
  app: OrderApp

  """
  The billing address of the customer.
  """
  billingAddress: MailingAddress

  """
  Whether the billing address matches the shipping address.
  """
  billingAddressMatchesShippingAddress: Boolean!

  """
  Whether the order can be manually marked as paid.
  """
  canMarkAsPaid: Boolean!

  """
  Whether a customer email exists for the order.
  """
  canNotifyCustomer: Boolean!

  """
  The reason provided when the order was canceled.
  Returns `null` if the order wasn't canceled.
  """
  cancelReason: OrderCancelReason

  """
  Cancellation details for the order.
  """
  cancellation: OrderCancellation

  """
  The date and time when the order was canceled.
  Returns `null` if the order wasn't canceled.
  """
  cancelledAt: DateTime

  """
  Whether payment for the order can be captured.
  """
  capturable: Boolean!

  """
  The total order-level discount amount, before returns, in shop currency.
  """
  cartDiscountAmount: Money @deprecated(reason: "Use `cartDiscountAmountSet` instead.")

  """
  The total order-level discount amount, before returns, in shop and presentment currencies.
  """
  cartDiscountAmountSet: MoneyBag

  """
  The channel that created the order.
  """
  channel: Channel @deprecated(reason: "Use `publication` instead.")

  """
  Details about the channel that created the order.
  """
  channelInformation: ChannelInformation

  """
  The IP address of the API client that created the order.
  """
  clientIp: String

  """
  Whether the order is closed.
  """
  closed: Boolean!

  """
  The date and time when the order was closed.
  Returns `null` if the order isn't closed.
  """
  closedAt: DateTime

  """
  A randomly generated alpha-numeric identifier for the order that may be shown to the customer
  instead of the sequential order name. For example, "XPAV284CT", "R50KELTJP" or "35PKUN0UJ".
  This value isn't guaranteed to be unique.
  """
  confirmationNumber: String

  """
  Whether inventory has been reserved for the order.
  """
  confirmed: Boolean!

  """
  Date and time when the order was created in Shopify.
  """
  createdAt: DateTime!

  """
  The shop currency when the order was placed.
  """
  currencyCode: CurrencyCode!

  """
  The current order-level discount amount after all order updates, in shop and presentment currencies.
  """
  currentCartDiscountAmountSet: MoneyBag!

  """
  The current shipping price after applying refunds and discounts. If the parent
  `order.taxesIncluded` field is true, then this price includes taxes.
  Otherwise, this field is the pre-tax price.
  """
  currentShippingPriceSet: MoneyBag!

  """
  The sum of the quantities for all line items that contribute to the order's current subtotal price.
  """
  currentSubtotalLineItemsQuantity: Int!

  """
  The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  currentSubtotalPriceSet: MoneyBag!

  """
  A list of all tax lines applied to line items on the order, after returns.
  Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
  """
  currentTaxLines: [TaxLine!]!

  """
  The total amount of additional fees after returns, in shop and presentment currencies.
  Returns `null` if there are no additional fees for the order.
  """
  currentTotalAdditionalFeesSet: MoneyBag

  """
  The total amount discounted on the order after returns, in shop and presentment currencies.
  This includes both order and line level discounts.
  """
  currentTotalDiscountsSet: MoneyBag!

  """
  The total amount of duties after returns, in shop and presentment currencies.
  Returns `null` if duties aren't applicable.
  """
  currentTotalDutiesSet: MoneyBag

  """
  The total price of the order, after returns, in shop and presentment currencies.
  This includes taxes and discounts.
  """
  currentTotalPriceSet: MoneyBag!

  """
  The sum of the prices of all tax lines applied to line items on the order,
  after returns, in shop and presentment currencies.
  """
  currentTotalTaxSet: MoneyBag!

  """
  The total weight of the order after returns, in grams.
  """
  currentTotalWeight: UnsignedInt64!

  """
  A list of additional merchant-facing details that have been added to the
  order. For example, whether an order is a customer's first.
  """
  customAttributes: [Attribute!]!

  """
  The customer that placed the order.
  """
  customer: Customer

  """
  Whether the customer agreed to receive marketing materials.
  """
  customerAcceptsMarketing: Boolean!

  """
  The customer's visits and interactions with the online store before placing the order.
  """
  customerJourney: CustomerJourney @deprecated(reason: "Use `customerJourneySummary` instead.")

  """
  The customer's visits and interactions with the online store before placing the order.
  """
  customerJourneySummary: CustomerJourneySummary

  """
  A two-letter or three-letter language code, optionally followed by a region modifier.
  """
  customerLocale: String

  """
  A list of discounts that are applied to the order, not including order edits and refunds.
  """
  discountApplications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): DiscountApplicationConnection!

  """
  The discount code used for the order.
  """
  discountCode: String

  """
  The discount codes used for the order.
  """
  discountCodes: [String!]!

  """
  The primary address of the customer.
  Returns `null` if neither the shipping address nor the billing address was provided.
  """
  displayAddress: MailingAddress

  """
  The financial status of the order that can be shown to the merchant.
  This field doesn't capture all the details of an order's financial state. It
  should only be used for display summary purposes.
  """
  displayFinancialStatus: OrderDisplayFinancialStatus

  """
  The fulfillment status for the order that can be shown to the merchant.
  This field does not capture all the details of an order's fulfillment state.
  It should only be used for display summary purposes.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  displayFulfillmentStatus: OrderDisplayFulfillmentStatus!

  """
  A list of the disputes associated with the order.
  """
  disputes: [OrderDisputeSummary!]!

  """
  Whether duties are included in the subtotal price of the order.
  """
  dutiesIncluded: Boolean!

  """
  Whether the order has had any edits applied.
  """
  edited: Boolean!

  """
  The email address associated with the customer.
  """
  email: String

  """
  Whether taxes on the order are estimated.
  This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
  """
  estimatedTaxes: Boolean!

  """
  A list of events associated with the order.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A list of ExchangeV2s for the order.
  """
  exchangeV2s(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | completed_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ExchangeV2Connection!

  """
  Whether there are line items that can be fulfilled.
  This field returns `false` when the order has no fulfillable line items.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  fulfillable: Boolean!

  """
  A list of fulfillment orders for a specific order.

  [FulfillmentOrder API access scopes](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder#api-access-scopes)
  govern which fulfillments orders are returned.
  An API client will only receive a subset of the fulfillment orders which belong to an order
  if they don't have the necessary access scopes to view all of the fulfillment orders.
  In the case that an API client does not have the access scopes necessary to view
  any of the fulfillment orders that belong to an order, an empty array will be returned.
  """
  fulfillmentOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    If false, all fulfillment orders will be returned. If true, fulfillment
    orders that are normally hidden from the merchant will be excluded.
    For example, fulfillment orders that were closed after being combined or moved are hidden.
    """
    displayable: Boolean = false

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | assigned_location_id | id |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | status | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): FulfillmentOrderConnection!

  """
  List of shipments for the order.
  """
  fulfillments(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [Fulfillment!]!

  """
  The count of fulfillments including the cancelled fulfillments.
  """
  fulfillmentsCount: Count

  """
  Whether the order has been paid in full.
  """
  fullyPaid: Boolean!

  """
  Whether the merchant added a timeline comment to the order.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The URL of the first page of the online store that the customer visited before they submitted the order.
  """
  landingPageDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPageHtml` instead")

  """
  The first page of the online store that the customer visited before they submitted the order.
  """
  landingPageUrl: URL @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPage` instead")

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  A list of the order's line items.
  """
  lineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): LineItemConnection!

  """
  List of localization extensions for the resource.
  """
  localizationExtensions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The country codes of the extensions.
    """
    countryCodes: [CountryCode!]

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The purpose of the extensions.
    """
    purposes: [LocalizationExtensionPurpose!]

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): LocalizationExtensionConnection! @deprecated(reason: "This connection will be removed in a future version. Use `localizedFields` instead.")

  """
  List of localized fields for the resource.
  """
  localizedFields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The country codes of the extensions.
    """
    countryCodes: [CountryCode!]

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The purpose of the extensions.
    """
    purposes: [LocalizedFieldPurpose!]

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): LocalizedFieldConnection!

  """
  The merchant's business entity associated with the order.
  """
  merchantBusinessEntity: BusinessEntity!

  """
  Whether the order can be edited by the merchant. For example, canceled orders can’t be edited.
  """
  merchantEditable: Boolean!

  """
  A list of reasons why the order can't be edited. For example, "Canceled orders can't be edited".
  """
  merchantEditableErrors: [String!]!

  """
  The application acting as the Merchant of Record for the order.
  """
  merchantOfRecordApp: OrderApp

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The unique identifier for the order that appears on the order page in the Shopify admin and the <b>Order status</b> page.
  For example, "#1001", "EN1001", or "1001-A".
  This value isn't unique across multiple stores.
  """
  name: String!

  """
  The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
  """
  netPayment: Money! @deprecated(reason: "Use `netPaymentSet` instead.")

  """
  The net payment for the order, based on the total amount received minus the
  total amount refunded, in shop and presentment currencies.
  """
  netPaymentSet: MoneyBag!

  """
  A list of line items that can't be fulfilled.
  For example, tips and fully refunded line items can't be fulfilled.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  nonFulfillableLineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): LineItemConnection!

  """
  The contents of the note associated with the order.
  """
  note: String

  """
  The total amount of additional fees at the time of order creation, in shop and presentment currencies.
  Returns `null` if additional fees aren't applicable.
  """
  originalTotalAdditionalFeesSet: MoneyBag

  """
  The total amount of duties at the time of order creation, in shop and presentment currencies.
  Returns `null` if duties aren't applicable.
  """
  originalTotalDutiesSet: MoneyBag

  """
  The total price of the order at the time of order creation, in shop and presentment currencies.
  """
  originalTotalPriceSet: MoneyBag!

  """
  The payment collection details for the order.
  """
  paymentCollectionDetails: OrderPaymentCollectionDetails!

  """
  A list of the names of all payment gateways used for the order.
  For example, "Shopify Payments" and "Cash on Delivery (COD)".
  """
  paymentGatewayNames: [String!]!

  """
  The payment terms associated with the order.
  """
  paymentTerms: PaymentTerms

  """
  The phone number associated with the customer.
  """
  phone: String

  """
  The fulfillment location that was assigned when the order was created.
  Orders can have multiple fulfillment orders. These fulfillment orders can each
  be assigned to a different location which is responsible for fulfilling a
  subset of the items in an order. The `Order.physicalLocation` field will only
  point to one of these locations.
  Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder)
  object for up to date fulfillment location information.
  """
  physicalLocation: Location @deprecated(reason: "Use `fulfillmentOrders` to get the fulfillment location for the order")

  """
  The PO number associated with the order.
  """
  poNumber: String

  """
  The payment `CurrencyCode` of the customer for the order.
  """
  presentmentCurrencyCode: CurrencyCode!

  """
  The date and time when the order was processed.
  This date and time might not match the date and time when the order was created.
  """
  processedAt: DateTime!

  """
  The publication that the order was created from.
  """
  publication: Publication

  """
  The purchasing entity for the order.
  """
  purchasingEntity: PurchasingEntity

  """
  The marketing referral code from the link that the customer clicked to visit the store.
  Supports the following URL attributes: "ref", "source", or "r".
  For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
  """
  referralCode: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralCode` instead")

  """
  A web domain or short description of the source that sent the customer to your
  online store. For example, "shopify.com" or "email".
  """
  referrerDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralInfoHtml` instead")

  """
  The URL of the webpage where the customer clicked a link that sent them to your online store.
  """
  referrerUrl: URL @deprecated(reason: "Use `customerJourneySummary.lastVisit.referrerUrl` instead")

  """
  The difference between the suggested and actual refund amount of all refunds
  that have been applied to the order. A positive value indicates a difference
  in the merchant's favor, and a negative value indicates a difference in the
  customer's favor.
  """
  refundDiscrepancySet: MoneyBag!

  """
  Whether the order can be refunded.
  """
  refundable: Boolean!

  """
  A list of refunds that have been applied to the order.
  """
  refunds(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [Refund!]!

  """
  The URL of the source that the order originated from, if found in the domain registry.
  """
  registeredSourceUrl: URL

  """
  Whether the order has shipping lines or at least one line item on the order that requires shipping.
  """
  requiresShipping: Boolean!

  """
  Whether any line item on the order can be restocked.
  """
  restockable: Boolean!

  """
  The physical location where a retail order is created or completed, except for
  draft POS orders completed via the “mark as paid” flow in Admin, which return null.
  """
  retailLocation: Location

  """
  The order's aggregated return status for display purposes.
  """
  returnStatus: OrderReturnStatus!

  """
  A list of returns for the order.
  """
  returns(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | status | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ReturnConnection!

  """
  The risk characteristics for the order.
  """
  risk: OrderRiskSummary!

  """
  The fraud risk level of the order.
  """
  riskLevel: OrderRiskLevel! @deprecated(reason: "This field is deprecated in version 2024-04. Please use OrderRiskAssessment.riskLevel")

  """
  A list of risks associated with the order.
  """
  risks(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [OrderRisk!]! @deprecated(reason: "This field is deprecated in version 2024-04. Please use OrderRiskAssessment")

  """
  The mailing address of the customer.
  """
  shippingAddress: MailingAddress

  """
  A summary of all shipping costs on the order.
  """
  shippingLine: ShippingLine

  """
  A list of the order's shipping lines.
  """
  shippingLines(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    Whether results should contain removed shipping lines.
    """
    includeRemovals: Boolean = false

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ShippingLineConnection!

  """
  The Shopify Protect details for the order. If Shopify Protect is disabled for the shop, then this will be null.
  """
  shopifyProtect: ShopifyProtectOrderSummary

  """
  A unique POS or third party order identifier.
  For example, "1234-12-1000" or "111-98567-54". The `receipt_number` field is derived from this value for POS orders.
  """
  sourceIdentifier: String

  """
  The name of the source associated with the order.
  """
  sourceName: String

  """
  The staff member associated with the order.
  """
  staffMember: StaffMember

  """
  The URL where the customer can check the order's current status.
  """
  statusPageUrl: URL!

  """
  The sum of the quantities for all line items that contribute to the order's subtotal price.
  """
  subtotalLineItemsQuantity: Int!

  """
  The sum of the prices for all line items after discounts and before returns, in shop currency.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  subtotalPrice: Money @deprecated(reason: "Use `subtotalPriceSet` instead.")

  """
  The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  subtotalPriceSet: MoneyBag

  """
  A suggested refund for the order.
  """
  suggestedRefund(
    """
    The duties from the order to include in the refund.
    """
    refundDuties: [RefundDutyInput!]

    """
    The line items from the order to include in the refund.
    """
    refundLineItems: [RefundLineItemInput!]

    """
    Whether to refund the full shipping amount.
    """
    refundShipping: Boolean

    """
    The amount to refund for shipping. Overrides the `refundShipping` argument.
    """
    shippingAmount: Money

    """
    Whether the suggested refund should be created from all refundable line items on the order.
    If `true`, the `refundLineItems` argument will be ignored.
    """
    suggestFullRefund: Boolean = false
  ): SuggestedRefund

  """
  A comma separated list of tags associated with the order. Updating `tags` overwrites
  any existing tags that were previously added to the order. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!

  """
  Whether taxes are exempt on the order.
  """
  taxExempt: Boolean!

  """
  A list of all tax lines applied to line items on the order, before returns.
  Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
  """
  taxLines: [TaxLine!]!

  """
  Whether taxes are included in the subtotal price of the order.
  """
  taxesIncluded: Boolean!

  """
  Whether the order is a test.
  Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
  A test order can't be converted into a real order and vice versa.
  """
  test: Boolean!

  """
  The authorized amount that's uncaptured or undercaptured, in shop currency.
  This amount isn't adjusted for returns.
  """
  totalCapturable: Money! @deprecated(reason: "Use `totalCapturableSet` instead.")

  """
  The authorized amount that's uncaptured or undercaptured, in shop and presentment currencies.
  This amount isn't adjusted for returns.
  """
  totalCapturableSet: MoneyBag!

  """
  The total rounding adjustment applied to payments or refunds for an Order
  involving cash payments. Applies to some countries where cash transactions are
  rounded to the nearest currency denomination.
  """
  totalCashRoundingAdjustment: CashRoundingAdjustment!

  """
  The total amount discounted on the order before returns, in shop currency.
  This includes both order and line level discounts.
  """
  totalDiscounts: Money @deprecated(reason: "Use `totalDiscountsSet` instead.")

  """
  The total amount discounted on the order before returns, in shop and presentment currencies.
  This includes both order and line level discounts.
  """
  totalDiscountsSet: MoneyBag

  """
  The total amount not yet transacted for the order, in shop and presentment currencies.
  A positive value indicates a difference in the merchant's favor (payment from
  customer to merchant) and a negative value indicates a difference in the
  customer's favor (refund from merchant to customer).
  """
  totalOutstandingSet: MoneyBag!

  """
  The total price of the order, before returns, in shop currency.
  This includes taxes and discounts.
  """
  totalPrice: Money! @deprecated(reason: "Use `totalPriceSet` instead.")

  """
  The total price of the order, before returns, in shop and presentment currencies.
  This includes taxes and discounts.
  """
  totalPriceSet: MoneyBag!

  """
  The total amount received from the customer before returns, in shop currency.
  """
  totalReceived: Money! @deprecated(reason: "Use `totalReceivedSet` instead.")

  """
  The total amount received from the customer before returns, in shop and presentment currencies.
  """
  totalReceivedSet: MoneyBag!

  """
  The total amount that was refunded, in shop currency.
  """
  totalRefunded: Money! @deprecated(reason: "Use `totalRefundedSet` instead.")

  """
  The total amount that was refunded, in shop and presentment currencies.
  """
  totalRefundedSet: MoneyBag!

  """
  The total amount of shipping that was refunded, in shop and presentment currencies.
  """
  totalRefundedShippingSet: MoneyBag!

  """
  The total shipping amount before discounts and returns, in shop currency.
  """
  totalShippingPrice: Money! @deprecated(reason: "Use `totalShippingPriceSet` instead.")

  """
  The total shipping amount before discounts and returns, in shop and presentment currencies.
  """
  totalShippingPriceSet: MoneyBag!

  """
  The total tax amount before returns, in shop currency.
  """
  totalTax: Money @deprecated(reason: "Use `totalTaxSet` instead.")

  """
  The total tax amount before returns, in shop and presentment currencies.
  """
  totalTaxSet: MoneyBag

  """
  The sum of all tip amounts for the order, in shop currency.
  """
  totalTipReceived: MoneyV2! @deprecated(reason: "Use `totalTipReceivedSet` instead.")

  """
  The sum of all tip amounts for the order, in shop and presentment currencies.
  """
  totalTipReceivedSet: MoneyBag!

  """
  The total weight of the order before returns, in grams.
  """
  totalWeight: UnsignedInt64

  """
  A list of transactions associated with the order.
  """
  transactions(
    """
    Filter transactions by whether they are capturable.
    """
    capturable: Boolean

    """
    Truncate the array result to this size.
    """
    first: Int

    """
    Filter transactions by whether they can be resolved manually.
    For example, fully captured or voided transactions aren't manually resolvable.
    """
    manuallyResolvable: Boolean
  ): [OrderTransaction!]!

  """
  The number of transactions associated with the order.
  """
  transactionsCount: Count

  """
  Whether no payments have been made for the order.
  """
  unpaid: Boolean!

  """
  The date and time when the order was modified last.
  """
  updatedAt: DateTime!
}

"""
The possible order action types for a
[sales agreement](https://shopify.dev/api/admin-graphql/latest/interfaces/salesagreement).
"""
enum OrderActionType {
  """
  An order with a purchase or charge.
  """
  ORDER

  """
  An edit to the order.
  """
  ORDER_EDIT

  """
  A refund on the order.
  """
  REFUND

  """
  A return on the order.
  """
  RETURN

  """
  An unknown agreement action. Represents new actions that may be added in future versions.
  """
  UNKNOWN
}

"""
An order adjustment accounts for the difference between a calculated and actual refund amount.
"""
type OrderAdjustment implements Node {
  """
  The amount of the order adjustment in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  An optional reason that explains a discrepancy between calculated and actual refund amounts.
  """
  reason: OrderAdjustmentDiscrepancyReason

  """
  The tax amount of the order adjustment in shop and presentment currencies.
  """
  taxAmountSet: MoneyBag!
}

"""
An auto-generated type for paginating through multiple OrderAdjustments.
"""
type OrderAdjustmentConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [OrderAdjustmentEdge!]!

  """
  A list of nodes that are contained in OrderAdjustmentEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [OrderAdjustment!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Discrepancy reasons for order adjustments.
"""
enum OrderAdjustmentDiscrepancyReason {
  """
  The discrepancy reason is customer.
  """
  CUSTOMER

  """
  The discrepancy reason is damage.
  """
  DAMAGE

  """
  The discrepancy reason is balance adjustment.
  """
  FULL_RETURN_BALANCING_ADJUSTMENT

  """
  The discrepancy reason is pending refund.
  """
  PENDING_REFUND_DISCREPANCY

  """
  The discrepancy reason is not one of the predefined reasons.
  """
  REFUND_DISCREPANCY

  """
  The discrepancy reason is restocking.
  """
  RESTOCK
}

"""
An auto-generated type which holds one OrderAdjustment and a cursor during pagination.
"""
type OrderAdjustmentEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of OrderAdjustmentEdge.
  """
  node: OrderAdjustment!
}

"""
An agreement associated with an order placement.
"""
type OrderAgreement implements SalesAgreement {
  """
  The application that created the agreement.
  """
  app: App

  """
  The date and time at which the agreement occured.
  """
  happenedAt: DateTime!

  """
  The unique ID for the agreement.
  """
  id: ID!

  """
  The order associated with the agreement.
  """
  order: Order!

  """
  The reason the agremeent was created.
  """
  reason: OrderActionType!

  """
  The sales associated with the agreement.
  """
  sales(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SaleConnection!

  """
  The staff member associated with the agreement.
  """
  user: StaffMember
}

"""
The [application](https://shopify.dev/apps) that created the order.
"""
type OrderApp {
  """
  The application icon.
  """
  icon: Image!

  """
  The application ID.
  """
  id: ID!

  """
  The name of the application.
  """
  name: String!
}

"""
Represents the reason for the order's cancellation.
"""
enum OrderCancelReason {
  """
  The customer wanted to cancel the order.
  """
  CUSTOMER

  """
  Payment was declined.
  """
  DECLINED

  """
  The order was fraudulent.
  """
  FRAUD

  """
  There was insufficient inventory.
  """
  INVENTORY

  """
  The order was canceled for an unlisted reason.
  """
  OTHER

  """
  Staff made an error.
  """
  STAFF
}

"""
Details about the order cancellation.
"""
type OrderCancellation {
  """
  Staff provided note for the order cancellation.
  """
  staffNote: String
}

"""
An auto-generated type for paginating through multiple Orders.
"""
type OrderConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [OrderEdge!]!

  """
  A list of nodes that are contained in OrderEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Order!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Represents the order's current financial status.
"""
enum OrderDisplayFinancialStatus {
  """
  Displayed as **Authorized**. The payment provider has validated the customer's
  payment information. This status appears only for manual payment capture and
  indicates payments should be captured before the authorization period expires.
  """
  AUTHORIZED

  """
  Displayed as **Expired**. Payment wasn't captured before the payment
  provider's deadline on an authorized order. Some payment providers use this
  status to indicate failed payment processing.
  """
  EXPIRED

  """
  Displayed as **Paid**. Payment was automatically or manually captured, or the order was marked as paid.
  """
  PAID

  """
  Displayed as **Partially paid**. A payment was manually captured for the order
  with an amount less than the full order value.
  """
  PARTIALLY_PAID

  """
  Displayed as **Partially refunded**. The amount refunded to a customer is less than the full amount paid for an order.
  """
  PARTIALLY_REFUNDED

  """
  Displayed as **Pending**. Orders have this status when the payment provider
  needs time to complete the payment, or when manual payment methods are being used.
  """
  PENDING

  """
  Displayed as **Refunded**. The full amount paid for an order was refunded to the customer.
  """
  REFUNDED

  """
  Displayed as **Voided**. An unpaid (payment authorized but not captured) order was manually
           canceled.
  """
  VOIDED
}

"""
Represents the order's aggregated fulfillment status for display purposes.
"""
enum OrderDisplayFulfillmentStatus {
  """
  Displayed as **Fulfilled**. All the items in the order have been fulfilled.
  """
  FULFILLED

  """
  Displayed as **In progress**. Some of the items in the order have been
  fulfilled, or a request for fulfillment has been sent to the fulfillment service.
  """
  IN_PROGRESS

  """
  Displayed as **On hold**. All of the unfulfilled items in this order are on hold.
  """
  ON_HOLD

  """
  Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status.
  """
  OPEN

  """
  Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
  """
  PARTIALLY_FULFILLED

  """
  Displayed as **Pending fulfillment**. A request for fulfillment of some items
  awaits a response from the fulfillment service. Replaced by the "IN_PROGRESS" status.
  """
  PENDING_FULFILLMENT

  """
  Displayed as **Request declined**. Some of the items in the order have been
  rejected for fulfillment by the fulfillment service.
  """
  REQUEST_DECLINED

  """
  Displayed as **Restocked**. All the items in the order have been restocked. Replaced by the "UNFULFILLED" status.
  """
  RESTOCKED

  """
  Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time.
  """
  SCHEDULED

  """
  Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
  """
  UNFULFILLED
}

"""
A summary of the important details for a dispute on an order.
"""
type OrderDisputeSummary implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The type that the dispute was initiated as.
  """
  initiatedAs: DisputeType!

  """
  The current status of the dispute.
  """
  status: DisputeStatus!
}

"""
An auto-generated type which holds one Order and a cursor during pagination.
"""
type OrderEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of OrderEdge.
  """
  node: Order!
}

"""
An agreement associated with an edit to the order.
"""
type OrderEditAgreement implements SalesAgreement {
  """
  The application that created the agreement.
  """
  app: App

  """
  The date and time at which the agreement occured.
  """
  happenedAt: DateTime!

  """
  The unique ID for the agreement.
  """
  id: ID!

  """
  The reason the agremeent was created.
  """
  reason: OrderActionType!

  """
  The sales associated with the agreement.
  """
  sales(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SaleConnection!

  """
  The staff member associated with the agreement.
  """
  user: StaffMember
}

"""
The payment collection details for an order that requires additional payment following an edit to the order.
"""
type OrderPaymentCollectionDetails {
  """
  The URL to use for collecting an additional payment on the order.
  """
  additionalPaymentCollectionUrl: URL

  """
  The list of vaulted payment methods for the order with their permissions.
  """
  vaultedPaymentMethods: [PaymentMandate!]
}

"""
The status of a customer's payment for an order.
"""
type OrderPaymentStatus {
  """
  A message describing an error during the asynchronous processing of a payment.
  """
  errorMessage: String

  """
  The ID of the payment, initially returned by an `orderCreateMandatePayment` or `orderCreatePayment` mutation.
  """
  paymentReferenceId: String!

  """
  The status of the payment.
  """
  status: OrderPaymentStatusResult!

  """
  The transaction associated with the payment.
  """
  transactions: [OrderTransaction!]!

  """
  A translated message describing an error during the asynchronous processing of a payment.
  """
  translatedErrorMessage: String
}

"""
The type of a payment status.
"""
enum OrderPaymentStatusResult {
  """
  The payment is authorized.
  """
  AUTHORIZED

  """
  The payment is captured.
  """
  CAPTURED

  """
  There was an error initiating the payment.
  """
  ERROR

  """
  The payment is awaiting processing.
  """
  INITIATED

  """
  The payment is pending with the provider, and may take a while.
  """
  PENDING

  """
  The payment is still being processed.
  """
  PROCESSING

  """
  The payment is in purchased status.
  """
  PURCHASED

  """
  Redirect required.
  """
  REDIRECT_REQUIRED

  """
  The payment is refunded.
  """
  REFUNDED

  """
  Payment can be retried.
  """
  RETRYABLE

  """
  The payment succeeded.
  """
  SUCCESS

  """
  Status is unknown.
  """
  UNKNOWN

  """
  The payment is voided.
  """
  VOIDED
}

"""
The order's aggregated return status that's used for display purposes.
An order might have multiple returns, so this field communicates the prioritized return status.
The `OrderReturnStatus` enum is a supported filter parameter in the [`orders` query](https://shopify.dev/api/admin-graphql/latest/queries/orders#:~:text=reference_location_id-,return_status,-risk_level).
"""
enum OrderReturnStatus {
  """
  All return shipments from a return in this order were inspected.
  """
  INSPECTION_COMPLETE

  """
  Some items in the order are being returned.
  """
  IN_PROGRESS

  """
  No items in the order were returned.
  """
  NO_RETURN

  """
  Some items in the order were returned.
  """
  RETURNED

  """
  Some returns in the order were not completed successfully.
  """
  RETURN_FAILED

  """
  A return was requested for some items in the order.
  """
  RETURN_REQUESTED
}

"""
Represents a fraud check on an order.
As of version 2024-04 this resource is deprecated. Risk Assessments can be queried via the
[OrderRisk Assessments API](https://shopify.dev/api/admin-graphql/2024-04/objects/OrderRiskAssessment).
"""
type OrderRisk {
  """
  Whether the risk level is shown in the Shopify admin. If false, then this
  order risk is ignored when Shopify determines the overall risk level for the order.
  """
  display: Boolean! @deprecated(reason: "This field is deprecated in version 2024-04")

  """
  The likelihood that an order is fraudulent, based on this order risk.

  The level can be set by Shopify risk analysis or by an app.
  """
  level: OrderRiskLevel @deprecated(reason: "This field is deprecated in version 2024-04. Please use OrderRiskAssessment.riskLevel")

  """
  The risk message that's shown to the merchant in the Shopify admin.
  """
  message: String @deprecated(reason: "This field is deprecated in version 2024-04")
}

"""
The risk assessments for an order.

See the [example query "Retrieves a list of all order risks for an order"](https://shopify.dev/docs/api/admin-graphql/unstable/queries/order?example=Retrieves+a+list+of+all+order+risks+for+an+order).
"""
type OrderRiskAssessment {
  """
  Optional facts used to describe the risk assessment. The values in here are specific to the provider.
  See the [examples for the mutation orderRiskAssessmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/orderRiskAssessmentCreate#section-examples).
  """
  facts: [RiskFact!]!

  """
  The app that provided the assessment, `null` if the assessment was provided by Shopify.
  """
  provider: App

  """
  The likelihood that the order is fraudulent, based on this risk assessment.
  """
  riskLevel: RiskAssessmentResult!
}

"""
The likelihood that an order is fraudulent.
"""
enum OrderRiskLevel {
  """
  There is a high level of risk that this order is fraudulent.
  """
  HIGH

  """
  There is a low level of risk that this order is fraudulent.
  """
  LOW

  """
  There is a medium level of risk that this order is fraudulent.
  """
  MEDIUM
}

"""
List of possible values for an OrderRiskRecommendation recommendation.
"""
enum OrderRiskRecommendationResult {
  """
  Recommends fulfilling the order.
  """
  ACCEPT

  """
  Recommends cancelling the order.
  """
  CANCEL

  """
  Recommends investigating the order by contacting buyers.
  """
  INVESTIGATE

  """
  There is no recommended action for the order.
  """
  NONE
}

"""
Summary of risk characteristics for an order.

See the [example query "Retrieves a list of all order risks for an order"](https://shopify.dev/docs/api/admin-graphql/unstable/queries/order?example=Retrieves+a+list+of+all+order+risks+for+an+order).
"""
type OrderRiskSummary {
  """
  The list of risk assessments for the order.
  """
  assessments: [OrderRiskAssessment!]!

  """
  The recommendation for the order based on the results of the risk assessments.
  This suggests the action the merchant should take with regards to its risk of fraud.
  """
  recommendation: OrderRiskRecommendationResult!
}

"""
The set of valid sort keys for the Order query.
"""
enum OrderSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `customer_name` value.
  """
  CUSTOMER_NAME

  """
  Sort orders by their shipping address country and city.
  """
  DESTINATION

  """
  Sort by the `financial_status` value.
  """
  FINANCIAL_STATUS

  """
  Sort by the `fulfillment_status` value.
  """
  FULFILLMENT_STATUS

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `order_number` value.
  """
  ORDER_NUMBER

  """
  Sort orders by their purchase order number.
  """
  PO_NUMBER

  """
  Sort by the `processed_at` value.
  """
  PROCESSED_AT

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort orders by the total quantity of all line items.
  """
  TOTAL_ITEMS_QUANTITY

  """
  Sort by the `total_price` value.
  """
  TOTAL_PRICE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
A change that has been applied to an order.
"""
union OrderStagedChange = OrderStagedChangeAddCustomItem | OrderStagedChangeAddLineItemDiscount | OrderStagedChangeAddShippingLine | OrderStagedChangeAddVariant | OrderStagedChangeDecrementItem | OrderStagedChangeIncrementItem | OrderStagedChangeRemoveShippingLine

"""
A change to the order representing the addition of a
custom line item. For example, you might want to add gift wrapping service
as a custom line item.
"""
type OrderStagedChangeAddCustomItem {
  """
  The price of an individual item without any discounts applied. This value can't be negative.
  """
  originalUnitPrice: MoneyV2!

  """
  The quantity of the custom item to add to the order. This value must be greater than zero.
  """
  quantity: Int!

  """
  The title of the custom item.
  """
  title: String!
}

"""
The discount applied to an item that was added during the current order edit.
"""
type OrderStagedChangeAddLineItemDiscount {
  """
  The description of the discount.
  """
  description: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The pricing value of the discount.
  """
  value: PricingValue!
}

"""
A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)
added as part of an order edit.
"""
type OrderStagedChangeAddShippingLine {
  """
  The phone number at the shipping address.
  """
  phone: String

  """
  The shipping line's title that's shown to the buyer.
  """
  presentmentTitle: String

  """
  The price that applies to the shipping line.
  """
  price: MoneyV2!

  """
  The title of the shipping line.
  """
  title: String
}

"""
A change to the order representing the addition of an existing product variant.
"""
type OrderStagedChangeAddVariant {
  """
  The quantity of the product variant that was added.
  """
  quantity: Int!

  """
  The product variant that was added.
  """
  variant: ProductVariant!
}

"""
An auto-generated type for paginating through multiple OrderStagedChanges.
"""
type OrderStagedChangeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [OrderStagedChangeEdge!]!

  """
  A list of nodes that are contained in OrderStagedChangeEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [OrderStagedChange!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An removal of items from an existing line item on the order.
"""
type OrderStagedChangeDecrementItem {
  """
  The number of items removed.
  """
  delta: Int!

  """
  The original line item.
  """
  lineItem: LineItem!

  """
  The intention to restock the removed items.
  """
  restock: Boolean!
}

"""
An auto-generated type which holds one OrderStagedChange and a cursor during pagination.
"""
type OrderStagedChangeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of OrderStagedChangeEdge.
  """
  node: OrderStagedChange!
}

"""
An addition of items to an existing line item on the order.
"""
type OrderStagedChangeIncrementItem {
  """
  The number of items added.
  """
  delta: Int!

  """
  The original line item.
  """
  lineItem: LineItem!
}

"""
A shipping line removed during an order edit.
"""
type OrderStagedChangeRemoveShippingLine {
  """
  The removed shipping line.
  """
  shippingLine: ShippingLine!
}

"""
A payment transaction in the context of an order.
"""
type OrderTransaction implements Node {
  """
  The masked account number associated with the payment method.
  """
  accountNumber: String

  """
  The amount of money.
  """
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The rounding adjustment applied on the cash amount in shop and presentment currencies.
  """
  amountRoundingSet: MoneyBag

  """
  The amount and currency of the transaction in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The amount and currency of the transaction.
  """
  amountV2: MoneyV2! @deprecated(reason: "Use `amountSet` instead.")

  """
  Authorization code associated with the transaction.
  """
  authorizationCode: String

  """
  The time when the authorization expires. This field is available only to stores on a Shopify Plus plan.
  """
  authorizationExpiresAt: DateTime

  """
  Date and time when the transaction was created.
  """
  createdAt: DateTime!

  """
  A standardized error code, independent of the payment provider.
  """
  errorCode: OrderTransactionErrorCode

  """
  The transaction fees charged on the order transaction. Only present for Shopify Payments transactions.
  """
  fees: [TransactionFee!]!

  """
  The human-readable payment gateway name used to process the transaction.
  """
  formattedGateway: String

  """
  The payment gateway used to process the transaction.
  """
  gateway: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The kind of transaction.
  """
  kind: OrderTransactionKind!

  """
  Whether the transaction is processed by manual payment gateway.
  """
  manualPaymentGateway: Boolean!

  """
  Whether the transaction can be manually captured.
  """
  manuallyCapturable: Boolean!

  """
  Specifies the available amount to refund on the gateway.
  This value is only available for transactions of type `SuggestedRefund`.
  """
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableV2` instead.")

  """
  Specifies the available amount with currency to refund on the gateway.
  This value is only available for transactions of type `SuggestedRefund`.
  """
  maximumRefundableV2: MoneyV2

  """
  Whether the transaction can be captured multiple times.
  """
  multiCapturable: Boolean!

  """
  The associated order.
  """
  order: Order

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: OrderTransaction

  """
  The payment details for the transaction.
  """
  paymentDetails: PaymentDetails

  """
  The payment icon to display for the transaction.
  """
  paymentIcon(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1 @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  The payment ID associated with the transaction.
  """
  paymentId: String

  """
  The payment method used for the transaction. This value is `null` if the payment method is unknown.
  """
  paymentMethod: PaymentMethods @deprecated(reason: "Use `paymentIcon` instead.")

  """
  Date and time when the transaction was processed.
  """
  processedAt: DateTime

  """
  The transaction receipt that the payment gateway attaches to the transaction.
  The value of this field depends on which payment gateway processed the transaction.
  """
  receiptJson: JSON

  """
  The settlement currency.
  """
  settlementCurrency: CurrencyCode

  """
  The rate used when converting the transaction amount to settlement currency.
  """
  settlementCurrencyRate: Decimal

  """
  Contains all Shopify Payments information related to an order transaction.
  This field is available only to stores on a Shopify Plus plan.
  """
  shopifyPaymentsSet: ShopifyPaymentsTransactionSet

  """
  The status of this transaction.
  """
  status: OrderTransactionStatus!

  """
  Whether the transaction is a test transaction.
  """
  test: Boolean!

  """
  Specifies the available amount to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettled: Money @deprecated(reason: "Use `totalUnsettledSet` instead.")

  """
  Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettledSet: MoneyBag

  """
  Specifies the available amount with currency to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettledV2: MoneyV2 @deprecated(reason: "Use `totalUnsettledSet` instead.")

  """
  Staff member who was logged into the Shopify POS device when the transaction was processed.
  """
  user: StaffMember
}

"""
An auto-generated type for paginating through multiple OrderTransactions.
"""
type OrderTransactionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [OrderTransactionEdge!]!

  """
  A list of nodes that are contained in OrderTransactionEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [OrderTransaction!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one OrderTransaction and a cursor during pagination.
"""
type OrderTransactionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of OrderTransactionEdge.
  """
  node: OrderTransaction!
}

"""
A standardized error code, independent of the payment provider.
"""
enum OrderTransactionErrorCode {
  """
  The payment method was invalid.
  """
  AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD

  """
  The maximum amount has been captured.
  """
  AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED

  """
  The maximum amount has been refunded.
  """
  AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED

  """
  The maximum of 10 authorizations has been captured for an order.
  """
  AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED

  """
  The maximum of 10 refunds has been processed for an order.
  """
  AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED

  """
  The order was canceled, which canceled all open authorizations.
  """
  AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED

  """
  The order was not confirmed within three hours.
  """
  AMAZON_PAYMENTS_STALE

  """
  Call the card issuer.
  """
  CALL_ISSUER

  """
  The card was declined.
  """
  CARD_DECLINED

  """
  There is an error in the gateway or merchant configuration.
  """
  CONFIG_ERROR

  """
  The card is expired.
  """
  EXPIRED_CARD

  """
  There was an unknown error with processing the payment.
  """
  GENERIC_ERROR

  """
  The address does not match the card number.
  """
  INCORRECT_ADDRESS

  """
  The CVC does not match the card number.
  """
  INCORRECT_CVC

  """
  The card number is incorrect.
  """
  INCORRECT_NUMBER

  """
  The entered PIN is incorrect.
  """
  INCORRECT_PIN

  """
  The ZIP or postal code does not match the card number.
  """
  INCORRECT_ZIP

  """
  The amount is either too high or too low for the provider.
  """
  INVALID_AMOUNT

  """
  The payment method is not available in the customer's country.
  """
  INVALID_COUNTRY

  """
  The format of the CVC is incorrect.
  """
  INVALID_CVC

  """
  The format of the expiry date is incorrect.
  """
  INVALID_EXPIRY_DATE

  """
  The format of the card number is incorrect.
  """
  INVALID_NUMBER

  """
  The payment method is momentarily unavailable.
  """
  PAYMENT_METHOD_UNAVAILABLE

  """
  The card has been reported as lost or stolen, and the card issuer has
  requested that the merchant keep the card and call the number on the back.
  """
  PICK_UP_CARD

  """
  There was an error while processing the payment.
  """
  PROCESSING_ERROR

  """
  A real card was used but the gateway was in test mode.
  """
  TEST_MODE_LIVE_CARD

  """
  The gateway or merchant configuration doesn't support a feature, such as network tokenization.
  """
  UNSUPPORTED_FEATURE
}

"""
The different kinds of order transactions.
"""
enum OrderTransactionKind {
  """
  An amount reserved against the cardholder's funding source.
  Money does not change hands until the authorization is captured.
  """
  AUTHORIZATION

  """
  A transfer of the money that was reserved by an authorization.
  """
  CAPTURE

  """
  The money returned to the customer when they've paid too much during a cash transaction.
  """
  CHANGE

  """
  An authorization for a payment taken with an EMV credit card reader.
  """
  EMV_AUTHORIZATION

  """
  A partial or full return of captured funds to the cardholder.
  A refund can happen only after a capture is processed.
  """
  REFUND

  """
  An authorization and capture performed together in a single step.
  """
  SALE

  """
  A suggested refund transaction that can be used to create a refund.
  """
  SUGGESTED_REFUND

  """
  A cancelation of an authorization transaction.
  """
  VOID
}

"""
The different states that an `OrderTransaction` can have.
"""
enum OrderTransactionStatus {
  """
  Awaiting a response.
  """
  AWAITING_RESPONSE

  """
  There was an error while processing the transaction.
  """
  ERROR

  """
  The transaction failed.
  """
  FAILURE

  """
  The transaction is pending.
  """
  PENDING

  """
  The transaction succeeded.
  """
  SUCCESS

  """
  The transaction status is unknown.
  """
  UNKNOWN
}

"""
A page on the Online Store.
"""
type Page implements HasEvents & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Navigable & Node {
  """
  The text content of the page, complete with HTML markup.
  """
  body: HTML!

  """
  The first 150 characters of the page body. If the page body contains more than
  150 characters, additional characters are truncated by ellipses.
  """
  bodySummary: String!

  """
  The date and time (ISO 8601 format) of the page creation.
  """
  createdAt: DateTime!

  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A unique, human-friendly string for the page.
  In themes, the Liquid templating language refers to a page by its handle.
  """
  handle: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether or not the page is visible.
  """
  isPublished: Boolean!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The date and time (ISO 8601 format) when the page became or will become visible.
  Returns null when the page isn't visible.
  """
  publishedAt: DateTime

  """
  The suffix of the template that's used to render the page.
  """
  templateSuffix: String

  """
  Title of the page.
  """
  title: String!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!

  """
  The date and time (ISO 8601 format) of the latest page update.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple Pages.
"""
type PageConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [PageEdge!]!

  """
  A list of nodes that are contained in PageEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Page!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Page and a cursor during pagination.
"""
type PageEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of PageEdge.
  """
  node: Page!
}

"""
Returns information about pagination in a connection, in accordance with the
[Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
For more information, please read our [GraphQL Pagination Usage Guide](https://shopify.dev/api/usage/pagination-graphql).
"""
type PageInfo {
  """
  The cursor corresponding to the last node in edges.
  """
  endCursor: String

  """
  Whether there are more pages to fetch following the current page.
  """
  hasNextPage: Boolean!

  """
  Whether there are any pages prior to the current page.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first node in edges.
  """
  startCursor: String
}

"""
A payment customization.
"""
type PaymentCustomization implements HasMetafieldDefinitions & HasMetafields & Node {
  """
  The enabled status of the payment customization.
  """
  enabled: Boolean!

  """
  The error history on the most recent version of the payment customization.
  """
  errorHistory: FunctionsErrorHistory

  """
  The ID of the Shopify Function implementing the payment customization.
  """
  functionId: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The Shopify Function implementing the payment customization.
  """
  shopifyFunction: ShopifyFunction!

  """
  The title of the payment customization.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple PaymentCustomizations.
"""
type PaymentCustomizationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [PaymentCustomizationEdge!]!

  """
  A list of nodes that are contained in PaymentCustomizationEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [PaymentCustomization!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one PaymentCustomization and a cursor during pagination.
"""
type PaymentCustomizationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of PaymentCustomizationEdge.
  """
  node: PaymentCustomization!
}

"""
Payment details related to a transaction.
"""
union PaymentDetails = CardPaymentDetails | LocalPaymentMethodsPaymentDetails | ShopPayInstallmentsPaymentDetails

"""
All possible instrument outputs for Payment Mandates.
"""
union PaymentInstrument = VaultCreditCard | VaultPaypalBillingAgreement

"""
A payment instrument and the permission
the owner of the instrument gives to the merchant to debit it.
"""
type PaymentMandate implements Node {
  """
  The unique ID of a payment mandate.
  """
  id: ID!

  """
  The outputs details of the payment instrument.
  """
  paymentInstrument: PaymentInstrument!
}

"""
Some of the payment methods used in Shopify.
"""
enum PaymentMethods {
  AMERICAN_EXPRESS
  BITCOIN
  BOGUS
  DANKORT
  DINERS_CLUB
  DISCOVER
  DOGECOIN

  """
  The payment method for eftpos_au payment.
  """
  EFTPOS

  """
  The payment method for Elo payment.
  """
  ELO
  FORBRUGSFORENINGEN

  """
  The payment method for Interac payment.
  """
  INTERAC
  JCB
  LITECOIN
  MAESTRO
  MASTERCARD
  PAYPAL

  """
  The payment method for UnionPay payment.
  """
  UNIONPAY
  VISA
}

"""
Represents the payment schedule for a single payment defined in the payment terms.
"""
type PaymentSchedule implements Node {
  """
  Amount owed for this payment schedule.
  """
  amount: MoneyV2! @deprecated(reason: "Use `balanceDue`, `totalBalance`, or `Order.totalOutstandingSet` instead.")

  """
  Date and time when the payment schedule is paid or fulfilled.
  """
  completedAt: DateTime

  """
  Date and time when the payment schedule is due.
  """
  dueAt: DateTime

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Date and time when the invoice is sent.
  """
  issuedAt: DateTime

  """
  The payment terms the payment schedule belongs to.
  """
  paymentTerms: PaymentTerms!
}

"""
An auto-generated type for paginating through multiple PaymentSchedules.
"""
type PaymentScheduleConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [PaymentScheduleEdge!]!

  """
  A list of nodes that are contained in PaymentScheduleEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [PaymentSchedule!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one PaymentSchedule and a cursor during pagination.
"""
type PaymentScheduleEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of PaymentScheduleEdge.
  """
  node: PaymentSchedule!
}

"""
Settings related to payments.
"""
type PaymentSettings {
  """
  List of the digital wallets which the shop supports.
  """
  supportedDigitalWallets: [DigitalWallet!]!
}

"""
Represents the payment terms for an order or draft order.
"""
type PaymentTerms implements Node {
  """
  The draft order associated with the payment terms.
  """
  draftOrder: DraftOrder

  """
  Duration of payment terms in days based on the payment terms template used to create the payment terms.
  """
  dueInDays: Int

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The order associated with the payment terms.
  """
  order: Order

  """
  Whether the payment terms have overdue payment schedules.
  """
  overdue: Boolean!

  """
  List of schedules for the payment terms.
  """
  paymentSchedules(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): PaymentScheduleConnection!

  """
  The name of the payment terms template used to create the payment terms.
  """
  paymentTermsName: String!

  """
  The payment terms template type used to create the payment terms.
  """
  paymentTermsType: PaymentTermsType!

  """
  The payment terms name, translated into the shop admin's preferred language.
  """
  translatedName: String!
}

"""
Represents the payment terms template object.
"""
type PaymentTermsTemplate implements Node {
  """
  The description of the payment terms template.
  """
  description: String!

  """
  The number of days between the issued date and due date if this is the net type of payment terms.
  """
  dueInDays: Int

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the payment terms template.
  """
  name: String!

  """
  The type of the payment terms template.
  """
  paymentTermsType: PaymentTermsType!

  """
  The translated payment terms template name.
  """
  translatedName: String!
}

"""
The type of a payment terms or a payment terms template.
"""
enum PaymentTermsType {
  """
  The payment terms or payment terms template is a fixed type. It's due on a specified date.
  """
  FIXED

  """
  The payment terms or payment terms template is due on fulfillment.
  """
  FULFILLMENT

  """
  The payment terms or payment terms template is a net type. It's due a number of days after issue.
  """
  NET

  """
  The payment terms or payment terms template is due on receipt.
  """
  RECEIPT

  """
  The type of the payment terms or payment terms template is unknown.
  """
  UNKNOWN
}

"""
The set of valid sort keys for the Payout query.
"""
enum PayoutSortKeys {
  """
  Sort by the `adjustment_gross` value.
  """
  ADJUSTMENT_GROSS

  """
  Sort by the `advance_gross` value.
  """
  ADVANCE_GROSS

  """
  Sort by the `amount` value.
  """
  AMOUNT

  """
  Sort by the `charge_gross` value.
  """
  CHARGE_GROSS

  """
  Sort by the `duties_gross` value.
  """
  DUTIES_GROSS

  """
  Sort by the `fee_amount` value.
  """
  FEE_AMOUNT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `issued_at` value.
  """
  ISSUED_AT

  """
  Sort by the `refund_gross` value.
  """
  REFUND_GROSS

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `shipping_label_gross` value.
  """
  SHIPPING_LABEL_GROSS

  """
  Sort by the `status` value.
  """
  STATUS
}

"""
Represents a valid PayPal Express subscriptions gateway status.
"""
enum PaypalExpressSubscriptionsGatewayStatus {
  """
  The status is disabled.
  """
  DISABLED

  """
  The status is enabled.
  """
  ENABLED

  """
  The status is pending.
  """
  PENDING
}

"""
Represents a price list, including information about related prices and eligibility rules.
You can use price lists to specify either fixed prices or adjusted relative prices that
override initial product variant prices. Price lists are applied to customers
using context rules, which determine price list eligibility.

  For more information on price lists, refer to
  [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
"""
type PriceList implements Node {
  """
  The catalog that the price list is associated with.
  """
  catalog: Catalog

  """
  The currency for fixed prices associated with this price list.
  """
  currency: CurrencyCode!

  """
  The number of fixed prices on the price list.
  """
  fixedPricesCount: Int!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The unique name of the price list, used as a human-readable identifier.
  """
  name: String!

  """
  Relative adjustments to other prices.
  """
  parent: PriceListParent

  """
  A list of prices associated with the price list.
  """
  prices(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The origin of this price, either fixed (defined on the price list)
                   or relative (calculated using an adjustment via a price list parent configuration).
    """
    originType: PriceListPriceOriginType

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | product_id | id |
    | variant_id | id |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): PriceListPriceConnection!

  """
  A list of quantity rules associated with the price list, ordered by product variants.
  """
  quantityRules(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Whether the quantity rule is fixed (defined on the price list) or relative
    (the default quantity rule for the shop).
    """
    originType: QuantityRuleOriginType

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): QuantityRuleConnection!
}

"""
The type and value of a price list adjustment.

For more information on price lists, refer to
[Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
"""
type PriceListAdjustment {
  """
  The type of price adjustment, such as percentage increase or decrease.
  """
  type: PriceListAdjustmentType!

  """
  The value of price adjustment, where positive numbers reduce the prices and negative numbers
  increase them.
  """
  value: Float!
}

"""
Represents the settings of price list adjustments.
"""
type PriceListAdjustmentSettings {
  """
  The type of price list adjustment setting for compare at price.
  """
  compareAtMode: PriceListCompareAtMode!
}

"""
Represents a percentage price adjustment type.
"""
enum PriceListAdjustmentType {
  """
  Percentage decrease type. Prices will have a lower value.
  """
  PERCENTAGE_DECREASE

  """
  Percentage increase type. Prices will have a higher value.
  """
  PERCENTAGE_INCREASE
}

"""
Represents how the compare at price will be determined for a price list.
"""
enum PriceListCompareAtMode {
  """
  The compare at price is adjusted based on percentage specified in price list.
  """
  ADJUSTED

  """
  The compare at prices are set to `null` unless explicitly defined by a fixed price value.
  """
  NULLIFY
}

"""
An auto-generated type for paginating through multiple PriceLists.
"""
type PriceListConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [PriceListEdge!]!

  """
  A list of nodes that are contained in PriceListEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [PriceList!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one PriceList and a cursor during pagination.
"""
type PriceListEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of PriceListEdge.
  """
  node: PriceList!
}

"""
Represents relative adjustments from one price list to other prices.
  You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based
  adjustment. Adjusted prices work in conjunction with exchange rules and rounding.

  [Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)
  support both percentage increases and decreases.
"""
type PriceListParent {
  """
  A price list adjustment.
  """
  adjustment: PriceListAdjustment!

  """
  A price list's settings for adjustment.
  """
  settings: PriceListAdjustmentSettings!
}

"""
Represents information about pricing for a product variant
        as defined on a price list, such as the price, compare at price, and
origin type. You can use a `PriceListPrice` to specify a fixed price for a
specific product variant. For examples, refer to [PriceListFixedPricesAdd](https://shopify.dev/api/admin-graphql/latest/mutations/priceListFixedPricesAdd) and [PriceList](https://shopify.dev/api/admin-graphql/latest/queries/priceList#section-examples).
"""
type PriceListPrice {
  """
  The compare-at price of the product variant on this price list.
  """
  compareAtPrice: MoneyV2

  """
  The origin of a price, either fixed (defined on the price list) or relative
  (calculated using a price list adjustment configuration).
  """
  originType: PriceListPriceOriginType!

  """
  The price of the product variant on this price list.
  """
  price: MoneyV2!

  """
  A list of quantity breaks for the product variant.
  """
  quantityPriceBreaks(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: QuantityPriceBreakSortKeys = MINIMUM_QUANTITY
  ): QuantityPriceBreakConnection!

  """
  The product variant associated with this price.
  """
  variant: ProductVariant!
}

"""
An auto-generated type for paginating through multiple PriceListPrices.
"""
type PriceListPriceConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [PriceListPriceEdge!]!

  """
  A list of nodes that are contained in PriceListPriceEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [PriceListPrice!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one PriceListPrice and a cursor during pagination.
"""
type PriceListPriceEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of PriceListPriceEdge.
  """
  node: PriceListPrice!
}

"""
Represents the origin of a price, either fixed (defined on the price list) or
relative (calculated using a price list adjustment configuration). For examples, refer to [PriceList](https://shopify.dev/api/admin-graphql/latest/queries/priceList#section-examples).
"""
enum PriceListPriceOriginType {
  """
  The price is defined on the price list.
  """
  FIXED

  """
  The price is relative to the adjustment type and value.
  """
  RELATIVE
}

"""
The set of valid sort keys for the PriceList query.
"""
enum PriceListSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `name` value.
  """
  NAME

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Price rules are a set of conditions, including entitlements and prerequisites,
that must be met in order for a discount code to apply.

We recommend using the types and queries detailed at [Getting started with discounts](https://shopify.dev/docs/apps/selling-strategies/discounts/getting-started)
instead. These will replace the GraphQL `PriceRule` object and REST Admin
`PriceRule` and `DiscountCode` resources.
"""
type PriceRule implements CommentEventSubject & HasEvents & LegacyInteroperability & Node {
  """
  The maximum number of times that the price rule can be allocated onto an order.
  """
  allocationLimit: Int

  """
  The method by which the price rule's value is allocated to its entitled items.
  """
  allocationMethod: PriceRuleAllocationMethod!

  """
  The application that created the price rule.
  """
  app: App

  """
  The
  [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that you can use in combination with
  [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
  """
  combinesWith: DiscountCombinesWith!

  """
  The date and time when the price rule was created.
  """
  createdAt: DateTime!

  """
  The customers that can use this price rule.
  """
  customerSelection: PriceRuleCustomerSelection!

  """
  The
  [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
  that's used to control how discounts can be combined.
  """
  discountClass: DiscountClass!

  """
  List of the price rule's discount codes.
  """
  discountCodes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | times_used | integer |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DiscountCodeSortKeys = ID
  ): PriceRuleDiscountCodeConnection!

  """
  How many discount codes associated with the price rule.
  """
  discountCodesCount: Count

  """
  The date and time when the price rule ends. For open-ended price rules, use `null`.
  """
  endsAt: DateTime

  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  entitlementToPrerequisiteQuantityRatio: PriceRuleEntitlementToPrerequisiteQuantityRatio @deprecated(reason: "Use `prerequisiteToEntitlementQuantityRatio` instead.")

  """
  The paginated list of events associated with the price rule.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A list of the price rule's features.
  """
  features: [PriceRuleFeature!]!

  """
  Indicates whether there are any timeline comments on the price rule.
  """
  hasTimelineComment: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The items to which the price rule applies.
  """
  itemEntitlements: PriceRuleItemEntitlements!

  """
  The items required for the price rule to be applicable.
  """
  itemPrerequisites: PriceRuleLineItemPrerequisites!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  Whether the price rule can be applied only once per customer.
  """
  oncePerCustomer: Boolean!

  """
  The number of the entitled items must fall within this range for the price rule to be applicable.
  """
  prerequisiteQuantityRange: PriceRuleQuantityRange

  """
  The shipping cost must fall within this range for the price rule to be applicable.
  """
  prerequisiteShippingPriceRange: PriceRuleMoneyRange

  """
  The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
  """
  prerequisiteSubtotalRange: PriceRuleMoneyRange

  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  prerequisiteToEntitlementQuantityRatio: PriceRulePrerequisiteToEntitlementQuantityRatio

  """
  URLs that can be used to share the discount.
  """
  shareableUrls: [PriceRuleShareableUrl!]!

  """
  The shipping lines to which the price rule applies.
  """
  shippingEntitlements: PriceRuleShippingLineEntitlements!

  """
  The date and time when the price rule starts.
  """
  startsAt: DateTime!

  """
  The status of the price rule.
  """
  status: PriceRuleStatus!

  """
  A detailed summary of the price rule.
  """
  summary: String

  """
  The type of lines (line_item or shipping_line) to which the price rule applies.
  """
  target: PriceRuleTarget!

  """
  The title of the price rule.
  """
  title: String!

  """
  The total sales from orders where the price rule was used.
  """
  totalSales: MoneyV2

  """
  A list of the price rule's features.
  """
  traits: [PriceRuleTrait!]! @deprecated(reason: "Use `features` instead.")

  """
  The number of times that the price rule has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  usageCount: Int!

  """
  The maximum number of times that the price rule can be used in total.
  """
  usageLimit: Int

  """
  A time period during which a price rule is applicable.
  """
  validityPeriod: PriceRuleValidityPeriod!

  """
  The value of the price rule.
  """
  value: PriceRuleValue! @deprecated(reason: "Use `valueV2` instead.")

  """
  The value of the price rule.
  """
  valueV2: PricingValue!
}

"""
The method by which the price rule's value is allocated to its entitled items.
"""
enum PriceRuleAllocationMethod {
  """
  The value will be applied once across the entitled items.
  """
  ACROSS

  """
  The value will be applied to each of the entitled items.
  """
  EACH
}

"""
A selection of customers for whom the price rule applies.
"""
type PriceRuleCustomerSelection {
  """
  List of customers to whom the price rule applies.
  """
  customers(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | email | string | The customer's email address, used to communicate
    information about orders and for the purposes of email marketing campaigns.
    You can use a wildcard value to filter the query by customers who have an
    email address specified. | | | - `email:bo.wang@example.com`<br/> - `email:*` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | phone | string | The phone number of the customer, used to communicate
    information about orders and for the purposes of SMS marketing campaigns.
    You can use a wildcard value to filter the query by customers who have a
    phone number specified. | | | - `phone:+18005550100`<br/> - `phone:*` |
    | updated_at | time | The date and time, matching a whole day, when the
    customer's information was last updated. | | | -
    `updated_at:2024-01-01T00:00:00Z`<br/> - `updated_at:<now`<br/> -
    `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CustomerSortKeys = ID
  ): CustomerConnection!

  """
  Whether the price rule applies to all customers.
  """
  forAllCustomers: Boolean!

  """
  A list of customer segments that contain the customers who can use the price rule.
  """
  segments: [Segment!]!
}

"""
A discount code of a price rule.
"""
type PriceRuleDiscountCode implements Node {
  """
  The application that created the discount code.
  """
  app: App

  """
  The code to apply the discount.
  """
  code: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The number of times that the price rule has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  usageCount: Int!
}

"""
An auto-generated type for paginating through multiple PriceRuleDiscountCodes.
"""
type PriceRuleDiscountCodeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [PriceRuleDiscountCodeEdge!]!

  """
  A list of nodes that are contained in PriceRuleDiscountCodeEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [PriceRuleDiscountCode!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.
"""
type PriceRuleDiscountCodeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of PriceRuleDiscountCodeEdge.
  """
  node: PriceRuleDiscountCode!
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type PriceRuleEntitlementToPrerequisiteQuantityRatio {
  """
  The quantity of entitled items in the ratio.
  """
  entitlementQuantity: Int!

  """
  The quantity of prerequisite items in the ratio.
  """
  prerequisiteQuantity: Int!
}

"""
The list of features that can be supported by a price rule.
"""
enum PriceRuleFeature {
  """
  The price rule supports bulk discounts.
  """
  BULK

  """
  The price rule supports Buy X, Get Y (BXGY) discounts.
  """
  BUY_ONE_GET_ONE

  """
  The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
  """
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT

  """
  The price rule supports discounts that require a quantity.
  """
  QUANTITY_DISCOUNTS

  """
  The price rule targets specific customers.
  """
  SPECIFIC_CUSTOMERS
}

"""
The value of a fixed amount price rule.
"""
type PriceRuleFixedAmountValue {
  """
  The monetary value of the price rule.
  """
  amount: Money!
}

"""
The items to which this price rule applies. This may be multiple products,
product variants, collections or combinations of the aforementioned.
"""
type PriceRuleItemEntitlements {
  """
  The collections to which the price rule applies.
  """
  collections(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CollectionConnection!

  """
  The product variants to which the price rule applies.
  """
  productVariants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductVariantConnection!

  """
  The products to which the price rule applies.
  """
  products(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductConnection!

  """
  Whether the price rule applies to all line items.
  """
  targetAllLineItems: Boolean!
}

"""
Single or multiple line item products, product variants or collections required
for the price rule to be applicable, can also be provided in combination.
"""
type PriceRuleLineItemPrerequisites {
  """
  The collections required for the price rule to be applicable.
  """
  collections(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CollectionConnection!

  """
  The product variants required for the price rule to be applicable.
  """
  productVariants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductVariantConnection!

  """
  The products required for the price rule to be applicable.
  """
  products(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductConnection!
}

"""
A money range within which the price rule is applicable.
"""
type PriceRuleMoneyRange {
  """
  The lower bound of the money range.
  """
  greaterThan: Money

  """
  The lower bound or equal of the money range.
  """
  greaterThanOrEqualTo: Money

  """
  The upper bound of the money range.
  """
  lessThan: Money

  """
  The upper bound or equal of the money range.
  """
  lessThanOrEqualTo: Money
}

"""
The value of a percent price rule.
"""
type PriceRulePercentValue {
  """
  The percent value of the price rule.
  """
  percentage: Float!
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type PriceRulePrerequisiteToEntitlementQuantityRatio {
  """
  The quantity of entitled items in the ratio.
  """
  entitlementQuantity: Int!

  """
  The quantity of prerequisite items in the ratio.
  """
  prerequisiteQuantity: Int!
}

"""
A quantity range within which the price rule is applicable.
"""
type PriceRuleQuantityRange {
  """
  The lower bound of the quantity range.
  """
  greaterThan: Int

  """
  The lower bound or equal of the quantity range.
  """
  greaterThanOrEqualTo: Int

  """
  The upper bound of the quantity range.
  """
  lessThan: Int

  """
  The upper bound or equal of the quantity range.
  """
  lessThanOrEqualTo: Int
}

"""
Shareable URL for the discount code associated with the price rule.
"""
type PriceRuleShareableUrl {
  """
  The image URL of the item (product or collection) to which the discount applies.
  """
  targetItemImage: Image

  """
  The type of page that's associated with the URL.
  """
  targetType: PriceRuleShareableUrlTargetType!

  """
  The title of the page that's associated with the URL.
  """
  title: String!

  """
  The URL for the discount code.
  """
  url: URL!
}

"""
The type of page where a shareable price rule URL lands.
"""
enum PriceRuleShareableUrlTargetType {
  """
  The URL lands on a collection page.
  """
  COLLECTION

  """
  The URL lands on a home page.
  """
  HOME

  """
  The URL lands on a product page.
  """
  PRODUCT
}

"""
The shipping lines to which the price rule applies to.
"""
type PriceRuleShippingLineEntitlements {
  """
  The codes for the countries to which the price rule applies to.
  """
  countryCodes: [CountryCode!]!

  """
  Whether the price rule is applicable to countries that haven't been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean!

  """
  Whether the price rule applies to all shipping lines.
  """
  targetAllShippingLines: Boolean!
}

"""
The status of the price rule.
"""
enum PriceRuleStatus {
  """
  The price rule is active.
  """
  ACTIVE

  """
  The price rule is expired.
  """
  EXPIRED

  """
  The price rule is scheduled.
  """
  SCHEDULED
}

"""
The type of lines (line_item or shipping_line) to which the price rule applies.
"""
enum PriceRuleTarget {
  """
  The price rule applies to line items.
  """
  LINE_ITEM

  """
  The price rule applies to shipping lines.
  """
  SHIPPING_LINE
}

"""
The list of features that can be supported by a price rule.
"""
enum PriceRuleTrait {
  """
  The price rule supports bulk discounts.
  """
  BULK

  """
  The price rule supports Buy X, Get Y (BXGY) discounts.
  """
  BUY_ONE_GET_ONE

  """
  The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
  """
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT

  """
  The price rule supports discounts that require a quantity.
  """
  QUANTITY_DISCOUNTS

  """
  The price rule targets specific customers.
  """
  SPECIFIC_CUSTOMERS
}

"""
A time period during which a price rule is applicable.
"""
type PriceRuleValidityPeriod {
  """
  The time after which the price rule becomes invalid.
  """
  end: DateTime

  """
  The time after which the price rule is valid.
  """
  start: DateTime!
}

"""
The type of the price rule value. The price rule value might be a percentage value, or a fixed amount.
"""
union PriceRuleValue = PriceRuleFixedAmountValue | PriceRulePercentValue

"""
One type of value given to a customer when a discount is applied to an order.
The application of a discount with this value gives the customer the specified percentage off a specified item.
"""
type PricingPercentageValue {
  """
  The percentage value of the object. This is a number between -100 (free) and 0 (no discount).
  """
  percentage: Float!
}

"""
The type of value given to a customer when a discount is applied to an order.
For example, the application of the discount might give the customer a
percentage off a specified item. Alternatively, the application of the discount
might give the customer a monetary value in a given currency off an order.
"""
union PricingValue = MoneyV2 | PricingPercentageValue

"""
The `Product` object lets you manage products in a merchant’s store.

Products are the goods and services that merchants offer to customers. They can
include various details such as title, description, price, images, and options
such as size or color.
You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant)
to create or update different versions of the same product.
You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).

Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
including limitations and considerations.
"""
type Product implements HasEvents & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & LegacyInteroperability & Navigable & Node & OnlineStorePreviewable & Publishable {
  """
  The number of
  [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that a resource is published to, without
  [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
  """
  availablePublicationsCount: Count

  """
  The description of the product, with
  HTML tags. For example, the description might include
  bold `<strong></strong>` and italic `<i></i>` text.
  """
  bodyHtml: String @deprecated(reason: "Use `descriptionHtml` instead.")

  """
  A list of [components](https://shopify.dev/docs/apps/build/product-merchandising/bundles/add-product-fixed-bundle)
  that are associated with a product in a bundle.
  """
  bundleComponents(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductBundleComponentConnection!

  """
  The category of a product
  from [Shopify's Standard Product Taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
  """
  category: TaxonomyCategory

  """
  A list of [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection)
  that include the product.
  """
  collections(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | collection_type | string | | - `custom`<br/> - `smart` |
    | handle | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | product_id | id | Filter by collections containing a product by its ID. |
    | product_publication_status | string | Filter by the publishable status of
    the resource on a channel, such as the online store. The value is a
    composite of the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) and one of the valid values. | - `approved`<br/> -
    `rejected`<br/> - `needs_action`<br/> - `awaiting_review`<br/> -
    `published`<br/> - `demoted`<br/> - `scheduled`<br/> -
    `provisionally_published` | | - `publishable_status:189769876-approved` |
    | publishable_status | string | Filter by the publishable status of the
    resource on a channel, such as the online store. The value is a composite of
    either the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) or [channel `name`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel#field-name)
    and one of the valid values. | - `online_store_channel`<br/> -
    `published`<br/> - `unpublished`<br/> - `visible`<br/> - `unavailable`<br/>
    - `hidden`<br/> - `intended`<br/> - `visible` | | -
    `publishable_status:published`<br/> -
    `publishable_status:189769876:visible`<br/> -
    `publishable_status:pos:hidden` |
    | published_at | time | Filter by the date and time when the collection was published to the Online Store. |
    | published_status | string | Filter by the published status of the resource
    on a channel, such as the online store. | - `unset`<br/> - `pending`<br/> -
    `approved`<br/> - `not approved` | | - `published_status:approved` |
    | title | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CollectionSortKeys = ID
  ): CollectionConnection!

  """
  A special product type that combines separate products from a store into a single product listing.
  [Combined listings](https://shopify.dev/apps/build/product-merchandising/combined-listings) are connected
  by a shared option, such as color, model, or dimension.
  """
  combinedListing: CombinedListing

  """
  The [role of the product](https://shopify.dev/docs/apps/build/product-merchandising/combined-listings/build-for-combined-listings)
  in a combined listing.

  If `null`, then the product isn't part of any combined listing.
  """
  combinedListingRole: CombinedListingsRole

  """
  The [compare-at price range](https://help.shopify.com/manual/products/details/product-pricing/sale-pricing)
  of the product in the shop's default currency.
  """
  compareAtPriceRange: ProductCompareAtPriceRange

  """
  The pricing that applies to a customer in a specific context. For example, a
  price might vary depending on the customer's location.
  """
  contextualPricing(
    """
    The context used to generate contextual pricing for the variant.
    """
    context: ContextualPricingContext!
  ): ProductContextualPricing!

  """
  The date and time when the product was created.
  """
  createdAt: DateTime!

  """
  The custom product type specified by the merchant.
  """
  customProductType: String @deprecated(reason: "Deprecated in API version 2022-10. Use `productType` instead.")

  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  A single-line description of the product,
  with [HTML tags](https://developer.mozilla.org/en-US/docs/Web/HTML) removed.
  """
  description(
    """
    Truncates a string after the given length.
    """
    truncateAt: Int
  ): String!

  """
  The description of the product, with
  HTML tags. For example, the description might include
  bold `<strong></strong>` and italic `<i></i>` text.
  """
  descriptionHtml: HTML!

  """
  Stripped description of the product, single line with HTML tags removed.
  Truncated to 60 characters.
  """
  descriptionPlainSummary: String! @deprecated(reason: "Use `description` instead.")

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  Projected metafield extensions.
  """
  extensions: ProductExtensions!

  """
  The featured image for the product.
  """
  featuredImage: Image @deprecated(reason: "Use `featuredMedia` instead.")

  """
  The featured [media](https://shopify.dev/docs/apps/build/online-store/product-media)
  associated with the product.
  """
  featuredMedia: Media

  """
  The information that lets merchants know what steps they need to take
  to make sure that the app is set up correctly.

  For example, if a merchant hasn't set up a product correctly in the app,
  then the feedback might include a message that says "You need to add a price
  to this product".
  """
  feedback: ResourceFeedback

  """
  The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates)
  that's used when customers view the gift card in a store.
  """
  giftCardTemplateSuffix: String

  """
  A unique, human-readable string of the product's title. A handle can contain
  letters, hyphens (`-`), and numbers, but no spaces.
  The handle is used in the online store URL for the product.
  """
  handle: String!

  """
  Whether the product has only a single variant with the default option and value.
  """
  hasOnlyDefaultVariant: Boolean!

  """
  Whether the product has variants that are out of stock.
  """
  hasOutOfStockVariants: Boolean!

  """
  Whether at least one of the product variants requires
  [bundle components](https://shopify.dev/docs/apps/build/product-merchandising/bundles/add-product-fixed-bundle).

  Learn more about
  [store eligibility for bundles](https://shopify.dev/docs/apps/build/product-merchandising/bundles#store-eligibility).
  """
  hasVariantsThatRequiresComponents: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The images associated with the product.
  """
  images(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1 @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ProductImageSortKeys = POSITION
  ): ImageConnection! @deprecated(reason: "Use `media` instead.")

  """
  Whether the product
  is in a specified
  [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
  """
  inCollection(
    """
    The ID of the collection to check. For example, `id: "gid://shopify/Collection/123"`.
    """
    id: ID!
  ): Boolean!

  """
  Whether the product is a gift card.
  """
  isGiftCard: Boolean!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The [media](https://shopify.dev/docs/apps/build/online-store/product-media)
  associated with the product. Valid media are images, 3D models, videos.
  """
  media(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | media_type | string | | - `IMAGE`<br/> - `VIDEO`<br/> - `MODEL_3D`<br/> - `EXTERNAL_VIDEO` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ProductMediaSortKeys = POSITION
  ): MediaConnection!

  """
  The total count of [media](https://shopify.dev/docs/apps/build/online-store/product-media)
  that's associated with a product.
  """
  mediaCount: Count

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The [preview URL](https://help.shopify.com/manual/online-store/setting-up#preview-your-store) for the online store.
  """
  onlineStorePreviewUrl: URL

  """
  The product's URL on the online store.
  If `null`, then the product isn't published to the online store sales channel.
  """
  onlineStoreUrl: URL

  """
  A list of product options. The limit is defined by the
  [shop's resource limits for product options](https://shopify.dev/docs/api/admin-graphql/latest/objects/Shop#field-resourcelimits)
  (`Shop.resourceLimits.maxProductOptions`).
  """
  options(
    """
    Truncate the array result to this size.
    """
    first: Int
  ): [ProductOption!]!

  """
  The price range of the product.
  """
  priceRange: ProductPriceRange! @deprecated(reason: "Deprecated in API version 2020-10. Use `priceRangeV2` instead.")

  """
  The minimum and maximum prices of a product, expressed in decimal numbers.
  For example, if the product is priced between $10.00 and $50.00,
  then the price range is $10.00 - $50.00.
  """
  priceRangeV2: ProductPriceRangeV2!

  """
  The product category specified by the merchant.
  """
  productCategory: ProductCategory @deprecated(reason: "Deprecated in API version 2024-04. Use `category` instead.")

  """
  A list of the channels where the product is published.
  """
  productPublications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead.")

  """
  The [product type](https://help.shopify.com/manual/products/details/product-type)
  that merchants define.
  """
  productType: String!

  """
  The number of
  [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that a resource is published to, without
  [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
  """
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int! @deprecated(reason: "Use `resourcePublicationsCount` instead.")

  """
  A list of the channels where the product is published.
  """
  publications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Return only the publications that are published. If false, then return all publications.
    """
    onlyPublished: Boolean = true

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead.")

  """
  The date and time when the product was published to the online store.
  """
  publishedAt: DateTime

  """
  Whether the product is published for a customer only in a specified context.
  For example, a product might be published for a customer only in a specific location.
  """
  publishedInContext(
    """
    The context used to determine publication status.
    """
    context: ContextualPublicationContext!
  ): Boolean!

  """
  Whether the resource is published to a specific channel.
  """
  publishedOnChannel(
    """
    The ID of the channel to check.
    """
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")

  """
  Whether the resource is published to a
  [channel](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel).
  For example, the resource might be published to the online store channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead.")

  """
  Whether the resource is published to the app's
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  For example, the resource might be published to the app's online store channel.
  """
  publishedOnCurrentPublication: Boolean!

  """
  Whether the resource is published to a specified
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  """
  publishedOnPublication(
    """
    The ID of the publication to check. For example, `id: "gid://shopify/Publication/123"`.
    """
    publicationId: ID!
  ): Boolean!

  """
  Whether the product can only be purchased with
  a [selling plan](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans).
  Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores.
  If you update a product to be subscription-only (`requiresSellingPlan:false`),
  then the product is unpublished from all channels, except the online store.
  """
  requiresSellingPlan: Boolean!

  """
  The resource that's either published or staged to be published to
  the [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  """
  resourcePublicationOnCurrentPublication: ResourcePublicationV2

  """
  The list of resources that are published to a
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  """
  resourcePublications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled to be published.
    """
    onlyPublished: Boolean = true

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """
  The number of
  [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that a resource is published to, without
  [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
  """
  resourcePublicationsCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Count

  """
  The list of resources that are either published or staged to be published to a
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  """
  resourcePublicationsV2(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Filter publications by catalog type.
    """
    catalogType: CatalogType

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled or staged to be published.
    """
    onlyPublished: Boolean = true

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ResourcePublicationV2Connection!

  """
  Whether the merchant can make changes to the product when they
  [edit the order](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/edit-orders)
  associated with the product. For example, a merchant might be restricted from changing product details when they
  edit an order.
  """
  restrictedForResource(
    """
    The resource Id of the order with edits applied but not saved.
    """
    calculatedOrderId: ID!
  ): RestrictedForResource

  """
  A count of [selling plan groups](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans/build-a-selling-plan)
  that are associated with the product.
  """
  sellingPlanGroupCount: Int! @deprecated(reason: "Use `sellingPlanGroupsCount` instead.")

  """
  A list of all [selling plan groups](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans/build-a-selling-plan)
  that are associated with the product either directly, or through the product's variants.
  """
  sellingPlanGroups(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SellingPlanGroupConnection!

  """
  A count of [selling plan groups](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans/build-a-selling-plan)
  that are associated with the product.
  """
  sellingPlanGroupsCount: Count

  """
  The [SEO title and description](https://help.shopify.com/manual/promoting-marketing/seo/adding-keywords)
  that are associated with a product.
  """
  seo: SEO!

  """
  The standardized product type in the Shopify product taxonomy.
  """
  standardizedProductType: StandardizedProductType @deprecated(reason: "Deprecated in API version 2022-10. Use `productCategory` instead.")

  """
  The [product status](https://help.shopify.com/manual/products/details/product-details-page#product-status),
  which controls visibility across all sales channels.
  """
  status: ProductStatus!

  """
  The Storefront GraphQL API ID of the `Product`.

  As of the `2022-04` version release, the Storefront GraphQL API will no longer
  return Base64 encoded IDs to match the behavior of the Admin GraphQL API.
  Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontID! @deprecated(reason: "Use `id` instead.")

  """
  A comma-separated list of searchable keywords that are
  associated with the product. For example, a merchant might apply the `sports`
  and `summer` tags to products that are associated with sportwear for summer.

  Updating `tags` overwrites
  any existing tags that were previously added to the product. To add new tags without overwriting
  existing tags, use the [`tagsAdd`](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!

  """
  The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates)
  that's used when customers view the product in a store.
  """
  templateSuffix: String

  """
  The name for the product that displays to customers. The title is used to construct the product's handle.
  For example, if a product is titled "Black Sunglasses", then the handle is `black-sunglasses`.
  """
  title: String!

  """
  The quantity of inventory that's in stock.
  """
  totalInventory: Int!

  """
  The number of [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
  that are associated with the product.
  """
  totalVariants: Int! @deprecated(reason: "Use `variantsCount` instead.")

  """
  Whether [inventory tracking](https://help.shopify.com/manual/products/inventory/getting-started-with-inventory/set-up-inventory-tracking)
  has been enabled for the product.
  """
  tracksInventory: Boolean!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!

  """
  The list of channels that the resource is not published to.
  """
  unpublishedChannels(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead.")

  """
  The list of [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that the resource isn't published to.
  """
  unpublishedPublications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): PublicationConnection!

  """
  The date and time when the product was last modified.
  A product's `updatedAt` value can change for different reasons. For example, if an order
  is placed for a product that has inventory tracking set up, then the inventory adjustment
  is counted as an update.
  """
  updatedAt: DateTime!

  """
  A list of [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant) associated with the product.
  If querying a single product at the root, you can fetch up to 2000 variants.
  """
  variants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ProductVariantSortKeys = POSITION
  ): ProductVariantConnection!

  """
  The number of [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
  that are associated with the product.
  """
  variantsCount: Count

  """
  The name of the product's vendor.
  """
  vendor: String!
}

"""
The product's component information.
"""
type ProductBundleComponent {
  """
  The product that's related as a component.
  """
  componentProduct: Product!

  """
  The list of products' variants that are components.
  """
  componentVariants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductVariantConnection!

  """
  The number of component variants for the product component.
  """
  componentVariantsCount: Count

  """
  The options in the parent and the component options they're connected to, along with the chosen option values
  that appear in the bundle.
  """
  optionSelections: [ProductBundleComponentOptionSelection!]!

  """
  The quantity of the component product set for this bundle line.
  It will be null if there's a quantityOption present.
  """
  quantity: Int

  """
  The quantity as option of the component product. It will be null if there's a quantity set.
  """
  quantityOption: ProductBundleComponentQuantityOption
}

"""
An auto-generated type for paginating through multiple ProductBundleComponents.
"""
type ProductBundleComponentConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ProductBundleComponentEdge!]!

  """
  A list of nodes that are contained in ProductBundleComponentEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [ProductBundleComponent!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductBundleComponent and a cursor during pagination.
"""
type ProductBundleComponentEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ProductBundleComponentEdge.
  """
  node: ProductBundleComponent!
}

"""
A relationship between a component option and a parent option.
"""
type ProductBundleComponentOptionSelection {
  """
  The option that existed on the component product prior to the fixed bundle creation.
  """
  componentOption: ProductOption!

  """
  The option that was created on the parent product.
  """
  parentOption: ProductOption

  """
  The component option values that are actively selected for this relationship.
  """
  values: [ProductBundleComponentOptionSelectionValue!]!
}

"""
The status of a component option value related to a bundle.
"""
enum ProductBundleComponentOptionSelectionStatus {
  """
  The component option value is not selected as sellable in the bundle.
  """
  DESELECTED

  """
  The component option value was not initially selected, but is now available for the bundle.
  """
  NEW

  """
  The component option value is selected as sellable in the bundle.
  """
  SELECTED

  """
  The component option value was selected, is no longer available for the bundle.
  """
  UNAVAILABLE
}

"""
A component option value related to a bundle line.
"""
type ProductBundleComponentOptionSelectionValue {
  """
  Selection status of the option.
  """
  selectionStatus: ProductBundleComponentOptionSelectionStatus!

  """
  The value of the option.
  """
  value: String!
}

"""
A quantity option related to a bundle.
"""
type ProductBundleComponentQuantityOption {
  """
  The name of the option value.
  """
  name: String!

  """
  The option that was created on the parent product.
  """
  parentOption: ProductOption

  """
  The quantity values of the option.
  """
  values: [ProductBundleComponentQuantityOptionValue!]!
}

"""
A quantity option value related to a componentized product.
"""
type ProductBundleComponentQuantityOptionValue {
  """
  The name of the option value.
  """
  name: String!

  """
  The quantity of the option value.
  """
  quantity: Int!
}

"""
Defines errors encountered while managing a product bundle.
"""
type ProductBundleMutationUserError implements DisplayableError {
  """
  The error code.
  """
  code: ProductBundleMutationUserErrorCode

  """
  The path to the input field that caused the error.
  """
  field: [String!]

  """
  The error message.
  """
  message: String!
}

"""
Possible error codes that can be returned by `ProductBundleMutationUserError`.
"""
enum ProductBundleMutationUserErrorCode {
  """
  Something went wrong, please try again.
  """
  GENERIC_ERROR

  """
  Input is not valid.
  """
  INVALID_INPUT

  """
  Error processing request in the background job.
  """
  JOB_ERROR

  """
  Product does not exist.
  """
  PRODUCT_DOES_NOT_EXIST
}

"""
An entity that represents details of an asynchronous
[ProductBundleCreate](https://shopify.dev/api/admin-graphql/current/mutations/productBundleCreate) or
[ProductBundleUpdate](https://shopify.dev/api/admin-graphql/current/mutations/productBundleUpdate) mutation.

By querying this entity with the
[productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query
using the ID that was returned when the bundle was created or updated, this can be used to check the status of an operation.

The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.

The `product` field provides the details of the created or updated product.

The `userErrors` field provides mutation errors that occurred during the operation.
"""
type ProductBundleOperation implements Node & ProductOperation {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The product on which the operation is being performed.
  """
  product: Product

  """
  The status of this operation.
  """
  status: ProductOperationStatus!

  """
  Returns mutation errors occurred during background mutation processing.
  """
  userErrors: [ProductBundleMutationUserError!]!
}

"""
The details of a specific product category within the [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
"""
type ProductCategory {
  """
  The product taxonomy node associated with the product category.
  """
  productTaxonomyNode: ProductTaxonomyNode
}

"""
The set of valid sort keys for the ProductCollection query.
"""
enum ProductCollectionSortKeys {
  """
  Sort by the `best-selling` value.
  """
  BEST_SELLING

  """
  Sort by the `collection-default` value.
  """
  COLLECTION_DEFAULT

  """
  Sort by the `created` value.
  """
  CREATED

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `manual` value.
  """
  MANUAL

  """
  Sort by the `price` value.
  """
  PRICE

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `title` value.
  """
  TITLE
}

"""
The compare-at price range of the product.
"""
type ProductCompareAtPriceRange {
  """
  The highest variant's compare-at price.
  """
  maxVariantCompareAtPrice: MoneyV2!

  """
  The lowest variant's compare-at price.
  """
  minVariantCompareAtPrice: MoneyV2!
}

"""
An auto-generated type for paginating through multiple Products.
"""
type ProductConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ProductEdge!]!

  """
  A list of nodes that are contained in ProductEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Product!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
The price of a product in a specific country.
Prices vary between countries.
Refer to [Product](https://shopify.dev/docs/api/admin-graphql/latest/queries/product?example=Get+the+price+range+for+a+product+for+buyers+from+Canada)
for more information on how to use this object.
"""
type ProductContextualPricing {
  """
  The number of fixed quantity rules for the product's variants on the price list.
  """
  fixedQuantityRulesCount: Int!

  """
  The pricing of the variant with the highest price in the given context.
  """
  maxVariantPricing: ProductVariantContextualPricing

  """
  The pricing of the variant with the lowest price in the given context.
  """
  minVariantPricing: ProductVariantContextualPricing

  """
  The minimum and maximum prices of a product, expressed in decimal numbers.
  For example, if the product is priced between $10.00 and $50.00,
  then the price range is $10.00 - $50.00.
  """
  priceRange: ProductPriceRangeV2!
}

"""
An entity that represents details of an asynchronous
[ProductDelete](https://shopify.dev/api/admin-graphql/current/mutations/productDelete) mutation.

By querying this entity with the
[productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query
using the ID that was returned when the product was deleted, this can be used to check the status of an operation.

The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.

The `deletedProductId` field provides the ID of the deleted product.

The `userErrors` field provides mutation errors that occurred during the operation.
"""
type ProductDeleteOperation implements Node & ProductOperation {
  """
  The ID of the deleted product.
  """
  deletedProductId: ID

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The product on which the operation is being performed.
  """
  product: Product

  """
  The status of this operation.
  """
  status: ProductOperationStatus!

  """
  Returns mutation errors occurred during background mutation processing.
  """
  userErrors: [UserError!]!
}

"""
Represents a product duplication job.
"""
type ProductDuplicateJob {
  """
  This indicates if the job is still queued or has been run.
  """
  done: Boolean!

  """
  A globally-unique ID that's returned when running an asynchronous mutation.
  """
  id: ID!
}

"""
An entity that represents details of an asynchronous
[ProductDuplicate](https://shopify.dev/api/admin-graphql/current/mutations/productDuplicate) mutation.

By querying this entity with the
[productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query
using the ID that was returned
[when the product was duplicated](https://shopify.dev/api/admin/migrate/new-product-model/sync-data#create-a-product-with-variants-and-options-asynchronously),
this can be used to check the status of an operation.

The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.

The `product` field provides the details of the original product.

The `newProduct` field provides the details of the new duplicate of the product.

The `userErrors` field provides mutation errors that occurred during the operation.
"""
type ProductDuplicateOperation implements Node & ProductOperation {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The newly created duplicate of the original product.
  """
  newProduct: Product

  """
  The product on which the operation is being performed.
  """
  product: Product

  """
  The status of this operation.
  """
  status: ProductOperationStatus!

  """
  Returns mutation errors occurred during background mutation processing.
  """
  userErrors: [UserError!]!
}

"""
An auto-generated type which holds one Product and a cursor during pagination.
"""
type ProductEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ProductEdge.
  """
  node: Product!
}

"""
Projected metafield extensions for the Product type.
"""
type ProductExtensions {
  """
  
  """
  collectionType: String

  """
  
  """
  flexRating: Float

  """
  
  """
  similarProduct: Product

  """
  The internal SKU associated with this product.
  """
  sku: String

  """
  Great related taco
  """
  tacoPairing: TacoMetaobject

  """
  
  """
  thing: Date
}

"""
A product feed.
"""
type ProductFeed implements Node {
  """
  The country of the product feed.
  """
  country: CountryCode

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The language of the product feed.
  """
  language: LanguageCode

  """
  The status of the product feed.
  """
  status: ProductFeedStatus!
}

"""
An auto-generated type for paginating through multiple ProductFeeds.
"""
type ProductFeedConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ProductFeedEdge!]!

  """
  A list of nodes that are contained in ProductFeedEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ProductFeed!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductFeed and a cursor during pagination.
"""
type ProductFeedEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ProductFeedEdge.
  """
  node: ProductFeed!
}

"""
The valid values for the status of product feed.
"""
enum ProductFeedStatus {
  """
  The product feed is active.
  """
  ACTIVE

  """
  The product feed is inactive.
  """
  INACTIVE
}

"""
The input fields for identifying a product.
"""
input ProductIdentifierInput @oneOf {
  """
  The [custom ID](https://shopify.dev/docs/apps/build/custom-data/metafields/working-with-custom-ids) of the product.
  """
  customId: UniqueMetafieldValueInput

  """
  The handle of the product.
  """
  handle: String

  """
  The ID of the product.
  """
  id: ID
}

"""
The set of valid sort keys for the ProductImage query.
"""
enum ProductImageSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `position` value.
  """
  POSITION

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The set of valid sort keys for the ProductMedia query.
"""
enum ProductMediaSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `position` value.
  """
  POSITION

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
An entity that represents details of an asynchronous operation on a product.
"""
interface ProductOperation {
  """
  The product on which the operation is being performed.
  """
  product: Product

  """
  The status of this operation.
  """
  status: ProductOperationStatus!
}

"""
Represents the state of this product operation.
"""
enum ProductOperationStatus {
  """
  Operation is currently running.
  """
  ACTIVE

  """
  Operation is complete.
  """
  COMPLETE

  """
  Operation has been created.
  """
  CREATED
}

"""
The product property names. For example, "Size", "Color", and "Material".
Variants are selected based on permutations of these options.
The limit for each product property name is 255 characters.
"""
type ProductOption implements HasPublishedTranslations & Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The metafield identifier linked to this option.
  """
  linkedMetafield: LinkedMetafield

  """
  The product option’s name.
  """
  name: String!

  """
  Similar to values, option_values returns all the corresponding option value
  objects to the product option, including values not assigned to any variants.
  """
  optionValues: [ProductOptionValue!]!

  """
  The product option's position.
  """
  position: Int!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!

  """
  The corresponding value to the product option name.
  """
  values: [String!]!
}

"""
The product option value names. For example, "Red", "Blue", and "Green" for a "Color" option.
"""
type ProductOptionValue implements HasPublishedTranslations & Node {
  """
  Whether the product option value has any linked variants.
  """
  hasVariants: Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The value of the linked metafield.
  """
  linkedMetafieldValue: String

  """
  The name of the product option value.
  """
  name: String!

  """
  The swatch associated with the product option value.
  """
  swatch: ProductOptionValueSwatch

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!
}

"""
A swatch associated with a product option value.
"""
type ProductOptionValueSwatch {
  """
  The color representation of the swatch.
  """
  color: Color

  """
  An image representation of the swatch.
  """
  image: MediaImage
}

"""
The price range of the product.
"""
type ProductPriceRange {
  """
  The highest variant's price.
  """
  maxVariantPrice: MoneyV2!

  """
  The lowest variant's price.
  """
  minVariantPrice: MoneyV2!
}

"""
The price range of the product.
"""
type ProductPriceRangeV2 {
  """
  The highest variant's price.
  """
  maxVariantPrice: MoneyV2!

  """
  The lowest variant's price.
  """
  minVariantPrice: MoneyV2!
}

"""
Represents the channels where a product is published.
"""
type ProductPublication {
  """
  The channel where the product was or is published.
  """
  channel: Channel!

  """
  Whether the publication is published or not.
  """
  isPublished: Boolean!

  """
  The product that was or is going to be published on the channel.
  """
  product: Product!

  """
  The date that the product was or is going to be published on the channel.
  """
  publishDate: DateTime
}

"""
An auto-generated type for paginating through multiple ProductPublications.
"""
type ProductPublicationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ProductPublicationEdge!]!

  """
  A list of nodes that are contained in ProductPublicationEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ProductPublication!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductPublication and a cursor during pagination.
"""
type ProductPublicationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ProductPublicationEdge.
  """
  node: ProductPublication!
}

"""
Reports the status of product for a Sales Channel or Storefront API.
This might include why a product is not available in a Sales Channel
and how a merchant might fix this.
"""
type ProductResourceFeedback {
  """
  The time when the feedback was generated. Used to help determine whether
  incoming feedback is outdated compared to existing feedback.
  """
  feedbackGeneratedAt: DateTime!

  """
  The feedback messages presented to the merchant.
  """
  messages: [String!]!

  """
  The ID of the product associated with the feedback.
  """
  productId: ID!

  """
  The timestamp of the product associated with the feedback.
  """
  productUpdatedAt: DateTime!

  """
  Conveys the state of the feedback and whether it requires merchant action or not.
  """
  state: ResourceFeedbackState!
}

"""
A sale associated with a product.
"""
type ProductSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique ID for the sale.
  """
  id: ID!

  """
  The line item for the associated sale.
  """
  lineItem: LineItem!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
An entity that represents details of an asynchronous
[ProductSet](https://shopify.dev/api/admin-graphql/current/mutations/productSet) mutation.

By querying this entity with the
[productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query
using the ID that was returned
[when the product was created or updated](https://shopify.dev/api/admin/migrate/new-product-model/sync-data#create-a-product-with-variants-and-options-asynchronously),
this can be used to check the status of an operation.

The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.

The `product` field provides the details of the created or updated product.

The `userErrors` field provides mutation errors that occurred during the operation.
"""
type ProductSetOperation implements Node & ProductOperation {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The product on which the operation is being performed.
  """
  product: Product

  """
  The status of this operation.
  """
  status: ProductOperationStatus!

  """
  Returns mutation errors occurred during background mutation processing.
  """
  userErrors: [ProductSetUserError!]!
}

"""
Defines errors for ProductSet mutation.
"""
type ProductSetUserError implements DisplayableError {
  """
  The error code.
  """
  code: ProductSetUserErrorCode

  """
  The path to the input field that caused the error.
  """
  field: [String!]

  """
  The error message.
  """
  message: String!
}

"""
Possible error codes that can be returned by `ProductSetUserError`.
"""
enum ProductSetUserErrorCode {
  """
  An option cannot have both metafield linked and nonlinked option values.
  """
  CANNOT_COMBINE_LINKED_AND_NONLINKED_OPTION_VALUES

  """
  The metafield violates a capability restriction.
  """
  CAPABILITY_VIOLATION

  """
  Duplicated option name.
  """
  DUPLICATED_OPTION_NAME

  """
  Duplicated option value.
  """
  DUPLICATED_OPTION_VALUE

  """
  Duplicated value.
  """
  DUPLICATED_VALUE

  """
  Cannot link multiple options to the same metafield.
  """
  DUPLICATE_LINKED_OPTION

  """
  Something went wrong, please try again.
  """
  GENERIC_ERROR

  """
  Gift card products can only be created after they have been activated.
  """
  GIFT_CARDS_NOT_ACTIVATED

  """
  The product gift_card attribute cannot be changed after creation.
  """
  GIFT_CARD_ATTRIBUTE_CANNOT_BE_CHANGED

  """
  Handle already in use. Please provide a new handle.
  """
  HANDLE_NOT_UNIQUE

  """
  Input is not valid.
  """
  INVALID_INPUT

  """
  Metafield is not valid.
  """
  INVALID_METAFIELD

  """
  Invalid metafield value for linked option.
  """
  INVALID_METAFIELD_VALUE_FOR_LINKED_OPTION

  """
  Product is not valid.
  """
  INVALID_PRODUCT

  """
  Product variant is not valid.
  """
  INVALID_VARIANT

  """
  Error processing request in the background job.
  """
  JOB_ERROR

  """
  No valid metafield definition found for linked option.
  """
  LINKED_METAFIELD_DEFINITION_NOT_FOUND

  """
  Linked options are currently not supported for this shop.
  """
  LINKED_OPTIONS_NOT_SUPPORTED_FOR_SHOP

  """
  Options over limit.
  """
  OPTIONS_OVER_LIMIT

  """
  Option does not exist.
  """
  OPTION_DOES_NOT_EXIST

  """
  Each option must have at least one option value specified.
  """
  OPTION_VALUES_MISSING

  """
  Option values over limit.
  """
  OPTION_VALUES_OVER_LIMIT

  """
  Option value does not exist.
  """
  OPTION_VALUE_DOES_NOT_EXIST

  """
  Product does not exist.
  """
  PRODUCT_DOES_NOT_EXIST

  """
  Must specify product options when updating variants.
  """
  PRODUCT_OPTIONS_INPUT_MISSING

  """
  Product variant does not exist.
  """
  PRODUCT_VARIANT_DOES_NOT_EXIST

  """
  Must specify variants when updating options.
  """
  VARIANTS_INPUT_MISSING

  """
  Number of product variants exceeds shop limit.
  """
  VARIANTS_OVER_LIMIT
}

"""
The set of valid sort keys for the Product query.
"""
enum ProductSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `inventory_total` value.
  """
  INVENTORY_TOTAL

  """
  Sort by the `product_type` value.
  """
  PRODUCT_TYPE

  """
  Sort by the `published_at` value.
  """
  PUBLISHED_AT

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `title` value.
  """
  TITLE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT

  """
  Sort by the `vendor` value.
  """
  VENDOR
}

"""
The possible product statuses.
"""
enum ProductStatus {
  """
  The product is ready to sell and can be published to sales channels and apps.
  Products with an active status aren't automatically published to sales
  channels, such as the online store, or apps. By default, existing products are set to active.
  """
  ACTIVE

  """
  The product is no longer being sold and isn't available to customers on sales channels and apps.
  """
  ARCHIVED

  """
  The product isn't ready to sell and is unavailable to customers on sales
  channels and apps. By default, duplicated and unarchived products are set to draft.
  """
  DRAFT
}

"""
Represents a [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17) node.
"""
type ProductTaxonomyNode implements Node {
  """
  The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
  """
  fullName: String!

  """
  The ID of the product taxonomy node.
  """
  id: ID!

  """
  Whether the node is a leaf node.
  """
  isLeaf: Boolean!

  """
  Whether the node is a root node.
  """
  isRoot: Boolean!

  """
  The name of the product taxonomy node. For example, Dog Beds.
  """
  name: String!
}

"""
Represents a product variant.
"""
type ProductVariant implements HasEvents & HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & LegacyInteroperability & Navigable & Node {
  """
  Whether the product variant is available for sale.
  """
  availableForSale: Boolean!

  """
  The value of the barcode associated with the product.
  """
  barcode: String

  """
  The compare-at price of the variant in the default shop currency.
  """
  compareAtPrice: Money

  """
  The pricing that applies for a customer in a given context.
  """
  contextualPricing(
    """
    The context used to generate contextual pricing for the variant.
    """
    context: ContextualPricingContext!
  ): ProductVariantContextualPricing!

  """
  The date and time when the variant was created.
  """
  createdAt: DateTime!

  """
  A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that
  returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!

  """
  The [delivery profile](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryProfile) for the variant.
  """
  deliveryProfile: DeliveryProfile

  """
  Display name of the variant, based on product's title + variant's title.
  """
  displayName: String!

  """
  The paginated list of events associated with the host subject.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The featured image for the variant.
  """
  image(
    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1 @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")
  ): Image

  """
  The inventory item, which is used to query for inventory information.
  """
  inventoryItem: InventoryItem!

  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: ProductVariantInventoryPolicy!

  """
  The total sellable quantity of the variant.
  """
  inventoryQuantity: Int

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The media associated with the product variant.
  """
  media(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MediaConnection!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The order of the product variant in the list of product variants. The first position in the list is 1.
  """
  position: Int!

  """
  List of prices and compare-at prices in the presentment currencies for this shop.
  """
  presentmentPrices(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The presentment currencies prices should return in.
    """
    presentmentCurrencies: [CurrencyCode!]

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductVariantPricePairConnection! @deprecated(reason: "Use `contextualPricing` instead.")

  """
  The price of the product variant in the default shop currency.
  """
  price: Money!

  """
  The product that this variant belongs to.
  """
  product: Product!

  """
  A list of the product variant components.
  """
  productVariantComponents(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductVariantComponentConnection!

  """
  Whether a product variant requires components. The default value is `false`.
  If `true`, then the product variant can only be purchased as a parent bundle with components and it will be omitted
  from channels that don't support bundles.
  """
  requiresComponents: Boolean!

  """
  List of product options applied to the variant.
  """
  selectedOptions: [SelectedOption!]!

  """
  The total sellable quantity of the variant for online channels.
  This doesn't represent the total available inventory or capture
  [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
  """
  sellableOnlineQuantity: Int!

  """
  Count of selling plan groups associated with the product variant.
  """
  sellingPlanGroupCount: Int! @deprecated(reason: "Use `sellingPlanGroupsCount` instead.")

  """
  A list of all selling plan groups defined in the current shop associated with the product variant.
  """
  sellingPlanGroups(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SellingPlanGroupConnection!

  """
  Count of selling plan groups associated with the product variant.
  """
  sellingPlanGroupsCount: Count

  """
  A case-sensitive identifier for the product variant in the shop.
  Required in order to connect to a fulfillment service.
  """
  sku: String

  """
  The Storefront GraphQL API ID of the `ProductVariant`.

  As of the `2022-04` version release, the Storefront GraphQL API will no longer
  return Base64 encoded IDs to match the behavior of the Admin GraphQL API.
  Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: StorefrontID! @deprecated(reason: "Use `id` instead.")

  """
  The tax code for the product variant.
  """
  taxCode: String

  """
  Whether a tax is charged when the product variant is sold.
  """
  taxable: Boolean!

  """
  The title of the product variant.
  """
  title: String!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!

  """
  The unit price measurement for the variant.
  """
  unitPriceMeasurement: UnitPriceMeasurement

  """
  The date and time (ISO 8601 format) when the product variant was last modified.
  """
  updatedAt: DateTime!
}

"""
A product variant component associated with a product variant.
"""
type ProductVariantComponent implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The product variant associated with the component.
  """
  productVariant: ProductVariant!

  """
  The required quantity of the component.
  """
  quantity: Int!
}

"""
An auto-generated type for paginating through multiple ProductVariantComponents.
"""
type ProductVariantComponentConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ProductVariantComponentEdge!]!

  """
  A list of nodes that are contained in ProductVariantComponentEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [ProductVariantComponent!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductVariantComponent and a cursor during pagination.
"""
type ProductVariantComponentEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ProductVariantComponentEdge.
  """
  node: ProductVariantComponent!
}

"""
An auto-generated type for paginating through multiple ProductVariants.
"""
type ProductVariantConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ProductVariantEdge!]!

  """
  A list of nodes that are contained in ProductVariantEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ProductVariant!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
The price of a product variant in a specific country.
Prices vary between countries.
"""
type ProductVariantContextualPricing {
  """
  The final compare-at price after all adjustments are applied.
  """
  compareAtPrice: MoneyV2

  """
  The final price after all adjustments are applied.
  """
  price: MoneyV2!

  """
  A list of quantity breaks for the product variant.
  """
  quantityPriceBreaks(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: QuantityPriceBreakSortKeys = MINIMUM_QUANTITY
  ): QuantityPriceBreakConnection!

  """
  The quantity rule applied for a given context.
  """
  quantityRule: QuantityRule!
}

"""
An auto-generated type which holds one ProductVariant and a cursor during pagination.
"""
type ProductVariantEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ProductVariantEdge.
  """
  node: ProductVariant!
}

"""
The valid values for the inventory policy of a product variant once it is out of stock.
"""
enum ProductVariantInventoryPolicy {
  """
  Customers can buy this product variant after it's out of stock.
  """
  CONTINUE

  """
  Customers can't buy this product variant after it's out of stock.
  """
  DENY
}

"""
The compare-at price and price of a variant sharing a currency.
"""
type ProductVariantPricePair {
  """
  The compare-at price of the variant with associated currency.
  """
  compareAtPrice: MoneyV2

  """
  The price of the variant with associated currency.
  """
  price: MoneyV2!
}

"""
An auto-generated type for paginating through multiple ProductVariantPricePairs.
"""
type ProductVariantPricePairConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ProductVariantPricePairEdge!]!

  """
  A list of nodes that are contained in ProductVariantPricePairEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [ProductVariantPricePair!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
"""
type ProductVariantPricePairEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ProductVariantPricePairEdge.
  """
  node: ProductVariantPricePair!
}

"""
The set of valid sort keys for the ProductVariant query.
"""
enum ProductVariantSortKeys {
  """
  Sort by the `full_title` value.
  """
  FULL_TITLE

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by available inventory quantity in the location specified by the `query:"location_id:"` argument.
  Don't use this sort key when no `location_id` in query is specified.
  """
  INVENTORY_LEVELS_AVAILABLE

  """
  Sort by the `inventory_management` value.
  """
  INVENTORY_MANAGEMENT

  """
  Sort by the `inventory_policy` value.
  """
  INVENTORY_POLICY

  """
  Sort by the `inventory_quantity` value.
  """
  INVENTORY_QUANTITY

  """
  Sort by the `name` value.
  """
  NAME

  """
  Sort by the `popular` value.
  """
  POPULAR

  """
  Sort by the `position` value.
  """
  POSITION

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `sku` value.
  """
  SKU

  """
  Sort by the `title` value.
  """
  TITLE
}

"""
The set of valid sort keys for the ProfileItem query.
"""
enum ProfileItemSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `inventory_total` value.
  """
  INVENTORY_TOTAL

  """
  Sort by the `product_type` value.
  """
  PRODUCT_TYPE

  """
  Sort by the `published_at` value.
  """
  PUBLISHED_AT

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `title` value.
  """
  TITLE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT

  """
  Sort by the `vendor` value.
  """
  VENDOR
}

"""
A publication is a group of products and collections that is published to an app.
"""
type Publication implements Node {
  """
  The app associated with the publication.
  """
  app: App! @deprecated(reason: "Use [AppCatalog.apps](https://shopify.dev/api/admin-graphql/unstable/objects/AppCatalog#connection-appcatalog-apps) instead.")

  """
  Whether new products are automatically published to this publication.
  """
  autoPublish: Boolean!

  """
  The catalog associated with the publication.
  """
  catalog: Catalog

  """
  The collection publications for the list of collections published to the publication.
  """
  collectionPublicationsV3(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """
  The list of collections published to the publication.
  """
  collections(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CollectionConnection!

  """
  Whether the collection is available to the publication.
  """
  hasCollection(
    """
    Collection ID to check.
    """
    id: ID!
  ): Boolean!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Name of the publication.
  """
  name: String! @deprecated(reason: "Use [Catalog.title](https://shopify.dev/api/admin-graphql/unstable/interfaces/Catalog#field-catalog-title) instead.")

  """
  A background operation associated with this publication.
  """
  operation: PublicationOperation

  """
  The product publications for the list of products published to the publication.
  """
  productPublicationsV3(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """
  The list of products published to the publication.
  """
  products(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductConnection!

  """
  Whether the publication supports future publishing.
  """
  supportsFuturePublishing: Boolean!
}

"""
An auto-generated type for paginating through multiple Publications.
"""
type PublicationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [PublicationEdge!]!

  """
  A list of nodes that are contained in PublicationEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [Publication!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Publication and a cursor during pagination.
"""
type PublicationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of PublicationEdge.
  """
  node: Publication!
}

"""
The possible types of publication operations.
"""
union PublicationOperation = AddAllProductsOperation | CatalogCsvOperation | PublicationResourceOperation

"""
A bulk update operation on a publication.
"""
type PublicationResourceOperation implements Node & ResourceOperation {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The count of processed rows, summing imported, failed, and skipped rows.
  """
  processedRowCount: Int

  """
  Represents a rows objects within this background operation.
  """
  rowCount: RowCount

  """
  The status of this operation.
  """
  status: ResourceOperationStatus!
}

"""
Represents a resource that can be published to a channel.
A publishable resource can be either a Product or Collection.
"""
interface Publishable {
  """
  The number of
  [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that a resource is published to, without
  [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
  """
  availablePublicationsCount: Count

  """
  The number of
  [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that a resource is published to, without
  [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
  """
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int! @deprecated(reason: "Use `resourcePublicationsCount` instead.")

  """
  Whether the resource is published to a specific channel.
  """
  publishedOnChannel(
    """
    The ID of the channel to check.
    """
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")

  """
  Whether the resource is published to a
  [channel](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel).
  For example, the resource might be published to the online store channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead.")

  """
  Whether the resource is published to the app's
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  For example, the resource might be published to the app's online store channel.
  """
  publishedOnCurrentPublication: Boolean!

  """
  Whether the resource is published to a specified
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  """
  publishedOnPublication(
    """
    The ID of the publication to check. For example, `id: "gid://shopify/Publication/123"`.
    """
    publicationId: ID!
  ): Boolean!

  """
  The list of resources that are published to a
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  """
  resourcePublications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled to be published.
    """
    onlyPublished: Boolean = true

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """
  The number of
  [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that a resource is published to, without
  [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
  """
  resourcePublicationsCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Count

  """
  The list of resources that are either published or staged to be published to a
  [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
  """
  resourcePublicationsV2(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Filter publications by catalog type.
    """
    catalogType: CatalogType

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled or staged to be published.
    """
    onlyPublished: Boolean = true

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ResourcePublicationV2Connection!

  """
  The list of channels that the resource is not published to.
  """
  unpublishedChannels(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead.")

  """
  The list of [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
  that the resource isn't published to.
  """
  unpublishedPublications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): PublicationConnection!
}

"""
Represents information about the purchasing company for the order or draft order.
"""
type PurchasingCompany {
  """
  The company associated to the order or draft order.
  """
  company: Company!

  """
  The company contact associated to the order or draft order.
  """
  contact: CompanyContact

  """
  The company location associated to the order or draft order.
  """
  location: CompanyLocation!
}

"""
Represents information about the purchasing entity for the order or draft order.
"""
union PurchasingEntity = Customer | PurchasingCompany

"""
Quantity price breaks lets you offer different rates that are based on the
amount of a specific variant being ordered.
"""
type QuantityPriceBreak implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  Minimum quantity required to reach new quantity break price.
  """
  minimumQuantity: Int!

  """
  The price of variant after reaching the minimum quanity.
  """
  price: MoneyV2!

  """
  The price list associated with this quantity break.
  """
  priceList: PriceList!

  """
  The product variant associated with this quantity break.
  """
  variant: ProductVariant!
}

"""
An auto-generated type for paginating through multiple QuantityPriceBreaks.
"""
type QuantityPriceBreakConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [QuantityPriceBreakEdge!]!

  """
  A list of nodes that are contained in QuantityPriceBreakEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [QuantityPriceBreak!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one QuantityPriceBreak and a cursor during pagination.
"""
type QuantityPriceBreakEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of QuantityPriceBreakEdge.
  """
  node: QuantityPriceBreak!
}

"""
The set of valid sort keys for the QuantityPriceBreak query.
"""
enum QuantityPriceBreakSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `minimum_quantity` value.
  """
  MINIMUM_QUANTITY

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The quantity rule for the product variant in a given context.
"""
type QuantityRule {
  """
  The value that specifies the quantity increment between minimum and maximum of the rule.
  Only quantities divisible by this value will be considered valid.

  The increment must be lower than or equal to the minimum and the maximum, and both minimum and maximum
  must be divisible by this value.
  """
  increment: Int!

  """
  Whether the quantity rule fields match one increment, one minimum and no maximum.
  """
  isDefault: Boolean!

  """
  An optional value that defines the highest allowed quantity purchased by the customer.
  If defined, maximum must be lower than or equal to the minimum and must be a multiple of the increment.
  """
  maximum: Int

  """
  The value that defines the lowest allowed quantity purchased by the customer.
  The minimum must be a multiple of the quantity rule's increment.
  """
  minimum: Int!

  """
  Whether the values of the quantity rule were explicitly set.
  """
  originType: QuantityRuleOriginType!

  """
  The product variant for which the quantity rule is applied.
  """
  productVariant: ProductVariant!
}

"""
An auto-generated type for paginating through multiple QuantityRules.
"""
type QuantityRuleConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [QuantityRuleEdge!]!

  """
  A list of nodes that are contained in QuantityRuleEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [QuantityRule!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one QuantityRule and a cursor during pagination.
"""
type QuantityRuleEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of QuantityRuleEdge.
  """
  node: QuantityRule!
}

"""
The origin of quantity rule on a price list.
"""
enum QuantityRuleOriginType {
  """
  Quantity rule is explicitly defined.
  """
  FIXED

  """
  Quantity rule falls back to the relative rule.
  """
  RELATIVE
}

"""
The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.
"""
type QueryRoot {
  """
  List of abandoned checkouts. Includes checkouts that were recovered after being abandoned.
  """
  abandonedCheckouts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | The date and time (in [ISO 8601
    format](http://en.wikipedia.org/wiki/ISO_8601)) when the abandoned cart was created. |
    | email_state | string | Filter by `abandoned_email_state` value. Possible
    values: `sent`, `not_sent`, `scheduled` and `suppressed`. |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | recovery_state | string | Possible values: `recovered` and `not_recovered`. |
    | status | string | Possible values: `open` and `closed`. |
    | updated_at | time | The date and time (in [ISO 8601
    format](http://en.wikipedia.org/wiki/ISO_8601)) when the abandoned cart was
    last updated. |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: AbandonedCheckoutSortKeys = ID
  ): AbandonedCheckoutConnection!

  """
  Returns the count of abandoned checkouts for the given shop. Limited to a maximum of 10000.
  """
  abandonedCheckoutsCount(
    """
    The upper bound on count value before returning a result.
    """
    limit: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | The date and time (in [ISO 8601
    format](http://en.wikipedia.org/wiki/ISO_8601)) when the abandoned cart was created. |
    | email_state | string | Filter by `abandoned_email_state` value. Possible
    values: `sent`, `not_sent`, `scheduled` and `suppressed`. |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | recovery_state | string | Possible values: `recovered` and `not_recovered`. |
    | status | string | Possible values: `open` and `closed`. |
    | updated_at | time | The date and time (in [ISO 8601
    format](http://en.wikipedia.org/wiki/ISO_8601)) when the abandoned cart was
    last updated. |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to the [`SavedSearch`](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch) object.
    """
    savedSearchId: ID
  ): Count

  """
  Returns an abandonment by ID.
  """
  abandonment(
    """
    The ID of the `Abandonment` to return.
    """
    id: ID!
  ): Abandonment

  """
  Returns an Abandonment by the Abandoned Checkout ID.
  """
  abandonmentByAbandonedCheckoutId(
    """
    The ID of the Abandoned Checkout ID to query by.
    """
    abandonedCheckoutId: ID!
  ): Abandonment

  """
  Lookup an App by ID or return the currently authenticated App.
  """
  app(
    """
    The ID to lookup the App by.
    """
    id: ID
  ): App

  """
  Fetches app by handle.
  Returns null if the app doesn't exist.
  """
  appByHandle(
    """
    Handle of the App.
    """
    handle: String!
  ): App

  """
  Fetches an app by its client ID.
  Returns null if the app doesn't exist.
  """
  appByKey(
    """
    Client ID of the app.
    """
    apiKey: String!
  ): App

  """
  An app discount type.
  """
  appDiscountType(
    """
    The ID for the function providing the app discount type.
    """
    functionId: String!
  ): AppDiscountType

  """
  A list of app discount types installed by apps.
  """
  appDiscountTypes: [AppDiscountType!]!

  """
  Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.
  """
  appInstallation(
    """
    ID used to lookup AppInstallation.
    """
    id: ID
  ): AppInstallation

  """
  A list of app installations. To use this query, you need to contact [Shopify
  Support](https://partners.shopify.com/current/support/) to grant your custom
  app the `read_apps` access scope. Public apps can't be granted this access scope.
  """
  appInstallations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The category of app installations to fetch.
    """
    category: AppInstallationCategory

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The privacy level of app installations to fetch.
    """
    privacy: AppInstallationPrivacy = PUBLIC

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: AppInstallationSortKeys = INSTALLED_AT
  ): AppInstallationConnection!

  """
  Returns an Article resource by ID.
  """
  article(
    """
    The ID of the `Article` to return.
    """
    id: ID!
  ): Article

  """
  List of all article tags.
  """
  articleTags(
    """
    The maximum number of tags to return.
    """
    limit: Int!

    """
    Type of sort order.
    """
    sort: ArticleTagSort = ALPHABETICAL
  ): [String!]!

  """
  List of the shop's articles.
  """
  articles(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | author | string | Filter by the author of the article. |
    | blog_title | string |
    | created_at | time | Filter by the date and time when the article was
    created. | | | - `created_at:>'2020-10-21T23:39:20Z'`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | published_status | string | Filter by published status |
    | tag | string | Filter objects by the `tag` field. | | | - `tag:my_tag` |
    | tag_not | string | Filter by objects that don’t have the specified tag. | | | - `tag_not:my_tag` |
    | updated_at | time | Filter by the date and time when the article was last
    updated. | | | - `updated_at:>'2020-10-21T23:39:20Z'`<br/> -
    `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ArticleSortKeys = ID
  ): ArticleConnection!

  """
  The paginated list of fulfillment orders assigned to the shop locations owned by the app.

  Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations
  managed by
  [fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
  that are registered by the app.
  One app (api_client) can host multiple fulfillment services on a shop.
  Each fulfillment service manages a dedicated location on a shop.
  Assigned fulfillment orders can have associated
  [fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),
  or might currently not be requested to be fulfilled.

  The app must have the `read_assigned_fulfillment_orders`
  [access scope](https://shopify.dev/docs/api/usage/access-scopes)
  to be able to retrieve the fulfillment orders assigned to its locations.

  All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.
  Perform filtering with the `assignmentStatus` argument
  to receive only fulfillment orders that have been requested to be fulfilled.
  """
  assignedFulfillmentOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The assigment status of the fulfillment orders that should be returned.
    If `assignmentStatus` argument is not provided, then
    the query will return all assigned fulfillment orders,
    except those that have the `CLOSED` status.
    """
    assignmentStatus: FulfillmentOrderAssignmentStatus

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Returns fulfillment orders only for certain locations, specified by a list of location IDs.
    """
    locationIds: [ID!]

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: FulfillmentOrderSortKeys = ID
  ): FulfillmentOrderConnection!

  """
  Returns an automatic discount resource by ID.
  """
  automaticDiscount(
    """
    The ID of the `DiscountAutomatic` to return.
    """
    id: ID!
  ): DiscountAutomatic @deprecated(reason: "Use `automaticDiscountNode` instead.")

  """
  Returns an automatic discount resource by ID.
  """
  automaticDiscountNode(
    """
    The ID of the `DiscountAutomaticNode` to return.
    """
    id: ID!
  ): DiscountAutomaticNode

  """
  Returns a list of [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts).
  """
  automaticDiscountNodes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | status | string | Filter by the discount status. | - `active`<br/> -
    `expired`<br/> - `scheduled` | | - `status:scheduled` |
    | type | string | Filter by the [discount
    type](https://help.shopify.com/manual/discounts/discount-types). | -
    `all`<br/> - `all_with_app`<br/> - `app`<br/> - `bxgy`<br/> -
    `fixed_amount`<br/> - `percentage` | | - `type:bxgy` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: AutomaticDiscountSortKeys = ID
  ): DiscountAutomaticNodeConnection!

  """
  List of the shop's automatic discount saved searches.
  """
  automaticDiscountSavedSearches(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SavedSearchConnection!

  """
  List of automatic discounts.
  """
  automaticDiscounts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | status | string | Filter by the discount status. | - `active`<br/> -
    `expired`<br/> - `scheduled` | | - `status:scheduled` |
    | type | string | Filter by the [discount
    type](https://help.shopify.com/manual/discounts/discount-types). | -
    `all`<br/> - `all_with_app`<br/> - `app`<br/> - `bxgy`<br/> -
    `fixed_amount`<br/> - `percentage` | | - `type:bxgy` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: AutomaticDiscountSortKeys = CREATED_AT
  ): DiscountAutomaticConnection! @deprecated(reason: "Use `automaticDiscountNodes` instead.")

  """
  Returns a list of activated carrier services and associated shop locations that support them.
  """
  availableCarrierServices: [DeliveryCarrierServiceAndLocations!]!

  """
  A list of available locales.
  """
  availableLocales: [Locale!]!

  """
  Returns a Blog resource by ID.
  """
  blog(
    """
    The ID of the `Blog` to return.
    """
    id: ID!
  ): Blog

  """
  List of the shop's blogs.
  """
  blogs(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time |
    | handle | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | title | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: BlogSortKeys = ID
  ): BlogConnection!

  """
  Count of blogs.
  """
  blogsCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time |
    | handle | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | title | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String
  ): Count

  """
  Returns a list of Business Entities associated with the shop.
  """
  businessEntities: [BusinessEntity!]!

  """
  Returns a Business Entity by ID.
  """
  businessEntity(
    """
    The ID of the Business Entity to return. Returns the primary Business Entity if not provided.
    """
    id: ID
  ): BusinessEntity

  """
  Returns a `DeliveryCarrierService` object by ID.
  """
  carrierService(
    """
    The ID of the `DeliveryCarrierService` to return.
    """
    id: ID!
  ): DeliveryCarrierService

  """
  Retrieve a list of CarrierServices.
  """
  carrierServices(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | active | boolean |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CarrierServiceSortKeys = ID
  ): DeliveryCarrierServiceConnection!

  """
  List of Cart transform objects owned by the current API client.
  """
  cartTransforms(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CartTransformConnection!

  """
  Lookup a cash tracking session by ID.
  """
  cashTrackingSession(
    """
    The ID of the `CashTrackingSession` to return.
    """
    id: ID!
  ): CashTrackingSession

  """
  Returns a shop's cash tracking sessions for locations with a POS Pro subscription.

  Tip: To query for cash tracking sessions in bulk, you can
  [perform a bulk operation](https://shopify.dev/docs/api/usage/bulk-operations/queries).
  """
  cashTrackingSessions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | closing_time | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | location_id | id |
    | opening_time | time |
    | point_of_sale_device_ids | string |
    | status | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CashTrackingSessionsSortKeys = ID
  ): CashTrackingSessionConnection!

  """
  Returns a Catalog resource by ID.
  """
  catalog(
    """
    The ID of the `Catalog` to return.
    """
    id: ID!
  ): Catalog

  """
  Returns the most recent catalog operations for the shop.
  """
  catalogOperations: [ResourceOperation!]!

  """
  The catalogs belonging to the shop.
  """
  catalogs(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | app_id | id |
    | company_id | id |
    | company_location_id | id |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | managed_country_id | id |
    | market_id | id |
    | status | string |
    | title | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CatalogSortKeys = ID

    """
    The type of the catalogs to be returned.
    """
    type: CatalogType = null
  ): CatalogConnection!

  """
  The count of catalogs belonging to the shop. Limited to a maximum of 10000.
  """
  catalogsCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | app_id | id |
    | company_id | id |
    | company_location_id | id |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | managed_country_id | id |
    | market_id | id |
    | status | string |
    | title | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    The type of the catalogs to be returned.
    """
    type: CatalogType = null
  ): Count

  """
  Lookup a channel by ID.
  """
  channel(
    """
    The ID of the `Channel` to return.
    """
    id: ID!
  ): Channel @deprecated(reason: "Use `publication` instead.")

  """
  List of the active sales channels.
  """
  channels(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `publications` instead.")

  """
  Returns the visual customizations for checkout for a given checkout profile.

  To learn more about updating checkout branding settings, refer to the
  [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert)
  mutation and the checkout branding [tutorial](https://shopify.dev/docs/apps/checkout/styling).
  """
  checkoutBranding(
    """
    A globally-unique identifier.
    """
    checkoutProfileId: ID!
  ): CheckoutBranding

  """
  A checkout profile on a shop.
  """
  checkoutProfile(
    """
    The ID of the checkout profile.
    """
    id: ID!
  ): CheckoutProfile

  """
  List of checkout profiles on a shop.
  """
  checkoutProfiles(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | is_published | boolean |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CheckoutProfileSortKeys = UPDATED_AT
  ): CheckoutProfileConnection!

  """
  Returns a [code discount](https://help.shopify.com/manual/discounts/discount-types#discount-codes) resource by ID.
  """
  codeDiscountNode(
    """
    The ID of the `DiscountCodeNode` to return.
    """
    id: ID!
  ): DiscountCodeNode

  """
  Returns a code discount identified by its discount code.
  """
  codeDiscountNodeByCode(
    """
    The case-insensitive code of the `DiscountCodeNode` to return.
    """
    code: String!
  ): DiscountCodeNode

  """
  Returns a list of [code-based discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes).
  """
  codeDiscountNodes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | combines_with | string | Filter by the [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
    that you can use in combination with [Shopify discount
    types](https://help.shopify.com/manual/discounts/discount-types). | -
    `order_discounts`<br/> - `product_discounts`<br/> - `shipping_discounts` | |
    - `combines_with:product_discounts` |
    | created_at | time | Filter by the date and time when the discount was
    created. | | | - `created_at:>'2020-10-21T23:39:20Z'`<br/> -
    `created_at:<now`<br/> - `created_at:<='2024'` |
    | discount_type | string | Filter by the [discount
    type](https://help.shopify.com/manual/discounts/discount-types). | -
    `bogo`<br/> - `fixed_amount`<br/> - `free_shipping`<br/> - `percentage` | |
    - `discount_type:fixed_amount` |
    | ends_at | time | Filter by the date and time when the discount expires and
    is no longer available for customer use. | | | -
    `ends_at:>'2020-10-21T23:39:20Z'`<br/> - `ends_at:<now`<br/> -
    `ends_at:<='2024'` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | starts_at | time | Filter by the date and time, in the shop's timezone,
    when the discount becomes active and is available for customer use. | | | -
    `starts_at:>'2020-10-21T23:39:20Z'`<br/> - `starts_at:<now`<br/> -
    `starts_at:<='2024'` |
    | status | string | Filter by the status of the discount. | - `active`<br/>
    - `expired`<br/> - `scheduled` | | - `status:scheduled` |
    | times_used | integer | Filter by the number of times the discount has been
    used. For example, if a "Buy 3, Get 1 Free" t-shirt discount is
    automatically applied in 200 transactions, then the discount has been used
    200 times. <br><br> This value is updated asynchronously. As a result, it
    might be different than the actual usage count. | | | - `times_used:0`<br/>
    - `times_used:>150`<br/> - `times_used:>=200` |
    | title | string | Filter by the discount name that displays to customers. | | | - `title:Black Friday Sale` |
    | type | string | Filter by the [discount
    type](https://help.shopify.com/manual/discounts/discount-types). | -
    `all`<br/> - `all_with_app`<br/> - `app`<br/> - `bxgy`<br/> -
    `fixed_amount`<br/> - `free_shipping`<br/> - `percentage` | | -
    `type:percentage` |
    | updated_at | time | Filter by the date and time when the discount was last
    updated. | | | - `updated_at:>'2020-10-21T23:39:20Z'`<br/> -
    `updated_at:<now`<br/> - `updated_at:<='2024'` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CodeDiscountSortKeys = ID
  ): DiscountCodeNodeConnection!

  """
  List of the shop's code discount saved searches.
  """
  codeDiscountSavedSearches(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SavedSearchConnection!

  """
  Returns a Collection resource by ID.
  """
  collection(
    """
    The ID of the `Collection` to return.
    """
    id: ID!
  ): Collection

  """
  Return a collection by its handle.
  """
  collectionByHandle(
    """
    The handle of the collection.
    """
    handle: String!
  ): Collection @deprecated(reason: "Use `collectionByIdentifier` instead.")

  """
  Lists all rules that can be used to create smart collections.
  """
  collectionRulesConditions: [CollectionRuleConditions!]!

  """
  Returns a list of the shop's collection saved searches.
  """
  collectionSavedSearches(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SavedSearchConnection!

  """
  Returns a list of collections.
  """
  collections(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | collection_type | string | | - `custom`<br/> - `smart` |
    | handle | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | product_id | id | Filter by collections containing a product by its ID. |
    | product_publication_status | string | Filter by the publishable status of
    the resource on a channel, such as the online store. The value is a
    composite of the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) and one of the valid values. | - `approved`<br/> -
    `rejected`<br/> - `needs_action`<br/> - `awaiting_review`<br/> -
    `published`<br/> - `demoted`<br/> - `scheduled`<br/> -
    `provisionally_published` | | - `publishable_status:189769876-approved` |
    | publishable_status | string | Filter by the publishable status of the
    resource on a channel, such as the online store. The value is a composite of
    either the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) or [channel `name`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel#field-name)
    and one of the valid values. | - `online_store_channel`<br/> -
    `published`<br/> - `unpublished`<br/> - `visible`<br/> - `unavailable`<br/>
    - `hidden`<br/> - `intended`<br/> - `visible` | | -
    `publishable_status:published`<br/> -
    `publishable_status:189769876:visible`<br/> -
    `publishable_status:pos:hidden` |
    | published_at | time | Filter by the date and time when the collection was published to the Online Store. |
    | published_status | string | Filter by the published status of the resource
    on a channel, such as the online store. | - `unset`<br/> - `pending`<br/> -
    `approved`<br/> - `not approved` | | - `published_status:approved` |
    | title | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CollectionSortKeys = ID
  ): CollectionConnection!

  """
  Count of collections. Limited to a maximum of 10000.
  """
  collectionsCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | collection_type | string | | - `custom`<br/> - `smart` |
    | handle | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | product_id | id | Filter by collections containing a product by its ID. |
    | product_publication_status | string | Filter by the publishable status of
    the resource on a channel, such as the online store. The value is a
    composite of the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) and one of the valid values. | - `approved`<br/> -
    `rejected`<br/> - `needs_action`<br/> - `awaiting_review`<br/> -
    `published`<br/> - `demoted`<br/> - `scheduled`<br/> -
    `provisionally_published` | | - `publishable_status:189769876-approved` |
    | publishable_status | string | Filter by the publishable status of the
    resource on a channel, such as the online store. The value is a composite of
    either the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) or [channel `name`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel#field-name)
    and one of the valid values. | - `online_store_channel`<br/> -
    `published`<br/> - `unpublished`<br/> - `visible`<br/> - `unavailable`<br/>
    - `hidden`<br/> - `intended`<br/> - `visible` | | -
    `publishable_status:published`<br/> -
    `publishable_status:189769876:visible`<br/> -
    `publishable_status:pos:hidden` |
    | published_at | time | Filter by the date and time when the collection was published to the Online Store. |
    | published_status | string | Filter by the published status of the resource
    on a channel, such as the online store. | - `unset`<br/> - `pending`<br/> -
    `approved`<br/> - `not approved` | | - `published_status:approved` |
    | title | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to the [`SavedSearch`](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch) object.
    """
    savedSearchId: ID
  ): Count

  """
  Returns a Comment resource by ID.
  """
  comment(
    """
    The ID of the `Comment` to return.
    """
    id: ID!
  ): Comment

  """
  List of the shop's comments.
  """
  comments(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | published_status | string | Filter by published status | - `any`<br/> -
    `published`<br/> - `unpublished` | | - `published_status:any`<br/> -
    `published_status:published`<br/> - `published_status:unpublished` |
    | status | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CommentSortKeys = ID
  ): CommentConnection!

  """
  Returns the list of companies in the shop.
  """
  companies(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | active_customers_count | integer |
    | created_at | time |
    | external_id | id |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | name | string |
    | since_date | time |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list by the given key.
    """
    sortKey: CompanySortKeys = ID
  ): CompanyConnection!

  """
  The number of companies for a shop.
  """
  companiesCount: Count

  """
  Returns a `Company` object by ID.
  """
  company(
    """
    The ID of the `Company` to return.
    """
    id: ID!
  ): Company

  """
  Returns a `CompanyContact` object by ID.
  """
  companyContact(
    """
    The ID of the `CompanyContact` to return.
    """
    id: ID!
  ): CompanyContact

  """
  Returns a `CompanyContactRole` object by ID.
  """
  companyContactRole(
    """
    The ID of the `CompanyContactRole` to return.
    """
    id: ID!
  ): CompanyContactRole

  """
  Returns a `CompanyLocation` object by ID.
  """
  companyLocation(
    """
    The ID of the `CompanyLocation` to return.
    """
    id: ID!
  ): CompanyLocation

  """
  Returns the list of company locations in the shop.
  """
  companyLocations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | company_id | id |
    | created_at | time |
    | external_id | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | ids | string |
    | name | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list by the given key.
    """
    sortKey: CompanyLocationSortKeys = ID
  ): CompanyLocationConnection!

  """
  Return the AppInstallation for the currently authenticated App.
  """
  currentAppInstallation: AppInstallation!

  """
  Returns the current app's most recent BulkOperation. Apps can run one bulk
  query and one bulk mutation operation at a time, by shop.
  """
  currentBulkOperation(
    """
    The current bulk operation's type.
    """
    type: BulkOperationType = QUERY
  ): BulkOperation

  """
  The staff member making the API request.
  """
  currentStaffMember: StaffMember

  """
  Returns a Customer resource by ID.
  """
  customer(
    """
    The ID of the `Customer` to return.
    """
    id: ID!
  ): Customer

  """
  Returns a customer account page.
  """
  customerAccountPage(
    """
    The ID of the `CustomerAccountPage` to return.
    """
    id: ID!
  ): CustomerAccountPage

  """
  List of the shop's customer account pages.
  """
  customerAccountPages(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CustomerAccountPageConnection

  """
  Return a customer by an identifier.
  """
  customerByIdentifier(
    """
    The identifier of the customer.
    """
    identifier: CustomerIdentifierInput!
  ): Customer

  """
  Returns the status of a customer merge request job.
  """
  customerMergeJobStatus(
    """
    The ID of the job performing the customer merge request.
    """
    jobId: ID!
  ): CustomerMergeRequest

  """
  Returns a preview of a customer merge request.
  """
  customerMergePreview(
    """
    The ID of the first customer that will be merged.
    """
    customerOneId: ID!

    """
    The ID of the second customer that will be merged.
    """
    customerTwoId: ID!

    """
    The fields to override the default customer merge rules.
    """
    overrideFields: CustomerMergeOverrideFields
  ): CustomerMergePreview!

  """
  Returns a CustomerPaymentMethod resource by its ID.
  """
  customerPaymentMethod(
    """
    The ID of the CustomerPaymentMethod to return.
    """
    id: ID!

    """
    Whether to show the customer's revoked payment method.
    """
    showRevoked: Boolean = false
  ): CustomerPaymentMethod

  """
  List of the shop's customer saved searches.
  """
  customerSavedSearches(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | name | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CustomerSavedSearchSortKeys = ID
  ): SavedSearchConnection!

  """
  The list of members, such as customers, that's associated with an individual segment.
  The maximum page size is 1000.
  """
  customerSegmentMembers(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The query that's used to filter the members. The query is composed of a
    combination of conditions on facts about customers such as
    `email_subscription_status = 'SUBSCRIBED'` with [this
    syntax](https://shopify.dev/api/shopifyql/segment-query-language-reference).
    """
    query: String

    """
    The ID of the segment members query.
    """
    queryId: ID

    """
    Reverse the order of the list. The sorting behaviour defaults to ascending order.
    """
    reverse: Boolean = false

    """
    The ID of the segment.
    """
    segmentId: ID

    """
    Sort the list by a given key.
    """
    sortKey: String

    """
    The timezone that's used to interpret relative date arguments. The timezone
    defaults to UTC if the timezone isn't provided.
    """
    timezone: String
  ): CustomerSegmentMemberConnection!

  """
  Returns a segment members query resource by ID.
  """
  customerSegmentMembersQuery(
    """
    The ID of the `CustomerSegmentMembersQuery` to return.
    """
    id: ID!
  ): CustomerSegmentMembersQuery

  """
  Whether a member, which is a customer, belongs to a segment.
  """
  customerSegmentMembership(
    """
    The ID of the customer that has the membership.
    """
    customerId: ID!

    """
    The segments to evaluate for the given customer.
    """
    segmentIds: [ID!]!
  ): SegmentMembershipResponse!

  """
  Returns a list of customers.
  """
  customers(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | email | string | The customer's email address, used to communicate
    information about orders and for the purposes of email marketing campaigns.
    You can use a wildcard value to filter the query by customers who have an
    email address specified. | | | - `email:bo.wang@example.com`<br/> - `email:*` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | phone | string | The phone number of the customer, used to communicate
    information about orders and for the purposes of SMS marketing campaigns.
    You can use a wildcard value to filter the query by customers who have a
    phone number specified. | | | - `phone:+18005550100`<br/> - `phone:*` |
    | updated_at | time | The date and time, matching a whole day, when the
    customer's information was last updated. | | | -
    `updated_at:2024-01-01T00:00:00Z`<br/> - `updated_at:<now`<br/> -
    `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CustomerSortKeys = ID
  ): CustomerConnection!

  """
  The number of customers.
  """
  customersCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String
  ): Count

  """
  The paginated list of deletion events.
  """
  deletionEvents(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | occurred_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DeletionEventSortKeys = ID

    """
    List of subject types to filter by.
    """
    subjectTypes: [DeletionEventSubjectType!]
  ): DeletionEventConnection! @deprecated(reason: "Use `events` instead.")

  """
  The delivery customization.
  """
  deliveryCustomization(
    """
    The ID of the delivery customization.
    """
    id: ID!
  ): DeliveryCustomization

  """
  The delivery customizations.
  """
  deliveryCustomizations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | enabled | boolean |
    | function_id | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): DeliveryCustomizationConnection!

  """
  Returns a Delivery Profile resource by ID.
  """
  deliveryProfile(
    """
    The ID of the DeliveryProfile to return.
    """
    id: ID!
  ): DeliveryProfile

  """
  Returns a list of saved delivery profiles.
  """
  deliveryProfiles(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    If `true`, returns only delivery profiles that were created by the merchant.
    """
    merchantOwnedOnly: Boolean

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): DeliveryProfileConnection!

  """
  Returns delivery promise participants.
  """
  deliveryPromiseParticipants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The branded promise handle to filter by.
    """
    brandedPromiseHandle: String!

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The product variant ID to filter by.
    """
    ownerIds: [ID!]

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): DeliveryPromiseParticipantConnection

  """
  Lookup a delivery promise provider.
  """
  deliveryPromiseProvider(
    """
    The ID of the location associated with the delivery promise provider.
    """
    locationId: ID!
  ): DeliveryPromiseProvider

  """
  Represents the delivery promise settings for a shop.
  """
  deliveryPromiseSettings: DeliveryPromiseSetting!

  """
  Returns the shop-wide shipping settings.
  """
  deliverySettings: DeliverySetting

  """
  The total number of discount codes for the shop.
  """
  discountCodesCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | times_used | integer |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String
  ): Count

  """
  Returns a discount resource by ID.
  """
  discountNode(
    """
    The ID of the `DiscountNode` to return.
    """
    id: ID!
  ): DiscountNode

  """
  Returns a list of discounts.
  """
  discountNodes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | code | string | Filter by the discount code. Not supported for bulk discounts. | | | - `code:WELCOME10` |
    | combines_with | string | Filter by the [Shopify Functions discount
    classes](https://shopify.dev/docs/apps/build/discounts#discount-classes)
    that the [discount type](https://shopify.dev/docs/api/admin-graphql/latest/queries/discountnodes#argument-query-filter-discount_type)
    can combine with. | - `order_discounts`<br/> - `product_discounts`<br/> -
    `shipping_discounts` | | - `combines_with:product_discounts` |
    | discount_class | string | Filter by the [discount
    class](https://shopify.dev/docs/apps/build/discounts#discount-classes). | -
    `order`<br/> - `product`<br/> - `shipping` | | - `discount_class:product` |
    | discount_type | string | Filter by the [discount
    type](https://help.shopify.com/manual/discounts/discount-types). | -
    `bogo`<br/> - `fixed_amount`<br/> - `free_shipping`<br/> - `percentage` | |
    - `type:fixed_amount` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | method | string | Filter by the [discount
    method](https://shopify.dev/docs/apps/build/discounts#discount-methods). | -
    `automatic`<br/> - `code` | | - `method:code` |
    | starts_at | time | Filter by the date and time, in the shop's timezone,
    when the discount becomes active and is available for customer use. | | | -
    `starts_at:>'2020-10-21T23:39:20Z'`<br/> - `starts_at:<now`<br/> -
    `starts_at:<='2024'` |
    | status | string | Filter by the status of the discount. | - `active`<br/>
    - `expired`<br/> - `scheduled` | | - `status:scheduled` |
    | times_used | integer | Filter by the number of times the discount has been
    used. For example, if a "Buy 3, Get 1 Free" t-shirt discount is
    automatically applied in 200 transactions, then the discount has been used
    200 times. <br><br> This value is updated asynchronously. As a result, it
    might be different than the actual usage count. | | | - `times_used:0`<br/>
    - `times_used:>150`<br/> - `times_used:>=200` |
    | title | string | Filter by the discount name that displays to merchants in
    the Shopify admin and to customers. | | | - `title:Black Friday Sale` |
    | type | string | Filter by the [discount
    type](https://help.shopify.com/manual/discounts/discount-types). | -
    `all`<br/> - `all_with_app`<br/> - `app`<br/> - `bxgy`<br/> -
    `fixed_amount`<br/> - `free_shipping`<br/> - `percentage` | | -
    `type:percentage` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DiscountSortKeys = ID
  ): DiscountNodeConnection!

  """
  The total number of discounts for the shop. Limited to a maximum of 10000.
  """
  discountNodesCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | code | string | Filter by the discount code. Not supported for bulk discounts. | | | - `code:WELCOME10` |
    | combines_with | string | Filter by the [Shopify Functions discount
    classes](https://shopify.dev/docs/apps/build/discounts#discount-classes)
    that the [discount type](https://shopify.dev/docs/api/admin-graphql/latest/queries/discountnodes#argument-query-filter-discount_type)
    can combine with. | - `order_discounts`<br/> - `product_discounts`<br/> -
    `shipping_discounts` | | - `combines_with:product_discounts` |
    | discount_class | string | Filter by the [discount
    class](https://shopify.dev/docs/apps/build/discounts#discount-classes). | -
    `order`<br/> - `product`<br/> - `shipping` | | - `discount_class:product` |
    | discount_type | string | Filter by the [discount
    type](https://help.shopify.com/manual/discounts/discount-types). | -
    `bogo`<br/> - `fixed_amount`<br/> - `free_shipping`<br/> - `percentage` | |
    - `type:fixed_amount` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | method | string | Filter by the [discount
    method](https://shopify.dev/docs/apps/build/discounts#discount-methods). | -
    `automatic`<br/> - `code` | | - `method:code` |
    | starts_at | time | Filter by the date and time, in the shop's timezone,
    when the discount becomes active and is available for customer use. | | | -
    `starts_at:>'2020-10-21T23:39:20Z'`<br/> - `starts_at:<now`<br/> -
    `starts_at:<='2024'` |
    | status | string | Filter by the status of the discount. | - `active`<br/>
    - `expired`<br/> - `scheduled` | | - `status:scheduled` |
    | times_used | integer | Filter by the number of times the discount has been
    used. For example, if a "Buy 3, Get 1 Free" t-shirt discount is
    automatically applied in 200 transactions, then the discount has been used
    200 times. <br><br> This value is updated asynchronously. As a result, it
    might be different than the actual usage count. | | | - `times_used:0`<br/>
    - `times_used:>150`<br/> - `times_used:>=200` |
    | title | string | Filter by the discount name that displays to merchants in
    the Shopify admin and to customers. | | | - `title:Black Friday Sale` |
    | type | string | Filter by the [discount
    type](https://help.shopify.com/manual/discounts/discount-types). | -
    `all`<br/> - `all_with_app`<br/> - `app`<br/> - `bxgy`<br/> -
    `fixed_amount`<br/> - `free_shipping`<br/> - `percentage` | | -
    `type:percentage` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to the [`SavedSearch`](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch) object.
    """
    savedSearchId: ID
  ): Count

  """
  Returns a bulk code creation resource by ID.
  """
  discountRedeemCodeBulkCreation(
    """
    The ID of the `DiscountRedeemCodeBulkCreation` to return.
    """
    id: ID!
  ): DiscountRedeemCodeBulkCreation

  """
  List of the shop's redeemed discount code saved searches.
  """
  discountRedeemCodeSavedSearches(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | times_used | integer |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DiscountCodeSortKeys = ID
  ): SavedSearchConnection!

  """
  Returns dispute details based on ID.
  """
  dispute(
    """
    The ID of the `ShopifyPaymentsDispute` to return.
    """
    id: ID!
  ): ShopifyPaymentsDispute

  """
  Returns dispute evidence details based on ID.
  """
  disputeEvidence(
    """
    The ID of the `ShopifyPaymentsDisputeEvidence` to return.
    """
    id: ID!
  ): ShopifyPaymentsDisputeEvidence

  """
  All disputes related to the Shop.
  """
  disputes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | initiated_at | time |
    | status | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ShopifyPaymentsDisputeConnection!

  """
  Lookup a Domain by ID.
  """
  domain(
    """
    The ID of the `Domain` to return.
    """
    id: ID!
  ): Domain

  """
  Returns a DraftOrder resource by ID.
  """
  draftOrder(
    """
    The ID of the `DraftOrder` to return.
    """
    id: ID!
  ): DraftOrder

  """
  List of the shop's draft order saved searches.
  """
  draftOrderSavedSearches(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SavedSearchConnection!

  """
  Returns a DraftOrderTag resource by ID.
  """
  draftOrderTag(
    """
    The ID of the `DraftOrderTag` to return.
    """
    id: ID!
  ): DraftOrderTag

  """
  List of saved draft orders.
  """
  draftOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time |
    | customer_id | id |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | source | string |
    | status | string |
    | tag | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DraftOrderSortKeys = ID
  ): DraftOrderConnection!

  """
  Get a single event by its id.
  """
  event(
    """
    The ID of the event.
    """
    id: ID!
  ): Event

  """
  The paginated list of events associated with the store.
  """
  events(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: EventSortKeys = ID
  ): EventConnection

  """
  Count of events. Limited to a maximum of 10000.
  """
  eventsCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | action | string | The action that occured. | | | - `action:create` |
    | comments | boolean | Whether or not to include [comment-events](https://shopify.dev/api/admin-graphql/latest/objects/CommentEvent)
    in your search, passing `false` will exclude comment-events, any other value
    will include comment-events. | | | - `false`<br/> - `true` |
    | created_at | time | Filter by the date and time when the event happened. |
    | | - `created_at:>2020-10-21`<br/> - `created_at:<now` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | subject_type | string | The resource type affected by this event, See [EventSubjectType](https://shopify.dev/api/admin-graphql/latest/enums/EventSubjectType)
    for possible values. | | | - `COMPANY` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String
  ): Count

  """
  A list of the shop's file saved searches.
  """
  fileSavedSearches(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SavedSearchConnection!

  """
  Returns a paginated list of files that have been uploaded to Shopify.
  """
  files(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time |
    | filename | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | ids | string |
    | media_type | string |
    | original_upload_size | float |
    | product_id | string |
    | status | string |
    | updated_at | time |
    | used_in | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: FileSortKeys = ID
  ): FileConnection!

  """
  Returns a Fulfillment resource by ID.
  """
  fulfillment(
    """
    The ID of the Fulfillment to return.
    """
    id: ID!
  ): Fulfillment

  """
  The fulfillment constraint rules that belong to a shop.
  """
  fulfillmentConstraintRules: [FulfillmentConstraintRule!]!

  """
  Returns a Fulfillment order resource by ID.
  """
  fulfillmentOrder(
    """
    The ID of the `FulfillmentOrder` to return.
    """
    id: ID!
  ): FulfillmentOrder

  """
  The paginated list of all fulfillment orders.
  The returned fulfillment orders are filtered according to the
  [fulfillment order access scopes](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder#api-access-scopes)
  granted to the app.

  Use this query to retrieve fulfillment orders assigned to merchant-managed locations,
  third-party fulfillment service locations, or all kinds of locations together.

  For fetching only the fulfillment orders assigned to the app's locations, use the
  [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
  connection.
  """
  fulfillmentOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    Whether to include closed fulfillment orders.
    """
    includeClosed: Boolean = false

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | assigned_location_id | id |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | status | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: FulfillmentOrderSortKeys = ID
  ): FulfillmentOrderConnection!

  """
  Returns a FulfillmentService resource by ID.
  """
  fulfillmentService(
    """
    The ID of the FulfillmentService to return.
    """
    id: ID!
  ): FulfillmentService

  """
  Returns a gift card resource by ID.
  """
  giftCard(
    """
    The ID of the GiftCard to return.
    """
    id: ID!
  ): GiftCard

  """
  Returns a list of gift cards.
  """
  giftCards(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Searched fields: code. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | balance_status | string | | - `full`<br/> - `partial`<br/> - `empty`<br/>
    - `full_or_partial` | | - `balance_status:full` |
    | created_at | time | | | | - `created_at:>=2020-01-01T12:00:00Z` |
    | expires_on | date | | | | - `expires_on:>=2020-01-01` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | initial_value | string | | | | - `initial_value:>=100` |
    | source | string | | - `manual`<br/> - `purchased`<br/> - `api_client` | | - `source:manual` |
    | status | string | | - `disabled`<br/> - `enabled`<br/> - `expired`<br/> -
    `expiring` | | - `status:disabled OR status:expired` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: GiftCardSortKeys = ID
  ): GiftCardConnection!

  """
  The total number of gift cards issued for the shop. Limited to a maximum of 10000.
  """
  giftCardsCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Searched fields: code. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | balance_status | string | | - `full`<br/> - `partial`<br/> - `empty`<br/>
    - `full_or_partial` | | - `balance_status:full` |
    | created_at | time | | | | - `created_at:>=2020-01-01T12:00:00Z` |
    | expires_on | date | | | | - `expires_on:>=2020-01-01` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | initial_value | string | | | | - `initial_value:>=100` |
    | source | string | | - `manual`<br/> - `purchased`<br/> - `api_client` | | - `source:manual` |
    | status | string | | - `disabled`<br/> - `enabled`<br/> - `expired`<br/> -
    `expiring` | | - `status:disabled OR status:expired` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to the [`SavedSearch`](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch) object.
    """
    savedSearchId: ID
  ): Count

  """
  Returns an
  [InventoryItem](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem)
  object by ID.
  """
  inventoryItem(
    """
    The ID of the `InventoryItem` to return.
    """
    id: ID!
  ): InventoryItem

  """
  Returns a list of inventory items.
  """
  inventoryItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | sku | string | Filter by the inventory item [`sku`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | -
    `sku:XYZ-12345` |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): InventoryItemConnection!

  """
  Returns an
  [InventoryLevel](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryLevel)
  object by ID.
  """
  inventoryLevel(
    """
    The ID of the `InventoryLevel` to return.
    """
    id: ID!
  ): InventoryLevel

  """
  General inventory properties for the shop.
  """
  inventoryProperties: InventoryProperties!

  """
  Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.
  """
  job(
    """
    ID of the job to query.
    """
    id: ID!
  ): Job

  """
  Returns an inventory Location resource by ID.
  """
  location(
    """
    The ID of the location to return. If no ID is provided, the primary location of the Shop is returned.
    """
    id: ID
  ): Location

  """
  Returns a list of active inventory locations.
  """
  locations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    Whether to include the locations that are deactivated.
    """
    includeInactive: Boolean = false

    """
    Whether to include the legacy locations of fulfillment services.
    """
    includeLegacy: Boolean = false

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | active | string |
    | address1 | string |
    | address2 | string |
    | city | string |
    | country | string |
    | created_at | time |
    | geolocated | boolean |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | legacy | boolean |
    | location_id | id |
    | name | string |
    | pickup_in_store | string | | - `enabled`<br/> - `disabled` |
    | province | string |
    | zip | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: LocationSortKeys = NAME
  ): LocationConnection!

  """
  Returns a list of all origin locations available for a delivery profile.
  """
  locationsAvailableForDeliveryProfiles: [Location!] @deprecated(reason: "Use `locationsAvailableForDeliveryProfilesConnection` instead.")

  """
  Returns a list of all origin locations available for a delivery profile.
  """
  locationsAvailableForDeliveryProfilesConnection(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): LocationConnection!

  """
  Returns the count of locations for the given shop. Limited to a maximum of 10000.
  """
  locationsCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | active | string |
    | address1 | string |
    | address2 | string |
    | city | string |
    | country | string |
    | created_at | time |
    | geolocated | boolean |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | legacy | boolean |
    | location_id | id |
    | name | string |
    | pickup_in_store | string | | - `enabled`<br/> - `disabled` |
    | province | string |
    | zip | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String
  ): Count

  """
  Returns a list of fulfillment orders that are on hold.
  """
  manualHoldsFulfillmentOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The query conditions used to filter fulfillment orders. Only fulfillment
    orders corresponding to orders matching the query will be counted.
    Supported filter parameters:
     - `order_financial_status`
     - `order_risk_level`
     - `shipping_address_coordinates_validated`

    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): FulfillmentOrderConnection!

  """
  Returns a market resource by ID.
  """
  market(
    """
    The ID of the `Market` to return.
    """
    id: ID!
  ): Market

  """
  Returns the applicable market for a customer based on where they are in the world.
  """
  marketByGeography(
    """
    The code for the country where the customer is.
    """
    countryCode: CountryCode!
  ): Market

  """
  A resource that can have localized values for different markets.
  """
  marketLocalizableResource(
    """
    Find a market localizable resource by ID.
    """
    resourceId: ID!
  ): MarketLocalizableResource

  """
  Resources that can have localized values for different markets.
  """
  marketLocalizableResources(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Return only resources of a type.
    """
    resourceType: MarketLocalizableResourceType!

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MarketLocalizableResourceConnection!

  """
  Resources that can have localized values for different markets.
  """
  marketLocalizableResourcesByIds(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Return only resources for given IDs.
    """
    resourceIds: [ID!]!

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MarketLocalizableResourceConnection!

  """
  A list of marketing activities associated with the marketing app.
  """
  marketingActivities(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The list of marketing activity IDs to filter by.
    """
    marketingActivityIds: [ID!] = []

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | app_id | id |
    | app_name | string | A comma-separated list of app names. |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | marketing_campaign_id | id |
    | scheduled_to_end_at | time |
    | scheduled_to_start_at | time |
    | tactic | string |
    | title | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    The list of remote IDs associated with marketing activities to filter by.
    """
    remoteIds: [String!] = []

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MarketingActivitySortKeys = CREATED_AT

    """
    The UTM parameters associated with marketing activities to filter by.
    """
    utm: UTMInput
  ): MarketingActivityConnection!

  """
  Returns a MarketingActivity resource by ID.
  """
  marketingActivity(
    """
    The ID of the `MarketingActivity` to return.
    """
    id: ID!
  ): MarketingActivity

  """
  Returns a MarketingEvent resource by ID.
  """
  marketingEvent(
    """
    The ID of the `MarketingEvent` to return.
    """
    id: ID!
  ): MarketingEvent

  """
  A list of marketing events associated with the marketing app.
  """
  marketingEvents(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | app_id | id |
    | description | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | started_at | time |
    | type | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MarketingEventSortKeys = ID
  ): MarketingEventConnection!

  """
  The markets configured for the shop.
  """
  markets(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MarketConnection!

  """
  Returns a Menu resource by ID.
  """
  menu(
    """
    The ID of the `Menu` to return.
    """
    id: ID!
  ): Menu

  """
  The shop's menus.
  """
  menus(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | title | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MenuSortKeys = ID
  ): MenuConnection!

  """
  Returns a metafield definition by identifier.
  """
  metafieldDefinition(
    """
    The ID of the MetafieldDefinition to return.
    """
    id: ID!
  ): MetafieldDefinition

  """
  Each metafield definition has a type, which defines the type of information that it can store.
  This type is enforced across every instance of the resource that owns the metafield definition.

  Refer to the [list of supported metafield types](https://shopify.dev/apps/metafields/types).
  """
  metafieldDefinitionTypes: [MetafieldDefinitionType!]!

  """
  Returns a list of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Filter metafield definitions based on whether they are constrained.
    """
    constraintStatus: MetafieldDefinitionConstraintStatus

    """
    Filter metafield definitions based on whether they apply to a given resource subtype.
    """
    constraintSubtype: MetafieldDefinitionConstraintSubtypeIdentifier

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    Filter metafield definition by key.
    """
    key: String

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definition by namespace.
    """
    namespace: String

    """
    Filter the metafield definition by the specific owner type.
    """
    ownerType: MetafieldOwnerType!

    """
    Filter the metafield definition by the pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!

  """
  Retrieves a metaobject by ID.
  """
  metaobject(
    """
    The ID of the metaobject to return.
    """
    id: ID!
  ): Metaobject

  """
  Retrieves a metaobject by handle.
  """
  metaobjectByHandle(
    """
    The identifier of the metaobject to return.
    """
    handle: MetaobjectHandleInput!
  ): Metaobject

  """
  Retrieves a metaobject definition by ID.
  """
  metaobjectDefinition(
    """
    The ID of the metaobject to return.
    """
    id: ID!
  ): MetaobjectDefinition

  """
  Finds a metaobject definition by type.
  """
  metaobjectDefinitionByType(
    """
    The type of the metaobject definition to return.
    """
    type: String!
  ): MetaobjectDefinition

  """
  All metaobject definitions.
  """
  metaobjectDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetaobjectDefinitionConnection!

  """
  All metaobjects for the shop.
  """
  metaobjects(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | display_name | string |
    | handle | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The key of a field to sort with. Supports "id", "type", "updated_at", and "display_name".
    """
    sortKey: String

    """
    The type of the metaobjects to query.
    """
    type: String!
  ): MetaobjectConnection!

  """
  Return a mobile platform application by its ID.
  """
  mobilePlatformApplication(
    """
    ID of the mobile platform app.
    """
    id: ID!
  ): MobilePlatformApplication

  """
  List the mobile platform applications.
  """
  mobilePlatformApplications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MobilePlatformApplicationConnection!

  """
  Returns a specific node (any object that implements the
  [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
  interface) by ID, in accordance with the
  [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
  This field is commonly used for refetching an object.
  """
  node(
    """
    The ID of the `Node` to return.
    """
    id: ID!
  ): Node

  """
  Returns the list of nodes (any objects that implement the
  [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
  interface) with the given IDs, in accordance with the
  [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
  """
  nodes(
    """
    The IDs of the Nodes to return.
    """
    ids: [ID!]!
  ): [Node]!

  """
  The shop's online store channel.
  """
  onlineStore: OnlineStore!

  """
  Returns an Order resource by ID.
  """
  order(
    """
    The ID of the `Order` to return.
    """
    id: ID!
  ): Order

  """
  Returns a payment status by payment reference ID. Used to check the status of a deferred payment.
  """
  orderPaymentStatus(
    """
    ID of the order for which the payment was initiated.
    """
    orderId: ID!

    """
    Unique identifier returned by orderCreatePayment.
    """
    paymentReferenceId: String!
  ): OrderPaymentStatus

  """
  List of the shop's order saved searches.
  """
  orderSavedSearches(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SavedSearchConnection!

  """
  Returns a list of orders placed in the store.
  """
  orders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | cart_token | string | Filter by the cart token's unique value, which
    references the cart that's associated with an order. | | | -
    `cart_token:abc123` |
    | channel | string | Filter by the channel information [`handle`](https://shopify.dev/api/admin-graphql/latest/objects/ChannelInformation#field-channeldefinition)
    (`ChannelInformation.channelDefinition.handle`) field. | | | -
    `channel:web`<br/> - `channel:web,pos` |
    | channel_id | id | Filter by the channel [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Channel#field-id)
    field. | | | - `channel_id:123` |
    | chargeback_status | string | Filter by the order's chargeback status. A
    chargeback occurs when a customer questions the legitimacy of a charge with
    their financial institution. | - `accepted`<br/> - `charge_refunded`<br/> -
    `lost`<br/> - `needs_response`<br/> - `under_review`<br/> - `won` | | -
    `chargeback_status:accepted` |
    | checkout_token | string | Filter by the checkout token's unique value,
    which references the checkout that's associated with an order. | | | -
    `checkout_token:abc123` |
    | confirmation_number | string | Filter by the randomly generated
    alpha-numeric identifier for an order that can be displayed to the customer
    instead of the sequential order name. This value isn't guaranteed to be
    unique. | | | - `confirmation_number:ABC123` |
    | created_at | time | Filter by the date and time when the order was created
    in Shopify's system. | | | - `created_at:2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | credit_card_last4 | string | Filter by the last four digits of the credit
    card that was used to pay for the order. | | | - `credit_card_last4:1234` |
    | customer_id | id | Filter orders by the customer [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Customer#field-id)
    field. | | | - `customer_id:123` |
    | delivery_method | string | Filter by the delivery [`methodType`](https://shopify.dev/api/admin-graphql/2024-07/objects/DeliveryMethod#field-methodtype)
    field. | - `shipping`<br/> - `pick-up`<br/> - `retail`<br/> - `local`<br/> -
    `pickup-point`<br/> - `none` | | - `delivery_method:shipping` |
    | discount_code | string | Filter by the case-insensitive discount code that
    was applied to the order at checkout. Maximum characters: 255. | | | -
    `discount_code:ABC123` |
    | email | string | Filter by the email address that's associated with the order. | | | - `email:example@shopify.com` |
    | financial_status | string | Filter by the order [`displayFinancialStatus`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-displayfinancialstatus)
    field. | - `paid`<br/> - `pending`<br/> - `authorized`<br/> -
    `partially_paid`<br/> - `partially_refunded`<br/> - `refunded`<br/> -
    `voided`<br/> - `expired` | | - `financial_status:authorized` |
    | fraud_protection_level | string | Filter by the level of fraud protection
    that's applied to the order. | - `fully_protected`<br/> -
    `partially_protected`<br/> - `not_protected`<br/> - `pending`<br/> -
    `not_eligible`<br/> - `not_available` | | -
    `fraud_protection_level:fully_protected` |
    | fulfillment_location_id | id | Filter by the fulfillment location [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment#field-location)
    (`Fulfillment.location.id`) field. | | | - `fulfillment_location_id:123` |
    | fulfillment_status | string | Filter by the order's fulfillment status. |
    - `unshipped`<br/> - `shipped`<br/> - `fulfilled`<br/> - `partial`<br/> -
    `scheduled`<br/> - `on_hold`<br/> - `unfulfilled`<br/> - `request_declined`
    | | - `fulfillment_status:fulfilled` |
    | gateway | string | Filter by the order [`paymentGatewayNames`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-paymentgatewaynames)
    field. | | | - `gateway:shopify_payments` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | location_id | id | Filter by the ID of the location that's associated with the order. | | | - `location_id:123` |
    | name | string | Filter by the order [`name`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-name)
    field. | | | - `name:1001-A` |
    | payment_id | string | Filter by the ID of the payment that's associated with the order. | | | - `payment_id:abc123` |
    | payment_provider_id | id | Filter by the ID of the payment provider that's
    associated with the order. | | | - `payment_provider_id:123` |
    | po_number | string | Filter by the order [`poNumber`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-ponumber)
    field. | | | - `po_number:P01001` |
    | processed_at | time | Filter by the order [`processedAt`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-processedat)
    field. | | | - `processed_at:2021-01-01T00:00:00Z` |
    | reference_location_id | id | Filter by the ID of a location that's
    associated with the order, such as locations from fulfillments, refunds, or
    the shop's primary location. | | | - `reference_location_id:123` |
    | return_status | string | Filter by the order's return status. | -
    `return_requested`<br/> - `in_progress`<br/> - `inspection_complete`<br/> -
    `returned`<br/> - `return_failed`<br/> - `no_return` | | -
    `return_status:in_progress` |
    | risk_level | string | Filter by the order risk assessment [`riskLevel`](https://shopify.dev/api/admin-graphql/latest/objects/OrderRiskAssessment#field-risklevel)
    field. | - `high`<br/> - `medium`<br/> - `low`<br/> - `none`<br/> -
    `pending` | | - `risk_level:high` |
    | sales_channel | string | Filter by the sales channel that the order is
    attributed to. | | | - `sales_channel: some_sales_channel` |
    | sku | string | Filter by the product variant [`sku`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | - `sku:ABC123` |
    | source_identifier | string | Filter by the ID of the order placed on the
    originating platform, such as a unique POS or third-party identifier. This
    value doesn't correspond to the Shopify ID that's generated from a completed
    draft order. | | | - `source_identifier:1234-12-1000` |
    | source_name | string | Filter by the name of the originating platform
    that's associated with the checkout for the order. | | | -
    `source_name:web`<br/> - `source_name:shopify_draft_order` |
    | status | string | Filter by the order status. | - `open`<br/> -
    `closed`<br/> - `cancelled`<br/> - `not_closed` | | - `status:open` |
    | subtotal_line_items_quantity | string |
    | tag | string | Filter objects by the `tag` field. | | | - `tag:my_tag` |
    | tag_not | string | Filter by objects that don’t have the specified tag. | | | - `tag_not:my_tag` |
    | test | boolean | Filter by test orders. Test orders are made using the [Shopify Bogus
    Gateway](https://help.shopify.com/manual/checkout-settings/test-orders) or a
    payment provider with test mode enabled. | | | - `test:true` |
    | updated_at | time | Filter by the date and time when the order was last
    updated in Shopify's system. | | | - `updated_at:2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: OrderSortKeys = PROCESSED_AT
  ): OrderConnection!

  """
  Returns the count of orders for the given shop. Limited to a maximum of 10000.
  """
  ordersCount(
    """
    The upper bound on count value before returning a result.
    """
    limit: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | cart_token | string | Filter by the cart token's unique value, which
    references the cart that's associated with an order. | | | -
    `cart_token:abc123` |
    | channel | string | Filter by the channel information [`handle`](https://shopify.dev/api/admin-graphql/latest/objects/ChannelInformation#field-channeldefinition)
    (`ChannelInformation.channelDefinition.handle`) field. | | | -
    `channel:web`<br/> - `channel:web,pos` |
    | channel_id | id | Filter by the channel [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Channel#field-id)
    field. | | | - `channel_id:123` |
    | chargeback_status | string | Filter by the order's chargeback status. A
    chargeback occurs when a customer questions the legitimacy of a charge with
    their financial institution. | - `accepted`<br/> - `charge_refunded`<br/> -
    `lost`<br/> - `needs_response`<br/> - `under_review`<br/> - `won` | | -
    `chargeback_status:accepted` |
    | checkout_token | string | Filter by the checkout token's unique value,
    which references the checkout that's associated with an order. | | | -
    `checkout_token:abc123` |
    | confirmation_number | string | Filter by the randomly generated
    alpha-numeric identifier for an order that can be displayed to the customer
    instead of the sequential order name. This value isn't guaranteed to be
    unique. | | | - `confirmation_number:ABC123` |
    | created_at | time | Filter by the date and time when the order was created
    in Shopify's system. | | | - `created_at:2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | credit_card_last4 | string | Filter by the last four digits of the credit
    card that was used to pay for the order. | | | - `credit_card_last4:1234` |
    | customer_id | id | Filter orders by the customer [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Customer#field-id)
    field. | | | - `customer_id:123` |
    | delivery_method | string | Filter by the delivery [`methodType`](https://shopify.dev/api/admin-graphql/2024-07/objects/DeliveryMethod#field-methodtype)
    field. | - `shipping`<br/> - `pick-up`<br/> - `retail`<br/> - `local`<br/> -
    `pickup-point`<br/> - `none` | | - `delivery_method:shipping` |
    | discount_code | string | Filter by the case-insensitive discount code that
    was applied to the order at checkout. Maximum characters: 255. | | | -
    `discount_code:ABC123` |
    | email | string | Filter by the email address that's associated with the order. | | | - `email:example@shopify.com` |
    | financial_status | string | Filter by the order [`displayFinancialStatus`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-displayfinancialstatus)
    field. | - `paid`<br/> - `pending`<br/> - `authorized`<br/> -
    `partially_paid`<br/> - `partially_refunded`<br/> - `refunded`<br/> -
    `voided`<br/> - `expired` | | - `financial_status:authorized` |
    | fraud_protection_level | string | Filter by the level of fraud protection
    that's applied to the order. | - `fully_protected`<br/> -
    `partially_protected`<br/> - `not_protected`<br/> - `pending`<br/> -
    `not_eligible`<br/> - `not_available` | | -
    `fraud_protection_level:fully_protected` |
    | fulfillment_location_id | id | Filter by the fulfillment location [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment#field-location)
    (`Fulfillment.location.id`) field. | | | - `fulfillment_location_id:123` |
    | fulfillment_status | string | Filter by the order's fulfillment status. |
    - `unshipped`<br/> - `shipped`<br/> - `fulfilled`<br/> - `partial`<br/> -
    `scheduled`<br/> - `on_hold`<br/> - `unfulfilled`<br/> - `request_declined`
    | | - `fulfillment_status:fulfilled` |
    | gateway | string | Filter by the order [`paymentGatewayNames`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-paymentgatewaynames)
    field. | | | - `gateway:shopify_payments` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | location_id | id | Filter by the ID of the location that's associated with the order. | | | - `location_id:123` |
    | name | string | Filter by the order [`name`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-name)
    field. | | | - `name:1001-A` |
    | payment_id | string | Filter by the ID of the payment that's associated with the order. | | | - `payment_id:abc123` |
    | payment_provider_id | id | Filter by the ID of the payment provider that's
    associated with the order. | | | - `payment_provider_id:123` |
    | po_number | string | Filter by the order [`poNumber`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-ponumber)
    field. | | | - `po_number:P01001` |
    | processed_at | time | Filter by the order [`processedAt`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-processedat)
    field. | | | - `processed_at:2021-01-01T00:00:00Z` |
    | reference_location_id | id | Filter by the ID of a location that's
    associated with the order, such as locations from fulfillments, refunds, or
    the shop's primary location. | | | - `reference_location_id:123` |
    | return_status | string | Filter by the order's return status. | -
    `return_requested`<br/> - `in_progress`<br/> - `inspection_complete`<br/> -
    `returned`<br/> - `return_failed`<br/> - `no_return` | | -
    `return_status:in_progress` |
    | risk_level | string | Filter by the order risk assessment [`riskLevel`](https://shopify.dev/api/admin-graphql/latest/objects/OrderRiskAssessment#field-risklevel)
    field. | - `high`<br/> - `medium`<br/> - `low`<br/> - `none`<br/> -
    `pending` | | - `risk_level:high` |
    | sales_channel | string | Filter by the sales channel that the order is
    attributed to. | | | - `sales_channel: some_sales_channel` |
    | sku | string | Filter by the product variant [`sku`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | - `sku:ABC123` |
    | source_identifier | string | Filter by the ID of the order placed on the
    originating platform, such as a unique POS or third-party identifier. This
    value doesn't correspond to the Shopify ID that's generated from a completed
    draft order. | | | - `source_identifier:1234-12-1000` |
    | source_name | string | Filter by the name of the originating platform
    that's associated with the checkout for the order. | | | -
    `source_name:web`<br/> - `source_name:shopify_draft_order` |
    | status | string | Filter by the order status. | - `open`<br/> -
    `closed`<br/> - `cancelled`<br/> - `not_closed` | | - `status:open` |
    | subtotal_line_items_quantity | string |
    | tag | string | Filter objects by the `tag` field. | | | - `tag:my_tag` |
    | tag_not | string | Filter by objects that don’t have the specified tag. | | | - `tag_not:my_tag` |
    | test | boolean | Filter by test orders. Test orders are made using the [Shopify Bogus
    Gateway](https://help.shopify.com/manual/checkout-settings/test-orders) or a
    payment provider with test mode enabled. | | | - `test:true` |
    | updated_at | time | Filter by the date and time when the order was last
    updated in Shopify's system. | | | - `updated_at:2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to the [`SavedSearch`](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch) object.
    """
    savedSearchId: ID
  ): Count

  """
  Returns a Page resource by ID.
  """
  page(
    """
    The ID of the `Page` to return.
    """
    id: ID!
  ): Page

  """
  List of the shop's pages.
  """
  pages(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): PageConnection!

  """
  Count of pages.
  """
  pagesCount: Count

  """
  The payment customization.
  """
  paymentCustomization(
    """
    The ID of the payment customization.
    """
    id: ID!
  ): PaymentCustomization

  """
  The payment customizations.
  """
  paymentCustomizations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | enabled | boolean |
    | function_id | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): PaymentCustomizationConnection!

  """
  The list of payment terms templates eligible for all shops and users.
  """
  paymentTermsTemplates(
    """
    The payment terms type to filter the payment terms templates list.
    """
    paymentTermsType: PaymentTermsType
  ): [PaymentTermsTemplate!]!

  """
  The number of pendings orders. Limited to a maximum of 10000.
  """
  pendingOrdersCount: Count

  """
  Returns a price list resource by ID.
  """
  priceList(
    """
    The ID of the `PriceList` to return.
    """
    id: ID!
  ): PriceList

  """
  All price lists for a shop.
  """
  priceLists(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: PriceListSortKeys = ID
  ): PriceListConnection!

  """
  The primary market of the shop.
  """
  primaryMarket: Market! @deprecated(reason: "Use `backupRegion` instead.")

  """
  Returns a Product resource by ID.
  """
  product(
    """
    The ID of the `Product` to return.
    """
    id: ID!
  ): Product

  """
  Return a product by its handle.
  """
  productByHandle(
    """
    A unique string that identifies the product. Handles are automatically
    generated based on the product's title, and are always lowercase. Whitespace
    and special characters are replaced with a hyphen: `-`. If there are
    multiple consecutive whitespace or special characters, then they're replaced
    with a single hyphen. Whitespace or special characters at the beginning are
    removed. If a duplicate product title is used, then the handle is
    auto-incremented by one. For example, if you had two products called
    `Potion`, then their handles would be `potion` and `potion-1`. After a
    product has been created, changing the product title doesn't update the handle.
    """
    handle: String!
  ): Product @deprecated(reason: "Use `productByIdentifier` instead.")

  """
  Return a product by an identifier.
  """
  productByIdentifier(
    """
    The identifier of the product.
    """
    identifier: ProductIdentifierInput!
  ): Product

  """
  Returns the product duplicate job.
  """
  productDuplicateJob(
    """
    An ID of a product duplicate job to fetch.
    """
    id: ID!
  ): ProductDuplicateJob!

  """
  Returns a ProductFeed resource by ID.
  """
  productFeed(
    """
    The ID of the ProductFeed to return.
    """
    id: ID!
  ): ProductFeed

  """
  The product feeds for the shop.
  """
  productFeeds(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductFeedConnection!

  """
  Returns a ProductOperation resource by ID.

  This can be used to query the
  [ProductSetOperation](https://shopify.dev/api/admin-graphql/current/objects/ProductSetOperation), using
  the ID that was returned
  [when the product was created or updated](https://shopify.dev/api/admin/migrate/new-product-model/sync-data#create-a-product-with-variants-and-options-asynchronously)
  by the
  [ProductSet](https://shopify.dev/api/admin-graphql/current/mutations/productSet) mutation.

  The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.

  The `product` field provides the details of the created or updated product.

  For the
  [ProductSetOperation](https://shopify.dev/api/admin-graphql/current/objects/ProductSetOperation), the
  `userErrors` field provides mutation errors that occurred during the operation.
  """
  productOperation(
    """
    The ID of the `ProductOperation` to return.
    """
    id: ID!
  ): ProductOperation

  """
  Returns the product resource feedback for the currently authenticated app.
  """
  productResourceFeedback(
    """
    The product associated with the resource feedback.
    """
    id: ID!
  ): ProductResourceFeedback

  """
  Returns a list of the shop's product saved searches.
  """
  productSavedSearches(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SavedSearchConnection!

  """
  A list of tags that have been added to products.
  The maximum page size is 5000.
  """
  productTags(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): StringConnection

  """
  The list of types added to products.
  The maximum page size is 1000.
  """
  productTypes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): StringConnection

  """
  Returns a ProductVariant resource by ID.
  """
  productVariant(
    """
    The ID of the `ProductVariant` to return.
    """
    id: ID!
  ): ProductVariant

  """
  Returns a list of product variants.
  """
  productVariants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | barcode | string | Filter by the product variant [`barcode`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-barcode)
    field. | | | - `barcode:ABC-abc-123` |
    | collection | string | Filter by the [ID of the collection](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-id)
    that the product variant belongs to. | | | - `collection:465903092033` |
    | delivery_profile_id | id | Filter by the product variant [delivery profile ID](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-deliveryprofile)
    (`ProductVariant.deliveryProfile.id`). | | | -
    `delivery_profile_id:108179161409` |
    | exclude_composite | boolean | Filter by product variants that aren't composites. | | | - `exclude_composite:true` |
    | exclude_variants_with_components | boolean | Filter by whether there are [components](https://shopify.dev/docs/apps/build/product-merchandising/bundles/add-product-fixed-bundle)
    that are associated with the product variants in a bundle. | | | -
    `exclude_variants_with_components:true` |
    | gift_card | boolean | Filter by the product [`isGiftCard`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-isgiftcard)
    field. | | | - `gift_card:true` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | inventory_quantity | integer | Filter by an aggregate of inventory across
    all locations where the product variant is stocked. | | | -
    `inventory_quantity:10` |
    | location_id | id | Filter by the [location
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Location#field-id)
    for the product variant. | | | - `location_id:88511152449` |
    | managed | boolean | Filter by whether there is fulfillment service
    tracking associated with the product variants. | | | - `managed:true` |
    | managed_by | string | Filter by the fulfillment service that tracks the
    number of items in stock for the product variant. | | | -
    `managed_by:shopify` |
    | option1 | string | Filter by a custom property that a shop owner uses to
    define product variants. | | | - `option1:small` |
    | option2 | string | Filter by a custom property that a shop owner uses to
    define product variants. | | | - `option2:medium` |
    | option3 | string | Filter by a custom property that a shop owner uses to
    define product variants. | | | - `option3:large` |
    | product_id | id | Filter by the product [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-id)
    field. | | | - `product_id:8474977763649` |
    | product_ids | string | Filter by a comma-separated list of product [IDs](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-id).
    | | | - `product_ids:8474977763649,8474977796417` |
    | product_publication_status | string | Filter by the publishable status of
    the resource on a channel, such as the online store. The value is a
    composite of the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) and one of the valid values. | - `approved`<br/> -
    `rejected`<br/> - `needs_action`<br/> - `awaiting_review`<br/> -
    `published`<br/> - `demoted`<br/> - `scheduled`<br/> -
    `provisionally_published` | | - `publishable_status:189769876-approved` |
    | product_status | string | Filter by a comma-separated list of product [statuses](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-status).
    | | | - `product_status:ACTIVE,DRAFT` |
    | product_type | string | Filter by the product type that's associated with
    the product variants. | | | - `product_type:snowboard` |
    | publishable_status | string | Filter by the publishable status of the
    resource on a channel, such as the online store. The value is a composite of
    either the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) or [channel `name`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel#field-name)
    and one of the valid values. | - `online_store_channel`<br/> -
    `published`<br/> - `unpublished`<br/> - `visible`<br/> - `unavailable`<br/>
    - `hidden`<br/> - `intended`<br/> - `visible` | | -
    `publishable_status:published`<br/> -
    `publishable_status:189769876:visible`<br/> -
    `publishable_status:pos:hidden` |
    | published_status | string | Filter by the published status of the resource
    on a channel, such as the online store. | - `unset`<br/> - `pending`<br/> -
    `approved`<br/> - `not approved` | | - `published_status:approved` |
    | requires_components | boolean | Filter by whether the product variant can
    only be purchased with components. [Learn more](https://shopify.dev/apps/build/product-merchandising/bundles#store-eligibility).
    | | | - `requires_components:true` |
    | sku | string | Filter by the product variant [`sku`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | -
    `sku:XYZ-12345` |
    | tag | string | Filter objects by the `tag` field. | | | - `tag:my_tag` |
    | tag_not | string | Filter by objects that don’t have the specified tag. | | | - `tag_not:my_tag` |
    | taxable | boolean | Filter by the product variant [`taxable`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-taxable)
    field. | | | - `taxable:false` |
    | title | string | Filter by the product variant [`title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-title)
    field. | | | - `title:ice` |
    | updated_at | time | Filter by date and time when the product variant was
    updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/> -
    `updated_at:<now`<br/> - `updated_at:<=2024` |
    | vendor | string | Filter by the origin or source of the product variant.
    Learn more about [vendors and managing vendor
    information](https://help.shopify.com/manual/products/managing-vendor-info).
    | | | - `vendor:Snowdevil`<br/> - `vendor:Snowdevil OR vendor:Icedevil` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ProductVariantSortKeys = ID
  ): ProductVariantConnection!

  """
  Count of product variants.
  """
  productVariantsCount(
    """
    No supported search fields.
    """
    query: String
  ): Count

  """
  The list of vendors added to products.
  The maximum page size is 1000.
  """
  productVendors(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): StringConnection

  """
  Returns a list of products.
  """
  products(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | barcode | string | Filter by the product variant [`barcode`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-barcode)
    field. | | | - `barcode:ABC-abc-1234` |
    | bundles | boolean | Filter by a [product
    bundle](https://shopify.dev/docs/apps/build/product-merchandising/bundles).
    A product bundle is a set of two or more related products, which are
    commonly offered at a discount. | | | - `bundles:true` |
    | category_id | string | Filter by the product [category ID](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-category)
    (`product.category.id`). A product category is the category of a product
    from [Shopify's Standard Product Taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
    | | | - `category_id:sg-4-17-2-17` |
    | collection_id | id | Filter by the collection [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-id)
    field. | | | - `collection_id:108179161409` |
    | combined_listing_role | string | Filter by the role of the product in a [combined listing](https://shopify.dev/apps/build/product-merchandising/combined-listings).
    | - `parent`<br/> - `child`<br/> - `no_role` | | -
    `combined_listing_role:parent` |
    | created_at | time | Filter by the date and time when the product was
    created. | | | - `created_at:>'2020-10-21T23:39:20Z'`<br/> -
    `created_at:<now`<br/> - `created_at:<='2024'` |
    | delivery_profile_id | id | Filter by the delivery profile [`id`](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryProfile#field-id)
    field. | | | - `delivery_profile_id:108179161409` |
    | error_feedback | string | Filter by products with publishing errors. |
    | gift_card | boolean | Filter by the product [`isGiftCard`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-isgiftcard)
    field. | | | - `gift_card:true` |
    | handle | string | Filter by a comma-separated list of product [handles](https://shopify.dev/api/admin-graphql/latest/queries/products#argument-query-filter-handle).
    | | | - `handle:the-minimal-snowboard` |
    | has_only_composites | boolean | Filter by products that have only
    composite variants. | | | - `has_only_composites:true` |
    | has_only_default_variant | boolean | Filter by products that have only a
    default variant. A default variant is the only variant if no other variants
    are specified. | | | - `has_only_default_variant:true` |
    | has_variant_with_components | boolean | Filter by products that have
    variants with associated components. | | | -
    `has_variant_with_components:true` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | inventory_total | integer | Filter by inventory count. | | | -
    `inventory_total:0`<br/> - `inventory_total:>150`<br/> -
    `inventory_total:>=200` |
    | is_price_reduced | boolean | Filter by products that have a reduced price.
    For more information, refer to the [`CollectionRule`](https://shopify.dev/api/admin-graphql/latest/objects/CollectionRule)
    object. | | | - `is_price_reduced:true` |
    | out_of_stock_somewhere | boolean | Filter by products that are out of
    stock in at least one location. | | | - `out_of_stock_somewhere:true` |
    | price | bigdecimal | Filter by the product variant [`price`](https://shopify.dev/api/admin-graphql/latest/objects/Productvariant#field-price)
    field. | | | - `price:100.57` |
    | product_configuration_owner | string | Filter by the app
    [`id`](https://shopify.dev/api/admin-graphql/latest/objects/App#field-id)
    field. | | | - `product_configuration_owner:10001` |
    | product_publication_status | string | Filter by the publishable status of
    the resource on a channel, such as the online store. The value is a
    composite of the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) and one of the valid values. | - `approved`<br/> -
    `rejected`<br/> - `needs_action`<br/> - `awaiting_review`<br/> -
    `published`<br/> - `demoted`<br/> - `scheduled`<br/> -
    `provisionally_published` | | - `publishable_status:189769876-approved` |
    | product_type | string | Filter by a comma-separated list of [product
    types](https://help.shopify.com/manual/products/details/product-type). | | |
    - `product_type:snowboard` |
    | publication_ids | string | Filter by a comma-separated list of publication
    IDs that are associated with the product. | | | -
    `publication_ids:184111530305,184111694145` |
    | publishable_status | string | Filter by the publishable status of the
    resource on a channel, such as the online store. The value is a composite of
    either the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) or [channel `name`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel#field-name)
    and one of the valid values. | - `online_store_channel`<br/> -
    `published`<br/> - `unpublished`<br/> - `visible`<br/> - `unavailable`<br/>
    - `hidden`<br/> - `intended`<br/> - `visible` | | -
    `publishable_status:published`<br/> -
    `publishable_status:189769876:visible`<br/> -
    `publishable_status:pos:hidden` |
    | published_at | time | Filter by the date and time when the product was
    published to the online store and other sales channels. | | | -
    `published_at:>2020-10-21T23:39:20Z`<br/> - `published_at:<now`<br/> -
    `published_at:<=2024` |
    | published_status | string | Filter by the published status of the resource
    on a channel, such as the online store. | - `unset`<br/> - `pending`<br/> -
    `approved`<br/> - `not approved` | | - `published_status:approved` |
    | sku | string | Filter by the product variant [`sku`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | -
    `sku:XYZ-12345` |
    | status | string | Filter by a comma-separated list of statuses. You can
    use statuses to manage inventory. Shopify only displays products with an
    `ACTIVE` status in online stores, sales channels, and apps. | -
    `ACTIVE`<br/> - `ARCHIVED`<br/> - `DRAFT` | `ACTIVE` | -
    `status:ACTIVE,DRAFT` |
    | tag | string | Filter objects by the `tag` field. | | | - `tag:my_tag` |
    | tag_not | string | Filter by objects that don’t have the specified tag. | | | - `tag_not:my_tag` |
    | title | string | Filter by the product [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-title)
    field. | | | - `title:The Minimal Snowboard` |
    | updated_at | time | Filter by the date and time when the product was last
    updated. | | | - `updated_at:>'2020-10-21T23:39:20Z'`<br/> -
    `updated_at:<now`<br/> - `updated_at:<='2024'` |
    | variant_id | id | Filter by the product variant [`id`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-id)
    field. | | | - `variant_id:45779434701121` |
    | variant_title | string | Filter by the product variant [`title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-title)
    field. | | | - `variant_title:'Special ski wax'` |
    | vendor | string | Filter by the origin or source of the product. Learn
    more about [vendors and managing vendor
    information](https://help.shopify.com/manual/products/managing-vendor-info).
    | | | - `vendor:Snowdevil`<br/> - `vendor:Snowdevil OR vendor:Icedevil` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ProductSortKeys = ID
  ): ProductConnection!

  """
  Count of products.
  """
  productsCount(
    """
    The upper bound on count value before returning a result.
    """
    limit: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | barcode | string | Filter by the product variant [`barcode`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-barcode)
    field. | | | - `barcode:ABC-abc-1234` |
    | bundles | boolean | Filter by a [product
    bundle](https://shopify.dev/docs/apps/build/product-merchandising/bundles).
    A product bundle is a set of two or more related products, which are
    commonly offered at a discount. | | | - `bundles:true` |
    | category_id | string | Filter by the product [category ID](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-category)
    (`product.category.id`). A product category is the category of a product
    from [Shopify's Standard Product Taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
    | | | - `category_id:sg-4-17-2-17` |
    | collection_id | id | Filter by the collection [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-id)
    field. | | | - `collection_id:108179161409` |
    | combined_listing_role | string | Filter by the role of the product in a [combined listing](https://shopify.dev/apps/build/product-merchandising/combined-listings).
    | - `parent`<br/> - `child`<br/> - `no_role` | | -
    `combined_listing_role:parent` |
    | created_at | time | Filter by the date and time when the product was
    created. | | | - `created_at:>'2020-10-21T23:39:20Z'`<br/> -
    `created_at:<now`<br/> - `created_at:<='2024'` |
    | delivery_profile_id | id | Filter by the delivery profile [`id`](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryProfile#field-id)
    field. | | | - `delivery_profile_id:108179161409` |
    | error_feedback | string | Filter by products with publishing errors. |
    | gift_card | boolean | Filter by the product [`isGiftCard`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-isgiftcard)
    field. | | | - `gift_card:true` |
    | handle | string | Filter by a comma-separated list of product [handles](https://shopify.dev/api/admin-graphql/latest/queries/products#argument-query-filter-handle).
    | | | - `handle:the-minimal-snowboard` |
    | has_only_composites | boolean | Filter by products that have only
    composite variants. | | | - `has_only_composites:true` |
    | has_only_default_variant | boolean | Filter by products that have only a
    default variant. A default variant is the only variant if no other variants
    are specified. | | | - `has_only_default_variant:true` |
    | has_variant_with_components | boolean | Filter by products that have
    variants with associated components. | | | -
    `has_variant_with_components:true` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | inventory_total | integer | Filter by inventory count. | | | -
    `inventory_total:0`<br/> - `inventory_total:>150`<br/> -
    `inventory_total:>=200` |
    | is_price_reduced | boolean | Filter by products that have a reduced price.
    For more information, refer to the [`CollectionRule`](https://shopify.dev/api/admin-graphql/latest/objects/CollectionRule)
    object. | | | - `is_price_reduced:true` |
    | out_of_stock_somewhere | boolean | Filter by products that are out of
    stock in at least one location. | | | - `out_of_stock_somewhere:true` |
    | price | bigdecimal | Filter by the product variant [`price`](https://shopify.dev/api/admin-graphql/latest/objects/Productvariant#field-price)
    field. | | | - `price:100.57` |
    | product_configuration_owner | string | Filter by the app
    [`id`](https://shopify.dev/api/admin-graphql/latest/objects/App#field-id)
    field. | | | - `product_configuration_owner:10001` |
    | product_publication_status | string | Filter by the publishable status of
    the resource on a channel, such as the online store. The value is a
    composite of the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) and one of the valid values. | - `approved`<br/> -
    `rejected`<br/> - `needs_action`<br/> - `awaiting_review`<br/> -
    `published`<br/> - `demoted`<br/> - `scheduled`<br/> -
    `provisionally_published` | | - `publishable_status:189769876-approved` |
    | product_type | string | Filter by a comma-separated list of [product
    types](https://help.shopify.com/manual/products/details/product-type). | | |
    - `product_type:snowboard` |
    | publication_ids | string | Filter by a comma-separated list of publication
    IDs that are associated with the product. | | | -
    `publication_ids:184111530305,184111694145` |
    | publishable_status | string | Filter by the publishable status of the
    resource on a channel, such as the online store. The value is a composite of
    either the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) or [channel `name`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel#field-name)
    and one of the valid values. | - `online_store_channel`<br/> -
    `published`<br/> - `unpublished`<br/> - `visible`<br/> - `unavailable`<br/>
    - `hidden`<br/> - `intended`<br/> - `visible` | | -
    `publishable_status:published`<br/> -
    `publishable_status:189769876:visible`<br/> -
    `publishable_status:pos:hidden` |
    | published_at | time | Filter by the date and time when the product was
    published to the online store and other sales channels. | | | -
    `published_at:>2020-10-21T23:39:20Z`<br/> - `published_at:<now`<br/> -
    `published_at:<=2024` |
    | published_status | string | Filter by the published status of the resource
    on a channel, such as the online store. | - `unset`<br/> - `pending`<br/> -
    `approved`<br/> - `not approved` | | - `published_status:approved` |
    | sku | string | Filter by the product variant [`sku`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | -
    `sku:XYZ-12345` |
    | status | string | Filter by a comma-separated list of statuses. You can
    use statuses to manage inventory. Shopify only displays products with an
    `ACTIVE` status in online stores, sales channels, and apps. | -
    `ACTIVE`<br/> - `ARCHIVED`<br/> - `DRAFT` | `ACTIVE` | -
    `status:ACTIVE,DRAFT` |
    | tag | string | Filter objects by the `tag` field. | | | - `tag:my_tag` |
    | tag_not | string | Filter by objects that don’t have the specified tag. | | | - `tag_not:my_tag` |
    | title | string | Filter by the product [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-title)
    field. | | | - `title:The Minimal Snowboard` |
    | updated_at | time | Filter by the date and time when the product was last
    updated. | | | - `updated_at:>'2020-10-21T23:39:20Z'`<br/> -
    `updated_at:<now`<br/> - `updated_at:<='2024'` |
    | variant_id | id | Filter by the product variant [`id`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-id)
    field. | | | - `variant_id:45779434701121` |
    | variant_title | string | Filter by the product variant [`title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-title)
    field. | | | - `variant_title:'Special ski wax'` |
    | vendor | string | Filter by the origin or source of the product. Learn
    more about [vendors and managing vendor
    information](https://help.shopify.com/manual/products/managing-vendor-info).
    | | | - `vendor:Snowdevil`<br/> - `vendor:Snowdevil OR vendor:Icedevil` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to the [`SavedSearch`](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch) object.
    """
    savedSearchId: ID
  ): Count

  """
  The list of publicly-accessible Admin API versions, including supported
  versions, the release candidate, and unstable versions.
  """
  publicApiVersions: [ApiVersion!]!

  """
  Lookup a publication by ID.
  """
  publication(
    """
    The ID of the Publication to return.
    """
    id: ID!
  ): Publication

  """
  List of publications.
  """
  publications(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Filter publications by catalog type.
    """
    catalogType: CatalogType

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): PublicationConnection!

  """
  Count of publications.
  """
  publicationsCount(
    """
    Filter publications by catalog type.
    """
    catalogType: CatalogType
  ): Count

  """
  Returns a count of published products by publication ID.
  """
  publishedProductsCount(
    """
    The ID of the publication that the products are published to.
    """
    publicationId: ID!
  ): Count

  """
  Returns a Refund resource by ID.
  """
  refund(
    """
    The ID of the Refund to return.
    """
    id: ID!
  ): Refund

  """
  Returns a Return resource by ID.
  """
  return(
    """
    The ID of the Return to return.
    """
    id: ID!
  ): Return

  """
  The calculated monetary value to be exchanged due to the return.
  """
  returnCalculate(
    """
    The input fields for calculating a return.
    """
    input: CalculateReturnInput!
  ): CalculatedReturn

  """
  Lookup a returnable fulfillment by ID.
  """
  returnableFulfillment(
    """
    The ID of the `ReturnableFulfillment` to return.
    """
    id: ID!
  ): ReturnableFulfillment

  """
  List of returnable fulfillments.
  """
  returnableFulfillments(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Order ID that will scope all returnable fulfillments.
    """
    orderId: ID!

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ReturnableFulfillmentConnection!

  """
  Lookup a reverse delivery by ID.
  """
  reverseDelivery(
    """
    The ID of the ReverseDelivery to return.
    """
    id: ID!
  ): ReverseDelivery

  """
  Lookup a reverse fulfillment order by ID.
  """
  reverseFulfillmentOrder(
    """
    The ID of the reverse fulfillment order to return.
    """
    id: ID!
  ): ReverseFulfillmentOrder

  """
  <div class="note"><h4>Theme app extensions</h4>
    <p>Your app might not pass App Store review if it uses script tags instead of
  theme app extensions. All new apps, and apps that integrate with Online Store
  2.0 themes, should use theme app extensions, such as app blocks or app embed
  blocks. Script tags are an alternative you can use with only vintage themes.
  <a href="/apps/online-store#what-integration-method-should-i-use"
  target="_blank">Learn more</a>.</p></div>

  <div class="note"><h4>Script tag deprecation</h4>
    <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade
  to Checkout Extensibility</a> before this date. <a
  href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to
  work alongside Checkout Extensibility until August 28, 2025.</p></div>


  Lookup a script tag resource by ID.
  """
  scriptTag(
    """
    The ID of the `ScriptTag` to return.
    """
    id: ID!
  ): ScriptTag

  """
  <div class="note"><h4>Theme app extensions</h4>
    <p>Your app might not pass App Store review if it uses script tags instead of
  theme app extensions. All new apps, and apps that integrate with Online Store
  2.0 themes, should use theme app extensions, such as app blocks or app embed
  blocks. Script tags are an alternative you can use with only vintage themes.
  <a href="/apps/online-store#what-integration-method-should-i-use"
  target="_blank">Learn more</a>.</p></div>

  <div class="note"><h4>Script tag deprecation</h4>
    <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade
  to Checkout Extensibility</a> before this date. <a
  href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to
  work alongside Checkout Extensibility until August 28, 2025.</p></div>


  A list of script tags.
  """
  scriptTags(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | src | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The source URL of the script tag to filter by.
    """
    src: URL
  ): ScriptTagConnection!

  """
  The Customer Segment.
  """
  segment(
    """
    Find a segment by ID.
    """
    id: ID!
  ): Segment

  """
  A list of filter suggestions associated with a segment. A segment is a group
  of members (commonly customers) that meet specific criteria.
  """
  segmentFilterSuggestions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int!

    """
    Returns the elements of a list by keyword or term.
    """
    search: String!
  ): SegmentFilterConnection!

  """
  A list of filters.
  """
  segmentFilters(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int
  ): SegmentFilterConnection!

  """
  A list of a shop's segment migrations.
  """
  segmentMigrations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Search a segment migration by its saved search ID.
    """
    savedSearchId: ID
  ): SegmentMigrationConnection!

  """
  The list of suggested values corresponding to a particular filter for a
  segment. A segment is a group of members, such as customers, that meet
  specific criteria.
  """
  segmentValueSuggestions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Returns the elements of a list by filter handle.
    """
    filterQueryName: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    Returns the elements of a list by filter parameter name.
    """
    functionParameterQueryName: String

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Returns the elements of a list by keyword or term.
    """
    search: String!
  ): SegmentValueConnection!

  """
  A list of a shop's segments.
  """
  segments(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | name | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list by the given key.
    """
    sortKey: SegmentSortKeys = CREATION_DATE
  ): SegmentConnection!

  """
  The number of segments for a shop.
  """
  segmentsCount: Count

  """
  Returns a Selling Plan Group resource by ID.
  """
  sellingPlanGroup(
    """
    The ID of the `SellingPlanGroup` to return.
    """
    id: ID!
  ): SellingPlanGroup

  """
  List Selling Plan Groups.
  """
  sellingPlanGroups(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | app_id | id | | - `CURRENT`<br/> - `ALL`<br/> - `* (numeric app ID)` | `CURRENT` |
    | category | string | A comma-separated list of categories. | -
    `SUBSCRIPTION`<br/> - `PRE_ORDER`<br/> - `TRY_BEFORE_YOU_BUY`<br/> - `OTHER` |
    | created_at | time |
    | delivery_frequency | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | name | string |
    | percentage_off | float |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: SellingPlanGroupSortKeys = ID
  ): SellingPlanGroupConnection!

  """
  The server pixel configured by the app.
  """
  serverPixel: ServerPixel

  """
  Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains
  business and store management settings for the shop.
  """
  shop: Shop!

  """
  The shop's billing preferences.
  """
  shopBillingPreferences: ShopBillingPreferences!

  """
  A list of locales available on a shop.
  """
  shopLocales(
    """
    Return only published locales.
    """
    published: Boolean = false
  ): [ShopLocale!]!

  """
  The Shopify Function.
  """
  shopifyFunction(
    """
    The ID of the Shopify Function.
    """
    id: String!
  ): ShopifyFunction

  """
  Returns the Shopify Functions for apps installed on the shop.
  """
  shopifyFunctions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    Filter the functions by the API type.
    """
    apiType: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Filter the functions by whether or not the function uses the creation UI in the Admin.
    """
    useCreationUi: Boolean
  ): ShopifyFunctionConnection!

  """
  Shopify Payments account information, including balances and payouts.
  """
  shopifyPaymentsAccount: ShopifyPaymentsAccount @accessRestricted(reason: "Requires the `read_shopify_payments` approval scope.")

  """
  The StaffMember resource, by ID.
  """
  staffMember(
    """
    The ID of the staff member to return. If no ID is provided, then the staff member making the query (if any) is returned.
    """
    id: ID
  ): StaffMember

  """
  The shop staff members.
  """
  staffMembers(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | account_type | string | Filter by account type. | - `collaborator`<br/> -
    `collaborator_team_member`<br/> - `invited`<br/> - `regular`<br/> -
    `requested`<br/> - `restricted`<br/> - `saml` |
    | email | string | Filter by email. |
    | first_name | string | Filter by first name. |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | last_name | string | Filter by last name. |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: StaffMembersSortKeys = ID
  ): StaffMemberConnection

  """
  Standard metafield definitions are intended for specific, common use cases.
  Their namespace and keys reflect these use cases and are reserved.

  Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).
  """
  standardMetafieldDefinitionTemplates(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Filter standard metafield definitions based on whether they are constrained.
    """
    constraintStatus: MetafieldDefinitionConstraintStatus

    """
    Filter standard metafield definitions based on whether they apply to a given resource subtype.
    """
    constraintSubtype: MetafieldDefinitionConstraintSubtypeIdentifier

    """
    Filter standard metafield definitions that have already been activated.
    """
    excludeActivated: Boolean = false

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): StandardMetafieldDefinitionTemplateConnection!

  """
  Returns a store credit account resource by ID.
  """
  storeCreditAccount(
    """
    The ID of the store credit account to return.
    """
    id: ID!
  ): StoreCreditAccount

  """
  Returns a SubscriptionBillingAttempt by ID.
  """
  subscriptionBillingAttempt(
    """
    The ID of the `SubscriptionBillingAttempt` to return.
    """
    id: ID!
  ): SubscriptionBillingAttempt

  """
  Returns subscription billing attempts on a store.
  """
  subscriptionBillingAttempts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | created_at | time |
    | error_code | string |
    | error_message | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: SubscriptionBillingAttemptsSortKeys = CREATED_AT
  ): SubscriptionBillingAttemptConnection!

  """
  Returns a subscription billing cycle found either by cycle index or date.
  """
  subscriptionBillingCycle(
    """
    Input object used to select and use billing cycles.
    """
    billingCycleInput: SubscriptionBillingCycleInput!
  ): SubscriptionBillingCycle

  """
  Retrieves the results of the asynchronous job for the subscription billing
  cycle bulk action based on the specified job ID.
  This query can be used to obtain the billing cycles that match the criteria
  defined in the subscriptionBillingCycleBulkSearch and
  subscriptionBillingCycleBulkCharge mutations.
  """
  subscriptionBillingCycleBulkResults(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The ID of the billing cycle bulk operation job.
    """
    jobId: ID!

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionBillingCycleConnection!

  """
  Returns subscription billing cycles for a contract ID.
  """
  subscriptionBillingCycles(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Select subscription billing cycles within a date range.
    """
    billingCyclesDateRangeSelector: SubscriptionBillingCyclesDateRangeSelector

    """
    Select subscription billing cycles within an index range.
    """
    billingCyclesIndexRangeSelector: SubscriptionBillingCyclesIndexRangeSelector

    """
    The ID of the subscription contract to retrieve billing cycles for.
    """
    contractId: ID!

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: SubscriptionBillingCyclesSortKeys = CYCLE_INDEX
  ): SubscriptionBillingCycleConnection!

  """
  Returns a Subscription Contract resource by ID.
  """
  subscriptionContract(
    """
    The ID of the Subscription Contract to return.
    """
    id: ID!
  ): SubscriptionContract

  """
  List Subscription Contracts.
  """
  subscriptionContracts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | last_billing_attempt_error_type | string |
    | status | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionContractConnection!

  """
  Returns a Subscription Draft resource by ID.
  """
  subscriptionDraft(
    """
    The ID of the Subscription Draft to return.
    """
    id: ID!
  ): SubscriptionDraft

  """
  The Taxonomy resource lets you access the categories, attributes and values of the loaded taxonomy tree.
  """
  taxonomy: Taxonomy

  """
  Returns a list of TenderTransactions associated with the shop.
  """
  tenderTransactions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | point_of_sale_device_id | id |
    | processed_at | time |
    | test | boolean |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): TenderTransactionConnection!

  """
  Returns a particular theme for the shop.
  """
  theme(
    """
    The ID of the theme.
    """
    id: ID!
  ): OnlineStoreTheme

  """
  Returns a paginated list of themes for the shop.
  """
  themes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The theme names to filter by. Use '*' to match zero or more characters.
    """
    names: [String!]

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The theme roles to filter by.
    """
    roles: [ThemeRole!]
  ): OnlineStoreThemeConnection

  """
  A resource that can have localized values for different languages.
  """
  translatableResource(
    """
    Find a translatable resource by ID.
    """
    resourceId: ID!
  ): TranslatableResource

  """
  Resources that can have localized values for different languages.
  """
  translatableResources(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Return only resources of a type.
    """
    resourceType: TranslatableResourceType!

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): TranslatableResourceConnection!

  """
  Resources that can have localized values for different languages.
  """
  translatableResourcesByIds(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Return only resources for given IDs.
    """
    resourceIds: [ID!]!

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): TranslatableResourceConnection!

  """
  Returns a redirect resource by ID.
  """
  urlRedirect(
    """
    The ID of the `UrlRedirect` to return.
    """
    id: ID!
  ): UrlRedirect

  """
  Returns a redirect import resource by ID.
  """
  urlRedirectImport(
    """
    The ID of the `UrlRedirectImport` to return.
    """
    id: ID!
  ): UrlRedirectImport

  """
  A list of the shop's URL redirect saved searches.
  """
  urlRedirectSavedSearches(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SavedSearchConnection!

  """
  A list of redirects for a shop.
  """
  urlRedirects(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | path | string |
    | target | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: UrlRedirectSortKeys = ID
  ): UrlRedirectConnection!

  """
  Count of redirects. Limited to a maximum of 10000.
  """
  urlRedirectsCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | path | string |
    | target | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to the [`SavedSearch`](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch) object.
    """
    savedSearchId: ID
  ): Count

  """
  Validation available on the shop.
  """
  validation(
    """
    The ID of the validation.
    """
    id: ID!
  ): Validation

  """
  Validations available on the shop.
  """
  validations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ValidationSortKeys = ID
  ): ValidationConnection!

  """
  Returns a
  [web pixel](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)
  by ID.
  """
  webPixel(
    """
    The ID of the `WebPixel` object to return.
    """
    id: ID
  ): WebPixel

  """
  Returns a webhook subscription by ID.

  Building an app? If you only use app-specific webhooks, you won't need this.
  App-specific webhook subscriptions specified in your `shopify.app.toml` may be
  easier. They are automatically kept up to date by Shopify & require less
  maintenance. Please read [About managing webhook
  subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
  """
  webhookSubscription(
    """
    The ID of the `WebhookSubscription` to return.
    """
    id: ID!
  ): WebhookSubscription

  """
  Returns a list of webhook subscriptions.

  Building an app? If you only use app-specific webhooks, you won't need this.
  App-specific webhook subscriptions specified in your `shopify.app.toml` may be
  easier. They are automatically kept up to date by Shopify & require less
  maintenance. Please read [About managing webhook
  subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
  """
  webhookSubscriptions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Callback URL to filter by.
    """
    callbackUrl: URL

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    Response format to filter by.
    """
    format: WebhookSubscriptionFormat

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: WebhookSubscriptionSortKeys = CREATED_AT

    """
    List of webhook subscription topics to filter by.
    """
    topics: [WebhookSubscriptionTopic!]
  ): WebhookSubscriptionConnection!

  """
  The count of webhook subscriptions.

  Building an app? If you only use app-specific webhooks, you won't need this.
  App-specific webhook subscriptions specified in your `shopify.app.toml` may be
  easier. They are automatically kept up to date by Shopify & require less
  maintenance. Please read [About managing webhook
  subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
  Limited to a maximum of 10000.
  """
  webhookSubscriptionsCount(
    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | created_at | time |
    | endpoint | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | topic | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String
  ): Count
}

"""
A rating value.
"""
scalar RatingMetatype

"""
The record of the line items and transactions that were refunded to a customer,
along with restocking instructions for refunded line items.
"""
type Refund implements LegacyInteroperability & Node {
  """
  The date and time when the refund was created.
  """
  createdAt: DateTime

  """
  A list of the refunded duties as part of this refund.
  """
  duties: [RefundDuty!]

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The optional note associated with the refund.
  """
  note: String

  """
  The order associated with the refund.
  """
  order: Order!

  """
  The order adjustments that are attached with the refund.
  """
  orderAdjustments(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): OrderAdjustmentConnection!

  """
  The `RefundLineItem` resources attached to the refund.
  """
  refundLineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): RefundLineItemConnection!

  """
  The `RefundShippingLine` resources attached to the refund.
  """
  refundShippingLines(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): RefundShippingLineConnection!

  """
  The return associated with the refund.
  """
  return: Return

  """
  The staff member who created the refund.
  """
  staffMember: StaffMember

  """
  The total amount across all transactions for the refund.
  """
  totalRefunded: MoneyV2! @deprecated(reason: "Use `totalRefundedSet` instead.")

  """
  The total amount across all transactions for the refund, in shop and presentment currencies.
  """
  totalRefundedSet: MoneyBag!

  """
  The transactions associated with the refund.
  """
  transactions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): OrderTransactionConnection!

  """
  The date and time when the refund was updated.
  """
  updatedAt: DateTime!
}

"""
An agreement between the merchant and customer to refund all or a portion of the order.
"""
type RefundAgreement implements SalesAgreement {
  """
  The application that created the agreement.
  """
  app: App

  """
  The date and time at which the agreement occured.
  """
  happenedAt: DateTime!

  """
  The unique ID for the agreement.
  """
  id: ID!

  """
  The reason the agremeent was created.
  """
  reason: OrderActionType!

  """
  The refund associated with the agreement.
  """
  refund: Refund!

  """
  The sales associated with the agreement.
  """
  sales(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SaleConnection!

  """
  The staff member associated with the agreement.
  """
  user: StaffMember
}

"""
An auto-generated type for paginating through multiple Refunds.
"""
type RefundConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [RefundEdge!]!

  """
  A list of nodes that are contained in RefundEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Refund!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Represents a refunded duty.
"""
type RefundDuty {
  """
  The amount of a refunded duty in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The duty associated with this refunded duty.
  """
  originalDuty: Duty
}

"""
The input fields required to reimburse duties on a refund.
"""
input RefundDutyInput {
  """
  The ID of the duty in the refund.
  """
  dutyId: ID!

  """
  The type of refund for this duty.
  """
  refundType: RefundDutyRefundType
}

"""
The type of refund to perform for a particular refund duty.
"""
enum RefundDutyRefundType {
  """
  The duty is fully refunded.
  """
  FULL

  """
  The duty is proportionally refunded based on the quantity of the refunded line item.
  """
  PROPORTIONAL
}

"""
An auto-generated type which holds one Refund and a cursor during pagination.
"""
type RefundEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of RefundEdge.
  """
  node: Refund!
}

"""
A line item that's included in a refund.
"""
type RefundLineItem {
  """
  A globally-unique ID.
  """
  id: ID

  """
  The `LineItem` resource associated to the refunded line item.
  """
  lineItem: LineItem!

  """
  The inventory restock location.
  """
  location: Location

  """
  The price of a refunded line item.
  """
  price: Money! @deprecated(reason: "Use `priceSet` instead.")

  """
  The price of a refunded line item in shop and presentment currencies.
  """
  priceSet: MoneyBag!

  """
  The quantity of a refunded line item.
  """
  quantity: Int!

  """
  The type of restock for the refunded line item.
  """
  restockType: RefundLineItemRestockType!

  """
  Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
  """
  restocked: Boolean!

  """
  The subtotal price of a refunded line item.
  """
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead.")

  """
  The subtotal price of a refunded line item in shop and presentment currencies.
  """
  subtotalSet: MoneyBag!

  """
  The total tax charged on a refunded line item.
  """
  totalTax: Money! @deprecated(reason: "Use `totalTaxSet` instead.")

  """
  The total tax charged on a refunded line item in shop and presentment currencies.
  """
  totalTaxSet: MoneyBag!
}

"""
An auto-generated type for paginating through multiple RefundLineItems.
"""
type RefundLineItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [RefundLineItemEdge!]!

  """
  A list of nodes that are contained in RefundLineItemEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [RefundLineItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one RefundLineItem and a cursor during pagination.
"""
type RefundLineItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of RefundLineItemEdge.
  """
  node: RefundLineItem!
}

"""
The input fields required to reimburse line items on a refund.
"""
input RefundLineItemInput {
  """
  The ID of the line item in the refund.
  """
  lineItemId: ID!

  """
  The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty.
  """
  locationId: ID

  """
  The quantity of the associated line item to be refunded.
  """
  quantity: Int!

  """
  The type of restock for this line item.
  """
  restockType: RefundLineItemRestockType
}

"""
The type of restock performed for a particular refund line item.
"""
enum RefundLineItemRestockType {
  """
  The refund line item was canceled. Use this when restocking unfulfilled line items.
  """
  CANCEL

  """
  Deprecated. The refund line item was restocked, without specifically
  beingidentified as a return or cancelation. This value is not accepted when
  creating new refunds.
  """
  LEGACY_RESTOCK

  """
  Refund line item was not restocked.
  """
  NO_RESTOCK

  """
  The refund line item was returned. Use this when restocking line items that were fulfilled.
  """
  RETURN
}

"""
The input fields for the shipping cost to refund.
"""
input RefundShippingInput {
  """
  Whether to refund the full shipping amount.
  """
  fullRefund: Boolean = false

  """
  The input fields required to refund shipping cost, in the presentment currency of the order.
  This overrides the `fullRefund` argument.
  This field defaults to 0.00 when not provided and when the `fullRefund` argument is false.
  """
  shippingRefundAmount: MoneyInput
}

"""
A shipping line item that's included in a refund.
"""
type RefundShippingLine implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The `ShippingLine` resource associated to the refunded shipping line item.
  """
  shippingLine: ShippingLine!

  """
  The subtotal amount of the refund shipping line in shop and presentment currencies.
  """
  subtotalAmountSet: MoneyBag!

  """
  The tax amount of the refund shipping line in shop and presentment currencies.
  """
  taxAmountSet: MoneyBag!
}

"""
An auto-generated type for paginating through multiple RefundShippingLines.
"""
type RefundShippingLineConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [RefundShippingLineEdge!]!

  """
  A list of nodes that are contained in RefundShippingLineEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [RefundShippingLine!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one RefundShippingLine and a cursor during pagination.
"""
type RefundShippingLineEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of RefundShippingLineEdge.
  """
  node: RefundShippingLine!
}

"""
An alert message that appears in the Shopify admin about a problem with a store
resource, with 1 or more actions to take. For example, you could use an alert to
indicate that you're not charging taxes on some product variants.
They can optionally have a specific icon and be dismissed by merchants.
"""
type ResourceAlert {
  """
  Buttons in the alert that link to related information.
  For example, _Edit variants_.
  """
  actions: [ResourceAlertAction!]!

  """
  The secondary text in the alert that includes further information or instructions about how to solve a problem.
  """
  content: HTML!

  """
  Unique identifier that appears when an alert is manually closed by the merchant.
  Most alerts can't be manually closed.
  """
  dismissibleHandle: String

  """
  An icon that's optionally displayed with the alert.
  """
  icon: ResourceAlertIcon

  """
  Indication of how important the alert is.
  """
  severity: ResourceAlertSeverity!

  """
  The primary text in the alert that includes information or describes the problem.
  """
  title: String!
}

"""
An action associated to a resource alert, such as editing variants.
"""
type ResourceAlertAction {
  """
  Whether the action appears as a button or as a link.
  """
  primary: Boolean!

  """
  Resource for the action to show.
  """
  show: String

  """
  The text for the button in the alert. For example, _Edit variants_.
  """
  title: String!

  """
  The target URL that the button links to.
  """
  url: URL!
}

"""
The available icons for resource alerts.
"""
enum ResourceAlertIcon {
  """
  A checkmark inside a circle.
  """
  CHECKMARK_CIRCLE

  """
  A lowercase `i` inside a circle.
  """
  INFORMATION_CIRCLE
}

"""
The possible severity levels for a resource alert.
"""
enum ResourceAlertSeverity {
  """
  Indicates a critical alert. For example, a blocked app.
  """
  CRITICAL

  """
  Indicates a neutral alert. For example, an accepted dispute.
  """
  DEFAULT
  ERROR @deprecated(reason: "`ERROR` severity is being deprecated in favour of `WARNING` or `CRITICAL` instead.")

  """
  Indicates an informative alert. For example, an escalated dispute.
  """
  INFO

  """
  Indicates a success alert. For example, a winning a dispute.
  """
  SUCCESS

  """
  Indicates an informative alert. For example, a new dispute.
  """
  WARNING
}

"""
Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.
"""
type ResourceFeedback {
  """
  Feedback from an app about the steps a merchant needs to take to set up the app on their store.
  """
  appFeedback: [AppFeedback!]! @deprecated(reason: "Use `details` instead.")

  """
  List of AppFeedback detailing issues regarding a resource.
  """
  details: [AppFeedback!]!

  """
  Summary of resource feedback pertaining to the resource.
  """
  summary: String!
}

"""
The state of the resource feedback.
"""
enum ResourceFeedbackState {
  """
  No action required from merchant.
  """
  ACCEPTED

  """
  The merchant needs to resolve an issue with the resource.
  """
  REQUIRES_ACTION
}

"""
Represents a merchandising background operation interface.
"""
interface ResourceOperation {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The count of processed rows, summing imported, failed, and skipped rows.
  """
  processedRowCount: Int

  """
  Represents a rows objects within this background operation.
  """
  rowCount: RowCount

  """
  The status of this operation.
  """
  status: ResourceOperationStatus!
}

"""
Represents the state of this catalog operation.
"""
enum ResourceOperationStatus {
  """
  Operation is currently running.
  """
  ACTIVE

  """
  Operation is complete.
  """
  COMPLETE

  """
  Operation has been created.
  """
  CREATED
}

"""
A resource publication represents information about the publication of a resource.
An instance of `ResourcePublication`, unlike `ResourcePublicationV2`, can be neither published or scheduled to be published.

See [ResourcePublicationV2](/api/admin-graphql/latest/objects/ResourcePublicationV2) for more context.
"""
type ResourcePublication {
  """
  The channel the resource publication is published to.
  """
  channel: Channel! @deprecated(reason: "Use `publication` instead.")

  """
  Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
  If false, then the resource publication is neither published nor scheduled to be published.
  """
  isPublished: Boolean!

  """
  The publication the resource publication is published to.
  """
  publication: Publication!

  """
  The date that the resource publication was or is going to be published to the publication.
  If the product isn't published, then this field returns an epoch timestamp.
  """
  publishDate: DateTime!

  """
  The resource published to the publication.
  """
  publishable: Publishable!
}

"""
An auto-generated type for paginating through multiple ResourcePublications.
"""
type ResourcePublicationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ResourcePublicationEdge!]!

  """
  A list of nodes that are contained in ResourcePublicationEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ResourcePublication!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ResourcePublication and a cursor during pagination.
"""
type ResourcePublicationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ResourcePublicationEdge.
  """
  node: ResourcePublication!
}

"""
A resource publication represents information about the publication of a resource.
Unlike `ResourcePublication`, an instance of `ResourcePublicationV2` can't be
unpublished. It must either be published or scheduled to be published.

See [ResourcePublication](/api/admin-graphql/latest/objects/ResourcePublication) for more context.
"""
type ResourcePublicationV2 {
  """
  Whether the resource publication is published. If true, then the resource publication is published to the publication.
  If false, then the resource publication is staged to be published to the publication.
  """
  isPublished: Boolean!

  """
  The publication the resource publication is published to.
  """
  publication: Publication!

  """
  The date that the resource publication was or is going to be published to the publication.
  """
  publishDate: DateTime

  """
  The resource published to the publication.
  """
  publishable: Publishable!
}

"""
An auto-generated type for paginating through multiple ResourcePublicationV2s.
"""
type ResourcePublicationV2Connection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ResourcePublicationV2Edge!]!

  """
  A list of nodes that are contained in ResourcePublicationV2Edge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ResourcePublicationV2!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.
"""
type ResourcePublicationV2Edge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ResourcePublicationV2Edge.
  """
  node: ResourcePublicationV2!
}

"""
A restocking fee is a fee captured as part of a return to cover the costs of handling a return line item.
Typically, this would cover the costs of inspecting, repackaging, and restocking the item.
"""
type RestockingFee implements Fee {
  """
  The amount of the restocking fee, in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The unique ID for the Fee.
  """
  id: ID!

  """
  The value of the fee as a percentage.
  """
  percentage: Float!
}

"""
The input fields for a restocking fee.
"""
input RestockingFeeInput {
  """
  The value of the fee as a percentage.
  """
  percentage: Float!
}

"""
Information about product is restricted for a given resource.
"""
type RestrictedForResource {
  """
  Returns true when the product is restricted for the given resource.
  """
  restricted: Boolean!

  """
  Restriction reason for the given resource.
  """
  restrictedReason: String!
}

"""
Represents a return.
"""
type Return implements Node {
  """
  Additional information about the declined return.
  """
  decline: ReturnDecline

  """
  The exchange line items attached to the return.
  """
  exchangeLineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    Include exchange line items that have been removed from the order by an
    order edit, return, etc. Items that have been removed have a zero ([LineItem.currentQuantity](https://shopify.dev/docs/api/admin-graphql/unstable/objects/LineItem#field-lineitem-currentquantity)).
    """
    includeRemovedItems: Boolean = false

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ExchangeLineItemConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the return.
  """
  name: String!

  """
  The order that the return belongs to.
  """
  order: Order!

  """
  The list of refunds associated with the return.
  """
  refunds(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): RefundConnection!

  """
  The return line items attached to the return.
  """
  returnLineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ReturnLineItemTypeConnection!

  """
  The return shipping fees for the return.
  """
  returnShippingFees: [ReturnShippingFee!]!

  """
  The list of reverse fulfillment orders for the return.
  """
  reverseFulfillmentOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ReverseFulfillmentOrderConnection!

  """
  The status of the return.
  """
  status: ReturnStatus!

  """
  A suggested refund for the return.
  """
  suggestedRefund(
    """
    The duties from to associated order to include in the refund.
    """
    refundDuties: [RefundDutyInput!]

    """
    The shipping amount from the associated order to include in the refund.
    """
    refundShipping: RefundShippingInput

    """
    The line items from the return to include in the refund.
    """
    returnRefundLineItems: [ReturnRefundLineItemInput!]!
  ): SuggestedReturnRefund

  """
  The sum of all return line item quantities for the return.
  """
  totalQuantity: Int!
}

"""
An agreement between the merchant and customer for a return.
"""
type ReturnAgreement implements SalesAgreement {
  """
  The application that created the agreement.
  """
  app: App

  """
  The date and time at which the agreement occured.
  """
  happenedAt: DateTime!

  """
  The unique ID for the agreement.
  """
  id: ID!

  """
  The reason the agremeent was created.
  """
  reason: OrderActionType!

  """
  The return associated with the agreement.
  """
  return: Return!

  """
  The sales associated with the agreement.
  """
  sales(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SaleConnection!

  """
  The staff member associated with the agreement.
  """
  user: StaffMember
}

"""
An auto-generated type for paginating through multiple Returns.
"""
type ReturnConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ReturnEdge!]!

  """
  A list of nodes that are contained in ReturnEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Return!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Additional information about why a merchant declined the customer's return request.
"""
type ReturnDecline {
  """
  The notification message sent to the customer about their declined return request.
  Maximum length: 500 characters.
  """
  note: String

  """
  The reason the customer's return request was declined.
  """
  reason: ReturnDeclineReason!
}

"""
The reason why the merchant declined a customer's return request.
"""
enum ReturnDeclineReason {
  """
  The return contains final sale items.
  """
  FINAL_SALE

  """
  The return is declined for another reason.
  """
  OTHER

  """
  The return period has ended.
  """
  RETURN_PERIOD_ENDED
}

"""
An auto-generated type which holds one Return and a cursor during pagination.
"""
type ReturnEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ReturnEdge.
  """
  node: Return!
}

"""
A return line item.
"""
type ReturnLineItem implements Node & ReturnLineItemType {
  """
  A note from the customer that describes the item to be returned. Maximum length: 300 characters.
  """
  customerNote: String

  """
  The fulfillment line item from which items are returned.
  """
  fulfillmentLineItem: FulfillmentLineItem!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The quantity being returned.
  """
  quantity: Int!

  """
  The quantity that can be refunded.
  """
  refundableQuantity: Int!

  """
  The quantity that was refunded.
  """
  refundedQuantity: Int!

  """
  The restocking fee for the return line item.
  """
  restockingFee: RestockingFee

  """
  The reason for returning the item.
  """
  returnReason: ReturnReason!

  """
  Additional information about the reason for the return. Maximum length: 255 characters.
  """
  returnReasonNote: String!

  """
  The total weight of the item.
  """
  totalWeight: Weight

  """
  The total line price after all discounts on the line item, including both line
  item level discounts and code-based line item discounts, are applied.
  """
  withCodeDiscountedTotalPriceSet: MoneyBag!
}

"""
An object with an ID field to support global identification, in accordance with the
[Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
"""
interface ReturnLineItemType implements Node {
  """
  A note from the customer that describes the item to be returned. Maximum length: 300 characters.
  """
  customerNote: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The quantity being returned.
  """
  quantity: Int!

  """
  The quantity that can be refunded.
  """
  refundableQuantity: Int!

  """
  The quantity that was refunded.
  """
  refundedQuantity: Int!

  """
  The reason for returning the item.
  """
  returnReason: ReturnReason!

  """
  Additional information about the reason for the return. Maximum length: 255 characters.
  """
  returnReasonNote: String!
}

"""
An auto-generated type for paginating through multiple ReturnLineItemTypes.
"""
type ReturnLineItemTypeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ReturnLineItemTypeEdge!]!

  """
  A list of nodes that are contained in ReturnLineItemTypeEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ReturnLineItemType!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ReturnLineItemType and a cursor during pagination.
"""
type ReturnLineItemTypeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ReturnLineItemTypeEdge.
  """
  node: ReturnLineItemType!
}

"""
The reason for returning the return line item.
"""
enum ReturnReason {
  """
  The item is returned because the buyer did not like the color. Displays as **Color**.
  """
  COLOR

  """
  The item is returned because it is damaged or defective. Displays as **Damaged or defective**.
  """
  DEFECTIVE

  """
  The item is returned because it was not as described. Displays as **Item not as described**.
  """
  NOT_AS_DESCRIBED

  """
  The item is returned for another reason. For this value, a return reason note is also provided. Displays as **Other**.
  """
  OTHER

  """
  The item is returned because the size was too large. Displays as **Size was too large**.
  """
  SIZE_TOO_LARGE

  """
  The item is returned because the size was too small. Displays as **Size was too small**.
  """
  SIZE_TOO_SMALL

  """
  The item is returned because the buyer did not like the style. Displays as **Style**.
  """
  STYLE

  """
  The item is returned because of an unknown reason. Displays as **Unknown**.
  """
  UNKNOWN

  """
  The item is returned because the customer changed their mind. Displays as **Customer changed their mind**.
  """
  UNWANTED

  """
  The item is returned because the customer received the wrong one. Displays as **Received the wrong item**.
  """
  WRONG_ITEM
}

"""
The input fields for a return refund line item.
"""
input ReturnRefundLineItemInput {
  """
  The quantity of the return line item to be refunded.
  """
  quantity: Int!

  """
  The ID of the return line item to be refunded.
  """
  returnLineItemId: ID!
}

"""
A return shipping fee is a fee captured as part of a return to cover the costs of shipping the return.
"""
type ReturnShippingFee implements Fee {
  """
  The amount of the return shipping fee, in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The unique ID for the Fee.
  """
  id: ID!
}

"""
The input fields for a return shipping fee.
"""
input ReturnShippingFeeInput {
  """
  The value of the fee as a fixed amount in the presentment currency of the order.
  """
  amount: MoneyInput!
}

"""
The status of a return.
"""
enum ReturnStatus {
  """
  The return has been canceled.
  """
  CANCELED

  """
  The return has been completed.
  """
  CLOSED

  """
  The return was declined.
  """
  DECLINED

  """
  The return is in progress.
  """
  OPEN

  """
  The return was requested.
  """
  REQUESTED
}

"""
A returnable fulfillment, which is an order that has been delivered
and is eligible to be returned to the merchant.
"""
type ReturnableFulfillment implements Node {
  """
  The fulfillment that the returnable fulfillment refers to.
  """
  fulfillment: Fulfillment!

  """
  The unique ID of the Returnable Fulfillment.
  """
  id: ID!

  """
  The list of returnable fulfillment line items.
  """
  returnableFulfillmentLineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ReturnableFulfillmentLineItemConnection!
}

"""
An auto-generated type for paginating through multiple ReturnableFulfillments.
"""
type ReturnableFulfillmentConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ReturnableFulfillmentEdge!]!

  """
  A list of nodes that are contained in ReturnableFulfillmentEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ReturnableFulfillment!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ReturnableFulfillment and a cursor during pagination.
"""
type ReturnableFulfillmentEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ReturnableFulfillmentEdge.
  """
  node: ReturnableFulfillment!
}

"""
A returnable fulfillment line item.
"""
type ReturnableFulfillmentLineItem {
  """
  The fulfillment line item that can be returned.
  """
  fulfillmentLineItem: FulfillmentLineItem!

  """
  The quantity available to be returned.
  """
  quantity: Int!
}

"""
An auto-generated type for paginating through multiple ReturnableFulfillmentLineItems.
"""
type ReturnableFulfillmentLineItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ReturnableFulfillmentLineItemEdge!]!

  """
  A list of nodes that are contained in ReturnableFulfillmentLineItemEdge. You
  can fetch data about an individual node, or you can follow the edges to fetch
  data about a collection of related nodes. At each node, you specify the fields
  that you want to retrieve.
  """
  nodes: [ReturnableFulfillmentLineItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ReturnableFulfillmentLineItem and a cursor during pagination.
"""
type ReturnableFulfillmentLineItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ReturnableFulfillmentLineItemEdge.
  """
  node: ReturnableFulfillmentLineItem!
}

"""
A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.
For example, a buyer requests a return, and a merchant sends the buyer a shipping label.
The reverse delivery contains the context of the items sent back, how they're being sent back
(for example, a shipping label), and the current state of the delivery (tracking information).
"""
type ReverseDelivery implements Node {
  """
  The deliverable associated with the reverse delivery.
  """
  deliverable: ReverseDeliveryDeliverable

  """
  The ID of the reverse delivery.
  """
  id: ID!

  """
  The reverse delivery line items attached to the reverse delivery.
  """
  reverseDeliveryLineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ReverseDeliveryLineItemConnection!

  """
  The `ReverseFulfillmentOrder` associated with the reverse delivery.
  """
  reverseFulfillmentOrder: ReverseFulfillmentOrder!
}

"""
An auto-generated type for paginating through multiple ReverseDeliveries.
"""
type ReverseDeliveryConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ReverseDeliveryEdge!]!

  """
  A list of nodes that are contained in ReverseDeliveryEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ReverseDelivery!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
The delivery method and artifacts associated with a reverse delivery.
"""
union ReverseDeliveryDeliverable = ReverseDeliveryShippingDeliverable

"""
An auto-generated type which holds one ReverseDelivery and a cursor during pagination.
"""
type ReverseDeliveryEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ReverseDeliveryEdge.
  """
  node: ReverseDelivery!
}

"""
The return label file information for a reverse delivery.
"""
type ReverseDeliveryLabelV2 {
  """
  The date and time when the reverse delivery label was created.
  """
  createdAt: DateTime!

  """
  A public link that can be used to download the label image.
  """
  publicFileUrl: URL

  """
  The date and time when the reverse delivery label was updated.
  """
  updatedAt: DateTime!
}

"""
The details about a reverse delivery line item.
"""
type ReverseDeliveryLineItem implements Node {
  """
  The dispositions of the item.
  """
  dispositions: [ReverseFulfillmentOrderDisposition!]!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The expected number of units.
  """
  quantity: Int!

  """
  The corresponding reverse fulfillment order line item.
  """
  reverseFulfillmentOrderLineItem: ReverseFulfillmentOrderLineItem!
}

"""
An auto-generated type for paginating through multiple ReverseDeliveryLineItems.
"""
type ReverseDeliveryLineItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ReverseDeliveryLineItemEdge!]!

  """
  A list of nodes that are contained in ReverseDeliveryLineItemEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [ReverseDeliveryLineItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ReverseDeliveryLineItem and a cursor during pagination.
"""
type ReverseDeliveryLineItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ReverseDeliveryLineItemEdge.
  """
  node: ReverseDeliveryLineItem!
}

"""
A reverse shipping deliverable that may include a label and tracking information.
"""
type ReverseDeliveryShippingDeliverable {
  """
  The return label attached to the reverse delivery.
  """
  label: ReverseDeliveryLabelV2

  """
  The information to track the reverse delivery.
  """
  tracking: ReverseDeliveryTrackingV2
}

"""
Represents the information used to track a reverse delivery.
"""
type ReverseDeliveryTrackingV2 {
  """
  The provider of the tracking information, in a human-readable format for display purposes.
  """
  carrierName: String

  """
  The identifier used by the courier to identify the shipment.
  """
  number: String

  """
  The URL to track a shipment.
  """
  url: URL
}

"""
A group of one or more items in a return that will be processed at a fulfillment service.
There can be more than one reverse fulfillment order for a return at a given location.
"""
type ReverseFulfillmentOrder implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The list of reverse fulfillment order line items for the reverse fulfillment order.
  """
  lineItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ReverseFulfillmentOrderLineItemConnection!

  """
  The order associated with the reverse fulfillment order.
  """
  order: Order

  """
  The list of reverse deliveries for the reverse fulfillment order.
  """
  reverseDeliveries(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ReverseDeliveryConnection!

  """
  The status of the reverse fulfillment order.
  """
  status: ReverseFulfillmentOrderStatus!

  """
  The current confirmation for the reverse fulfillment order from a third-party logistics service.
  If no third-party service is involved, then this value is `nil`.
  """
  thirdPartyConfirmation: ReverseFulfillmentOrderThirdPartyConfirmation
}

"""
An auto-generated type for paginating through multiple ReverseFulfillmentOrders.
"""
type ReverseFulfillmentOrderConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ReverseFulfillmentOrderEdge!]!

  """
  A list of nodes that are contained in ReverseFulfillmentOrderEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [ReverseFulfillmentOrder!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
The details of the arrangement of an item.
"""
type ReverseFulfillmentOrderDisposition implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The location where the disposition occurred.
  """
  location: Location

  """
  The number of disposed units.
  """
  quantity: Int!

  """
  The final arrangement of an item.
  """
  type: ReverseFulfillmentOrderDispositionType!
}

"""
The final arrangement of an item from a reverse fulfillment order.
"""
enum ReverseFulfillmentOrderDispositionType {
  """
  An item that was expected but absent.
  """
  MISSING

  """
  An item that wasn't restocked.
  """
  NOT_RESTOCKED

  """
  An item that requires further processing before being restocked or discarded.
  """
  PROCESSING_REQUIRED

  """
  An item that was restocked.
  """
  RESTOCKED
}

"""
An auto-generated type which holds one ReverseFulfillmentOrder and a cursor during pagination.
"""
type ReverseFulfillmentOrderEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ReverseFulfillmentOrderEdge.
  """
  node: ReverseFulfillmentOrder!
}

"""
The details about a reverse fulfillment order line item.
"""
type ReverseFulfillmentOrderLineItem implements Node {
  """
  The dispositions of the item.
  """
  dispositions: [ReverseFulfillmentOrderDisposition!]!

  """
  The corresponding fulfillment line item for a reverse fulfillment order line item.
  """
  fulfillmentLineItem: FulfillmentLineItem

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The total number of units to be processed.
  """
  totalQuantity: Int!
}

"""
An auto-generated type for paginating through multiple ReverseFulfillmentOrderLineItems.
"""
type ReverseFulfillmentOrderLineItemConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ReverseFulfillmentOrderLineItemEdge!]!

  """
  A list of nodes that are contained in ReverseFulfillmentOrderLineItemEdge. You
  can fetch data about an individual node, or you can follow the edges to fetch
  data about a collection of related nodes. At each node, you specify the fields
  that you want to retrieve.
  """
  nodes: [ReverseFulfillmentOrderLineItem!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ReverseFulfillmentOrderLineItem and a cursor during pagination.
"""
type ReverseFulfillmentOrderLineItemEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ReverseFulfillmentOrderLineItemEdge.
  """
  node: ReverseFulfillmentOrderLineItem!
}

"""
The status of a reverse fulfillment order.
"""
enum ReverseFulfillmentOrderStatus {
  """
  The reverse fulfillment order has been canceled.
  """
  CANCELED

  """
  The reverse fulfillment order has been completed.
  """
  CLOSED

  """
  The reverse fulfillment order is in progress.
  """
  OPEN
}

"""
The third-party confirmation of a reverse fulfillment order.
"""
type ReverseFulfillmentOrderThirdPartyConfirmation {
  """
  The status of the reverse fulfillment order third-party confirmation.
  """
  status: ReverseFulfillmentOrderThirdPartyConfirmationStatus!
}

"""
The status of a reverse fulfillment order third-party confirmation.
"""
enum ReverseFulfillmentOrderThirdPartyConfirmationStatus {
  """
  The reverse fulfillment order was accepted by the fulfillment service.
  """
  ACCEPTED

  """
  The reverse fulfillment order cancelation was accepted by the fulfillment service.
  """
  CANCEL_ACCEPTED

  """
  The reverse fulfillment order cancelation was rejected by the fulfillment service.
  """
  CANCEL_REJECTED

  """
  The reverse fulfillment order is awaiting acceptance by the fulfillment service.
  """
  PENDING_ACCEPTANCE

  """
  The reverse fulfillment order is awaiting cancelation by the fulfillment service.
  """
  PENDING_CANCELATION

  """
  The reverse fulfillment order was rejected by the fulfillment service.
  """
  REJECTED
}

"""
List of possible values for a RiskAssessment result.
"""
enum RiskAssessmentResult {
  """
  Indicates a high likelihood that the order is fraudulent.
  """
  HIGH

  """
  Indicates a low likelihood that the order is fraudulent.
  """
  LOW

  """
  Indicates a medium likelihood that the order is fraudulent.
  """
  MEDIUM

  """
  Indicates that the risk assessment will not provide a recommendation for the order.
  """
  NONE

  """
  Indicates that the risk assessment is still pending.
  """
  PENDING
}

"""
A risk fact belongs to a single risk assessment and serves to provide additional
context for an assessment. Risk facts are not necessarily tied to the result of
the recommendation.
"""
type RiskFact {
  """
  A description of the fact.
  """
  description: String!

  """
  Indicates whether the fact is a negative, neutral or positive contributor with regards to risk.
  """
  sentiment: RiskFactSentiment!
}

"""
List of possible values for a RiskFact sentiment.
"""
enum RiskFactSentiment {
  """
  A negative contributor that increases the risk.
  """
  NEGATIVE

  """
  A neutral contributor with regards to risk.
  """
  NEUTRAL

  """
  A positive contributor that lowers the risk.
  """
  POSITIVE
}

"""
A row count represents rows on background operation.
"""
type RowCount {
  """
  Estimated number of rows contained within this background operation.
  """
  count: Int!

  """
  Whether the operation exceeds max number of reportable rows.
  """
  exceedsMax: Boolean!
}

"""
SEO information.
"""
type SEO {
  """
  SEO Description.
  """
  description: String

  """
  SEO Title.
  """
  title: String
}

"""
An individual sale record associated with a sales agreement. Every money value
in an order's sales data is represented in the currency's smallest unit. When
amounts are divided across multiple line items, such as taxes or order
discounts, the amounts might not divide evenly across all of the line items on
the order. To address this, the remaining currency units that couldn't be
divided evenly are allocated one at a time, starting with the first line item,
until they are all accounted for. In aggregate, the values sum up correctly. In
isolation, one line item might have a different tax or discount amount than
another line item of the same price, before taxes and discounts. This is because
the amount could not be divided evenly across the items. The allocation of
currency units across line items is immutable. After they are allocated,
currency units are never reallocated or redistributed among the line items.
"""
interface Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique ID for the sale.
  """
  id: ID!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
The possible order action types for a sale.
"""
enum SaleActionType {
  """
  A purchase or charge.
  """
  ORDER

  """
  A removal or return.
  """
  RETURN

  """
  An unknown order action. Represents new actions that may be added in future versions.
  """
  UNKNOWN

  """
  A change to the price, taxes, or discounts for a prior purchase.
  """
  UPDATE
}

"""
The additional fee details for a line item.
"""
type SaleAdditionalFee implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the additional fee.
  """
  name: String!

  """
  The price of the additional fee.
  """
  price: MoneyBag!

  """
  A list of taxes charged on the additional fee.
  """
  taxLines: [TaxLine!]!
}

"""
An auto-generated type for paginating through multiple Sales.
"""
type SaleConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SaleEdge!]!

  """
  A list of nodes that are contained in SaleEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Sale!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Sale and a cursor during pagination.
"""
type SaleEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SaleEdge.
  """
  node: Sale!
}

"""
The possible line types for a sale record. One of the possible order line types
for a sale is an adjustment. Sales adjustments occur when a refund is issued for
a line item that is either more or less than the total value of the line item.
Examples are restocking fees and goodwill payments. When this happens, Shopify
produces a sales agreement with sale records for each line item that is returned
or refunded and an additional sale record for the adjustment (for example, a
restocking fee). The sales records for the returned or refunded items represent
the reversal of the original line item sale value. The additional adjustment
sale record represents the difference between the original total value of all
line items that were refunded, and the actual amount refunded.
"""
enum SaleLineType {
  """
  An additional fee.
  """
  ADDITIONAL_FEE

  """
  A sale adjustment.
  """
  ADJUSTMENT

  """
  A duty charge.
  """
  DUTY

  """
  A fee charge.
  """
  FEE

  """
  A gift card.
  """
  GIFT_CARD

  """
  A product purchased, returned or exchanged.
  """
  PRODUCT

  """
  A shipping cost.
  """
  SHIPPING

  """
  A tip added by the customer.
  """
  TIP

  """
  An unknown sale line. Represents new types that may be added in future versions.
  """
  UNKNOWN
}

"""
The tax allocated to a sale from a single tax line.
"""
type SaleTax {
  """
  The portion of the total tax amount on the related sale that comes from the associated tax line.
  """
  amount: MoneyBag!

  """
  The unique ID for the sale tax.
  """
  id: ID!

  """
  The tax line associated with the sale.
  """
  taxLine: TaxLine!
}

"""
A contract between a merchant and a customer to do business. Shopify creates a
sales agreement whenever an order is placed, edited, or refunded. A sales
agreement has one or more sales records, which provide itemized details about
the initial agreement or subsequent changes made to the order. For example, when
a customer places an order, Shopify creates the order, generates a sales
agreement, and records a sale for each line item purchased in the order. A sale
record is specific to a type of order line. Order lines can represent different
things such as a purchased product, a tip added by a customer, shipping costs
collected at checkout, and more.
"""
interface SalesAgreement {
  """
  The application that created the agreement.
  """
  app: App

  """
  The date and time at which the agreement occured.
  """
  happenedAt: DateTime!

  """
  The unique ID for the agreement.
  """
  id: ID!

  """
  The reason the agremeent was created.
  """
  reason: OrderActionType!

  """
  The sales associated with the agreement.
  """
  sales(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SaleConnection!

  """
  The staff member associated with the agreement.
  """
  user: StaffMember
}

"""
An auto-generated type for paginating through multiple SalesAgreements.
"""
type SalesAgreementConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SalesAgreementEdge!]!

  """
  A list of nodes that are contained in SalesAgreementEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [SalesAgreement!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SalesAgreement and a cursor during pagination.
"""
type SalesAgreementEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SalesAgreementEdge.
  """
  node: SalesAgreement!
}

"""
A saved search is a representation of a search query saved in the admin.
"""
type SavedSearch implements LegacyInteroperability & Node {
  """
  The filters of a saved search.
  """
  filters: [SearchFilter!]!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The name of a saved search.
  """
  name: String!

  """
  The query string of a saved search. This includes search terms and filters.
  """
  query: String!

  """
  The type of resource this saved search is searching in.
  """
  resourceType: SearchResultType!

  """
  The search terms of a saved search.
  """
  searchTerms: String!
}

"""
An auto-generated type for paginating through multiple SavedSearches.
"""
type SavedSearchConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SavedSearchEdge!]!

  """
  A list of nodes that are contained in SavedSearchEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [SavedSearch!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SavedSearch and a cursor during pagination.
"""
type SavedSearchEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SavedSearchEdge.
  """
  node: SavedSearch!
}

"""
The set of valid sort keys for the ScheduledChange query.
"""
enum ScheduledChangeSortKeys {
  """
  Sort by the `expected_at` value.
  """
  EXPECTED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Script discount applications capture the intentions of a discount that
was created by a Shopify Script for an order's line item or shipping line.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type ScriptDiscountApplication implements DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The description of the application as defined by the Script.
  """
  description: String! @deprecated(reason: "Use `title` instead.")

  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!

  """
  How the discount amount is distributed on the discounted lines.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  Whether the discount is applied on line items or shipping lines.
  """
  targetType: DiscountApplicationTargetType!

  """
  The title of the application as defined by the Script.
  """
  title: String!

  """
  The value of the discount application.
  """
  value: PricingValue!
}

"""
<div class="note"><h4>Theme app extensions</h4>
  <p>Your app might not pass App Store review if it uses script tags instead of
theme app extensions. All new apps, and apps that integrate with Online Store
2.0 themes, should use theme app extensions, such as app blocks or app embed
blocks. Script tags are an alternative you can use with only vintage themes. <a
href="/apps/online-store#what-integration-method-should-i-use"
target="_blank">Learn more</a>.</p></div>

<div class="note"><h4>Script tag deprecation</h4>
  <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a
href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade
to Checkout Extensibility</a> before this date. <a
href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work
alongside Checkout Extensibility until August 28, 2025.</p></div>


A script tag represents remote JavaScript code that is loaded into the pages of
a shop's storefront or the **Order status** page of checkout.
"""
type ScriptTag implements LegacyInteroperability & Node {
  """
  Whether the Shopify CDN can cache and serve the script tag.
  If `true`, then the script will be cached and served by the CDN.
  The cache expires 15 minutes after the script tag is successfully returned.
  If `false`, then the script will be served as is.
  """
  cache: Boolean!

  """
  The date and time when the script tag was created.
  """
  createdAt: DateTime!

  """
  The page or pages on the online store that the script should be included.
  """
  displayScope: ScriptTagDisplayScope!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The URL to the remote script.
  """
  src: URL!

  """
  The date and time when the script tag was last updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple ScriptTags.
"""
type ScriptTagConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ScriptTagEdge!]!

  """
  A list of nodes that are contained in ScriptTagEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ScriptTag!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
The page or pages on the online store where the script should be included.
"""
enum ScriptTagDisplayScope {
  """
  Include the script on both the web storefront and the <b>Order status</b> page.
  """
  ALL @deprecated(reason: "`ALL` is deprecated. Use `ONLINE_STORE` instead.\n")

  """
  Include the script only on the web storefront.
  """
  ONLINE_STORE

  """
  Include the script only on the <b>Order status</b> page.
  """
  ORDER_STATUS @deprecated(reason: "`ORDER_STATUS` is deprecated and unavailable as a mutation input as of <b>2025-01</b>.\n")
}

"""
An auto-generated type which holds one ScriptTag and a cursor during pagination.
"""
type ScriptTagEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ScriptTagEdge.
  """
  node: ScriptTag!
}

"""
A filter in a search query represented by a key value pair.
"""
type SearchFilter {
  """
  The key of the search filter.
  """
  key: String!

  """
  The value of the search filter.
  """
  value: String!
}

"""
A list of search filters along with their specific options in value and label pair for filtering.
"""
type SearchFilterOptions {
  """
  A list of options that can be use to filter product availability.
  """
  productAvailability: [FilterOption!]!
}

"""
Represents an individual result returned from a search.
"""
type SearchResult {
  """
  Returns the search result description text.
  """
  description: String

  """
  Returns the Image resource presented to accompany a search result.
  """
  image: Image

  """
  Returns the ID of the resource returned in the search result.
  """
  reference: Node!

  """
  Returns the resource title.
  """
  title: String!

  """
  Returns the absolute URL to the resource in the search result.
  """
  url: URL!
}

"""
The connection type for SearchResult.
"""
type SearchResultConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SearchResultEdge!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  resultsAfterCount: Int! @deprecated(reason: "The provided information is not accurate.")
}

"""
An auto-generated type which holds one SearchResult and a cursor during pagination.
"""
type SearchResultEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SearchResultEdge.
  """
  node: SearchResult!
}

"""
Specifies the type of resources to be returned from a search.
"""
enum SearchResultType {
  """
  An article.
  """
  ARTICLE

  """
  A balance transaction.
  """
  BALANCE_TRANSACTION

  """
  A blog.
  """
  BLOG
  COLLECTION
  CUSTOMER

  """
  A code discount redeem code.
  """
  DISCOUNT_REDEEM_CODE
  DRAFT_ORDER

  """
  A file.
  """
  FILE
  ORDER

  """
  A page.
  """
  PAGE
  PRICE_RULE
  PRODUCT

  """
  A URL redirect.
  """
  URL_REDIRECT
}

"""
A dynamic collection of customers based on specific criteria.
"""
type Segment implements Node {
  """
  The date and time when the segment was added to the store.
  """
  creationDate: DateTime!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The date and time when the segment was last updated.
  """
  lastEditDate: DateTime!

  """
  The name of the segment.
  """
  name: String!

  """
  A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers.
  """
  query: String!
}

"""
A filter that takes a value that's associated with an object. For example, the
`tags` field is associated with the
[`Customer`](/api/admin-graphql/latest/objects/Customer) object.
"""
type SegmentAssociationFilter implements SegmentFilter {
  """
  The localized name of the filter.
  """
  localizedName: String!

  """
  Whether a file can have multiple values for a single customer.
  """
  multiValue: Boolean!

  """
  The query name of the filter.
  """
  queryName: String!
}

"""
The statistics of a given attribute.
"""
type SegmentAttributeStatistics {
  """
  The average of a given attribute.
  """
  average: Float!

  """
  The sum of a given attribute.
  """
  sum: Float!
}

"""
A filter with a Boolean value that's been added to a segment query.
"""
type SegmentBooleanFilter implements SegmentFilter {
  """
  The localized name of the filter.
  """
  localizedName: String!

  """
  Whether a file can have multiple values for a single customer.
  """
  multiValue: Boolean!

  """
  The query name of the filter.
  """
  queryName: String!
}

"""
An auto-generated type for paginating through multiple Segments.
"""
type SegmentConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SegmentEdge!]!

  """
  A list of nodes that are contained in SegmentEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [Segment!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
A filter with a date value that's been added to a segment query.
"""
type SegmentDateFilter implements SegmentFilter {
  """
  The localized name of the filter.
  """
  localizedName: String!

  """
  Whether a file can have multiple values for a single customer.
  """
  multiValue: Boolean!

  """
  The query name of the filter.
  """
  queryName: String!
}

"""
An auto-generated type which holds one Segment and a cursor during pagination.
"""
type SegmentEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SegmentEdge.
  """
  node: Segment!
}

"""
A filter with a set of possible values that's been added to a segment query.
"""
type SegmentEnumFilter implements SegmentFilter {
  """
  The localized name of the filter.
  """
  localizedName: String!

  """
  Whether a file can have multiple values for a single customer.
  """
  multiValue: Boolean!

  """
  The query name of the filter.
  """
  queryName: String!
}

"""
A filter that's used to segment customers based on the date that an event
occured. For example, the `product_bought` event filter allows you to segment
customers based on what products they've bought.
"""
type SegmentEventFilter implements SegmentFilter {
  """
  The localized name of the filter.
  """
  localizedName: String!

  """
  Whether a file can have multiple values for a single customer.
  """
  multiValue: Boolean!

  """
  The parameters for an event segment filter.
  """
  parameters: [SegmentEventFilterParameter!]!

  """
  The query name of the filter.
  """
  queryName: String!

  """
  The return value type for an event segment filter.
  """
  returnValueType: String!
}

"""
The parameters for an event segment filter.
"""
type SegmentEventFilterParameter {
  """
  Whether the parameter accepts a list of values.
  """
  acceptsMultipleValues: Boolean!

  """
  The localized description of the parameter.
  """
  localizedDescription: String!

  """
  The localized name of the parameter.
  """
  localizedName: String!

  """
  Whether the parameter is optional.
  """
  optional: Boolean!

  """
  The type of the parameter.
  """
  parameterType: String!

  """
  The query name of the parameter.
  """
  queryName: String!
}

"""
The filters used in segment queries associated with a shop.
"""
interface SegmentFilter {
  """
  The localized name of the filter.
  """
  localizedName: String!

  """
  Whether a file can have multiple values for a single customer.
  """
  multiValue: Boolean!

  """
  The query name of the filter.
  """
  queryName: String!
}

"""
An auto-generated type for paginating through multiple SegmentFilters.
"""
type SegmentFilterConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SegmentFilterEdge!]!

  """
  A list of nodes that are contained in SegmentFilterEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [SegmentFilter!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SegmentFilter and a cursor during pagination.
"""
type SegmentFilterEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SegmentFilterEdge.
  """
  node: SegmentFilter!
}

"""
A filter with a double-precision, floating-point value that's been added to a segment query.
"""
type SegmentFloatFilter implements SegmentFilter {
  """
  The localized name of the filter.
  """
  localizedName: String!

  """
  Whether a file can have multiple values for a single customer.
  """
  multiValue: Boolean!

  """
  The query name of the filter.
  """
  queryName: String!
}

"""
A filter with an integer that's been added to a segment query.
"""
type SegmentIntegerFilter implements SegmentFilter {
  """
  The localized name of the filter.
  """
  localizedName: String!

  """
  Whether a file can have multiple values for a single customer.
  """
  multiValue: Boolean!

  """
  The query name of the filter.
  """
  queryName: String!
}

"""
The response type for the `segmentMembership` object.
"""
type SegmentMembership {
  """
  A Boolean that indicates whether or not the customer in the query is a member
  of the segment, which is identified using the `segmentId`.
  """
  isMember: Boolean!

  """
  A `segmentId` that's used for testing membership.
  """
  segmentId: ID!
}

"""
A list of maps that contain `segmentId` IDs and `isMember` Booleans. The maps represent segment memberships.
"""
type SegmentMembershipResponse {
  """
  The membership status for the given list of segments.
  """
  memberships: [SegmentMembership!]!
}

"""
A segment and its corresponding saved search.
For example, you can use `SegmentMigration` to retrieve the segment ID that corresponds to a saved search ID.
"""
type SegmentMigration {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The ID of the saved search.
  """
  savedSearchId: ID!

  """
  The ID of the segment.
  """
  segmentId: ID
}

"""
An auto-generated type for paginating through multiple SegmentMigrations.
"""
type SegmentMigrationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SegmentMigrationEdge!]!

  """
  A list of nodes that are contained in SegmentMigrationEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [SegmentMigration!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SegmentMigration and a cursor during pagination.
"""
type SegmentMigrationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SegmentMigrationEdge.
  """
  node: SegmentMigration!
}

"""
The set of valid sort keys for the Segment query.
"""
enum SegmentSortKeys {
  """
  Sort by the `creation_date` value.
  """
  CREATION_DATE

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `last_edit_date` value.
  """
  LAST_EDIT_DATE

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The statistics of a given segment.
"""
type SegmentStatistics {
  """
  The statistics of a given attribute.
  """
  attributeStatistics(
    """
    The attribute that statistics are retrieved for.
    """
    attributeName: String!
  ): SegmentAttributeStatistics!
}

"""
A filter with a string that's been added to a segment query.
"""
type SegmentStringFilter implements SegmentFilter {
  """
  The localized name of the filter.
  """
  localizedName: String!

  """
  Whether a file can have multiple values for a single customer.
  """
  multiValue: Boolean!

  """
  The query name of the filter.
  """
  queryName: String!
}

"""
A list of suggested values associated with an individual segment. A
segment is a group of members, such as customers, that meet specific
criteria.
"""
type SegmentValue {
  """
  The localized version of the value's name. This name is displayed to the merchant.
  """
  localizedValue: String!

  """
  The name of the query associated with the suggestion.
  """
  queryName: String!
}

"""
An auto-generated type for paginating through multiple SegmentValues.
"""
type SegmentValueConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SegmentValueEdge!]!

  """
  A list of nodes that are contained in SegmentValueEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [SegmentValue!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SegmentValue and a cursor during pagination.
"""
type SegmentValueEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SegmentValueEdge.
  """
  node: SegmentValue!
}

"""
Properties used by customers to select a product variant.
Products can have multiple options, like different sizes or colors.
"""
type SelectedOption {
  """
  The product option’s name.
  """
  name: String!

  """
  The product option’s value object.
  """
  optionValue: ProductOptionValue!

  """
  The product option’s value.
  """
  value: String!
}

"""
Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
up these records if you need to restore them later.

For more information on selling plans, refer to
[*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
"""
type SellingPlan implements HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Node {
  """
  A selling plan policy which describes the recurring billing details.
  """
  billingPolicy: SellingPlanBillingPolicy!

  """
  The category used to classify the selling plan for reporting purposes.
  """
  category: SellingPlanCategory

  """
  The date and time when the selling plan was created.
  """
  createdAt: DateTime!

  """
  A selling plan policy which describes the delivery details.
  """
  deliveryPolicy: SellingPlanDeliveryPolicy!

  """
  Buyer facing string which describes the selling plan commitment.
  """
  description: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  When to reserve inventory for a selling plan.
  """
  inventoryPolicy: SellingPlanInventoryPolicy

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  A customer-facing description of the selling plan.

  If your store supports multiple currencies, then don't include
  country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This
  field won't be converted to reflect different currencies.
  """
  name: String!

  """
  The values of all options available on the selling plan. Selling plans are
  grouped together in Liquid when they're created by the same app, and have the
  same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!

  """
  Relative position of the selling plan for display. A lower position will be displayed before a higher position.
  """
  position: Int

  """
  Selling plan pricing details.
  """
  pricingPolicies: [SellingPlanPricingPolicy!]!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!
}

"""
Specifies the date when delivery or fulfillment is completed by a merchant for a given time cycle. You can also
define a cutoff for which customers are eligible to enter this cycle and the desired behavior for customers who
start their subscription inside the cutoff period.

Some example scenarios where anchors can be useful to implement advanced delivery behavior:
- A merchant starts fulfillment on a specific date every month.
- A merchant wants to bill the 1st of every quarter.
- A customer expects their delivery every Tuesday.

For more details, see [About Selling Plans](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans#anchors).
"""
type SellingPlanAnchor {
  """
  The cutoff day for the anchor. Specifies a buffer period before the anchor date for orders to be included in a
  delivery or fulfillment cycle.

  If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
  the days of the week according to ISO 8601, where 1 is Monday.

  If `type` is MONTHDAY, then the value must be between 1-31.

  If `type` is YEARDAY, then the value must be `null`.
  """
  cutoffDay: Int

  """
  The day of the anchor.

  If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
  the days of the week according to ISO 8601, where 1 is Monday.

  If `type` isn't WEEKDAY, then the value must be between 1-31.
  """
  day: Int!

  """
  The month of the anchor. If type is different than YEARDAY, then the value must
  be `null` or between 1-12.
  """
  month: Int

  """
  Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.
  """
  type: SellingPlanAnchorType!
}

"""
Represents the anchor type.
"""
enum SellingPlanAnchorType {
  """
  Which day of the month, between 1-31.
  """
  MONTHDAY

  """
  Which day of the week, between 1-7.
  """
  WEEKDAY

  """
  Which days of the month and year, month between 1-12, and day between 1-31.
  """
  YEARDAY
}

"""
Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
We recommend backing up these records if you need to restore them later.
"""
union SellingPlanBillingPolicy = SellingPlanFixedBillingPolicy | SellingPlanRecurringBillingPolicy

"""
The category of the selling plan. For the `OTHER` category,
         you must fill out our [request form](https://docs.google.com/forms/d/e/1FAIpQLSeU18Xmw0Q61V8wdH-dfGafFqIBfRchQKUO8WAF3yJTvgyyZQ/viewform),
         where we'll review your request for a new purchase option.
"""
enum SellingPlanCategory {
  """
  The selling plan is for anything not in one of the other categories.
  """
  OTHER

  """
  The selling plan is for pre-orders.
  """
  PRE_ORDER

  """
  The selling plan is for subscriptions.
  """
  SUBSCRIPTION

  """
  The selling plan is for try before you buy purchases.
  """
  TRY_BEFORE_YOU_BUY
}

"""
The amount charged at checkout when the full amount isn't charged at checkout.
"""
type SellingPlanCheckoutCharge {
  """
  The charge type for the checkout charge.
  """
  type: SellingPlanCheckoutChargeType!

  """
  The charge value for the checkout charge.
  """
  value: SellingPlanCheckoutChargeValue!
}

"""
The percentage value of the price used for checkout charge.
"""
type SellingPlanCheckoutChargePercentageValue {
  """
  The percentage value of the price used for checkout charge.
  """
  percentage: Float!
}

"""
The checkout charge when the full amount isn't charged at checkout.
"""
enum SellingPlanCheckoutChargeType {
  """
  The checkout charge is a percentage of the product or variant price.
  """
  PERCENTAGE

  """
  The checkout charge is a fixed price amount.
  """
  PRICE
}

"""
The portion of the price to be charged at checkout.
"""
union SellingPlanCheckoutChargeValue = MoneyV2 | SellingPlanCheckoutChargePercentageValue

"""
An auto-generated type for paginating through multiple SellingPlans.
"""
type SellingPlanConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SellingPlanEdge!]!

  """
  A list of nodes that are contained in SellingPlanEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [SellingPlan!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
We recommend backing up these records if you need to restore them later.
"""
union SellingPlanDeliveryPolicy = SellingPlanFixedDeliveryPolicy | SellingPlanRecurringDeliveryPolicy

"""
An auto-generated type which holds one SellingPlan and a cursor during pagination.
"""
type SellingPlanEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SellingPlanEdge.
  """
  node: SellingPlan!
}

"""
The fixed selling plan billing policy defines how much of the price of the product will be billed to customer
at checkout. If there is an outstanding balance, it determines when it will be paid.
"""
type SellingPlanFixedBillingPolicy {
  """
  The checkout charge when the full amount isn't charged at checkout.
  """
  checkoutCharge: SellingPlanCheckoutCharge!

  """
  The exact time when to capture the full payment.
  """
  remainingBalanceChargeExactTime: DateTime

  """
  The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration.
  """
  remainingBalanceChargeTimeAfterCheckout: String

  """
  When to capture payment for amount due.
  """
  remainingBalanceChargeTrigger: SellingPlanRemainingBalanceChargeTrigger!
}

"""
Represents a fixed selling plan delivery policy.
"""
type SellingPlanFixedDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  A buffer period for orders to be included in next fulfillment anchor.
  """
  cutoff: Int

  """
  The date and time when the fulfillment should trigger.
  """
  fulfillmentExactTime: DateTime

  """
  What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN.
  """
  fulfillmentTrigger: SellingPlanFulfillmentTrigger!

  """
  Whether the delivery policy is merchant or buyer-centric.
  Buyer-centric delivery policies state the time when the buyer will receive the goods.
  Merchant-centric delivery policies state the time when the fulfillment should be started.
  Currently, only merchant-centric delivery policies are supported.
  """
  intent: SellingPlanFixedDeliveryPolicyIntent!

  """
  The fulfillment or delivery behavior of the first fulfillment when the order
  is placed before the anchor. The default value for this field is `ASAP`.
  """
  preAnchorBehavior: SellingPlanFixedDeliveryPolicyPreAnchorBehavior!
}

"""
Possible intentions of a Delivery Policy.
"""
enum SellingPlanFixedDeliveryPolicyIntent {
  """
  A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
  """
  FULFILLMENT_BEGIN
}

"""
The fulfillment or delivery behavior of the first fulfillment when the orderis placed before the anchor.
"""
enum SellingPlanFixedDeliveryPolicyPreAnchorBehavior {
  """
  Orders placed can be fulfilled / delivered immediately. Orders placed inside a
  cutoff can be fulfilled / delivered at the next anchor.
  """
  ASAP

  """
  Orders placed can be fulfilled / delivered at the next anchor date.
  Orders placed inside a cutoff will skip the next anchor and can be fulfilled /
  delivered at the following anchor.
  """
  NEXT
}

"""
Represents the pricing policy of a subscription or deferred purchase option selling plan.
The selling plan fixed pricing policy works with the billing and delivery policy
to determine the final price. Discounts are divided among fulfillments.
For example, a subscription with a $10 discount and two deliveries will have a $5
discount applied to each delivery.
"""
type SellingPlanFixedPricingPolicy implements SellingPlanPricingPolicyBase {
  """
  The price adjustment type.
  """
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """
  The price adjustment value.
  """
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!

  """
  The date and time when the fixed selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

"""
Describes what triggers fulfillment.
"""
enum SellingPlanFulfillmentTrigger {
  """
  Use the anchor values to calculate fulfillment date.
  """
  ANCHOR

  """
  As soon as possible.
  """
  ASAP

  """
  At an exact time defined by the fulfillment_exact_time field.
  """
  EXACT_TIME

  """
  Unknown. Usually to be determined in the future.
  """
  UNKNOWN
}

"""
Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
and associated records (selling plans and policies) are deleted 48 hours after a merchant
uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
"""
type SellingPlanGroup implements HasPublishedTranslations & Node {
  """
  The ID for app, exposed in Liquid and product JSON.
  """
  appId: String

  """
  Whether the given product is directly associated to the selling plan group.
  """
  appliesToProduct(
    """
    The ID of the product.
    """
    productId: ID!
  ): Boolean!

  """
  Whether the given product variant is directly associated to the selling plan group.
  """
  appliesToProductVariant(
    """
    The ID of the product.
    """
    productVariantId: ID!
  ): Boolean!

  """
  Whether any of the product variants of the given product are associated to the selling plan group.
  """
  appliesToProductVariants(
    """
    The ID of the product.
    """
    productId: ID!
  ): Boolean!

  """
  The date and time when the selling plan group was created.
  """
  createdAt: DateTime!

  """
  The merchant-facing description of the selling plan group.
  """
  description: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The merchant-facing label of the selling plan group.
  """
  merchantCode: String!

  """
  The buyer-facing label of the selling plan group.
  """
  name: String!

  """
  The values of all options available on the selling plan group. Selling plans
  are grouped together in Liquid when they're created by the same app, and have
  the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!

  """
  The relative position of the selling plan group for display.
  """
  position: Int

  """
  Product variants associated to the selling plan group.
  """
  productVariants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filters the product variants by a product ID.
    """
    productId: ID

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductVariantConnection!

  """
  A count of product variants associated to the selling plan group.
  """
  productVariantsCount(
    """
    The ID of the product to scope the count to.
    """
    productId: ID
  ): Count

  """
  Products associated to the selling plan group.
  """
  products(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductConnection!

  """
  A count of products associated to the selling plan group.
  """
  productsCount: Count

  """
  Selling plans associated to the selling plan group.
  """
  sellingPlans(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SellingPlanConnection!

  """
  A summary of the policies associated to the selling plan group.
  """
  summary: String

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!
}

"""
An auto-generated type for paginating through multiple SellingPlanGroups.
"""
type SellingPlanGroupConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SellingPlanGroupEdge!]!

  """
  A list of nodes that are contained in SellingPlanGroupEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [SellingPlanGroup!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
"""
type SellingPlanGroupEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SellingPlanGroupEdge.
  """
  node: SellingPlanGroup!
}

"""
The set of valid sort keys for the SellingPlanGroup query.
"""
enum SellingPlanGroupSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `name` value.
  """
  NAME

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE

  """
  Sort by the `updated_at` value.
  """
  UPDATED_AT
}

"""
Represents valid selling plan interval.
"""
enum SellingPlanInterval {
  """
  Day interval.
  """
  DAY

  """
  Month interval.
  """
  MONTH

  """
  Week interval.
  """
  WEEK

  """
  Year interval.
  """
  YEAR
}

"""
The selling plan inventory policy.
"""
type SellingPlanInventoryPolicy {
  """
  When to reserve inventory for the order.
  """
  reserve: SellingPlanReserve!
}

"""
Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
to restore them later.
"""
union SellingPlanPricingPolicy = SellingPlanFixedPricingPolicy | SellingPlanRecurringPricingPolicy

"""
Represents a selling plan pricing policy adjustment type.
"""
enum SellingPlanPricingPolicyAdjustmentType {
  """
  Fixed amount off adjustment.
  """
  FIXED_AMOUNT

  """
  Percentage off adjustment.
  """
  PERCENTAGE

  """
  Price of the policy.
  """
  PRICE
}

"""
Represents a selling plan pricing policy adjustment value type.
"""
union SellingPlanPricingPolicyAdjustmentValue = MoneyV2 | SellingPlanPricingPolicyPercentageValue

"""
Represents selling plan pricing policy common fields.
"""
interface SellingPlanPricingPolicyBase {
  """
  The price adjustment type.
  """
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """
  The price adjustment value.
  """
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!
}

"""
The percentage value of a selling plan pricing policy percentage type.
"""
type SellingPlanPricingPolicyPercentageValue {
  """
  The percentage value.
  """
  percentage: Float!
}

"""
Represents a recurring selling plan billing policy.
"""
type SellingPlanRecurringBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  The date and time when the selling plan billing policy was created.
  """
  createdAt: DateTime!

  """
  The billing frequency, it can be either: day, week, month or year.
  """
  interval: SellingPlanInterval!

  """
  The number of intervals between billings.
  """
  intervalCount: Int!

  """
  Maximum number of billing iterations.
  """
  maxCycles: Int

  """
  Minimum number of billing iterations.
  """
  minCycles: Int
}

"""
Represents a recurring selling plan delivery policy.
"""
type SellingPlanRecurringDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  The date and time when the selling plan delivery policy was created.
  """
  createdAt: DateTime!

  """
  Number of days which represent a buffer period for orders to be included in a cycle.
  """
  cutoff: Int

  """
  Whether the delivery policy is merchant or buyer-centric.
  Buyer-centric delivery policies state the time when the buyer will receive the goods.
  Merchant-centric delivery policies state the time when the fulfillment should be started.
  Currently, only merchant-centric delivery policies are supported.
  """
  intent: SellingPlanRecurringDeliveryPolicyIntent!

  """
  The delivery frequency, it can be either: day, week, month or year.
  """
  interval: SellingPlanInterval!

  """
  The number of intervals between deliveries.
  """
  intervalCount: Int!

  """
  The fulfillment or delivery behavior of the first fulfillment when the order
  is placed before the anchor. The default value for this field is `ASAP`.
  """
  preAnchorBehavior: SellingPlanRecurringDeliveryPolicyPreAnchorBehavior!
}

"""
Whether the delivery policy is merchant or buyer-centric.
"""
enum SellingPlanRecurringDeliveryPolicyIntent {
  """
  A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
  """
  FULFILLMENT_BEGIN
}

"""
The fulfillment or delivery behaviors of the first fulfillment when the orderis placed before the anchor.
"""
enum SellingPlanRecurringDeliveryPolicyPreAnchorBehavior {
  """
  The orders placed can be fulfilled or delivered immediately. The orders placed
  inside a cutoff can be fulfilled or delivered at the next anchor.
  """
  ASAP

  """
  The orders placed can be fulfilled or delivered at the next anchor date.
  The orders placed inside a cutoff will skip the next anchor and can be fulfilled or
  delivered at the following anchor.
  """
  NEXT
}

"""
Represents a recurring selling plan pricing policy. It applies after the fixed
pricing policy. By using the afterCycle parameter, you can specify the cycle
when the recurring pricing policy comes into effect. Recurring pricing policies
are not available for deferred purchase options.
"""
type SellingPlanRecurringPricingPolicy implements SellingPlanPricingPolicyBase {
  """
  The price adjustment type.
  """
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """
  The price adjustment value.
  """
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!

  """
  Cycle after which this pricing policy applies.
  """
  afterCycle: Int

  """
  The date and time when the recurring selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

"""
When to capture the payment for the remaining amount due.
"""
enum SellingPlanRemainingBalanceChargeTrigger {
  """
  At an exact time defined by the remaining_balance_charge_exact_time field.
  """
  EXACT_TIME

  """
  When there's no remaining balance to be charged after checkout.
  """
  NO_REMAINING_BALANCE

  """
  After the duration defined by the remaining_balance_charge_time_after_checkout field.
  """
  TIME_AFTER_CHECKOUT
}

"""
When to reserve inventory for a selling plan.
"""
enum SellingPlanReserve {
  """
  Reserve inventory when order is fulfilled.
  """
  ON_FULFILLMENT

  """
  Reserve inventory at time of sale.
  """
  ON_SALE
}

"""
A server pixel stores configuration for streaming customer interactions to an EventBridge or PubSub endpoint.
"""
type ServerPixel implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The current state of this server pixel.
  """
  status: ServerPixelStatus

  """
  Address of the EventBridge or PubSub endpoint.
  """
  webhookEndpointAddress: String
}

"""
The current state of a server pixel.
"""
enum ServerPixelStatus {
  """
  This server pixel is connected: it will stream customer events to the endpoint if it is configured properly.
  """
  CONNECTED

  """
  This server pixel is disconnected: it does not stream events to the endpoint
  and an endpoint address has been added to the server pixel.
  """
  DISCONNECTED_CONFIGURED

  """
  This server pixel is disconnected and unconfigured: it does not stream events
  to the endpoint and no endpoint address had been added to the server pixel.
  """
  DISCONNECTED_UNCONFIGURED
}

"""
The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
that's used to control how discounts can be combined.
"""
enum ShippingDiscountClass {
  """
  Combined as a shipping discount.
  """
  SHIPPING
}

"""
Represents the shipping details that the customer chose for their order.
"""
type ShippingLine {
  """
  A reference to the carrier service that provided the rate.
  Present when the rate was computed by a third-party carrier service.
  """
  carrierIdentifier: String

  """
  A reference to the shipping method.
  """
  code: String

  """
  The current shipping price after applying refunds, after applying discounts.
  If the parent `order.taxesIncluded`` field is true, then this price includes
  taxes. Otherwise, this field is the pre-tax price.
  """
  currentDiscountedPriceSet: MoneyBag!

  """
  Whether the shipping line is custom or not.
  """
  custom: Boolean!

  """
  The general classification of the delivery method.
  """
  deliveryCategory: String

  """
  The discounts that have been allocated to the shipping line.
  """
  discountAllocations: [DiscountAllocation!]!

  """
  The pre-tax shipping price with discounts applied.
  As of API version 2024-07, this will be calculated including cart level discounts, such as the free shipping discount.
  """
  discountedPrice: MoneyV2! @deprecated(reason: "Use `discountedPriceSet` instead.")

  """
  The shipping price after applying discounts. If the parent order.taxesIncluded
  field is true, then this price includes taxes. If not, it's the pre-tax price.
  As of API version 2024-07, this will be calculated including cart level discounts, such as the free shipping discount.
  """
  discountedPriceSet: MoneyBag!

  """
  A globally-unique ID.
  """
  id: ID

  """
  Whether the shipping line has been removed.
  """
  isRemoved: Boolean!

  """
  The pre-tax shipping price without any discounts applied.
  """
  originalPrice: MoneyV2! @deprecated(reason: "Use `originalPriceSet` instead.")

  """
  The pre-tax shipping price without any discounts applied.
  """
  originalPriceSet: MoneyBag!

  """
  The phone number at the shipping address.
  """
  phone: String

  """
  Returns the price of the shipping line.
  """
  price: Money! @deprecated(reason: "Use `originalPriceSet` instead.")

  """
  The fulfillment service requested for the shipping method.
  Present if the shipping method requires processing by a third party fulfillment service.
  """
  requestedFulfillmentService: FulfillmentService @deprecated(reason: "requestedFulfillmentService is no longer in use. Order routing does not use the requestedFulfillmentService during order and fulfillment order creation.")

  """
  A unique identifier for the shipping rate. The format can change without notice and isn't meant to be shown to users.
  """
  shippingRateHandle: String

  """
  Returns the rate source for the shipping line.
  """
  source: String

  """
  The TaxLine objects connected to this shipping line.
  """
  taxLines: [TaxLine!]!

  """
  Returns the title of the shipping line.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple ShippingLines.
"""
type ShippingLineConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ShippingLineEdge!]!

  """
  A list of nodes that are contained in ShippingLineEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ShippingLine!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ShippingLine and a cursor during pagination.
"""
type ShippingLineEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ShippingLineEdge.
  """
  node: ShippingLine!
}

"""
A sale associated with a shipping charge.
"""
type ShippingLineSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique ID for the sale.
  """
  id: ID!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return.
  """
  shippingLine: ShippingLine

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
Represents the shipping costs refunded on the Refund.
"""
type ShippingRefund {
  """
  The monetary value of the shipping fees to be refunded.
  """
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The monetary value of the shipping fees to be refunded in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The maximum amount of shipping fees currently refundable.
  """
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead.")

  """
  The maximum amount of shipping fees currently refundable in shop and presentment currencies.
  """
  maximumRefundableSet: MoneyBag!

  """
  The monetary value of the tax allocated to shipping fees to be refunded.
  """
  tax: Money! @deprecated(reason: "Use `taxSet` instead.")

  """
  The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.
  """
  taxSet: MoneyBag!
}

"""
Represents a collection of general settings and information about the shop.
"""
type Shop implements HasMetafields & HasPublishedTranslations & Node {
  """
  Account owner information.
  """
  accountOwner: StaffMember!

  """
  A list of the shop's active alert messages that appear in the Shopify admin.
  """
  alerts: [ShopAlert!]!

  """
  A list of the shop's product categories. Limit: 1000 product categories.
  """
  allProductCategories: [ProductCategory!]! @deprecated(reason: "Deprecated in API version 2024-07. Use `allProductCategoriesList` instead.")

  """
  A list of the shop's product categories. Limit: 1000 product categories.
  """
  allProductCategoriesList: [TaxonomyCategory!]!

  """
  The token required to query the shop's reports or dashboards.
  """
  analyticsToken: String! @deprecated(reason: "Not supported anymore.")

  """
  The paginated list of fulfillment orders assigned to the shop locations owned by the app.

  Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations
  managed by
  [fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
  that are registered by the app.
  One app (api_client) can host multiple fulfillment services on a shop.
  Each fulfillment service manages a dedicated location on a shop.
  Assigned fulfillment orders can have associated
  [fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),
  or might currently not be requested to be fulfilled.

  The app must have `read_assigned_fulfillment_orders`
  [access scope](https://shopify.dev/docs/api/usage/access-scopes)
  to be able to retrieve fulfillment orders assigned to its locations.

  All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.
  Perform filtering with the `assignmentStatus` argument
  to receive only fulfillment orders that have been requested to be fulfilled.
  """
  assignedFulfillmentOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The assigment status of the fulfillment orders that should be returned.
    If `assignmentStatus` argument is not provided, then
    the query will return all assigned fulfillment orders,
    except those that have the `CLOSED` status.
    """
    assignmentStatus: FulfillmentOrderAssignmentStatus

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Returns fulfillment orders only for certain locations, specified by a list of location IDs.
    """
    locationIds: [ID!]

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: FulfillmentOrderSortKeys = ID
  ): FulfillmentOrderConnection! @deprecated(reason: "Use `QueryRoot.assignedFulfillmentOrders` instead. Details: https://shopify.dev/changelog/moving-the-shop-assignedfulfillmentorders-connection-to-queryroot")

  """
  The list of sales channels not currently installed on the shop.
  """
  availableChannelApps(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): AppConnection!

  """
  The shop's billing address information.
  """
  billingAddress: ShopAddress!

  """
  List of all channel definitions associated with a shop.
  """
  channelDefinitionsForInstalledChannels: [AvailableChannelDefinitionsByChannel!]!

  """
  List of the shop's active sales channels.
  """
  channels(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `QueryRoot.channels` instead.")

  """
  Specifies whether the shop supports checkouts via Checkout API.
  """
  checkoutApiSupported: Boolean!

  """
  List of the shop's collections.
  """
  collections(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | collection_type | string | | - `custom`<br/> - `smart` |
    | handle | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | product_id | id | Filter by collections containing a product by its ID. |
    | product_publication_status | string | Filter by the publishable status of
    the resource on a channel, such as the online store. The value is a
    composite of the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) and one of the valid values. | - `approved`<br/> -
    `rejected`<br/> - `needs_action`<br/> - `awaiting_review`<br/> -
    `published`<br/> - `demoted`<br/> - `scheduled`<br/> -
    `provisionally_published` | | - `publishable_status:189769876-approved` |
    | publishable_status | string | Filter by the publishable status of the
    resource on a channel, such as the online store. The value is a composite of
    either the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) or [channel `name`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel#field-name)
    and one of the valid values. | - `online_store_channel`<br/> -
    `published`<br/> - `unpublished`<br/> - `visible`<br/> - `unavailable`<br/>
    - `hidden`<br/> - `intended`<br/> - `visible` | | -
    `publishable_status:published`<br/> -
    `publishable_status:189769876:visible`<br/> -
    `publishable_status:pos:hidden` |
    | published_at | time | Filter by the date and time when the collection was published to the Online Store. |
    | published_status | string | Filter by the published status of the resource
    on a channel, such as the online store. | - `unset`<br/> - `pending`<br/> -
    `approved`<br/> - `not approved` | | - `published_status:approved` |
    | title | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CollectionSortKeys = ID
  ): CollectionConnection! @deprecated(reason: "Use `QueryRoot.collections` instead.")

  """
  The public-facing contact email address for the shop.
  Customers will use this email to communicate with the shop owner.
  """
  contactEmail: String!

  """
  Countries that have been defined in shipping zones for the shop.
  """
  countriesInShippingZones: CountriesInShippingZones!

  """
  The date and time when the shop was created.
  """
  createdAt: DateTime!

  """
  The three letter code for the currency that the shop sells in.
  """
  currencyCode: CurrencyCode!

  """
  How currencies are displayed on your store.
  """
  currencyFormats: CurrencyFormats!

  """
  The presentment currency settings for the shop excluding the shop's own currency.
  """
  currencySettings(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): CurrencySettingConnection!

  """
  Whether customer accounts are required, optional, or disabled for the shop.
  """
  customerAccounts: ShopCustomerAccountsSetting!

  """
  Information about the shop's customer accounts.
  """
  customerAccountsV2: CustomerAccountsV2!

  """
  A list of tags that have been added to customer accounts.
  """
  customerTags(
    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int!
  ): StringConnection!

  """
  Customer accounts associated to the shop.
  """
  customers(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | email | string | The customer's email address, used to communicate
    information about orders and for the purposes of email marketing campaigns.
    You can use a wildcard value to filter the query by customers who have an
    email address specified. | | | - `email:bo.wang@example.com`<br/> - `email:*` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | phone | string | The phone number of the customer, used to communicate
    information about orders and for the purposes of SMS marketing campaigns.
    You can use a wildcard value to filter the query by customers who have a
    phone number specified. | | | - `phone:+18005550100`<br/> - `phone:*` |
    | updated_at | time | The date and time, matching a whole day, when the
    customer's information was last updated. | | | -
    `updated_at:2024-01-01T00:00:00Z`<br/> - `updated_at:<now`<br/> -
    `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: CustomerSortKeys = ID
  ): CustomerConnection! @deprecated(reason: "Use `QueryRoot.customers` instead.")

  """
  The shop's meta description used in search engine results.
  """
  description: String

  """
  The domains configured for the shop.
  """
  domains: [Domain!]! @deprecated(reason: "Use `domainsPaginated` instead.")

  """
  A list of tags that have been added to draft orders.
  """
  draftOrderTags(
    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int!
  ): StringConnection!

  """
  List of saved draft orders on the shop.
  """
  draftOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time |
    | customer_id | id |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | source | string |
    | status | string |
    | tag | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: DraftOrderSortKeys = ID
  ): DraftOrderConnection! @deprecated(reason: "Use `QueryRoot.draftOrders` instead.")

  """
  The shop owner's email address.
  Shopify will use this email address to communicate with the shop owner.
  """
  email: String!

  """
  The presentment currencies enabled for the shop.
  """
  enabledPresentmentCurrencies: [CurrencyCode!]!

  """
  The set of features enabled for the shop.
  """
  features: ShopFeatures!

  """
  The paginated list of merchant-managed and third-party fulfillment orders.
  """
  fulfillmentOrders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    Whether to include closed fulfillment orders.
    """
    includeClosed: Boolean = false

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | assigned_location_id | id |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | status | string |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: FulfillmentOrderSortKeys = ID
  ): FulfillmentOrderConnection! @deprecated(reason: "Use `QueryRoot.fulfillmentOrders` instead.")

  """
  List of the shop's installed fulfillment services.
  """
  fulfillmentServices: [FulfillmentService!]!

  """
  The shop's time zone as defined by the IANA.
  """
  ianaTimezone: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  List of the shop's inventory items.
  """
  inventoryItems(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | created_at | time |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | sku | string | Filter by the inventory item [`sku`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | -
    `sku:XYZ-12345` |
    | updated_at | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): InventoryItemConnection! @deprecated(reason: "Use `QueryRoot.inventoryItems` instead.")

  """
  The number of pendings orders on the shop.
  Limited to a maximum of 10000.
  """
  limitedPendingOrderCount: LimitedPendingOrderCount! @deprecated(reason: "Use `QueryRoot.pendingOrdersCount` instead.")

  """
  List of active locations of the shop.
  """
  locations(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    Whether to include the locations that are deactivated.
    """
    includeInactive: Boolean = false

    """
    Whether to include the legacy locations of fulfillment services.
    """
    includeLegacy: Boolean = false

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | active | string |
    | address1 | string |
    | address2 | string |
    | city | string |
    | country | string |
    | created_at | time |
    | geolocated | boolean |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | legacy | boolean |
    | location_id | id |
    | name | string |
    | pickup_in_store | string | | - `enabled`<br/> - `disabled` |
    | province | string |
    | zip | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: LocationSortKeys = NAME
  ): LocationConnection! @deprecated(reason: "Use `QueryRoot.locations` instead.")

  """
  Whether SMS marketing has been enabled on the shop's checkout configuration settings.
  """
  marketingSmsConsentEnabledAtCheckout: Boolean!

  """
  The approval signals for a shop to support onboarding to channel apps.
  """
  merchantApprovalSignals: MerchantApprovalSignals

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The shop's .myshopify.com domain name.
  """
  myshopifyDomain: String!

  """
  The shop's name.
  """
  name: String!

  """
  The shop's settings related to navigation.
  """
  navigationSettings: [NavigationItem!]!

  """
  The prefix that appears before order numbers.
  """
  orderNumberFormatPrefix: String!

  """
  The suffix that appears after order numbers.
  """
  orderNumberFormatSuffix: String!

  """
  A list of tags that have been added to orders.
  """
  orderTags(
    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int!

    """
    Sort type.
    """
    sort: ShopTagSort = ALPHABETICAL
  ): StringConnection!

  """
  A list of the shop's orders.
  """
  orders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | cart_token | string | Filter by the cart token's unique value, which
    references the cart that's associated with an order. | | | -
    `cart_token:abc123` |
    | channel | string | Filter by the channel information [`handle`](https://shopify.dev/api/admin-graphql/latest/objects/ChannelInformation#field-channeldefinition)
    (`ChannelInformation.channelDefinition.handle`) field. | | | -
    `channel:web`<br/> - `channel:web,pos` |
    | channel_id | id | Filter by the channel [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Channel#field-id)
    field. | | | - `channel_id:123` |
    | chargeback_status | string | Filter by the order's chargeback status. A
    chargeback occurs when a customer questions the legitimacy of a charge with
    their financial institution. | - `accepted`<br/> - `charge_refunded`<br/> -
    `lost`<br/> - `needs_response`<br/> - `under_review`<br/> - `won` | | -
    `chargeback_status:accepted` |
    | checkout_token | string | Filter by the checkout token's unique value,
    which references the checkout that's associated with an order. | | | -
    `checkout_token:abc123` |
    | confirmation_number | string | Filter by the randomly generated
    alpha-numeric identifier for an order that can be displayed to the customer
    instead of the sequential order name. This value isn't guaranteed to be
    unique. | | | - `confirmation_number:ABC123` |
    | created_at | time | Filter by the date and time when the order was created
    in Shopify's system. | | | - `created_at:2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | credit_card_last4 | string | Filter by the last four digits of the credit
    card that was used to pay for the order. | | | - `credit_card_last4:1234` |
    | customer_id | id | Filter orders by the customer [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Customer#field-id)
    field. | | | - `customer_id:123` |
    | delivery_method | string | Filter by the delivery [`methodType`](https://shopify.dev/api/admin-graphql/2024-07/objects/DeliveryMethod#field-methodtype)
    field. | - `shipping`<br/> - `pick-up`<br/> - `retail`<br/> - `local`<br/> -
    `pickup-point`<br/> - `none` | | - `delivery_method:shipping` |
    | discount_code | string | Filter by the case-insensitive discount code that
    was applied to the order at checkout. Maximum characters: 255. | | | -
    `discount_code:ABC123` |
    | email | string | Filter by the email address that's associated with the order. | | | - `email:example@shopify.com` |
    | financial_status | string | Filter by the order [`displayFinancialStatus`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-displayfinancialstatus)
    field. | - `paid`<br/> - `pending`<br/> - `authorized`<br/> -
    `partially_paid`<br/> - `partially_refunded`<br/> - `refunded`<br/> -
    `voided`<br/> - `expired` | | - `financial_status:authorized` |
    | fraud_protection_level | string | Filter by the level of fraud protection
    that's applied to the order. | - `fully_protected`<br/> -
    `partially_protected`<br/> - `not_protected`<br/> - `pending`<br/> -
    `not_eligible`<br/> - `not_available` | | -
    `fraud_protection_level:fully_protected` |
    | fulfillment_location_id | id | Filter by the fulfillment location [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment#field-location)
    (`Fulfillment.location.id`) field. | | | - `fulfillment_location_id:123` |
    | fulfillment_status | string | Filter by the order's fulfillment status. |
    - `unshipped`<br/> - `shipped`<br/> - `fulfilled`<br/> - `partial`<br/> -
    `scheduled`<br/> - `on_hold`<br/> - `unfulfilled`<br/> - `request_declined`
    | | - `fulfillment_status:fulfilled` |
    | gateway | string | Filter by the order [`paymentGatewayNames`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-paymentgatewaynames)
    field. | | | - `gateway:shopify_payments` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | location_id | id | Filter by the ID of the location that's associated with the order. | | | - `location_id:123` |
    | name | string | Filter by the order [`name`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-name)
    field. | | | - `name:1001-A` |
    | payment_id | string | Filter by the ID of the payment that's associated with the order. | | | - `payment_id:abc123` |
    | payment_provider_id | id | Filter by the ID of the payment provider that's
    associated with the order. | | | - `payment_provider_id:123` |
    | po_number | string | Filter by the order [`poNumber`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-ponumber)
    field. | | | - `po_number:P01001` |
    | processed_at | time | Filter by the order [`processedAt`](https://shopify.dev/api/admin-graphql/latest/objects/Order#field-processedat)
    field. | | | - `processed_at:2021-01-01T00:00:00Z` |
    | reference_location_id | id | Filter by the ID of a location that's
    associated with the order, such as locations from fulfillments, refunds, or
    the shop's primary location. | | | - `reference_location_id:123` |
    | return_status | string | Filter by the order's return status. | -
    `return_requested`<br/> - `in_progress`<br/> - `inspection_complete`<br/> -
    `returned`<br/> - `return_failed`<br/> - `no_return` | | -
    `return_status:in_progress` |
    | risk_level | string | Filter by the order risk assessment [`riskLevel`](https://shopify.dev/api/admin-graphql/latest/objects/OrderRiskAssessment#field-risklevel)
    field. | - `high`<br/> - `medium`<br/> - `low`<br/> - `none`<br/> -
    `pending` | | - `risk_level:high` |
    | sales_channel | string | Filter by the sales channel that the order is
    attributed to. | | | - `sales_channel: some_sales_channel` |
    | sku | string | Filter by the product variant [`sku`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | - `sku:ABC123` |
    | source_identifier | string | Filter by the ID of the order placed on the
    originating platform, such as a unique POS or third-party identifier. This
    value doesn't correspond to the Shopify ID that's generated from a completed
    draft order. | | | - `source_identifier:1234-12-1000` |
    | source_name | string | Filter by the name of the originating platform
    that's associated with the checkout for the order. | | | -
    `source_name:web`<br/> - `source_name:shopify_draft_order` |
    | status | string | Filter by the order status. | - `open`<br/> -
    `closed`<br/> - `cancelled`<br/> - `not_closed` | | - `status:open` |
    | subtotal_line_items_quantity | string |
    | tag | string | Filter objects by the `tag` field. | | | - `tag:my_tag` |
    | tag_not | string | Filter by objects that don’t have the specified tag. | | | - `tag_not:my_tag` |
    | test | boolean | Filter by test orders. Test orders are made using the [Shopify Bogus
    Gateway](https://help.shopify.com/manual/checkout-settings/test-orders) or a
    payment provider with test mode enabled. | | | - `test:true` |
    | updated_at | time | Filter by the date and time when the order was last
    updated in Shopify's system. | | | - `updated_at:2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: OrderSortKeys = PROCESSED_AT
  ): OrderConnection! @deprecated(reason: "Use `QueryRoot.orders` instead.")

  """
  The shop's settings related to payments.
  """
  paymentSettings: PaymentSettings!

  """
  The shop's billing plan.
  """
  plan: ShopPlan!

  """
  The primary domain of the shop's online store.
  """
  primaryDomain: Domain!

  """
  The list of all images of all products for the shop.
  """
  productImages(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    Crops the image according to the specified region.
    """
    crop: CropRegion @deprecated(reason: "Use `Image.url(transform: { crop:})` instead.")

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `Image.url(transform: { maxHeight:})` instead.")

    """
    Image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `Image.url(transform: { maxWidth:})` instead.")

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1 @deprecated(reason: "Use `Image.url(transform: { scale:})` instead.")

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ProductImageSortKeys = CREATED_AT
  ): ImageConnection! @deprecated(reason: "Use `files` instead. See [filesQuery](https://shopify.dev/docs/api/admin-graphql/latest/queries/files) and its [query](https://shopify.dev/docs/api/admin-graphql/2024-01/queries/files#argument-query) argument for more information.")

  """
  A list of tags that have been added to products.
  """
  productTags(
    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int!
  ): StringConnection! @deprecated(reason: "Use `QueryRoot.productTags` instead.")

  """
  The list of types added to products.
  """
  productTypes(
    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int!
  ): StringConnection! @deprecated(reason: "Use `QueryRoot.productTypes` instead.")

  """
  List of the shop's product variants.
  """
  productVariants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | barcode | string | Filter by the product variant [`barcode`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-barcode)
    field. | | | - `barcode:ABC-abc-123` |
    | collection | string | Filter by the [ID of the collection](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-id)
    that the product variant belongs to. | | | - `collection:465903092033` |
    | delivery_profile_id | id | Filter by the product variant [delivery profile ID](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-deliveryprofile)
    (`ProductVariant.deliveryProfile.id`). | | | -
    `delivery_profile_id:108179161409` |
    | exclude_composite | boolean | Filter by product variants that aren't composites. | | | - `exclude_composite:true` |
    | exclude_variants_with_components | boolean | Filter by whether there are [components](https://shopify.dev/docs/apps/build/product-merchandising/bundles/add-product-fixed-bundle)
    that are associated with the product variants in a bundle. | | | -
    `exclude_variants_with_components:true` |
    | gift_card | boolean | Filter by the product [`isGiftCard`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-isgiftcard)
    field. | | | - `gift_card:true` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | inventory_quantity | integer | Filter by an aggregate of inventory across
    all locations where the product variant is stocked. | | | -
    `inventory_quantity:10` |
    | location_id | id | Filter by the [location
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Location#field-id)
    for the product variant. | | | - `location_id:88511152449` |
    | managed | boolean | Filter by whether there is fulfillment service
    tracking associated with the product variants. | | | - `managed:true` |
    | managed_by | string | Filter by the fulfillment service that tracks the
    number of items in stock for the product variant. | | | -
    `managed_by:shopify` |
    | option1 | string | Filter by a custom property that a shop owner uses to
    define product variants. | | | - `option1:small` |
    | option2 | string | Filter by a custom property that a shop owner uses to
    define product variants. | | | - `option2:medium` |
    | option3 | string | Filter by a custom property that a shop owner uses to
    define product variants. | | | - `option3:large` |
    | product_id | id | Filter by the product [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-id)
    field. | | | - `product_id:8474977763649` |
    | product_ids | string | Filter by a comma-separated list of product [IDs](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-id).
    | | | - `product_ids:8474977763649,8474977796417` |
    | product_publication_status | string | Filter by the publishable status of
    the resource on a channel, such as the online store. The value is a
    composite of the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) and one of the valid values. | - `approved`<br/> -
    `rejected`<br/> - `needs_action`<br/> - `awaiting_review`<br/> -
    `published`<br/> - `demoted`<br/> - `scheduled`<br/> -
    `provisionally_published` | | - `publishable_status:189769876-approved` |
    | product_status | string | Filter by a comma-separated list of product [statuses](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-status).
    | | | - `product_status:ACTIVE,DRAFT` |
    | product_type | string | Filter by the product type that's associated with
    the product variants. | | | - `product_type:snowboard` |
    | publishable_status | string | Filter by the publishable status of the
    resource on a channel, such as the online store. The value is a composite of
    either the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) or [channel `name`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel#field-name)
    and one of the valid values. | - `online_store_channel`<br/> -
    `published`<br/> - `unpublished`<br/> - `visible`<br/> - `unavailable`<br/>
    - `hidden`<br/> - `intended`<br/> - `visible` | | -
    `publishable_status:published`<br/> -
    `publishable_status:189769876:visible`<br/> -
    `publishable_status:pos:hidden` |
    | published_status | string | Filter by the published status of the resource
    on a channel, such as the online store. | - `unset`<br/> - `pending`<br/> -
    `approved`<br/> - `not approved` | | - `published_status:approved` |
    | requires_components | boolean | Filter by whether the product variant can
    only be purchased with components. [Learn more](https://shopify.dev/apps/build/product-merchandising/bundles#store-eligibility).
    | | | - `requires_components:true` |
    | sku | string | Filter by the product variant [`sku`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | -
    `sku:XYZ-12345` |
    | tag | string | Filter objects by the `tag` field. | | | - `tag:my_tag` |
    | tag_not | string | Filter by objects that don’t have the specified tag. | | | - `tag_not:my_tag` |
    | taxable | boolean | Filter by the product variant [`taxable`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-taxable)
    field. | | | - `taxable:false` |
    | title | string | Filter by the product variant [`title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-title)
    field. | | | - `title:ice` |
    | updated_at | time | Filter by date and time when the product variant was
    updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/> -
    `updated_at:<now`<br/> - `updated_at:<=2024` |
    | vendor | string | Filter by the origin or source of the product variant.
    Learn more about [vendors and managing vendor
    information](https://help.shopify.com/manual/products/managing-vendor-info).
    | | | - `vendor:Snowdevil`<br/> - `vendor:Snowdevil OR vendor:Icedevil` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ProductVariantSortKeys = ID
  ): ProductVariantConnection! @deprecated(reason: "Use `QueryRoot.productVariants` instead.")

  """
  The list of vendors added to products.
  """
  productVendors(
    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int!
  ): StringConnection! @deprecated(reason: "Use `QueryRoot.productVendors` instead.")

  """
  List of the shop's products.
  """
  products(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | barcode | string | Filter by the product variant [`barcode`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-barcode)
    field. | | | - `barcode:ABC-abc-1234` |
    | bundles | boolean | Filter by a [product
    bundle](https://shopify.dev/docs/apps/build/product-merchandising/bundles).
    A product bundle is a set of two or more related products, which are
    commonly offered at a discount. | | | - `bundles:true` |
    | category_id | string | Filter by the product [category ID](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-category)
    (`product.category.id`). A product category is the category of a product
    from [Shopify's Standard Product Taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
    | | | - `category_id:sg-4-17-2-17` |
    | collection_id | id | Filter by the collection [`id`](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-id)
    field. | | | - `collection_id:108179161409` |
    | combined_listing_role | string | Filter by the role of the product in a [combined listing](https://shopify.dev/apps/build/product-merchandising/combined-listings).
    | - `parent`<br/> - `child`<br/> - `no_role` | | -
    `combined_listing_role:parent` |
    | created_at | time | Filter by the date and time when the product was
    created. | | | - `created_at:>'2020-10-21T23:39:20Z'`<br/> -
    `created_at:<now`<br/> - `created_at:<='2024'` |
    | delivery_profile_id | id | Filter by the delivery profile [`id`](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryProfile#field-id)
    field. | | | - `delivery_profile_id:108179161409` |
    | error_feedback | string | Filter by products with publishing errors. |
    | gift_card | boolean | Filter by the product [`isGiftCard`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-isgiftcard)
    field. | | | - `gift_card:true` |
    | handle | string | Filter by a comma-separated list of product [handles](https://shopify.dev/api/admin-graphql/latest/queries/products#argument-query-filter-handle).
    | | | - `handle:the-minimal-snowboard` |
    | has_only_composites | boolean | Filter by products that have only
    composite variants. | | | - `has_only_composites:true` |
    | has_only_default_variant | boolean | Filter by products that have only a
    default variant. A default variant is the only variant if no other variants
    are specified. | | | - `has_only_default_variant:true` |
    | has_variant_with_components | boolean | Filter by products that have
    variants with associated components. | | | -
    `has_variant_with_components:true` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | inventory_total | integer | Filter by inventory count. | | | -
    `inventory_total:0`<br/> - `inventory_total:>150`<br/> -
    `inventory_total:>=200` |
    | is_price_reduced | boolean | Filter by products that have a reduced price.
    For more information, refer to the [`CollectionRule`](https://shopify.dev/api/admin-graphql/latest/objects/CollectionRule)
    object. | | | - `is_price_reduced:true` |
    | out_of_stock_somewhere | boolean | Filter by products that are out of
    stock in at least one location. | | | - `out_of_stock_somewhere:true` |
    | price | bigdecimal | Filter by the product variant [`price`](https://shopify.dev/api/admin-graphql/latest/objects/Productvariant#field-price)
    field. | | | - `price:100.57` |
    | product_configuration_owner | string | Filter by the app
    [`id`](https://shopify.dev/api/admin-graphql/latest/objects/App#field-id)
    field. | | | - `product_configuration_owner:10001` |
    | product_publication_status | string | Filter by the publishable status of
    the resource on a channel, such as the online store. The value is a
    composite of the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) and one of the valid values. | - `approved`<br/> -
    `rejected`<br/> - `needs_action`<br/> - `awaiting_review`<br/> -
    `published`<br/> - `demoted`<br/> - `scheduled`<br/> -
    `provisionally_published` | | - `publishable_status:189769876-approved` |
    | product_type | string | Filter by a comma-separated list of [product
    types](https://help.shopify.com/manual/products/details/product-type). | | |
    - `product_type:snowboard` |
    | publication_ids | string | Filter by a comma-separated list of publication
    IDs that are associated with the product. | | | -
    `publication_ids:184111530305,184111694145` |
    | publishable_status | string | Filter by the publishable status of the
    resource on a channel, such as the online store. The value is a composite of
    either the [channel `app`
    ID](https://shopify.dev/api/admin-graphql/latest/objects/Channel#app-price)
    (`Channel.app.id`) or [channel `name`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel#field-name)
    and one of the valid values. | - `online_store_channel`<br/> -
    `published`<br/> - `unpublished`<br/> - `visible`<br/> - `unavailable`<br/>
    - `hidden`<br/> - `intended`<br/> - `visible` | | -
    `publishable_status:published`<br/> -
    `publishable_status:189769876:visible`<br/> -
    `publishable_status:pos:hidden` |
    | published_at | time | Filter by the date and time when the product was
    published to the online store and other sales channels. | | | -
    `published_at:>2020-10-21T23:39:20Z`<br/> - `published_at:<now`<br/> -
    `published_at:<=2024` |
    | published_status | string | Filter by the published status of the resource
    on a channel, such as the online store. | - `unset`<br/> - `pending`<br/> -
    `approved`<br/> - `not approved` | | - `published_status:approved` |
    | sku | string | Filter by the product variant [`sku`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-sku)
    field. [Learn more about
    SKUs](https://help.shopify.com/manual/products/details/sku). | | | -
    `sku:XYZ-12345` |
    | status | string | Filter by a comma-separated list of statuses. You can
    use statuses to manage inventory. Shopify only displays products with an
    `ACTIVE` status in online stores, sales channels, and apps. | -
    `ACTIVE`<br/> - `ARCHIVED`<br/> - `DRAFT` | `ACTIVE` | -
    `status:ACTIVE,DRAFT` |
    | tag | string | Filter objects by the `tag` field. | | | - `tag:my_tag` |
    | tag_not | string | Filter by objects that don’t have the specified tag. | | | - `tag_not:my_tag` |
    | title | string | Filter by the product [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-title)
    field. | | | - `title:The Minimal Snowboard` |
    | updated_at | time | Filter by the date and time when the product was last
    updated. | | | - `updated_at:>'2020-10-21T23:39:20Z'`<br/> -
    `updated_at:<now`<br/> - `updated_at:<='2024'` |
    | variant_id | id | Filter by the product variant [`id`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-id)
    field. | | | - `variant_id:45779434701121` |
    | variant_title | string | Filter by the product variant [`title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-title)
    field. | | | - `variant_title:'Special ski wax'` |
    | vendor | string | Filter by the origin or source of the product. Learn
    more about [vendors and managing vendor
    information](https://help.shopify.com/manual/products/managing-vendor-info).
    | | | - `vendor:Snowdevil`<br/> - `vendor:Snowdevil OR vendor:Icedevil` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: ProductSortKeys = ID
  ): ProductConnection! @deprecated(reason: "Use `QueryRoot.products`.")

  """
  The number of publications for the shop.
  """
  publicationCount: Int! @deprecated(reason: "Use `QueryRoot.publicationsCount` instead.")

  """
  The shop's limits for specific resources. For example, the maximum number
  ofvariants allowed per product, or the maximum number of locations allowed.
  """
  resourceLimits: ShopResourceLimits!

  """
  The URL of the rich text editor that can be used for mobile devices.
  """
  richTextEditorUrl: URL!

  """
  Fetches a list of admin search results by a specified query.
  """
  search(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int!

    """
    The search query to filter by.
    """
    query: String!

    """
    The search result types to filter by.
    """
    types: [SearchResultType!]
  ): SearchResultConnection!

  """
  The list of search filter options for the shop. These can be used to filter productvisibility for the shop.
  """
  searchFilters: SearchFilterOptions!

  """
  Whether the shop has outstanding setup steps.
  """
  setupRequired: Boolean!

  """
  The list of countries that the shop ships to.
  """
  shipsToCountries: [CountryCode!]!

  """
  The name of the shop owner.
  """
  shopOwnerName: String!

  """
  The list of all legal policies associated with a shop.
  """
  shopPolicies: [ShopPolicy!]!

  """
  The paginated list of the shop's staff members.
  """
  staffMembers(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): StaffMemberConnection! @deprecated(reason: "Use `QueryRoot.staffMembers` instead.")

  """
  The storefront access token of a private application. These are scoped per-application.
  """
  storefrontAccessTokens(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): StorefrontAccessTokenConnection!

  """
  The URL of the shop's storefront.
  """
  storefrontUrl: URL! @deprecated(reason: "Use `url` instead.")

  """
  Whether the shop charges taxes for shipping.
  """
  taxShipping: Boolean!

  """
  Whether applicable taxes are included in the shop's product prices.
  """
  taxesIncluded: Boolean!

  """
  The shop's time zone abbreviation.
  """
  timezoneAbbreviation: String!

  """
  The shop's time zone offset.
  """
  timezoneOffset: String!

  """
  The shop's time zone offset expressed as a number of minutes.
  """
  timezoneOffsetMinutes: Int!

  """
  Whether transactional SMS sent by Shopify have been disabled for a shop.
  """
  transactionalSmsDisabled: Boolean!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!

  """
  The shop's unit system for weights and measures.
  """
  unitSystem: UnitSystem!

  """
  The date and time when the shop was last updated.
  """
  updatedAt: DateTime!

  """
  The URL of the shop's online store.
  """
  url: URL!

  """
  The shop's primary unit of weight for products and shipping.
  """
  weightUnit: WeightUnit!
}

"""
An address for a shop.
"""
type ShopAddress implements Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the company or organization.
  """
  company: String

  """
  Whether the address coordinates are valid.
  """
  coordinatesValidated: Boolean!

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.

  For example, US.
  """
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead.")

  """
  The two-letter code for the country of the address.

  For example, US.
  """
  countryCodeV2: CountryCode

  """
  The first name.
  """
  firstName: String @deprecated(reason: "Always null in this context.")

  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """
    Whether to include the company in the formatted address.
    """
    withCompany: Boolean = true
  ): [String!]!

  """
  A comma-separated list of the values for city, province, and country.
  """
  formattedArea: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The last name.
  """
  lastName: String @deprecated(reason: "Always null in this context.")

  """
  The latitude coordinate of the address.
  """
  latitude: Float

  """
  The longitude coordinate of the address.
  """
  longitude: Float

  """
  The full name, based on firstName and lastName.
  """
  name: String @deprecated(reason: "Always null in this context.")

  """
  A phone number associated with the address.

  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The alphanumeric code for the region.

  For example, ON.
  """
  provinceCode: String

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
An alert message that appears in the Shopify admin about a problem with a store
setting, with an action to take. For example, you could show an alert to ask the
merchant to enter their billing information to activate Shopify Plus.
"""
type ShopAlert {
  """
  The text for the button in the alert that links to related information. For example, _Add credit card_.
  """
  action: ShopAlertAction!

  """
  A description of the alert and further information, such as whether the merchant will be charged.
  """
  description: String!
}

"""
An action associated to a shop alert, such as adding a credit card.
"""
type ShopAlertAction {
  """
  The text for the button in the alert. For example, _Add credit card_.
  """
  title: String!

  """
  The target URL that the button links to.
  """
  url: URL!
}

"""
Billing preferences for the shop.
"""
type ShopBillingPreferences {
  """
  The currency the shop uses to pay for apps and services.
  """
  currency: CurrencyCode!
}

"""
Possible branding of a shop.
Branding can be used to define the look of a shop including its styling and logo in the Shopify Admin.
"""
enum ShopBranding {
  """
  Shop has Rogers branding.
  """
  ROGERS

  """
  Shop has Shopify branding.
  """
  SHOPIFY

  """
  Shop has Shopify Gold branding.
  """
  SHOPIFY_GOLD

  """
  Shop has Shopify Plus branding.
  """
  SHOPIFY_PLUS
}

"""
Represents the shop's customer account requirement preference.
"""
enum ShopCustomerAccountsSetting {
  DISABLED
  OPTIONAL
  REQUIRED
}

"""
Represents the feature set available to the shop.
Most fields specify whether a feature is enabled for a shop, and some fields return information
related to specific features.
"""
type ShopFeatures {
  """
  Whether a shop has access to Avalara AvaTax.
  """
  avalaraAvatax: Boolean!

  """
  The branding of the shop, which influences its look and feel in the Shopify admin.
  """
  branding: ShopBranding!

  """
  Represents the Bundles feature configuration for the shop.
  """
  bundles: BundlesFeature!

  """
  Whether a shop's online store can have CAPTCHA protection.
  """
  captcha: Boolean!

  """
  Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify.
  """
  captchaExternalDomains: Boolean! @deprecated(reason: "No longer required for external domains")

  """
  Represents the cart transform feature configuration for the shop.
  """
  cartTransform: CartTransformFeature!

  """
  Whether the delivery profiles functionality is enabled for this shop.
  """
  deliveryProfiles: Boolean! @deprecated(reason: "Delivery profiles are now 100% enabled across Shopify.")

  """
  Whether a shop has access to the Google Analytics dynamic remarketing feature.
  """
  dynamicRemarketing: Boolean!

  """
  Whether a shop can be migrated to use Shopify subscriptions.
  """
  eligibleForSubscriptionMigration: Boolean!

  """
  Whether a shop is configured properly to sell subscriptions.
  """
  eligibleForSubscriptions: Boolean!

  """
  Whether a shop can create gift cards.
  """
  giftCards: Boolean!

  """
  Whether a shop displays Harmonized System codes on products. This is used for customs when shipping
  internationally.
  """
  harmonizedSystemCode: Boolean!

  """
  Whether a shop can enable international domains.
  """
  internationalDomains: Boolean! @deprecated(reason: "All shops have international domains through Shopify Markets.")

  """
  Whether a shop can enable international price overrides.
  """
  internationalPriceOverrides: Boolean!

  """
  Whether a shop can enable international price rules.
  """
  internationalPriceRules: Boolean!

  """
  Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.
  """
  legacySubscriptionGatewayEnabled: Boolean!

  """
  Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial
  or don't have a storefront.
  """
  liveView: Boolean!

  """
  Whether a shop has access to the onboarding visual.
  """
  onboardingVisual: Boolean! @deprecated(reason: "No longer supported.")

  """
  Whether a shop is configured to sell subscriptions with PayPal Express.
  """
  paypalExpressSubscriptionGatewayStatus: PaypalExpressSubscriptionsGatewayStatus!

  """
  Whether a shop has access to all reporting features.
  """
  reports: Boolean!

  """
  Whether a shop has ever had subscription products.
  """
  sellsSubscriptions: Boolean!

  """
  Whether the shop has a Shopify Plus subscription.
  """
  shopifyPlus: Boolean! @deprecated(reason: "Use Shop.plan.shopifyPlus instead.")

  """
  Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful.
  """
  showMetrics: Boolean!

  """
  Whether a shop has an online store.
  """
  storefront: Boolean!

  """
  Whether a shop is using Shopify Balance.
  """
  usingShopifyBalance: Boolean!
}

"""
A locale that's been enabled on a shop.
"""
type ShopLocale {
  """
  The locale ISO code.
  """
  locale: String!

  """
  The market web presences that use the locale.
  """
  marketWebPresences: [MarketWebPresence!]!

  """
  The human-readable locale name.
  """
  name: String!

  """
  Whether the locale is the default locale for the shop.
  """
  primary: Boolean!

  """
  Whether the locale is visible to buyers.
  """
  published: Boolean!
}

"""
Shop Pay Installments payment details related to a transaction.
"""
type ShopPayInstallmentsPaymentDetails implements BasePaymentDetails {
  """
  The name of payment method used by the buyer.
  """
  paymentMethodName: String
}

"""
The billing plan of the shop.
"""
type ShopPlan {
  """
  The name of the shop's billing plan.
  """
  displayName: String!

  """
  Whether the shop is a partner development shop for testing purposes.
  """
  partnerDevelopment: Boolean!

  """
  Whether the shop has a Shopify Plus subscription.
  """
  shopifyPlus: Boolean!
}

"""
Policy that a merchant has configured for their store, such as their refund or privacy policy.
"""
type ShopPolicy implements HasPublishedTranslations & Node {
  """
  The text of the policy. The maximum size is 512kb.
  """
  body: HTML!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the policy was created.
  """
  createdAt: Date!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The translated title of the policy. For example, Refund Policy or Politique de remboursement.
  """
  title: String!

  """
  The published translations associated with the resource.
  """
  translations(
    """
    Filters translations locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Translation!]!

  """
  The shop policy type.
  """
  type: ShopPolicyType!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the policy was last modified.
  """
  updatedAt: Date!

  """
  The public URL of the policy.
  """
  url: URL!
}

"""
Available shop policy types.
"""
enum ShopPolicyType {
  """
  The contact information.
  """
  CONTACT_INFORMATION

  """
  The legal notice.
  """
  LEGAL_NOTICE

  """
  The privacy policy.
  """
  PRIVACY_POLICY

  """
  The refund policy.
  """
  REFUND_POLICY

  """
  The shipping policy.
  """
  SHIPPING_POLICY

  """
  The cancellation policy.
  """
  SUBSCRIPTION_POLICY

  """
  The terms of sale.
  """
  TERMS_OF_SALE

  """
  The terms of service.
  """
  TERMS_OF_SERVICE
}

"""
Resource limits of a shop.
"""
type ShopResourceLimits {
  """
  Maximum number of locations allowed.
  """
  locationLimit: Int!

  """
  Maximum number of product options allowed.
  """
  maxProductOptions: Int!

  """
  The maximum number of variants allowed per product.
  """
  maxProductVariants: Int!

  """
  Whether the shop has reached the limit of the number of URL redirects it can make for resources.
  """
  redirectLimitReached: Boolean!
}

"""
Possible sort of tags.
"""
enum ShopTagSort {
  """
  Alphabetical sort.
  """
  ALPHABETICAL

  """
  Popularity sort.
  """
  POPULAR
}

"""
A Shopify Function.
"""
type ShopifyFunction {
  """
  The API type of the Shopify Function.
  """
  apiType: String!

  """
  The API version of the Shopify Function.
  """
  apiVersion: String!

  """
  The app that owns the Shopify Function.
  """
  app: App!

  """
  The App Bridge information for the Shopify Function.
  """
  appBridge: FunctionsAppBridge!

  """
  The client ID of the app that owns the Shopify Function.
  """
  appKey: String!

  """
  The description of the Shopify Function.
  """
  description: String

  """
  The ID of the Shopify Function.
  """
  id: String!

  """
  The input query of the Shopify Function.
  """
  inputQuery: String

  """
  The title of the Shopify Function.
  """
  title: String!

  """
  If the Shopify Function uses the creation UI in the Admin.
  """
  useCreationUi: Boolean!
}

"""
An auto-generated type for paginating through multiple ShopifyFunctions.
"""
type ShopifyFunctionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ShopifyFunctionEdge!]!

  """
  A list of nodes that are contained in ShopifyFunctionEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ShopifyFunction!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ShopifyFunction and a cursor during pagination.
"""
type ShopifyFunctionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ShopifyFunctionEdge.
  """
  node: ShopifyFunction!
}

"""
Balance and payout information for a
[Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
account. Balance includes all balances for the currencies supported by the shop.
You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
"""
type ShopifyPaymentsAccount implements Node @accessRestricted(reason: "Requires the `read_shopify_payments` or `read_shopify_payments_accounts` approval scope.") {
  """
  The name of the account opener.
  """
  accountOpenerName: String

  """
  Whether the Shopify Payments setup is completed.
  """
  activated: Boolean!

  """
  Current balances in all currencies for the account.
  """
  balance: [MoneyV2!]!

  """
  A list of balance transactions associated with the shop.
  """
  balanceTransactions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    Determines if returned transactions contain transaction type transfer.
    """
    hideTransfers: Boolean = false

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | available_on | time |
    | credit_card_last4 | string |
    | currency | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | payment_method_name | string |
    | payments_transfer_id | id |
    | payout_date | time |
    | payout_status | string |
    | processed_at | time |
    | tax_reporting_exempt | boolean |
    | transaction_type | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: BalanceTransactionSortKeys = PROCESSED_AT
  ): ShopifyPaymentsBalanceTransactionConnection!

  """
  All bank accounts configured for the Shopify Payments account.
  """
  bankAccounts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ShopifyPaymentsBankAccountConnection!

  """
  The statement descriptor used for charges.

  The statement descriptor appears on a customer's credit card or bank statement when they make a purchase.
  """
  chargeStatementDescriptor: String @deprecated(reason: "Use `chargeStatementDescriptors` instead.")

  """
  The statement descriptors used for charges.

  These descriptors appear on a customer's credit card or bank statement when they make a purchase.
  """
  chargeStatementDescriptors: ShopifyPaymentsChargeStatementDescriptor

  """
  The Shopify Payments account country.
  """
  country: String!

  """
  The default payout currency for the Shopify Payments account.
  """
  defaultCurrency: CurrencyCode!

  """
  All disputes that originated from a transaction made with the Shopify Payments account.
  """
  disputes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | initiated_at | time |
    | status | string |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ShopifyPaymentsDisputeConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Whether the Shopify Payments account can be onboarded.
  """
  onboardable: Boolean!

  """
  The payout schedule for the account.
  """
  payoutSchedule: ShopifyPaymentsPayoutSchedule!

  """
  The descriptor used for payouts.

  The descriptor appears on a merchant's bank statement when they receive a payout.
  """
  payoutStatementDescriptor: String

  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | amount | float |
    | bank_account | string |
    | currency | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | issued_at | time |
    | ledger_type | string |
    | status | string |
    | transaction_dates | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: PayoutSortKeys = ISSUED_AT

    """
    Filter the direction of the payout.
    """
    transactionType: ShopifyPaymentsPayoutTransactionType
  ): ShopifyPaymentsPayoutConnection!
}

"""
The adjustment order object.
"""
type ShopifyPaymentsAdjustmentOrder {
  """
  The amount of the adjustment order.
  """
  amount: MoneyV2!

  """
  The link to the adjustment order.
  """
  link: URL!

  """
  The name of the adjustment order.
  """
  name: String!

  """
  The ID of the order transaction.
  """
  orderTransactionId: BigInt!
}

"""
The order associated to the balance transaction.
"""
type ShopifyPaymentsAssociatedOrder {
  """
  The ID of the associated order.
  """
  id: ID!

  """
  The name of the associated order.
  """
  name: String!
}

"""
A transaction that contributes to a Shopify Payments account balance.
"""
type ShopifyPaymentsBalanceTransaction implements Node {
  """
  The reason for the adjustment that's associated with the transaction.
              If the source_type isn't an adjustment, the value will be null.
  """
  adjustmentReason: String

  """
  The adjustment orders associated to the transaction.
  """
  adjustmentsOrders: [ShopifyPaymentsAdjustmentOrder!]!

  """
  The amount contributing to the balance transaction.
  """
  amount: MoneyV2!

  """
  The associated order for the balance transaction.
  """
  associatedOrder: ShopifyPaymentsAssociatedOrder

  """
  Payout assoicated with the transaction.
  """
  associatedPayout: ShopifyPaymentsBalanceTransactionAssociatedPayout!

  """
  The fee amount contributing to the balance transaction.
  """
  fee: MoneyV2!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The net amount contributing to the merchant's balance.
  """
  net: MoneyV2!

  """
  The ID of the resource leading to the transaction.
  """
  sourceId: BigInt

  """
  The id of the
              [Order Transaction](https://shopify.dev/docs/admin-api/rest/reference/orders/transaction)

              that resulted in this balance transaction.
  """
  sourceOrderTransactionId: BigInt

  """
  The source type of the balance transaction.
  """
  sourceType: ShopifyPaymentsSourceType

  """
  Wether the tranaction was created in test mode.
  """
  test: Boolean!

  """
  The date and time when the balance transaction was processed.
  """
  transactionDate: DateTime!

  """
  The type of transaction.
  """
  type: ShopifyPaymentsTransactionType!
}

"""
The payout associated with a balance transaction.
"""
type ShopifyPaymentsBalanceTransactionAssociatedPayout {
  """
  The ID of the payout associated with the balance transaction.
  """
  id: ID

  """
  The status of the payout associated with the balance transaction.
  """
  status: ShopifyPaymentsBalanceTransactionPayoutStatus
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsBalanceTransactions.
"""
type ShopifyPaymentsBalanceTransactionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ShopifyPaymentsBalanceTransactionEdge!]!

  """
  A list of nodes that are contained in ShopifyPaymentsBalanceTransactionEdge.
  You can fetch data about an individual node, or you can follow the edges to
  fetch data about a collection of related nodes. At each node, you specify the
  fields that you want to retrieve.
  """
  nodes: [ShopifyPaymentsBalanceTransaction!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsBalanceTransaction and a cursor during pagination.
"""
type ShopifyPaymentsBalanceTransactionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ShopifyPaymentsBalanceTransactionEdge.
  """
  node: ShopifyPaymentsBalanceTransaction!
}

"""
The payout status of the balance transaction.
"""
enum ShopifyPaymentsBalanceTransactionPayoutStatus {
  """
  The transaction requires action before it can be paid out.
  """
  ACTION_REQUIRED

  """
  The payout has been canceled by Shopify.
  """
  CANCELED

  """
  The payout has been declined by the bank.
  """
  FAILED

  """
  The payout has been submitted to the bank.
  """
  IN_TRANSIT @deprecated(reason: "Use `SCHEDULED` instead.")

  """
  The payout has been successfully deposited into the bank.
  """
  PAID

  """
  The transaction has not been assigned a payout yet.
  """
  PENDING

  """
  The payout has been created and had transactions assigned to it, but
  it has not yet been submitted to the bank.
  """
  SCHEDULED
}

"""
A bank account that can receive payouts.
"""
type ShopifyPaymentsBankAccount implements Node {
  """
  The last digits of the account number (the rest is redacted).
  """
  accountNumberLastDigits: String!

  """
  The name of the bank.
  """
  bankName: String

  """
  The country of the bank.
  """
  country: CountryCode!

  """
  The date that the bank account was created.
  """
  createdAt: DateTime!

  """
  The currency of the bank account.
  """
  currency: CurrencyCode!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | amount | float |
    | bank_account | string |
    | currency | string |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | issued_at | time |
    | ledger_type | string |
    | status | string |
    | transaction_dates | time |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    The ID of a [saved search](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch#field-id).
    The search’s query string is used as the query argument.
    """
    savedSearchId: ID

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: PayoutSortKeys = ISSUED_AT

    """
    Filter the direction of the payout.
    """
    transactionType: ShopifyPaymentsPayoutTransactionType
  ): ShopifyPaymentsPayoutConnection!

  """
  The status of the bank account.
  """
  status: ShopifyPaymentsBankAccountStatus!
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts.
"""
type ShopifyPaymentsBankAccountConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ShopifyPaymentsBankAccountEdge!]!

  """
  A list of nodes that are contained in ShopifyPaymentsBankAccountEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [ShopifyPaymentsBankAccount!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.
"""
type ShopifyPaymentsBankAccountEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ShopifyPaymentsBankAccountEdge.
  """
  node: ShopifyPaymentsBankAccount!
}

"""
The bank account status.
"""
enum ShopifyPaymentsBankAccountStatus {
  """
  A payout to the bank account failed.
  """
  ERRORED

  """
  A bank account that hasn't had any activity and that's not validated.
  """
  NEW

  """
  It was determined that the bank account exists.
  """
  VALIDATED

  """
  Bank account validation was successful.
  """
  VERIFIED
}

"""
The charge descriptors for a payments account.
"""
interface ShopifyPaymentsChargeStatementDescriptor {
  """
  The default charge statement descriptor.
  """
  default: String

  """
  The prefix of the statement descriptor.
  """
  prefix: String!
}

"""
The charge descriptors for a payments account.
"""
type ShopifyPaymentsDefaultChargeStatementDescriptor implements ShopifyPaymentsChargeStatementDescriptor {
  """
  The default charge statement descriptor.
  """
  default: String

  """
  The prefix of the statement descriptor.
  """
  prefix: String!
}

"""
A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.
"""
type ShopifyPaymentsDispute implements LegacyInteroperability & Node {
  """
  The total amount disputed by the cardholder.
  """
  amount: MoneyV2!

  """
  The deadline for evidence submission.
  """
  evidenceDueBy: Date

  """
  The date when evidence was sent. Returns null if evidence hasn't yet been sent.
  """
  evidenceSentOn: Date

  """
  The date when this dispute was resolved. Returns null if the dispute isn't yet resolved.
  """
  finalizedOn: Date

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The date when this dispute was initiated.
  """
  initiatedAt: DateTime!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The order that contains the charge that's under dispute.
  """
  order: Order

  """
  The reason of the dispute.
  """
  reasonDetails: ShopifyPaymentsDisputeReasonDetails!

  """
  The current state of the dispute.
  """
  status: DisputeStatus!

  """
  Indicates if this dispute is still in the inquiry phase or has turned into a chargeback.
  """
  type: DisputeType!
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsDisputes.
"""
type ShopifyPaymentsDisputeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ShopifyPaymentsDisputeEdge!]!

  """
  A list of nodes that are contained in ShopifyPaymentsDisputeEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [ShopifyPaymentsDispute!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.
"""
type ShopifyPaymentsDisputeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ShopifyPaymentsDisputeEdge.
  """
  node: ShopifyPaymentsDispute!
}

"""
The evidence associated with the dispute.
"""
type ShopifyPaymentsDisputeEvidence implements Node {
  """
  The activity logs associated with the dispute evidence.
  """
  accessActivityLog: String

  """
  The billing address that's provided by the customer.
  """
  billingAddress: MailingAddress

  """
  The cancellation policy disclosure associated with the dispute evidence.
  """
  cancellationPolicyDisclosure: String

  """
  The cancellation policy file associated with the dispute evidence.
  """
  cancellationPolicyFile: ShopifyPaymentsDisputeFileUpload

  """
  The cancellation rebuttal associated with the dispute evidence.
  """
  cancellationRebuttal: String

  """
  The customer communication file associated with the dispute evidence.
  """
  customerCommunicationFile: ShopifyPaymentsDisputeFileUpload

  """
  The customer's email address.
  """
  customerEmailAddress: String

  """
  The customer's first name.
  """
  customerFirstName: String

  """
  The customer's last name.
  """
  customerLastName: String

  """
  The customer purchase ip for this dispute evidence.
  """
  customerPurchaseIp: String

  """
  The dispute associated with the evidence.
  """
  dispute: ShopifyPaymentsDispute!

  """
  The file uploads associated with the dispute evidence.
  """
  disputeFileUploads: [ShopifyPaymentsDisputeFileUpload!]!

  """
  The fulfillments associated with the dispute evidence.
  """
  fulfillments: [ShopifyPaymentsDisputeFulfillment!]!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The product description for this dispute evidence.
  """
  productDescription: String

  """
  The refund policy disclosure associated with the dispute evidence.
  """
  refundPolicyDisclosure: String

  """
  The refund policy file associated with the dispute evidence.
  """
  refundPolicyFile: ShopifyPaymentsDisputeFileUpload

  """
  The refund refusal explanation associated with dispute evidence.
  """
  refundRefusalExplanation: String

  """
  The service documentation file associated with the dispute evidence.
  """
  serviceDocumentationFile: ShopifyPaymentsDisputeFileUpload

  """
  The mailing address for shipping that's provided by the customer.
  """
  shippingAddress: MailingAddress

  """
  The shipping documentation file associated with the dispute evidence.
  """
  shippingDocumentationFile: ShopifyPaymentsDisputeFileUpload

  """
  Whether the dispute evidence is submitted.
  """
  submitted: Boolean!

  """
  The uncategorized file associated with the dispute evidence.
  """
  uncategorizedFile: ShopifyPaymentsDisputeFileUpload

  """
  The uncategorized text for the dispute evidence.
  """
  uncategorizedText: String
}

"""
The possible dispute evidence file types.
"""
enum ShopifyPaymentsDisputeEvidenceFileType {
  """
  Cancellation Policy File.
  """
  CANCELLATION_POLICY_FILE

  """
  Customer Communication File.
  """
  CUSTOMER_COMMUNICATION_FILE

  """
  Refund Policy File.
  """
  REFUND_POLICY_FILE

  """
  Service Documentation File.
  """
  SERVICE_DOCUMENTATION_FILE

  """
  Shipping Documentation File.
  """
  SHIPPING_DOCUMENTATION_FILE

  """
  Uncategorized File.
  """
  UNCATEGORIZED_FILE
}

"""
The file upload associated with the dispute evidence.
"""
type ShopifyPaymentsDisputeFileUpload implements Node {
  """
  The type of the file for the dispute evidence.
  """
  disputeEvidenceType: ShopifyPaymentsDisputeEvidenceFileType

  """
  The file size.
  """
  fileSize: Int!

  """
  The file type.
  """
  fileType: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The original file name.
  """
  originalFileName: String

  """
  The URL for accessing the file.
  """
  url: URL!
}

"""
The fulfillment associated with dispute evidence.
"""
type ShopifyPaymentsDisputeFulfillment implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The shipping carrier for this fulfillment.
  """
  shippingCarrier: String

  """
  The shipping date for this fulfillment.
  """
  shippingDate: Date

  """
  The shipping tracking number for this fulfillment.
  """
  shippingTrackingNumber: String
}

"""
The reason for the dispute provided by the cardholder's bank.
"""
enum ShopifyPaymentsDisputeReason {
  """
  The customer's bank can't process the charge.
  """
  BANK_CANNOT_PROCESS

  """
  The customer claims that the purchased product was returned or the transaction
  was otherwise canceled, but you haven't yet provided a refund or credit.
  """
  CREDIT_NOT_PROCESSED

  """
  The customer initiated the dispute. Contact the customer for additional details on why the payment was disputed.
  """
  CUSTOMER_INITIATED

  """
  The customer's bank can't proceed with the debit since it hasn't been authorized.
  """
  DEBIT_NOT_AUTHORIZED

  """
  The customer claims they were charged multiple times for the same product or service.
  """
  DUPLICATE

  """
  The cardholder claims that they didn’t authorize the payment.
  """
  FRAUDULENT

  """
  The dispute is uncategorized, so you should contact the customer for
  additional details to find out why the payment was disputed.
  """
  GENERAL

  """
  The customer account associated with the purchase is incorrect.
  """
  INCORRECT_ACCOUNT_DETAILS

  """
  The customer's bank account has insufficient funds.
  """
  INSUFFICIENT_FUNDS

  """
  The customer claims they did not receive the products or services purchased.
  """
  PRODUCT_NOT_RECEIVED

  """
  The product or service was received but was defective, damaged, or not as described.
  """
  PRODUCT_UNACCEPTABLE

  """
  The customer claims that you continued to charge them after a subscription was canceled.
  """
  SUBSCRIPTION_CANCELLED

  """
  The customer doesn’t recognize the payment appearing on their card statement.
  """
  UNRECOGNIZED
}

"""
Details regarding a dispute reason.
"""
type ShopifyPaymentsDisputeReasonDetails {
  """
  The raw code provided by the payment network.
  """
  networkReasonCode: String

  """
  The reason for the dispute provided by the cardholder's banks.
  """
  reason: ShopifyPaymentsDisputeReason!
}

"""
Presents all Shopify Payments information related to an extended authorization.
"""
type ShopifyPaymentsExtendedAuthorization {
  """
  The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.
  """
  extendedAuthorizationExpiresAt: DateTime!

  """
  The time after which capture will incur an additional fee.
  """
  standardAuthorizationExpiresAt: DateTime!
}

"""
The charge descriptors for a Japanese payments account.
"""
type ShopifyPaymentsJpChargeStatementDescriptor implements ShopifyPaymentsChargeStatementDescriptor {
  """
  The default charge statement descriptor.
  """
  default: String

  """
  The charge statement descriptor in kana.
  """
  kana: String

  """
  The charge statement descriptor in kanji.
  """
  kanji: String

  """
  The prefix of the statement descriptor.
  """
  prefix: String!
}

"""
Payouts represent the movement of money between a merchant's Shopify
Payments balance and their bank account.
"""
type ShopifyPaymentsPayout implements LegacyInteroperability & Node {
  """
  The bank account for the payout.
  """
  bankAccount: ShopifyPaymentsBankAccount @deprecated(reason: "Use `destinationAccount` instead.")

  """
  The business entity associated with the payout.
  """
  businessEntity: BusinessEntity!

  """
  The total amount and currency of the payout.
  """
  gross: MoneyV2! @deprecated(reason: "Use `net` instead.")

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The exact time when the payout was issued. The payout only contains
  balance transactions that were available at this time.
  """
  issuedAt: DateTime!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The total amount and currency of the payout.
  """
  net: MoneyV2!

  """
  The transfer status of the payout.
  """
  status: ShopifyPaymentsPayoutStatus!

  """
  The summary of the payout.
  """
  summary: ShopifyPaymentsPayoutSummary!

  """
  The direction of the payout.
  """
  transactionType: ShopifyPaymentsPayoutTransactionType!
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsPayouts.
"""
type ShopifyPaymentsPayoutConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ShopifyPaymentsPayoutEdge!]!

  """
  A list of nodes that are contained in ShopifyPaymentsPayoutEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [ShopifyPaymentsPayout!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.
"""
type ShopifyPaymentsPayoutEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ShopifyPaymentsPayoutEdge.
  """
  node: ShopifyPaymentsPayout!
}

"""
The interval at which payouts are sent to the connected bank account.
"""
enum ShopifyPaymentsPayoutInterval {
  """
  Each business day.
  """
  DAILY

  """
  Payouts will not be automatically made.
  """
  MANUAL

  """
  Each month, on the day of month specified by monthlyAnchor.
  """
  MONTHLY

  """
  Each week, on the day of week specified by weeklyAnchor.
  """
  WEEKLY
}

"""
The payment schedule for a payments account.
"""
type ShopifyPaymentsPayoutSchedule {
  """
  The interval at which payouts are sent to the connected bank account.
  """
  interval: ShopifyPaymentsPayoutInterval!

  """
  The day of the month funds will be paid out.

  The value can be any day of the month from the 1st to the 31st.
  If the payment interval is set to monthly, this value will be used.
  Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
  """
  monthlyAnchor: Int

  """
  The day of the week funds will be paid out.

  The value can be any weekday from Monday to Friday.
  If the payment interval is set to weekly, this value will be used.
  """
  weeklyAnchor: DayOfTheWeek
}

"""
The transfer status of the payout.
"""
enum ShopifyPaymentsPayoutStatus {
  """
  The payout has been canceled by Shopify.
  """
  CANCELED

  """
  The payout has been declined by the bank.
  """
  FAILED

  """
  The payout has been submitted to the bank.
  """
  IN_TRANSIT @deprecated(reason: "Use `SCHEDULED` instead.")

  """
  The payout has been successfully deposited into the bank.
  """
  PAID

  """
  The payout has been created and had transactions assigned to it, but
  it has not yet been submitted to the bank.
  """
  SCHEDULED
}

"""
Breakdown of the total fees and gross of each of the different types of transactions associated
with the payout.
"""
type ShopifyPaymentsPayoutSummary {
  """
  Total fees for all adjustments including disputes.
  """
  adjustmentsFee: MoneyV2!

  """
  Total gross amount for all adjustments including disputes.
  """
  adjustmentsGross: MoneyV2!

  """
  Total fees for all advances.
  """
  advanceFees: MoneyV2!

  """
  Total gross amount for all advances.
  """
  advanceGross: MoneyV2!

  """
  Total fees for all charges.
  """
  chargesFee: MoneyV2!

  """
  Total gross amount for all charges.
  """
  chargesGross: MoneyV2!

  """
  Total fees for all refunds.
  """
  refundsFee: MoneyV2!

  """
  Total gross amount for all refunds.
  """
  refundsFeeGross: MoneyV2!

  """
  Total fees for all reserved funds.
  """
  reservedFundsFee: MoneyV2!

  """
  Total gross amount for all reserved funds.
  """
  reservedFundsGross: MoneyV2!

  """
  Total fees for all retried payouts.
  """
  retriedPayoutsFee: MoneyV2!

  """
  Total gross amount for all retried payouts.
  """
  retriedPayoutsGross: MoneyV2!
}

"""
The possible transaction types for a payout.
"""
enum ShopifyPaymentsPayoutTransactionType {
  """
  The payout is a deposit.
  """
  DEPOSIT

  """
  The payout is a withdrawal.
  """
  WITHDRAWAL
}

"""
Presents all Shopify Payments specific information related to an order refund.
"""
type ShopifyPaymentsRefundSet {
  """
  The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.
  """
  acquirerReferenceNumber: String
}

"""
The possible source types for a balance transaction.
"""
enum ShopifyPaymentsSourceType {
  """
  The adjustment source type.
  """
  ADJUSTMENT

  """
  The adjustment_reversal source type.
  """
  ADJUSTMENT_REVERSAL

  """
  The charge source type.
  """
  CHARGE

  """
  The dispute source type.
  """
  DISPUTE

  """
  The refund source type.
  """
  REFUND

  """
  The system_adjustment source type.
  """
  SYSTEM_ADJUSTMENT

  """
  The transfer source type.
  """
  TRANSFER
}

"""
Presents all Shopify Payments specific information related to an order transaction.
"""
type ShopifyPaymentsTransactionSet {
  """
  Contains all fields related to an extended authorization.
  """
  extendedAuthorizationSet: ShopifyPaymentsExtendedAuthorization

  """
  Contains all fields related to a refund.
  """
  refundSet: ShopifyPaymentsRefundSet
}

"""
The possible types of transactions.
"""
enum ShopifyPaymentsTransactionType {
  """
  The adjustment transaction type.
  """
  ADJUSTMENT

  """
  The advance transaction type.
  """
  ADVANCE

  """
  The advance funding transaction type.
  """
  ADVANCE_FUNDING

  """
  The anomaly_credit transaction type.
  """
  ANOMALY_CREDIT

  """
  The anomaly_credit_reversal transaction type.
  """
  ANOMALY_CREDIT_REVERSAL

  """
  The anomaly_debit transaction type.
  """
  ANOMALY_DEBIT

  """
  The anomaly_debit_reversal transaction type.
  """
  ANOMALY_DEBIT_REVERSAL

  """
  The application_fee_refund transaction type.
  """
  APPLICATION_FEE_REFUND

  """
  The balance_transfer_inbound transaction type.
  """
  BALANCE_TRANSFER_INBOUND

  """
  The billing_debit transaction type.
  """
  BILLING_DEBIT

  """
  The billing_debit_reversal transaction type.
  """
  BILLING_DEBIT_REVERSAL

  """
  The channel_credit transaction type.
  """
  CHANNEL_CREDIT

  """
  The channel_credit_reversal transaction type.
  """
  CHANNEL_CREDIT_REVERSAL

  """
  The channel_promotion_credit transaction type.
  """
  CHANNEL_PROMOTION_CREDIT

  """
  The channel_promotion_credit_reversal transaction type.
  """
  CHANNEL_PROMOTION_CREDIT_REVERSAL

  """
  The channel_transfer_credit transaction type.
  """
  CHANNEL_TRANSFER_CREDIT

  """
  The channel_transfer_credit_reversal transaction type.
  """
  CHANNEL_TRANSFER_CREDIT_REVERSAL

  """
  The channel_transfer_debit transaction type.
  """
  CHANNEL_TRANSFER_DEBIT

  """
  The channel_transfer_debit_reversal transaction type.
  """
  CHANNEL_TRANSFER_DEBIT_REVERSAL

  """
  The charge transaction type.
  """
  CHARGE

  """
  The chargeback_fee transaction type.
  """
  CHARGEBACK_FEE

  """
  The chargeback_fee_refund transaction type.
  """
  CHARGEBACK_FEE_REFUND

  """
  The chargeback_hold transaction type.
  """
  CHARGEBACK_HOLD

  """
  The chargeback_hold_release transaction type.
  """
  CHARGEBACK_HOLD_RELEASE

  """
  The chargeback_protection_credit transaction type.
  """
  CHARGEBACK_PROTECTION_CREDIT

  """
  The chargeback_protection_credit_reversal transaction type.
  """
  CHARGEBACK_PROTECTION_CREDIT_REVERSAL

  """
  The chargeback_protection_debit transaction type.
  """
  CHARGEBACK_PROTECTION_DEBIT

  """
  The chargeback_protection_debit_reversal transaction type.
  """
  CHARGEBACK_PROTECTION_DEBIT_REVERSAL

  """
  The charge_adjustment transaction type.
  """
  CHARGE_ADJUSTMENT

  """
  The collections_credit transaction type.
  """
  COLLECTIONS_CREDIT

  """
  The collections_credit_reversal transaction type.
  """
  COLLECTIONS_CREDIT_REVERSAL

  """
  The customs_duty transaction type.
  """
  CUSTOMS_DUTY

  """
  The customs_duty_adjustment transaction type.
  """
  CUSTOMS_DUTY_ADJUSTMENT

  """
  The dispute_reversal transaction type.
  """
  DISPUTE_REVERSAL

  """
  The dispute_withdrawal transaction type.
  """
  DISPUTE_WITHDRAWAL

  """
  The import_tax transaction type.
  """
  IMPORT_TAX

  """
  The import_tax_adjustment transaction type.
  """
  IMPORT_TAX_ADJUSTMENT

  """
  The marketplace_fee_credit transaction type.
  """
  MARKETPLACE_FEE_CREDIT

  """
  The marketplace_fee_credit_reversal transaction type.
  """
  MARKETPLACE_FEE_CREDIT_REVERSAL

  """
  The markets_pro_credit transaction type.
  """
  MARKETS_PRO_CREDIT

  """
  The merchant_goodwill_credit transaction type.
  """
  MERCHANT_GOODWILL_CREDIT

  """
  The merchant_goodwill_credit_reversal transaction type.
  """
  MERCHANT_GOODWILL_CREDIT_REVERSAL

  """
  The merchant_to_merchant_credit transaction type.
  """
  MERCHANT_TO_MERCHANT_CREDIT

  """
  The merchant_to_merchant_credit_reversal transaction type.
  """
  MERCHANT_TO_MERCHANT_CREDIT_REVERSAL

  """
  The merchant_to_merchant_debit transaction type.
  """
  MERCHANT_TO_MERCHANT_DEBIT

  """
  The merchant_to_merchant_debit_reversal transaction type.
  """
  MERCHANT_TO_MERCHANT_DEBIT_REVERSAL

  """
  The promotion_credit transaction type.
  """
  PROMOTION_CREDIT

  """
  The promotion_credit_reversal transaction type.
  """
  PROMOTION_CREDIT_REVERSAL

  """
  The refund transaction type.
  """
  REFUND

  """
  The refund_adjustment transaction type.
  """
  REFUND_ADJUSTMENT

  """
  The refund_failure transaction type.
  """
  REFUND_FAILURE

  """
  The reserved_funds transaction type.
  """
  RESERVED_FUNDS

  """
  The reserved_funds_reversal transaction type.
  """
  RESERVED_FUNDS_REVERSAL

  """
  The reserved_funds_withdrawal transaction type.
  """
  RESERVED_FUNDS_WITHDRAWAL

  """
  The risk_reversal transaction type.
  """
  RISK_REVERSAL

  """
  The risk_withdrawal transaction type.
  """
  RISK_WITHDRAWAL

  """
  The seller_protection_credit transaction type.
  """
  SELLER_PROTECTION_CREDIT

  """
  The seller_protection_credit_reversal transaction type.
  """
  SELLER_PROTECTION_CREDIT_REVERSAL

  """
  The shipping_label transaction type.
  """
  SHIPPING_LABEL

  """
  The shipping_label_adjustment transaction type.
  """
  SHIPPING_LABEL_ADJUSTMENT

  """
  The shipping_label_adjustment_base transaction type.
  """
  SHIPPING_LABEL_ADJUSTMENT_BASE

  """
  The shipping_label_adjustment_surcharge transaction type.
  """
  SHIPPING_LABEL_ADJUSTMENT_SURCHARGE

  """
  The shipping_other_carrier_charge_adjustment transaction type.
  """
  SHIPPING_OTHER_CARRIER_CHARGE_ADJUSTMENT

  """
  The shipping_return_to_origin_adjustment transaction type.
  """
  SHIPPING_RETURN_TO_ORIGIN_ADJUSTMENT

  """
  The shopify_collective_credit transaction type.
  """
  SHOPIFY_COLLECTIVE_CREDIT

  """
  The shopify_collective_credit_reversal transaction type.
  """
  SHOPIFY_COLLECTIVE_CREDIT_REVERSAL

  """
  The shopify_collective_debit transaction type.
  """
  SHOPIFY_COLLECTIVE_DEBIT

  """
  The shopify_collective_debit_reversal transaction type.
  """
  SHOPIFY_COLLECTIVE_DEBIT_REVERSAL

  """
  The shopify_source_credit transaction type.
  """
  SHOPIFY_SOURCE_CREDIT

  """
  The shopify_source_credit_reversal transaction type.
  """
  SHOPIFY_SOURCE_CREDIT_REVERSAL

  """
  The shopify_source_debit transaction type.
  """
  SHOPIFY_SOURCE_DEBIT

  """
  The shopify_source_debit_reversal transaction type.
  """
  SHOPIFY_SOURCE_DEBIT_REVERSAL

  """
  The shop_cash_billing_debit transaction type.
  """
  SHOP_CASH_BILLING_DEBIT

  """
  The shop_cash_billing_debit_reversal transaction type.
  """
  SHOP_CASH_BILLING_DEBIT_REVERSAL

  """
  The shop_cash_campaign_billing_credit transaction type.
  """
  SHOP_CASH_CAMPAIGN_BILLING_CREDIT

  """
  The shop_cash_campaign_billing_credit_reversal transaction type.
  """
  SHOP_CASH_CAMPAIGN_BILLING_CREDIT_REVERSAL

  """
  The shop_cash_campaign_billing_debit transaction type.
  """
  SHOP_CASH_CAMPAIGN_BILLING_DEBIT

  """
  The shop_cash_campaign_billing_debit_reversal transaction type.
  """
  SHOP_CASH_CAMPAIGN_BILLING_DEBIT_REVERSAL

  """
  The shop_cash_credit transaction type.
  """
  SHOP_CASH_CREDIT

  """
  The shop_cash_credit_reversal transaction type.
  """
  SHOP_CASH_CREDIT_REVERSAL

  """
  The shop_cash_refund_debit transaction type.
  """
  SHOP_CASH_REFUND_DEBIT

  """
  The shop_cash_refund_debit_reversal transaction type.
  """
  SHOP_CASH_REFUND_DEBIT_REVERSAL

  """
  The stripe_fee transaction type.
  """
  STRIPE_FEE

  """
  The tax_adjustment_credit transaction type.
  """
  TAX_ADJUSTMENT_CREDIT

  """
  The tax_adjustment_credit_reversal transaction type.
  """
  TAX_ADJUSTMENT_CREDIT_REVERSAL

  """
  The tax_adjustment_debit transaction type.
  """
  TAX_ADJUSTMENT_DEBIT

  """
  The tax_adjustment_debit_reversal transaction type.
  """
  TAX_ADJUSTMENT_DEBIT_REVERSAL

  """
  The transfer transaction type.
  """
  TRANSFER

  """
  The transfer_cancel transaction type.
  """
  TRANSFER_CANCEL

  """
  The transfer_failure transaction type.
  """
  TRANSFER_FAILURE

  """
  The transfer_refund transaction type.
  """
  TRANSFER_REFUND

  """
  The vat_refund_credit transaction type.
  """
  VAT_REFUND_CREDIT

  """
  The vat_refund_credit_reversal transaction type.
  """
  VAT_REFUND_CREDIT_REVERSAL
}

"""
Each subject (individual) of an account has a verification object giving
 information about the verification state.
"""
type ShopifyPaymentsVerification implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The status of the verification.
  """
  status: ShopifyPaymentsVerificationStatus!

  """
  The subject/individual who has to be verified.
  """
  subject: ShopifyPaymentsVerificationSubject!
}

"""
The status of a verification.
"""
enum ShopifyPaymentsVerificationStatus {
  """
  The verification request has been submitted but a response has not yet been given.
  """
  PENDING

  """
  The verification has not yet been verified.
  """
  UNVERIFIED

  """
  The verification has been verified.
  """
  VERIFIED
}

"""
The verification subject represents an individual that has to be verified.
"""
type ShopifyPaymentsVerificationSubject {
  """
  The family name of the individual to verify.
  """
  familyName: String!

  """
  The given name of the individual to verify.
  """
  givenName: String!
}

"""
The status of an order's eligibility for protection against fraudulent chargebacks by Shopify Protect.
"""
enum ShopifyProtectEligibilityStatus {
  """
  The order is eligible for protection against fraudulent chargebacks.
  If an order is updated, the order's eligibility may change and protection could be removed.
  """
  ELIGIBLE

  """
  The order isn't eligible for protection against fraudulent chargebacks.
  """
  NOT_ELIGIBLE

  """
  The eligibility of the order is pending and has not yet been determined.
  """
  PENDING
}

"""
The eligibility details of an order's protection against fraudulent chargebacks by Shopify Protect.
"""
type ShopifyProtectOrderEligibility {
  """
  The status of whether an order is eligible for protection against fraudulent chargebacks.
  """
  status: ShopifyProtectEligibilityStatus!
}

"""
A summary of Shopify Protect details for an order.
"""
type ShopifyProtectOrderSummary {
  """
  The eligibility details of an order's protection against fraudulent chargebacks.
  """
  eligibility: ShopifyProtectOrderEligibility!

  """
  The status of the order's protection against fraudulent chargebacks.
  """
  status: ShopifyProtectStatus!
}

"""
The status of an order's protection with Shopify Protect.
"""
enum ShopifyProtectStatus {
  """
  The protection for the order is active and eligible for reimbursement against fraudulent chargebacks.
  If an order is updated, the order's eligibility may change and protection could become inactive.
  """
  ACTIVE

  """
  The protection for an order isn't active because the order didn't meet eligibility requirements.
  """
  INACTIVE

  """
  The order received a chargeback but the order wasn't protected because it didn't meet coverage requirements.
  """
  NOT_PROTECTED

  """
  The protection for the order is pending and has not yet been determined.
  """
  PENDING

  """
  The order received a fraudulent chargeback and it was protected.
  """
  PROTECTED
}

"""
Represents the data about a staff member's Shopify account. Merchants can use
staff member data to get more information about the staff members in their store.
"""
type StaffMember implements Node {
  """
  The type of account the staff member has.
  """
  accountType: AccountType

  """
  Whether the staff member is active.
  """
  active: Boolean!

  """
  The image used as the staff member's avatar in the Shopify admin.
  """
  avatar(
    """
    The default image returned if the staff member has no avatar.
    """
    fallback: StaffMemberDefaultImage = DEFAULT

    """
    The image height in pixels between 1 and 2048.
    """
    maxHeight: Int @deprecated(reason: "Use `maxHeight` argument on `image` instead.")

    """
    The image width in pixels between 1 and 2048.
    """
    maxWidth: Int @deprecated(reason: "Use `maxWidth` on argument `image` instead.")
  ): Image!

  """
  The staff member's email address.
  """
  email: String!

  """
  Whether the staff member's account exists.
  """
  exists: Boolean!

  """
  The staff member's first name.
  """
  firstName: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The staff member's initials, if available.
  """
  initials: [String!]

  """
  Whether the staff member is the shop owner.
  """
  isShopOwner: Boolean!

  """
  The staff member's last name.
  """
  lastName: String

  """
  The staff member's preferred locale. Locale values use the format `language`
  or `language-COUNTRY`, where `language` is a two-letter language code, and
  `COUNTRY` is a two-letter country code. For example: `en` or `en-US`
  """
  locale: String!

  """
  The staff member's full name.
  """
  name: String!

  """
  The staff member's phone number.
  """
  phone: String

  """
  The data used to customize the Shopify admin experience for the staff member.
  """
  privateData: StaffMemberPrivateData!
}

"""
An auto-generated type for paginating through multiple StaffMembers.
"""
type StaffMemberConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [StaffMemberEdge!]!

  """
  A list of nodes that are contained in StaffMemberEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [StaffMember!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Represents the fallback avatar image for a staff member. This is used only if the staff member has no avatar image.
"""
enum StaffMemberDefaultImage {
  """
  Returns a default avatar image for the staff member.
  """
  DEFAULT

  """
  Returns a URL that returns a 404 error if the image is not present.
  """
  NOT_FOUND

  """
  Returns a transparent avatar image for the staff member.
  """
  TRANSPARENT
}

"""
An auto-generated type which holds one StaffMember and a cursor during pagination.
"""
type StaffMemberEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of StaffMemberEdge.
  """
  node: StaffMember!
}

"""
Represents access permissions for a staff member.
"""
enum StaffMemberPermission {
  """
  The staff member can manage and install apps and channels.
  """
  APPLICATIONS

  """
  The staff member can manage and install sales channels.
  """
  CHANNELS

  """
  The staff member can create and edit customers.
  """
  CREATE_AND_EDIT_CUSTOMERS

  """
  The staff member can create and edit gift cards.
  """
  CREATE_AND_EDIT_GIFT_CARDS

  """
  The staff member can view customers.
  """
  CUSTOMERS

  """
  The staff member can view the Shopify Home page, which includes sales information and other shop data.
  """
  DASHBOARD

  """
  The staff member can deactivate gift cards.
  """
  DEACTIVATE_GIFT_CARDS

  """
  The staff member can delete customers.
  """
  DELETE_CUSTOMERS

  """
  The staff member can view, buy, and manage domains.
  """
  DOMAINS

  """
  The staff member can create, update, and delete draft orders.
  """
  DRAFT_ORDERS

  """
  The staff member can update orders.
  """
  EDIT_ORDERS

  """
  The staff member can erase customer private data.
  """
  ERASE_CUSTOMER_DATA

  """
  The staff member can export customers.
  """
  EXPORT_CUSTOMERS

  """
  The staff member can export gift cards.
  """
  EXPORT_GIFT_CARDS

  """
  The staff has the same permissions as the [store owner](https://shopify.dev/en/manual/your-account/staff-accounts/staff-permissions#store-owner-permissions)
  with some exceptions, such as modifying the account billing or deleting staff accounts.
  """
  FULL @deprecated(reason: "Use the list of the staff member's explicit permissions returned in the `StaffMember.permissions.userPermissions` field instead of `full` permission.")

  """
  The staff member can view, create, issue, and export gift cards to a CSV file.
  """
  GIFT_CARDS

  """
  The staff member can view and modify links and navigation menus.
  """
  LINKS

  """
  The staff member can create, update, and delete locations where inventory is stocked or managed.
  """
  LOCATIONS

  """
  The staff member can view and create discount codes and automatic discounts, and export discounts to a CSV file.
  """
  MARKETING

  """
  The staff member can view, create, and automate marketing campaigns.
  """
  MARKETING_SECTION

  """
  The staff member can merge customers.
  """
  MERGE_CUSTOMERS

  """
  The staff member can view, create, update, delete, and cancel orders, and
  receive order notifications. The staff member can still create draft orders
  without this permission.
  """
  ORDERS

  """
  The staff member can view the Overview and Live view pages, which include
  sales information, and other shop and sales channels data.
  """
  OVERVIEWS

  """
  The staff member can view, create, update, publish, and delete blog posts and pages.
  """
  PAGES

  """
  The staff member can pay for an order by using a vaulted card.
  """
  PAY_ORDERS_BY_VAULTED_CARD

  """
  The staff member can view the preferences and configuration of a shop.
  """
  PREFERENCES

  """
  The staff member can view, create, import, and update products, collections, and inventory.
  """
  PRODUCTS

  """
  The staff member can view and create all reports, which includes sales information and other shop data.
  """
  REPORTS

  """
  The staff member can request customer private data.
  """
  REQUEST_CUSTOMER_DATA

  """
  The staff member can view, update, and publish themes.
  """
  THEMES

  """
  The staff member can view and create translations.
  """
  TRANSLATIONS @deprecated(reason: "Unused.")
}

"""
Represents the data used to customize the Shopify admin experience for a logged-in staff member.
"""
type StaffMemberPrivateData {
  """
  The URL to the staff member's account settings page.
  """
  accountSettingsUrl: URL!

  """
  The date and time when the staff member was created.
  """
  createdAt: DateTime!

  """
  Access permissions for the staff member.
  """
  permissions: [StaffMemberPermission!]! @deprecated(reason: "There's no alternative field to use instead.")
}

"""
The set of valid sort keys for the StaffMembers query.
"""
enum StaffMembersSortKeys {
  """
  Sort by the `email` value.
  """
  EMAIL

  """
  Sort by the `first_name` value.
  """
  FIRST_NAME

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `last_name` value.
  """
  LAST_NAME
}

"""
Standard metafield definition templates provide preset configurations to create metafield definitions.
Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.

Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
"""
type StandardMetafieldDefinitionTemplate implements Node {
  """
  The description of the standard metafield definition.
  """
  description: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The key owned by the definition after the definition has been activated.
  """
  key: String!

  """
  The human-readable name for the standard metafield definition.
  """
  name: String!

  """
  The namespace owned by the definition after the definition has been activated.
  """
  namespace: String!

  """
  The list of resource types that the standard metafield definition can be applied to.
  """
  ownerTypes: [MetafieldOwnerType!]!

  """
  The associated [metafield definition
  type](https://shopify.dev/apps/metafields/definitions/types) that the
  metafield stores.
  """
  type: MetafieldDefinitionType!

  """
  The configured validations for the standard metafield definition.
  """
  validations: [MetafieldDefinitionValidation!]!

  """
  Whether metafields for the definition are by default visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean!
}

"""
An auto-generated type for paginating through multiple StandardMetafieldDefinitionTemplates.
"""
type StandardMetafieldDefinitionTemplateConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [StandardMetafieldDefinitionTemplateEdge!]!

  """
  A list of nodes that are contained in StandardMetafieldDefinitionTemplateEdge.
  You can fetch data about an individual node, or you can follow the edges to
  fetch data about a collection of related nodes. At each node, you specify the
  fields that you want to retrieve.
  """
  nodes: [StandardMetafieldDefinitionTemplate!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one StandardMetafieldDefinitionTemplate and a cursor during pagination.
"""
type StandardMetafieldDefinitionTemplateEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of StandardMetafieldDefinitionTemplateEdge.
  """
  node: StandardMetafieldDefinitionTemplate!
}

"""
Represents the details of a specific type of product within the [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
"""
type StandardizedProductType {
  """
  The product taxonomy node associated with the standardized product type.
  """
  productTaxonomyNode: ProductTaxonomyNode
}

"""
A store credit account contains a monetary balance that can be redeemed at checkout for purchases in the shop.
The account is held in the specified currency and has an owner that cannot be transferred.

The account balance is redeemable at checkout only when the owner is
authenticated via [new customer accounts
authentication](https://shopify.dev/docs/api/customer).
"""
type StoreCreditAccount implements Node {
  """
  The current balance of the store credit account.
  """
  balance: MoneyV2!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The owner of the store credit account.
  """
  owner: HasStoreCreditAccounts!

  """
  The transaction history of the store credit account.
  """
  transactions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | expires_at | time | Filter transactions by expiry date. Only applicable to
    StoreCreditAccountCreditTransaction objects. All other objects are handled
    as if they have a null expiry date. | | | -
    `expires_at:<='2025-01-01T00:00:00+01:00'`<br/> -
    `expires_at:<='2025-12-31T23:00:00Z'` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | type | string | Filter transactions by type. Any value other than the
    accepted values will be ignored. | - `credit`<br/> - `debit`<br/> -
    `debit_revert`<br/> - `expiration` | | - `type:expiration`<br/> -
    `type:credit OR type:debit_revert` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list by the given key.
    """
    sortKey: TransactionSortKeys = CREATED_AT
  ): StoreCreditAccountTransactionConnection!
}

"""
An auto-generated type for paginating through multiple StoreCreditAccounts.
"""
type StoreCreditAccountConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [StoreCreditAccountEdge!]!

  """
  A list of nodes that are contained in StoreCreditAccountEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [StoreCreditAccount!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
A credit transaction which increases the store credit account balance.
"""
type StoreCreditAccountCreditTransaction implements Node & StoreCreditAccountTransaction {
  """
  The store credit account that the transaction belongs to.
  """
  account: StoreCreditAccount!

  """
  The amount of the transaction.
  """
  amount: MoneyV2!

  """
  The balance of the account after the transaction.
  """
  balanceAfterTransaction: MoneyV2!

  """
  The date and time when the transaction was created.
  """
  createdAt: DateTime!

  """
  The event that caused the store credit account transaction.
  """
  event: StoreCreditSystemEvent!

  """
  The time at which the transaction expires.
  Debit transactions will always spend the soonest expiring credit first.
  """
  expiresAt: DateTime

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The origin of the store credit account transaction.
  """
  origin: StoreCreditAccountTransactionOrigin

  """
  The remaining amount of the credit.
  The remaining amount will decrease when a debit spends this credit. It may
  also increase if that debit is subsequently reverted.
  In the event that the credit expires, the remaining amount will represent the amount that remained as the expiry ocurred.
  """
  remainingAmount: MoneyV2!
}

"""
A debit revert transaction which increases the store credit account balance.
Debit revert transactions are created automatically when a [store credit account debit transaction](https://shopify.dev/api/admin-graphql/latest/objects/StoreCreditAccountDebitTransaction) is reverted.

Store credit account debit transactions are reverted when an order is cancelled,
refunded or in the event of a payment failure at checkout.
The amount added to the balance is equal to the amount reverted on the original credit.
"""
type StoreCreditAccountDebitRevertTransaction implements Node & StoreCreditAccountTransaction {
  """
  The store credit account that the transaction belongs to.
  """
  account: StoreCreditAccount!

  """
  The amount of the transaction.
  """
  amount: MoneyV2!

  """
  The balance of the account after the transaction.
  """
  balanceAfterTransaction: MoneyV2!

  """
  The date and time when the transaction was created.
  """
  createdAt: DateTime!

  """
  The reverted debit transaction.
  """
  debitTransaction: StoreCreditAccountDebitTransaction!

  """
  The event that caused the store credit account transaction.
  """
  event: StoreCreditSystemEvent!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The origin of the store credit account transaction.
  """
  origin: StoreCreditAccountTransactionOrigin
}

"""
A debit transaction which decreases the store credit account balance.
"""
type StoreCreditAccountDebitTransaction implements Node & StoreCreditAccountTransaction {
  """
  The store credit account that the transaction belongs to.
  """
  account: StoreCreditAccount!

  """
  The amount of the transaction.
  """
  amount: MoneyV2!

  """
  The balance of the account after the transaction.
  """
  balanceAfterTransaction: MoneyV2!

  """
  The date and time when the transaction was created.
  """
  createdAt: DateTime!

  """
  The event that caused the store credit account transaction.
  """
  event: StoreCreditSystemEvent!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The origin of the store credit account transaction.
  """
  origin: StoreCreditAccountTransactionOrigin
}

"""
An auto-generated type which holds one StoreCreditAccount and a cursor during pagination.
"""
type StoreCreditAccountEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of StoreCreditAccountEdge.
  """
  node: StoreCreditAccount!
}

"""
An expiration transaction which decreases the store credit account balance.
Expiration transactions are created automatically when a [store credit account credit transaction](https://shopify.dev/api/admin-graphql/latest/objects/StoreCreditAccountCreditTransaction) expires.

The amount subtracted from the balance is equal to the remaining amount of the credit transaction.
"""
type StoreCreditAccountExpirationTransaction implements StoreCreditAccountTransaction {
  """
  The store credit account that the transaction belongs to.
  """
  account: StoreCreditAccount!

  """
  The amount of the transaction.
  """
  amount: MoneyV2!

  """
  The balance of the account after the transaction.
  """
  balanceAfterTransaction: MoneyV2!

  """
  The date and time when the transaction was created.
  """
  createdAt: DateTime!

  """
  The credit transaction which expired.
  """
  creditTransaction: StoreCreditAccountCreditTransaction!

  """
  The event that caused the store credit account transaction.
  """
  event: StoreCreditSystemEvent!

  """
  The origin of the store credit account transaction.
  """
  origin: StoreCreditAccountTransactionOrigin
}

"""
Interface for a store credit account transaction.
"""
interface StoreCreditAccountTransaction {
  """
  The store credit account that the transaction belongs to.
  """
  account: StoreCreditAccount!

  """
  The amount of the transaction.
  """
  amount: MoneyV2!

  """
  The balance of the account after the transaction.
  """
  balanceAfterTransaction: MoneyV2!

  """
  The date and time when the transaction was created.
  """
  createdAt: DateTime!

  """
  The event that caused the store credit account transaction.
  """
  event: StoreCreditSystemEvent!

  """
  The origin of the store credit account transaction.
  """
  origin: StoreCreditAccountTransactionOrigin
}

"""
An auto-generated type for paginating through multiple StoreCreditAccountTransactions.
"""
type StoreCreditAccountTransactionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [StoreCreditAccountTransactionEdge!]!

  """
  A list of nodes that are contained in StoreCreditAccountTransactionEdge. You
  can fetch data about an individual node, or you can follow the edges to fetch
  data about a collection of related nodes. At each node, you specify the fields
  that you want to retrieve.
  """
  nodes: [StoreCreditAccountTransaction!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one StoreCreditAccountTransaction and a cursor during pagination.
"""
type StoreCreditAccountTransactionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of StoreCreditAccountTransactionEdge.
  """
  node: StoreCreditAccountTransaction!
}

"""
The origin of a store credit account transaction.
"""
union StoreCreditAccountTransactionOrigin = OrderTransaction

"""
The event that caused the store credit account transaction.
"""
enum StoreCreditSystemEvent {
  """
  An adjustment was made to the store credit account.
  """
  ADJUSTMENT

  """
  Store credit was returned when an authorized payment was voided.
  """
  ORDER_CANCELLATION

  """
  Store credit was used as payment for an order.
  """
  ORDER_PAYMENT

  """
  Store credit was refunded from an order.
  """
  ORDER_REFUND

  """
  A store credit payment was reverted due to another payment method failing.
  """
  PAYMENT_FAILURE

  """
  A smaller amount of store credit was captured than was originally authorized.
  """
  PAYMENT_RETURNED

  """
  Tax finalization affected the store credit payment.
  """
  TAX_FINALIZATION
}

"""
A token that's used to delegate unauthenticated access scopes to clients that need to access
the unauthenticated [Storefront API](https://shopify.dev/docs/api/storefront).

An app can have a maximum of 100 active storefront access
tokens for each shop.

[Get started with the Storefront API](https://shopify.dev/docs/storefronts/headless/building-with-the-storefront-api/getting-started).
"""
type StorefrontAccessToken implements Node {
  """
  List of permissions associated with the token.
  """
  accessScopes: [AccessScope!]!

  """
  The issued public access token.
  """
  accessToken: String!

  """
  The date and time when the public access token was created.
  """
  createdAt: DateTime!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  An arbitrary title for each token determined by the developer, used for reference         purposes.
  """
  title: String!

  """
  The date and time when the storefront access token was updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple StorefrontAccessTokens.
"""
type StorefrontAccessTokenConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [StorefrontAccessTokenEdge!]!

  """
  A list of nodes that are contained in StorefrontAccessTokenEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [StorefrontAccessToken!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.
"""
type StorefrontAccessTokenEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of StorefrontAccessTokenEdge.
  """
  node: StorefrontAccessToken!
}

"""
Represents a unique identifier in the Storefront API. A `StorefrontID` value can
be used wherever an ID is expected in the Storefront API.

Example value: `"Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0LzEwMDc5Nzg1MTAw"`.
"""
scalar StorefrontID

"""
An auto-generated type for paginating through multiple Strings.
"""
type StringConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [StringEdge!]!

  """
  A list of nodes that are contained in StringEdge. You can fetch data about an
  individual node, or you can follow the edges to fetch data about a collection
  of related nodes. At each node, you specify the fields that you want to retrieve.
  """
  nodes: [String!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one String and a cursor during pagination.
"""
type StringEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of StringEdge.
  """
  node: String!
}

"""
Represents an applied code discount.
"""
type SubscriptionAppliedCodeDiscount {
  """
  The unique ID.
  """
  id: ID!

  """
  The redeem code of the discount that applies on the subscription.
  """
  redeemCode: String!

  """
  The reason that the discount on the subscription draft is rejected.
  """
  rejectionReason: SubscriptionDiscountRejectionReason
}

"""
A record of an execution of the subscription billing process. Billing attempts use
idempotency keys to avoid duplicate order creation. A successful billing attempt
will create an order.
"""
type SubscriptionBillingAttempt implements Node {
  """
  The date and time when the billing attempt was completed.
  """
  completedAt: DateTime

  """
  The date and time when the billing attempt was created.
  """
  createdAt: DateTime!

  """
  A code corresponding to a payment error during processing.
  """
  errorCode: SubscriptionBillingAttemptErrorCode @deprecated(reason: "As of API version 2025-01, use `processingError.code` instead to get the errorCode")

  """
  A message describing a payment error during processing.
  """
  errorMessage: String @deprecated(reason: "As of API version 2025-01, use `processingError.message` instead to get the errorMessage")

  """
  A globally-unique ID.
  """
  id: ID!

  """
  A unique key generated by the client to avoid duplicate payments.
  """
  idempotencyKey: String!

  """
  The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
  """
  nextActionUrl: URL

  """
  The result of this billing attempt if completed successfully.
  """
  order: Order

  """
  The date and time used to calculate fulfillment intervals for a billing attempt that
  successfully completed after the current anchor date. To prevent fulfillment from being
  pushed to the next anchor date, this field can override the billing attempt date.
  """
  originTime: DateTime

  """
  The reference shared between retried payment attempts.
  """
  paymentGroupId: String

  """
  The reference shared between payment attempts with similar payment details.
  """
  paymentSessionId: String

  """
  Error information from processing the billing attempt.
  """
  processingError: SubscriptionBillingAttemptProcessingError

  """
  Whether the billing attempt is still processing.
  """
  ready: Boolean!

  """
  Whether the billing attempt respects the merchant's inventory policy.
  """
  respectInventoryPolicy: Boolean!

  """
  The subscription contract.
  """
  subscriptionContract: SubscriptionContract!

  """
  The transactions created by the billing attempt.
  """
  transactions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): OrderTransactionConnection!
}

"""
An auto-generated type for paginating through multiple SubscriptionBillingAttempts.
"""
type SubscriptionBillingAttemptConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SubscriptionBillingAttemptEdge!]!

  """
  A list of nodes that are contained in SubscriptionBillingAttemptEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [SubscriptionBillingAttempt!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.
"""
type SubscriptionBillingAttemptEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SubscriptionBillingAttemptEdge.
  """
  node: SubscriptionBillingAttempt!
}

"""
The possible error codes associated with making billing attempts. The error codes supplement the
`error_message` to provide consistent results and help with dunning management.
"""
enum SubscriptionBillingAttemptErrorCode {
  """
  The amount is too small.
  """
  AMOUNT_TOO_SMALL

  """
  There was an error during the authentication.
  """
  AUTHENTICATION_ERROR

  """
  Payment method was canceled by buyer.
  """
  BUYER_CANCELED_PAYMENT_METHOD

  """
  Card number was incorrect.
  """
  CARD_NUMBER_INCORRECT

  """
  Customer is invalid.
  """
  CUSTOMER_INVALID

  """
  Customer was not found.
  """
  CUSTOMER_NOT_FOUND

  """
  Payment method is expired.
  """
  EXPIRED_PAYMENT_METHOD

  """
  Fraud was suspected.
  """
  FRAUD_SUSPECTED

  """
  Insufficient funds.
  """
  INSUFFICIENT_FUNDS

  """
  Not enough inventory found.
  """
  INSUFFICIENT_INVENTORY

  """
  The billing agreement ID or the transaction ID for the customer's payment method is invalid.
  """
  INVALID_CUSTOMER_BILLING_AGREEMENT

  """
  Payment method is invalid. Please update or create a new payment method.
  """
  INVALID_PAYMENT_METHOD

  """
  The shipping address is either missing or invalid.
  """
  INVALID_SHIPPING_ADDRESS

  """
  No inventory location found or enabled.
  """
  INVENTORY_ALLOCATIONS_NOT_FOUND

  """
  A payment has already been made for this invoice.
  """
  INVOICE_ALREADY_PAID

  """
  Payment method was declined by processor.
  """
  PAYMENT_METHOD_DECLINED

  """
  Payment method cannot be used with the current payment gateway test mode configuration.
  """
  PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG

  """
  Payment method was not found.
  """
  PAYMENT_METHOD_NOT_FOUND

  """
  Payment provider is not enabled.
  """
  PAYMENT_PROVIDER_IS_NOT_ENABLED

  """
  Paypal Error General.
  """
  PAYPAL_ERROR_GENERAL

  """
  Purchase Type is not supported.
  """
  PURCHASE_TYPE_NOT_SUPPORTED

  """
  Gateway is in test mode and attempted to bill a live payment method.
  """
  TEST_MODE

  """
  Transient error, try again later.
  """
  TRANSIENT_ERROR

  """
  There was an unexpected error during the billing attempt.
  """
  UNEXPECTED_ERROR
}

"""
A base error type that applies to all uncategorized error classes.
"""
type SubscriptionBillingAttemptGenericError implements SubscriptionBillingAttemptProcessingError {
  """
  The code for the error.
  """
  code: SubscriptionBillingAttemptErrorCode!

  """
  An explanation of the error.
  """
  message: String!
}

"""
An inventory error caused by an issue with one or more of the contract merchandise lines.
"""
type SubscriptionBillingAttemptInsufficientStockProductVariantsError implements SubscriptionBillingAttemptProcessingError {
  """
  The code for the error.
  """
  code: SubscriptionBillingAttemptErrorCode!

  """
  A list of product variants that caused the insufficient inventory error.
  """
  insufficientStockProductVariants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductVariantConnection!

  """
  An explanation of the error.
  """
  message: String!
}

"""
An inventory error caused by an issue with one or more of the contract merchandise lines.
"""
type SubscriptionBillingAttemptOutOfStockProductVariantsError implements SubscriptionBillingAttemptProcessingError {
  """
  The code for the error.
  """
  code: SubscriptionBillingAttemptErrorCode!

  """
  An explanation of the error.
  """
  message: String!

  """
  A list of responsible product variants.
  """
  outOfStockProductVariants(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): ProductVariantConnection! @deprecated(reason: "Use `subscriptionBillingAttemptInsufficientStockProductVariantsError` type instead.")
}

"""
An error that prevented a billing attempt.
"""
interface SubscriptionBillingAttemptProcessingError {
  """
  The code for the error.
  """
  code: SubscriptionBillingAttemptErrorCode!

  """
  An explanation of the error.
  """
  message: String!
}

"""
The set of valid sort keys for the SubscriptionBillingAttempts query.
"""
enum SubscriptionBillingAttemptsSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
A subscription billing cycle.
"""
type SubscriptionBillingCycle {
  """
  The date on which the billing attempt is expected to be made.
  """
  billingAttemptExpectedDate: DateTime!

  """
  The list of billing attempts associated with the billing cycle.
  """
  billingAttempts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionBillingAttemptConnection!

  """
  The end date of the billing cycle.
  """
  cycleEndAt: DateTime!

  """
  The index of the billing cycle.
  """
  cycleIndex: Int!

  """
  The start date of the billing cycle.
  """
  cycleStartAt: DateTime!

  """
  Whether this billing cycle was edited.
  """
  edited: Boolean!

  """
  The active edited contract for the billing cycle.
  """
  editedContract: SubscriptionBillingCycleEditedContract

  """
  Whether this billing cycle was skipped.
  """
  skipped: Boolean!

  """
  The subscription contract that the billing cycle belongs to.
  """
  sourceContract: SubscriptionContract!

  """
  The status of the billing cycle.
  """
  status: SubscriptionBillingCycleBillingCycleStatus!
}

"""
The possible status values of a subscription billing cycle.
"""
enum SubscriptionBillingCycleBillingCycleStatus {
  """
  The billing cycle is billed.
  """
  BILLED

  """
  The billing cycle hasn't been billed.
  """
  UNBILLED
}

"""
An auto-generated type for paginating through multiple SubscriptionBillingCycles.
"""
type SubscriptionBillingCycleConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SubscriptionBillingCycleEdge!]!

  """
  A list of nodes that are contained in SubscriptionBillingCycleEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [SubscriptionBillingCycle!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionBillingCycle and a cursor during pagination.
"""
type SubscriptionBillingCycleEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SubscriptionBillingCycleEdge.
  """
  node: SubscriptionBillingCycle!
}

"""
Represents a subscription contract with billing cycles.
"""
type SubscriptionBillingCycleEditedContract implements SubscriptionContractBase {
  """
  The subscription app that the subscription contract is registered to.
  """
  app: App

  """
  The URL of the subscription contract page on the subscription app.
  """
  appAdminUrl: URL

  """
  The billing cycles that the edited contract belongs to.
  """
  billingCycles(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: SubscriptionBillingCyclesSortKeys = CYCLE_INDEX
  ): SubscriptionBillingCycleConnection!

  """
  The date and time when the subscription contract was created.
  """
  createdAt: DateTime!

  """
  The currency that's used for the subscription contract.
  """
  currencyCode: CurrencyCode!

  """
  A list of the custom attributes to be added to the generated orders.
  """
  customAttributes: [Attribute!]!

  """
  The customer to whom the subscription contract belongs.
  """
  customer: Customer

  """
  The customer payment method that's used for the subscription contract.
  """
  customerPaymentMethod(
    """
    Whether to show the customer's revoked payment method.
    """
    showRevoked: Boolean = false
  ): CustomerPaymentMethod

  """
  The delivery method for each billing of the subscription contract.
  """
  deliveryMethod: SubscriptionDeliveryMethod

  """
  The delivery price for each billing of the subscription contract.
  """
  deliveryPrice: MoneyV2!

  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionManualDiscountConnection!

  """
  The number of lines associated with the subscription contract.
  """
  lineCount: Int! @deprecated(reason: "Use `linesCount` instead.")

  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionLineConnection!

  """
  The number of lines associated with the subscription contract.
  """
  linesCount: Count

  """
  The note field that will be applied to the generated orders.
  """
  note: String

  """
  A list of the subscription contract's orders.
  """
  orders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): OrderConnection!

  """
  The date and time when the subscription contract was updated.
  """
  updatedAt: DateTime!
}

"""
The input fields for specifying the subscription contract and selecting the associated billing cycle.
"""
input SubscriptionBillingCycleInput {
  """
  The ID of the subscription contract associated with the billing cycle.
  """
  contractId: ID!

  """
  Selects the billing cycle by date or index.
  """
  selector: SubscriptionBillingCycleSelector!
}

"""
The input fields to select SubscriptionBillingCycle by either date or index.
"""
input SubscriptionBillingCycleSelector {
  """
  Returns a billing cycle by date.
  """
  date: DateTime

  """
  Returns a billing cycle by index.
  """
  index: Int
}

"""
The input fields to select a subset of subscription billing cycles within a date range.
"""
input SubscriptionBillingCyclesDateRangeSelector {
  """
  The end date and time for the range.
  """
  endDate: DateTime!

  """
  The start date and time for the range.
  """
  startDate: DateTime!
}

"""
The input fields to select a subset of subscription billing cycles within an index range.
"""
input SubscriptionBillingCyclesIndexRangeSelector {
  """
  The end index for the range.
  """
  endIndex: Int!

  """
  The start index for the range.
  """
  startIndex: Int!
}

"""
The set of valid sort keys for the SubscriptionBillingCycles query.
"""
enum SubscriptionBillingCyclesSortKeys {
  """
  Sort by the `cycle_index` value.
  """
  CYCLE_INDEX

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Represents a Subscription Billing Policy.
"""
type SubscriptionBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: SellingPlanInterval!

  """
  The number of billing intervals between invoices.
  """
  intervalCount: Int!

  """
  Maximum amount of cycles after which the subscription ends.
  """
  maxCycles: Int

  """
  Minimum amount of cycles required in the subscription.
  """
  minCycles: Int
}

"""
Represents a Subscription Contract.
"""
type SubscriptionContract implements Node & SubscriptionContractBase {
  """
  The subscription app that the subscription contract is registered to.
  """
  app: App

  """
  The URL of the subscription contract page on the subscription app.
  """
  appAdminUrl: URL

  """
  The list of billing attempts associated with the subscription contract.
  """
  billingAttempts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionBillingAttemptConnection!

  """
  The billing policy associated with the subscription contract.
  """
  billingPolicy: SubscriptionBillingPolicy!

  """
  The date and time when the subscription contract was created.
  """
  createdAt: DateTime!

  """
  The currency that's used for the subscription contract.
  """
  currencyCode: CurrencyCode!

  """
  A list of the custom attributes to be added to the generated orders.
  """
  customAttributes: [Attribute!]!

  """
  The customer to whom the subscription contract belongs.
  """
  customer: Customer

  """
  The customer payment method that's used for the subscription contract.
  """
  customerPaymentMethod(
    """
    Whether to show the customer's revoked payment method.
    """
    showRevoked: Boolean = false
  ): CustomerPaymentMethod

  """
  The delivery method for each billing of the subscription contract.
  """
  deliveryMethod: SubscriptionDeliveryMethod

  """
  The delivery policy associated with the subscription contract.
  """
  deliveryPolicy: SubscriptionDeliveryPolicy!

  """
  The delivery price for each billing of the subscription contract.
  """
  deliveryPrice: MoneyV2!

  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionManualDiscountConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The last billing error type of the contract.
  """
  lastBillingAttemptErrorType: SubscriptionContractLastBillingErrorType

  """
  The current status of the last payment.
  """
  lastPaymentStatus: SubscriptionContractLastPaymentStatus

  """
  The number of lines associated with the subscription contract.
  """
  lineCount: Int! @deprecated(reason: "Use `linesCount` instead.")

  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionLineConnection!

  """
  The number of lines associated with the subscription contract.
  """
  linesCount: Count

  """
  The next billing date for the subscription contract. This field is managed by the apps.
          Alternatively you can utilize our
          [Billing Cycles APIs](https://shopify.dev/docs/apps/selling-strategies/subscriptions/billing-cycles),
          which provide auto-computed billing dates and additional functionalities.
  """
  nextBillingDate: DateTime

  """
  The note field that will be applied to the generated orders.
  """
  note: String

  """
  A list of the subscription contract's orders.
  """
  orders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): OrderConnection!

  """
  The order from which this contract originated.
  """
  originOrder: Order

  """
  The revision id of the contract.
  """
  revisionId: UnsignedInt64!

  """
  The current status of the subscription contract.
  """
  status: SubscriptionContractSubscriptionStatus!

  """
  The date and time when the subscription contract was updated.
  """
  updatedAt: DateTime!
}

"""
Represents subscription contract common fields.
"""
interface SubscriptionContractBase {
  """
  The subscription app that the subscription contract is registered to.
  """
  app: App

  """
  The URL of the subscription contract page on the subscription app.
  """
  appAdminUrl: URL

  """
  The currency that's used for the subscription contract.
  """
  currencyCode: CurrencyCode!

  """
  A list of the custom attributes to be added to the generated orders.
  """
  customAttributes: [Attribute!]!

  """
  The customer to whom the subscription contract belongs.
  """
  customer: Customer

  """
  The customer payment method that's used for the subscription contract.
  """
  customerPaymentMethod(
    """
    Whether to show the customer's revoked payment method.
    """
    showRevoked: Boolean = false
  ): CustomerPaymentMethod

  """
  The delivery method for each billing of the subscription contract.
  """
  deliveryMethod: SubscriptionDeliveryMethod

  """
  The delivery price for each billing of the subscription contract.
  """
  deliveryPrice: MoneyV2!

  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionManualDiscountConnection!

  """
  The number of lines associated with the subscription contract.
  """
  lineCount: Int! @deprecated(reason: "Use `linesCount` instead.")

  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionLineConnection!

  """
  The number of lines associated with the subscription contract.
  """
  linesCount: Count

  """
  The note field that will be applied to the generated orders.
  """
  note: String

  """
  A list of the subscription contract's orders.
  """
  orders(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): OrderConnection!

  """
  The date and time when the subscription contract was updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple SubscriptionContracts.
"""
type SubscriptionContractConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SubscriptionContractEdge!]!

  """
  A list of nodes that are contained in SubscriptionContractEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [SubscriptionContract!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionContract and a cursor during pagination.
"""
type SubscriptionContractEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SubscriptionContractEdge.
  """
  node: SubscriptionContract!
}

"""
The possible values of the last billing error on a subscription contract.
"""
enum SubscriptionContractLastBillingErrorType {
  """
  Subscription billing attempt error due to customer error.
  """
  CUSTOMER_ERROR

  """
  Subscription billing attempt error due to inventory error.
  """
  INVENTORY_ERROR

  """
  All other billing attempt errors.
  """
  OTHER

  """
  Subscription billing attempt error due to payment error.
  """
  PAYMENT_ERROR
}

"""
The possible status values of the last payment on a subscription contract.
"""
enum SubscriptionContractLastPaymentStatus {
  """
  Failed subscription billing attempt.
  """
  FAILED

  """
  Successful subscription billing attempt.
  """
  SUCCEEDED
}

"""
The possible status values of a subscription.
"""
enum SubscriptionContractSubscriptionStatus {
  """
  The contract is active and continuing per its policies.
  """
  ACTIVE

  """
  The contract was ended by an unplanned customer action.
  """
  CANCELLED

  """
  The contract has ended per the expected circumstances. All billing and deliverycycles of the subscriptions were executed.
  """
  EXPIRED

  """
  The contract ended because billing failed and no further billing attempts are expected.
  """
  FAILED

  """
  The contract is temporarily paused and is expected to resume in the future.
  """
  PAUSED
}

"""
Represents a Subscription Line Pricing Cycle Adjustment.
"""
type SubscriptionCyclePriceAdjustment {
  """
  Price adjustment type.
  """
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """
  Price adjustment value.
  """
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!

  """
  The number of cycles required before this pricing policy applies.
  """
  afterCycle: Int!

  """
  The computed price after the adjustments applied.
  """
  computedPrice: MoneyV2!
}

"""
Describes the delivery method to use to get the physical goods to the customer.
"""
union SubscriptionDeliveryMethod = SubscriptionDeliveryMethodLocalDelivery | SubscriptionDeliveryMethodPickup | SubscriptionDeliveryMethodShipping

"""
A subscription delivery method for local delivery.
The other subscription delivery methods can be found in the `SubscriptionDeliveryMethod` union type.
"""
type SubscriptionDeliveryMethodLocalDelivery {
  """
  The address to deliver to.
  """
  address: SubscriptionMailingAddress!

  """
  The details of the local delivery method to use.
  """
  localDeliveryOption: SubscriptionDeliveryMethodLocalDeliveryOption!
}

"""
The selected delivery option on a subscription contract.
"""
type SubscriptionDeliveryMethodLocalDeliveryOption {
  """
  A custom reference to the delivery method for use with automations.
  """
  code: String

  """
  The details displayed to the customer to describe the local delivery option.
  """
  description: String

  """
  The delivery instructions that the customer can provide to the merchant.
  """
  instructions: String

  """
  The phone number that the customer provided to the merchant.
  Formatted using E.164 standard. For example, `+16135551111`.
  """
  phone: String!

  """
  The presentment title of the local delivery option.
  """
  presentmentTitle: String

  """
  The title of the local delivery option.
  """
  title: String
}

"""
A delivery method with a pickup option.
"""
type SubscriptionDeliveryMethodPickup {
  """
  The details of the pickup delivery method to use.
  """
  pickupOption: SubscriptionDeliveryMethodPickupOption!
}

"""
Represents the selected pickup option on a subscription contract.
"""
type SubscriptionDeliveryMethodPickupOption {
  """
  A custom reference to the delivery method for use with automations.
  """
  code: String

  """
  The details displayed to the customer to describe the pickup option.
  """
  description: String

  """
  The location where the customer will pick up the merchandise.
  """
  location: Location!

  """
  The presentment title of the pickup option.
  """
  presentmentTitle: String

  """
  The title of the pickup option.
  """
  title: String
}

"""
Represents a shipping delivery method: a mailing address and a shipping option.
"""
type SubscriptionDeliveryMethodShipping {
  """
  The address to ship to.
  """
  address: SubscriptionMailingAddress!

  """
  The details of the shipping method to use.
  """
  shippingOption: SubscriptionDeliveryMethodShippingOption!
}

"""
Represents the selected shipping option on a subscription contract.
"""
type SubscriptionDeliveryMethodShippingOption {
  """
  The carrier service that's providing this shipping option.
  This field isn't currently supported and returns null.
  """
  carrierService: DeliveryCarrierService @deprecated(reason: "This field has never been implemented.")

  """
  The code of the shipping option.
  """
  code: String

  """
  The description of the shipping option.
  """
  description: String

  """
  The presentment title of the shipping option.
  """
  presentmentTitle: String

  """
  The title of the shipping option.
  """
  title: String
}

"""
The delivery option for a subscription contract.
"""
union SubscriptionDeliveryOption = SubscriptionLocalDeliveryOption | SubscriptionPickupOption | SubscriptionShippingOption

"""
The result of the query to fetch delivery options for the subscription contract.
"""
union SubscriptionDeliveryOptionResult = SubscriptionDeliveryOptionResultFailure | SubscriptionDeliveryOptionResultSuccess

"""
A failure to find the available delivery options for a subscription contract.
"""
type SubscriptionDeliveryOptionResultFailure {
  """
  The reason for the failure.
  """
  message: String
}

"""
The delivery option for a subscription contract.
"""
type SubscriptionDeliveryOptionResultSuccess {
  """
  The available delivery options.
  """
  deliveryOptions: [SubscriptionDeliveryOption!]!
}

"""
Represents a Subscription Delivery Policy.
"""
type SubscriptionDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: SellingPlanInterval!

  """
  The number of delivery intervals between deliveries.
  """
  intervalCount: Int!
}

"""
Subscription draft discount types.
"""
union SubscriptionDiscount = SubscriptionAppliedCodeDiscount | SubscriptionManualDiscount

"""
Represents what a particular discount reduces from a line price.
"""
type SubscriptionDiscountAllocation {
  """
  Allocation amount.
  """
  amount: MoneyV2!

  """
  Discount that created the allocation.
  """
  discount: SubscriptionDiscount!
}

"""
An auto-generated type for paginating through multiple SubscriptionDiscounts.
"""
type SubscriptionDiscountConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SubscriptionDiscountEdge!]!

  """
  A list of nodes that are contained in SubscriptionDiscountEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [SubscriptionDiscount!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.
"""
type SubscriptionDiscountEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SubscriptionDiscountEdge.
  """
  node: SubscriptionDiscount!
}

"""
Represents the subscription lines the discount applies on.
"""
type SubscriptionDiscountEntitledLines {
  """
  Specify whether the subscription discount will apply on all subscription lines.
  """
  all: Boolean!

  """
  The list of subscription lines associated with the subscription discount.
  """
  lines(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionLineConnection!
}

"""
The value of the discount and how it will be applied.
"""
type SubscriptionDiscountFixedAmountValue {
  """
  The fixed amount value of the discount.
  """
  amount: MoneyV2!

  """
  Whether the amount is applied per item.
  """
  appliesOnEachItem: Boolean!
}

"""
The percentage value of the discount.
"""
type SubscriptionDiscountPercentageValue {
  """
  The percentage value of the discount.
  """
  percentage: Int!
}

"""
The reason a discount on a subscription draft was rejected.
"""
enum SubscriptionDiscountRejectionReason {
  """
  Discount is inactive.
  """
  CURRENTLY_INACTIVE

  """
  Given customer does not qualify for the discount.
  """
  CUSTOMER_NOT_ELIGIBLE

  """
  Customer usage limit has been reached.
  """
  CUSTOMER_USAGE_LIMIT_REACHED

  """
  Purchase type does not qualify for the discount.
  """
  INCOMPATIBLE_PURCHASE_TYPE

  """
  Internal error during discount code validation.
  """
  INTERNAL_ERROR

  """
  Discount code is not found.
  """
  NOT_FOUND

  """
  Discount does not apply to any of the given line items.
  """
  NO_ENTITLED_LINE_ITEMS

  """
  No applicable shipping lines.
  """
  NO_ENTITLED_SHIPPING_LINES

  """
  Purchase amount of items does not qualify for the discount.
  """
  PURCHASE_NOT_IN_RANGE

  """
  Quantity of items does not qualify for the discount.
  """
  QUANTITY_NOT_IN_RANGE

  """
  Discount usage limit has been reached.
  """
  USAGE_LIMIT_REACHED
}

"""
The value of the discount and how it will be applied.
"""
union SubscriptionDiscountValue = SubscriptionDiscountFixedAmountValue | SubscriptionDiscountPercentageValue

"""
Represents a Subscription Draft.
"""
type SubscriptionDraft implements Node {
  """
  The billing cycle that the subscription contract will be associated with.
  """
  billingCycle: SubscriptionBillingCycle

  """
  The billing policy for the subscription contract.
  """
  billingPolicy: SubscriptionBillingPolicy!

  """
  The billing cycles of the contracts that will be concatenated to the subscription contract.
  """
  concatenatedBillingCycles(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: SubscriptionBillingCyclesSortKeys = CYCLE_INDEX
  ): SubscriptionBillingCycleConnection!

  """
  The currency used for the subscription contract.
  """
  currencyCode: CurrencyCode!

  """
  A list of the custom attributes to be added to the generated orders.
  """
  customAttributes: [Attribute!]!

  """
  The customer to whom the subscription contract belongs.
  """
  customer: Customer!

  """
  The customer payment method used for the subscription contract.
  """
  customerPaymentMethod(
    """
    Whether to show the customer's revoked payment method.
    """
    showRevoked: Boolean = false
  ): CustomerPaymentMethod

  """
  The delivery method for each billing of the subscription contract.
  """
  deliveryMethod: SubscriptionDeliveryMethod

  """
  The available delivery options for a given delivery address. Returns `null` for pending requests.
  """
  deliveryOptions(
    """
    The address to deliver the subscription contract to.
    """
    deliveryAddress: MailingAddressInput
  ): SubscriptionDeliveryOptionResult

  """
  The delivery policy for the subscription contract.
  """
  deliveryPolicy: SubscriptionDeliveryPolicy!

  """
  The delivery price for each billing the subscription contract.
  """
  deliveryPrice: MoneyV2

  """
  The list of subscription discounts which will be associated with the subscription contract.
  """
  discounts(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be added to the subscription contract.
  """
  discountsAdded(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be removed from the subscription contract.
  """
  discountsRemoved(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be updated on the subscription contract.
  """
  discountsUpdated(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionDiscountConnection!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The list of subscription lines which will be associated with the subscription contract.
  """
  lines(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionLineConnection!

  """
  The list of subscription lines to be added to the subscription contract.
  """
  linesAdded(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionLineConnection!

  """
  The list of subscription lines to be removed from the subscription contract.
  """
  linesRemoved(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): SubscriptionLineConnection!

  """
  The next billing date for the subscription contract.
  """
  nextBillingDate: DateTime

  """
  The note field that will be applied to the generated orders.
  """
  note: String

  """
  The original subscription contract.
  """
  originalContract: SubscriptionContract

  """
  Available Shipping Options for a given delivery address. Returns NULL for pending requests.
  """
  shippingOptions(
    """
    The address to delivery the subscription contract to.
    """
    deliveryAddress: MailingAddressInput
  ): SubscriptionShippingOptionResult @deprecated(reason: "Use `deliveryOptions` instead.")

  """
  The current status of the subscription contract.
  """
  status: SubscriptionContractSubscriptionStatus
}

"""
Represents a Subscription Line.
"""
type SubscriptionLine {
  """
  The origin contract of the line if it was concatenated from another contract.
  """
  concatenatedOriginContract: SubscriptionContract

  """
  The price per unit for the subscription line in the contract's currency.
  """
  currentPrice: MoneyV2!

  """
  List of custom attributes associated to the line item.
  """
  customAttributes: [Attribute!]!

  """
  Discount allocations.
  """
  discountAllocations: [SubscriptionDiscountAllocation!]!

  """
  The unique ID.
  """
  id: ID!

  """
  Total line price including all discounts.
  """
  lineDiscountedPrice: MoneyV2!

  """
  Describe the price changes of the line over time.
  """
  pricingPolicy: SubscriptionPricingPolicy

  """
  The product ID associated with the subscription line.
  """
  productId: ID

  """
  The quantity of the unit selected for the subscription line.
  """
  quantity: Int!

  """
  Whether physical shipping is required for the variant.
  """
  requiresShipping: Boolean!

  """
  The selling plan ID associated to the line.

  Indicates which selling plan was used to create this
  contract line initially. The selling plan ID is also used to
  find the associated delivery profile.

  The subscription contract, subscription line, or selling plan might have
  changed. As a result, the selling plan's attributes might not
  match the information on the contract.
  """
  sellingPlanId: ID

  """
  The selling plan name associated to the line. This name describes
  the order line items created from this subscription line
  for both merchants and customers.

  The value can be different from the selling plan's name, because both
  the selling plan's name and the subscription line's selling_plan_name
  attribute can be updated independently.
  """
  sellingPlanName: String

  """
  Variant SKU number of the item associated with the subscription line.
  """
  sku: String

  """
  Whether the variant is taxable.
  """
  taxable: Boolean!

  """
  Product title of the item associated with the subscription line.
  """
  title: String!

  """
  The product variant ID associated with the subscription line.
  """
  variantId: ID

  """
  The image associated with the line item's variant or product.
  """
  variantImage: Image

  """
  Product variant title of the item associated with the subscription line.
  """
  variantTitle: String
}

"""
An auto-generated type for paginating through multiple SubscriptionLines.
"""
type SubscriptionLineConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SubscriptionLineEdge!]!

  """
  A list of nodes that are contained in SubscriptionLineEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [SubscriptionLine!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionLine and a cursor during pagination.
"""
type SubscriptionLineEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SubscriptionLineEdge.
  """
  node: SubscriptionLine!
}

"""
A local delivery option for a subscription contract.
"""
type SubscriptionLocalDeliveryOption {
  """
  The code of the local delivery option.
  """
  code: String!

  """
  The description of the local delivery option.
  """
  description: String

  """
  Whether a phone number is required for the local delivery option.
  """
  phoneRequired: Boolean!

  """
  The presentment title of the local delivery option.
  """
  presentmentTitle: String

  """
  The price of the local delivery option.
  """
  price: MoneyV2

  """
  The title of the local delivery option.
  """
  title: String!
}

"""
Represents a Mailing Address on a Subscription.
"""
type SubscriptionMailingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """
  The name of the city, district, village, or town.
  """
  city: String

  """
  The name of the customer's company or organization.
  """
  company: String

  """
  The name of the country.
  """
  country: String

  """
  The two-letter code for the country of the address.

  For example, US.
  """
  countryCode: CountryCode

  """
  The first name of the customer.
  """
  firstName: String

  """
  The last name of the customer.
  """
  lastName: String

  """
  The full name of the customer, based on firstName and lastName.
  """
  name: String

  """
  A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """
  The region of the address, such as the province, state, or district.
  """
  province: String

  """
  The alphanumeric code for the region.

  For example, ON.
  """
  provinceCode: String

  """
  The zip or postal code of the address.
  """
  zip: String
}

"""
Custom subscription discount.
"""
type SubscriptionManualDiscount {
  """
  Entitled line items used to apply the subscription discount on.
  """
  entitledLines: SubscriptionDiscountEntitledLines!

  """
  The unique ID.
  """
  id: ID!

  """
  The maximum number of times the subscription discount will be applied on orders.
  """
  recurringCycleLimit: Int

  """
  The reason that the discount on the subscription draft is rejected.
  """
  rejectionReason: SubscriptionDiscountRejectionReason

  """
  Type of line the discount applies on.
  """
  targetType: DiscountTargetType!

  """
  The title associated with the subscription discount.
  """
  title: String

  """
  The type of the subscription discount.
  """
  type: DiscountType!

  """
  The number of times the discount was applied.
  """
  usageCount: Int!

  """
  The value of the subscription discount.
  """
  value: SubscriptionDiscountValue!
}

"""
An auto-generated type for paginating through multiple SubscriptionManualDiscounts.
"""
type SubscriptionManualDiscountConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [SubscriptionManualDiscountEdge!]!

  """
  A list of nodes that are contained in SubscriptionManualDiscountEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [SubscriptionManualDiscount!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.
"""
type SubscriptionManualDiscountEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of SubscriptionManualDiscountEdge.
  """
  node: SubscriptionManualDiscount!
}

"""
A pickup option to deliver a subscription contract.
"""
type SubscriptionPickupOption {
  """
  The code of the pickup option.
  """
  code: String!

  """
  The description of the pickup option.
  """
  description: String

  """
  The pickup location.
  """
  location: Location!

  """
  Whether a phone number is required for the pickup option.
  """
  phoneRequired: Boolean!

  """
  The estimated amount of time it takes for the pickup to be ready. For example, "Usually ready in 24 hours".).
  """
  pickupTime: String!

  """
  The presentment title of the pickup option.
  """
  presentmentTitle: String

  """
  The price of the pickup option.
  """
  price: MoneyV2

  """
  The title of the pickup option.
  """
  title: String!
}

"""
Represents a Subscription Line Pricing Policy.
"""
type SubscriptionPricingPolicy {
  """
  The base price per unit for the subscription line in the contract's currency.
  """
  basePrice: MoneyV2!

  """
  The adjustments per cycle for the subscription line.
  """
  cycleDiscounts: [SubscriptionCyclePriceAdjustment!]!
}

"""
A shipping option to deliver a subscription contract.
"""
type SubscriptionShippingOption {
  """
  The carrier service that's providing this shipping option.
  This field isn't currently supported and returns null.
  """
  carrierService: DeliveryCarrierService @deprecated(reason: "This field has never been implemented.")

  """
  The code of the shipping option.
  """
  code: String!

  """
  The description of the shipping option.
  """
  description: String

  """
  If a phone number is required for the shipping option.
  """
  phoneRequired: Boolean

  """
  The presentment title of the shipping option.
  """
  presentmentTitle: String

  """
  The price of the shipping option.
  """
  price: MoneyV2

  """
  The title of the shipping option.
  """
  title: String!
}

"""
The result of the query to fetch shipping options for the subscription contract.
"""
union SubscriptionShippingOptionResult = SubscriptionShippingOptionResultFailure | SubscriptionShippingOptionResultSuccess

"""
Failure determining available shipping options for delivery of a subscription contract.
"""
type SubscriptionShippingOptionResultFailure {
  """
  Failure reason.
  """
  message: String
}

"""
A shipping option for delivery of a subscription contract.
"""
type SubscriptionShippingOptionResultSuccess {
  """
  Available shipping options.
  """
  shippingOptions: [SubscriptionShippingOption!]!
}

"""
A suggested transaction. Suggested transaction are usually used in the context of refunds
and exchanges.
"""
type SuggestedOrderTransaction {
  """
  The masked account number associated with the payment method.
  """
  accountNumber: String

  """
  The amount of the transaction.
  """
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The amount and currency of the suggested order transaction in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The human-readable payment gateway name suggested to process the transaction.
  """
  formattedGateway: String

  """
  The suggested payment gateway used to process the transaction.
  """
  gateway: String

  """
  Specifies the kind of the suggested order transaction.
  """
  kind: SuggestedOrderTransactionKind!

  """
  Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
  """
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableSet` instead.")

  """
  Specifies the available amount to refund on the gateway in shop and
  presentment currencies. Only available within SuggestedRefund.
  """
  maximumRefundableSet: MoneyBag

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: OrderTransaction

  """
  The associated payment details related to the transaction.
  """
  paymentDetails: PaymentDetails
}

"""
Specifies the kind of the suggested order transaction.
"""
enum SuggestedOrderTransactionKind {
  """
  A suggested refund transaction for an order.
  """
  SUGGESTED_REFUND
}

"""
Represents a refund suggested by Shopify based on the items being reimbursed.
You can then use the suggested refund object to generate an actual refund.
"""
type SuggestedRefund {
  """
  The total monetary value to be refunded.
  """
  amount: Money! @deprecated(reason: "Use `amountSet` instead.")

  """
  The total monetary value to be refunded in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The sum of all the discounted prices of the line items being refunded.
  """
  discountedSubtotalSet: MoneyBag!

  """
  The total monetary value available to refund.
  """
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead.")

  """
  The total monetary value available to refund in shop and presentment currencies.
  """
  maximumRefundableSet: MoneyBag!

  """
  A list of duties to be refunded from the order.
  """
  refundDuties: [RefundDuty!]!

  """
  A list of line items to be refunded, along with restock instructions.
  """
  refundLineItems: [RefundLineItem!]!

  """
  The shipping costs to be refunded from the order.
  """
  shipping: ShippingRefund!

  """
  The sum of all the prices of the line items being refunded.
  """
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead.")

  """
  The sum of all the prices of the line items being refunded in shop and presentment currencies.
  """
  subtotalSet: MoneyBag!

  """
  A list of suggested order transactions.
  """
  suggestedTransactions: [SuggestedOrderTransaction!]!

  """
  The total cart discount amount that was applied to all line items in this refund.
  """
  totalCartDiscountAmountSet: MoneyBag!

  """
  The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalDutiesSet: MoneyBag!

  """
  The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalTaxSet: MoneyBag!

  """
  The sum of the taxes being refunded from the order. The value must be positive.
  """
  totalTaxes: Money! @deprecated(reason: "Use `totalTaxSet` instead.")
}

"""
Represents a return refund suggested by Shopify based on the items being
reimbursed. You can then use the suggested refund object to generate an actual
refund for the return.
"""
type SuggestedReturnRefund {
  """
  The total monetary value to be refunded in shop and presentment currencies.
  """
  amount: MoneyBag!

  """
  The sum of all the discounted prices of the line items being refunded.
  """
  discountedSubtotal: MoneyBag!

  """
  The total monetary value available to refund in shop and presentment currencies.
  """
  maximumRefundable: MoneyBag!

  """
  A list of duties to be refunded from the order.
  """
  refundDuties: [RefundDuty!]!

  """
  The shipping costs to be refunded from the order.
  """
  shipping: ShippingRefund!

  """
  The sum of all the prices of the line items being refunded in shop and presentment currencies.
  """
  subtotal: MoneyBag!

  """
  A list of suggested order transactions.
  """
  suggestedTransactions: [SuggestedOrderTransaction!]!

  """
  The total cart discount amount that was applied to all line items in this refund.
  """
  totalCartDiscountAmount: MoneyBag!

  """
  The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalDuties: MoneyBag!

  """
  The sum of the taxes being refunded in shop and presentment currencies. The value must be positive.
  """
  totalTax: MoneyBag!
}

type TacoFillingMetaobject {
  name: String
}

type TacoFillingMetaobjectConnection {
  edges: [TacoFillingMetaobjectEdge!]!
  nodes: [TacoFillingMetaobject!]!
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TacoFillingMetaobjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TacoFillingMetaobject
}

"""

"""
type TacoMetaobject {
  """
  
  """
  name: String

  """
  
  """
  protein: TacoFillingMetaobject

  """
  
  """
  rating: RatingMetatype

  """
  
  """
  toppings(after: String, before: String, first: Int, last: Int): TacoFillingMetaobjectConnection
}

"""
Available customer tax exemptions.
"""
enum TaxExemption {
  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia.
  """
  CA_BC_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia.
  """
  CA_BC_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia.
  """
  CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia.
  """
  CA_BC_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia.
  """
  CA_BC_SUB_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada.
  """
  CA_DIPLOMAT_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba.
  """
  CA_MB_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba.
  """
  CA_MB_FARMER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba.
  """
  CA_MB_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia.
  """
  CA_NS_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia.
  """
  CA_NS_FARMER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario.
  """
  CA_ON_PURCHASE_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island.
  """
  CA_PE_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan.
  """
  CA_SK_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan.
  """
  CA_SK_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan.
  """
  CA_SK_FARMER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan.
  """
  CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan.
  """
  CA_SK_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan.
  """
  CA_SK_SUB_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada.
  """
  CA_STATUS_CARD_EXEMPTION

  """
  This customer is exempt from VAT for purchases within the EU that is shipping from outside of customer's country.
  """
  EU_REVERSE_CHARGE_EXEMPTION_RULE

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alaska.
  """
  US_AK_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alabama.
  """
  US_AL_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arkansas.
  """
  US_AR_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arizona.
  """
  US_AZ_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in California.
  """
  US_CA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Colorado.
  """
  US_CO_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Connecticut.
  """
  US_CT_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington DC.
  """
  US_DC_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Delaware.
  """
  US_DE_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Florida.
  """
  US_FL_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Georgia.
  """
  US_GA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Hawaii.
  """
  US_HI_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Iowa.
  """
  US_IA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Idaho.
  """
  US_ID_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Illinois.
  """
  US_IL_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Indiana.
  """
  US_IN_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kansas.
  """
  US_KS_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kentucky.
  """
  US_KY_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Louisiana.
  """
  US_LA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Massachusetts.
  """
  US_MA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maryland.
  """
  US_MD_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maine.
  """
  US_ME_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Michigan.
  """
  US_MI_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Minnesota.
  """
  US_MN_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Missouri.
  """
  US_MO_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Mississippi.
  """
  US_MS_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Montana.
  """
  US_MT_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Carolina.
  """
  US_NC_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Dakota.
  """
  US_ND_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nebraska.
  """
  US_NE_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Hampshire.
  """
  US_NH_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Jersey.
  """
  US_NJ_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Mexico.
  """
  US_NM_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nevada.
  """
  US_NV_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New York.
  """
  US_NY_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Ohio.
  """
  US_OH_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oklahoma.
  """
  US_OK_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oregon.
  """
  US_OR_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Pennsylvania.
  """
  US_PA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Rhode Island.
  """
  US_RI_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Carolina.
  """
  US_SC_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Dakota.
  """
  US_SD_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Tennessee.
  """
  US_TN_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Texas.
  """
  US_TX_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Utah.
  """
  US_UT_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Virginia.
  """
  US_VA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Vermont.
  """
  US_VT_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington.
  """
  US_WA_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wisconsin.
  """
  US_WI_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in West Virginia.
  """
  US_WV_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wyoming.
  """
  US_WY_RESELLER_EXEMPTION
}

"""
Represents a single tax applied to the associated line item.
"""
type TaxLine {
  """
  Whether the channel that submitted the tax line is liable for remitting. A
  value of null indicates unknown liability for this tax line.
  """
  channelLiable: Boolean

  """
  The amount of tax, in shop currency, after discounts and before returns.
  """
  price: Money! @deprecated(reason: "Use `priceSet` instead.")

  """
  The amount of tax, in shop and presentment currencies, after discounts and before returns.
  """
  priceSet: MoneyBag!

  """
  The proportion of the line item price that the tax represents as a decimal.
  """
  rate: Float

  """
  The proportion of the line item price that the tax represents as a percentage.
  """
  ratePercentage: Float

  """
  The source of the tax.
  """
  source: String

  """
  The name of the tax.
  """
  title: String!
}

"""
The Taxonomy resource lets you access the categories, attributes and values of a taxonomy tree.
"""
type Taxonomy {
  """
  Returns the categories of the product taxonomy based on the arguments provided.
  If a `search` argument is provided, then all categories that match the search query globally are returned.
  If a `children_of` argument is provided, then all children of the specified category are returned.
  If a `siblings_of` argument is provided, then all siblings of the specified category are returned.
  If a `decendents_of` argument is provided, then all descendents of the specified category are returned.
  If no arguments are provided, then all the top-level categories of the taxonomy are returned.
  """
  categories(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The ID of the category associated with the child categories to return.
    """
    childrenOf: ID

    """
    The ID of the category associated with the descendant categories to return.
    """
    descendantsOf: ID

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Searches the product taxonomy for matching categories.
    """
    search: String

    """
    The ID of the category associated with the sibling categories to return.
    """
    siblingsOf: ID
  ): TaxonomyCategoryConnection!
}

"""
A Shopify product taxonomy attribute.
"""
type TaxonomyAttribute implements Node {
  """
  A globally-unique ID.
  """
  id: ID!
}

"""
The details of a specific product category within the [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
"""
type TaxonomyCategory implements Node {
  """
  The IDs of the category's ancestor categories.
  """
  ancestorIds: [ID!]!

  """
  The attributes of the taxonomy category.
  """
  attributes(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int
  ): TaxonomyCategoryAttributeConnection!

  """
  The IDs of the category's child categories.
  """
  childrenIds: [ID!]!

  """
  The full name of the taxonomy category. For example, Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
  """
  fullName: String!

  """
  The globally-unique ID of the TaxonomyCategory.
  """
  id: ID!

  """
  Whether the category is archived. The default value is `false`.
  """
  isArchived: Boolean!

  """
  Whether the category is a leaf category. A leaf category doesn't have any
  subcategories beneath it. For example, in Animals & Pet Supplies > Pet
  Supplies > Dog Supplies > Dog Treadmills, Dog Treadmills is a leaf category.
  The value is `true` when there are no `childrenIds` specified.
  """
  isLeaf: Boolean!

  """
  Whether the category is a root category. A root category is at the top level
  of the category hierarchy and doesn't have a parent category. For example,
  Animals & Pet Supplies. The value is `true` when there's no `parentId` specified.
  """
  isRoot: Boolean!

  """
  The level of the category in the taxonomy tree. Levels indicate the depth of
  the category from the root. For example, in Animals & Pet Supplies > Pet
  Supplies > Dog Supplies, Animals & Pet Supplies is at level 1, Animals & Pet
  Supplies > Pet Supplies is at level 2, and Animals & Pet Supplies > Pet
  Supplies > Dog Supplies is at level 3.
  """
  level: Int!

  """
  The name of the taxonomy category. For example, Dog Beds.
  """
  name: String!

  """
  The ID of the category's parent category.
  """
  parentId: ID
}

"""
A product taxonomy attribute interface.
"""
union TaxonomyCategoryAttribute = TaxonomyAttribute | TaxonomyChoiceListAttribute | TaxonomyMeasurementAttribute

"""
An auto-generated type for paginating through multiple TaxonomyCategoryAttributes.
"""
type TaxonomyCategoryAttributeConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [TaxonomyCategoryAttributeEdge!]!

  """
  A list of nodes that are contained in TaxonomyCategoryAttributeEdge. You can
  fetch data about an individual node, or you can follow the edges to fetch data
  about a collection of related nodes. At each node, you specify the fields that
  you want to retrieve.
  """
  nodes: [TaxonomyCategoryAttribute!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one TaxonomyCategoryAttribute and a cursor during pagination.
"""
type TaxonomyCategoryAttributeEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of TaxonomyCategoryAttributeEdge.
  """
  node: TaxonomyCategoryAttribute!
}

"""
An auto-generated type for paginating through multiple TaxonomyCategories.
"""
type TaxonomyCategoryConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [TaxonomyCategoryEdge!]!

  """
  A list of nodes that are contained in TaxonomyCategoryEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [TaxonomyCategory!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one TaxonomyCategory and a cursor during pagination.
"""
type TaxonomyCategoryEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of TaxonomyCategoryEdge.
  """
  node: TaxonomyCategory!
}

"""
A Shopify product taxonomy choice list attribute.
"""
type TaxonomyChoiceListAttribute implements Node {
  """
  The unique ID of the TaxonomyAttribute.
  """
  id: ID!

  """
  The name of the product taxonomy attribute. For example, Color.
  """
  name: String!

  """
  A list of values on the choice list attribute.
  """
  values(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int
  ): TaxonomyValueConnection!
}

"""
A Shopify product taxonomy measurement attribute.
"""
type TaxonomyMeasurementAttribute implements Node {
  """
  The unique ID of the TaxonomyAttribute.
  """
  id: ID!

  """
  The name of the product taxonomy attribute. For example, Color.
  """
  name: String!

  """
  The product taxonomy attribute options.
  """
  options: [Attribute!]!
}

"""
Represents a Shopify product taxonomy value.
"""
type TaxonomyValue implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The name of the product taxonomy value. For example, Red.
  """
  name: String!
}

"""
An auto-generated type for paginating through multiple TaxonomyValues.
"""
type TaxonomyValueConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [TaxonomyValueEdge!]!

  """
  A list of nodes that are contained in TaxonomyValueEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [TaxonomyValue!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one TaxonomyValue and a cursor during pagination.
"""
type TaxonomyValueEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of TaxonomyValueEdge.
  """
  node: TaxonomyValue!
}

"""
A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always
represents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions
for reconciling a shop's cash flow. A TenderTransaction is immutable once created.
"""
type TenderTransaction implements Node {
  """
  The amount and currency of the tender transaction.
  """
  amount: MoneyV2!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The order that's related to the tender transaction. This value is null if the order has been deleted.
  """
  order: Order

  """
  Information about the payment method used for the transaction.
  """
  paymentMethod: String

  """
  Date and time when the transaction was processed.
  """
  processedAt: DateTime

  """
  The remote gateway reference associated with the tender transaction.
  """
  remoteReference: String

  """
  Whether the transaction is a test transaction.
  """
  test: Boolean!

  """
  Information about the payment instrument used for the transaction.
  """
  transactionDetails: TenderTransactionDetails

  """
  The staff member who performed the transaction.
  """
  user: StaffMember
}

"""
An auto-generated type for paginating through multiple TenderTransactions.
"""
type TenderTransactionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [TenderTransactionEdge!]!

  """
  A list of nodes that are contained in TenderTransactionEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [TenderTransaction!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
Information about the credit card used for this transaction.
"""
type TenderTransactionCreditCardDetails {
  """
  The name of the company that issued the customer's credit card. Example: `Visa`.
  """
  creditCardCompany: String

  """
  The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234`
  """
  creditCardNumber: String
}

"""
Information about the payment instrument used for this transaction.
"""
union TenderTransactionDetails = TenderTransactionCreditCardDetails

"""
An auto-generated type which holds one TenderTransaction and a cursor during pagination.
"""
type TenderTransactionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of TenderTransactionEdge.
  """
  node: TenderTransaction!
}

"""
The role of the theme.
"""
enum ThemeRole {
  """
  The theme is archived if a merchant changes their plan and exceeds the maximum
  number of themes allowed. Archived themes can be downloaded by merchant, but
  can not be customized or published until the plan is upgraded.
  """
  ARCHIVED

  """
  The theme is installed as a trial from the Shopify Theme Store. It can be
  customized using the theme editor, but access to the code editor and the
  ability to publish the theme are restricted until it is purchased.
  """
  DEMO

  """
  The theme is automatically created by the CLI for previewing purposes when in a development session.
  """
  DEVELOPMENT

  """
  The theme is locked if it is identified as unlicensed. Customization and
  publishing are restricted until the merchant resolves the licensing issue.
  """
  LOCKED

  """
  The currently published theme. There can only be one main theme at any time.
  """
  MAIN

  """
  The currently published theme that is only accessible to a mobile client.
  """
  MOBILE @deprecated(reason: "The feature for this role has been deprecated.")

  """
  The theme is currently not published. It can be transitioned to the main role if it is published by the merchant.
  """
  UNPUBLISHED
}

"""
A sale associated with a tip.
"""
type TipSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique ID for the sale.
  """
  id: ID!

  """
  The line item for the associated sale.
  """
  lineItem: LineItem!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
Transaction fee related to an order transaction.
"""
type TransactionFee implements Node {
  """
  Amount of the fee.
  """
  amount: MoneyV2!

  """
  Flat rate charge for a transaction.
  """
  flatFee: MoneyV2!

  """
  Name of the credit card flat fee.
  """
  flatFeeName: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  Percentage charge.
  """
  rate: Decimal!

  """
  Name of the credit card rate.
  """
  rateName: String

  """
  Tax amount charged on the fee.
  """
  taxAmount: MoneyV2!

  """
  Name of the type of fee.
  """
  type: String!
}

"""
The set of valid sort keys for the Transaction query.
"""
enum TransactionSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `expires_at` value.
  """
  EXPIRES_AT
}

"""
Translatable content of a resource's field.
"""
type TranslatableContent {
  """
  Hash digest representation of the content value.
  """
  digest: String

  """
  The resource field that's being translated.
  """
  key: String!

  """
  Locale of the content.
  """
  locale: String!

  """
  Type of the translatable content.
  """
  type: LocalizableContentType!

  """
  Content value.
  """
  value: String
}

"""
A resource that has translatable fields.
"""
type TranslatableResource {
  """
  Nested translatable resources under the current resource.
  """
  nestedTranslatableResources(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Return only resources of a type.
    """
    resourceType: TranslatableResourceType

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): TranslatableResourceConnection!

  """
  GID of the resource.
  """
  resourceId: ID!

  """
  Translatable content.
  """
  translatableContent(
    """
    Filters translatable content by market ID. Use this argument to retrieve translatable content specific to a market.
    """
    marketId: ID
  ): [TranslatableContent!]!

  """
  Translatable content translations (includes unpublished locales).
  """
  translations(
    """
    Filters translations by locale.
    """
    locale: String!

    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID

    """
    Filters by outdated translations.
    """
    outdated: Boolean
  ): [Translation!]!
}

"""
An auto-generated type for paginating through multiple TranslatableResources.
"""
type TranslatableResourceConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [TranslatableResourceEdge!]!

  """
  A list of nodes that are contained in TranslatableResourceEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [TranslatableResource!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one TranslatableResource and a cursor during pagination.
"""
type TranslatableResourceEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of TranslatableResourceEdge.
  """
  node: TranslatableResource!
}

"""
Specifies the type of resources that are translatable.
"""
enum TranslatableResourceType {
  """
  A blog post. Translatable fields: `title`, `body_html`, `summary_html`, `handle`, `meta_title`, `meta_description`.
  """
  ARTICLE

  """
  A blog. Translatable fields: `title`, `handle`, `meta_title`, `meta_description`.
  """
  BLOG

  """
  A product collection. Translatable fields: `title`, `body_html`, `handle`, `meta_title`, `meta_description`.
  """
  COLLECTION

  """
  The delivery method definition. For example, "Standard", or "Expedited". Translatable fields: `name`.
  """
  DELIVERY_METHOD_DEFINITION

  """
  An email template. Translatable fields: `title`, `body_html`.
  """
  EMAIL_TEMPLATE

  """
  A filter. Translatable fields: `label`.
  """
  FILTER

  """
  A link to direct users. Translatable fields: `title`.
  """
  LINK

  """
  A category of links. Translatable fields: `title`.
  """
  MENU

  """
  A Metafield. Translatable fields: `value`.
  """
  METAFIELD

  """
  A Metaobject. Translatable fields are determined by the Metaobject type.
  """
  METAOBJECT

  """
  An online store theme. Translatable fields: `dynamic keys based on theme data`.
  """
  ONLINE_STORE_THEME

  """
  A theme app embed. Translatable fields: `dynamic keys based on theme data`.
  """
  ONLINE_STORE_THEME_APP_EMBED

  """
  A theme json template. Translatable fields: `dynamic keys based on theme data`.
  """
  ONLINE_STORE_THEME_JSON_TEMPLATE

  """
  Locale file content of an online store theme. Translatable fields: `dynamic keys based on theme data`.
  """
  ONLINE_STORE_THEME_LOCALE_CONTENT

  """
  A theme json section group. Translatable fields: `dynamic keys based on theme data`.
  """
  ONLINE_STORE_THEME_SECTION_GROUP

  """
  A theme setting category. Translatable fields: `dynamic keys based on theme data`.
  """
  ONLINE_STORE_THEME_SETTINGS_CATEGORY

  """
  Shared static sections of an online store theme. Translatable fields: `dynamic keys based on theme data`.
  """
  ONLINE_STORE_THEME_SETTINGS_DATA_SECTIONS

  """
  A packing slip template. Translatable fields: `body`.
  """
  PACKING_SLIP_TEMPLATE

  """
  A page. Translatable fields: `title`, `body_html`, `handle`, `meta_title`, `meta_description`.
  """
  PAGE

  """
  A payment gateway. Translatable fields: `name`, `message`, `before_payment_instructions`.
  """
  PAYMENT_GATEWAY

  """
  An online store product. Translatable fields: `title`, `body_html`, `handle`,
  `product_type`, `meta_title`, `meta_description`.
  """
  PRODUCT

  """
  An online store custom product property name. For example, "Size", "Color", or "Material".
          Translatable fields: `name`.
  """
  PRODUCT_OPTION

  """
  The product option value names. For example, "Red", "Blue", and "Green" for a "Color" option. Translatable fields: `name`.
  """
  PRODUCT_OPTION_VALUE

  """
  A selling plan. Translatable fields:`name`, `option1`, `option2`, `option3`, `description`.
  """
  SELLING_PLAN

  """
  A selling plan group. Translatable fields: `name`, `option1`, `option2`, `option3`.
  """
  SELLING_PLAN_GROUP

  """
  A shop. Translatable fields: `meta_title`, `meta_description`.
  """
  SHOP

  """
  A shop policy. Translatable fields: `body`.
  """
  SHOP_POLICY
}

"""
Translation of a field of a resource.
"""
type Translation {
  """
  On the resource that this translation belongs to, the reference to the value being translated.
  """
  key: String!

  """
  ISO code of the translation locale.
  """
  locale: String!

  """
  The market that the translation is specific to. Null value means the translation is available in all markets.
  """
  market: Market

  """
  Whether the original content has changed since this translation was updated.
  """
  outdated: Boolean!

  """
  The date and time when the translation was updated.
  """
  updatedAt: DateTime

  """
  Translation value.
  """
  value: String
}

"""
Represents a typed custom attribute.
"""
type TypedAttribute {
  """
  Key or name of the attribute.
  """
  key: String!

  """
  Value of the attribute.
  """
  value: String!
}

"""
Represents an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
[RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.

For example, `"https://example.myshopify.com"` is a valid URL. It includes a scheme (`https`) and a host
(`example.myshopify.com`).
"""
scalar URL

"""
Specifies the
[Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
that are associated with a related marketing campaign.
"""
input UTMInput {
  """
  The name of the UTM campaign.
  """
  campaign: String!

  """
  The UTM campaign medium.
  """
  medium: String!

  """
  The name of the website or application where the referral link exists.
  """
  source: String!
}

"""
Represents a set of UTM parameters.
"""
type UTMParameters {
  """
  The name of a marketing campaign.
  """
  campaign: String

  """
  Identifies specific content in a marketing campaign. Used to differentiate
  between similar content or links in a marketing campaign to determine which is
  the most effective.
  """
  content: String

  """
  The medium of a marketing campaign, such as a banner or email newsletter.
  """
  medium: String

  """
  The source of traffic to the merchant's store, such as Google or an email newsletter.
  """
  source: String

  """
  Paid search terms used by a marketing campaign.
  """
  term: String
}

"""
The input fields that identify a unique valued metafield.
"""
input UniqueMetafieldValueInput {
  """
  The key for the metafield.
  """
  key: String!

  """
  The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
  """
  namespace: String

  """
  The value of the metafield.
  """
  value: String!
}

"""
The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml).
"""
type UnitPriceMeasurement {
  """
  The type of unit of measurement for the unit price measurement.
  """
  measuredType: UnitPriceMeasurementMeasuredType

  """
  The quantity unit for the unit price measurement.
  """
  quantityUnit: UnitPriceMeasurementMeasuredUnit

  """
  The quantity value for the unit price measurement.
  """
  quantityValue: Float!

  """
  The reference unit for the unit price measurement.
  """
  referenceUnit: UnitPriceMeasurementMeasuredUnit

  """
  The reference value for the unit price measurement.
  """
  referenceValue: Int!
}

"""
The accepted types of unit of measurement.
"""
enum UnitPriceMeasurementMeasuredType {
  """
  Unit of measurements representing areas.
  """
  AREA

  """
  Unit of measurements representing lengths.
  """
  LENGTH

  """
  Unit of measurements representing volumes.
  """
  VOLUME

  """
  Unit of measurements representing weights.
  """
  WEIGHT
}

"""
The valid units of measurement for a unit price measurement.
"""
enum UnitPriceMeasurementMeasuredUnit {
  """
  100 centiliters equals 1 liter.
  """
  CL

  """
  100 centimeters equals 1 meter.
  """
  CM

  """
  Metric system unit of weight.
  """
  G

  """
  1 kilogram equals 1000 grams.
  """
  KG

  """
  Metric system unit of volume.
  """
  L

  """
  Metric system unit of length.
  """
  M

  """
  Metric system unit of area.
  """
  M2

  """
  1 cubic meter equals 1000 liters.
  """
  M3

  """
  1000 milligrams equals 1 gram.
  """
  MG

  """
  1000 milliliters equals 1 liter.
  """
  ML

  """
  1000 millimeters equals 1 meter.
  """
  MM
}

"""
Systems of weights and measures.
"""
enum UnitSystem {
  """
  Imperial system of weights and measures.
  """
  IMPERIAL_SYSTEM

  """
  Metric system of weights and measures.
  """
  METRIC_SYSTEM
}

"""
This is represents new sale types that have been added in future API versions.
You may update to a more recent API version to receive additional details about this sale.
"""
type UnknownSale implements Sale {
  """
  The type of order action that the sale represents.
  """
  actionType: SaleActionType!

  """
  The unique ID for the sale.
  """
  id: ID!

  """
  The line type assocated with the sale.
  """
  lineType: SaleLineType!

  """
  The number of units either ordered or intended to be returned.
  """
  quantity: Int

  """
  All individual taxes associated with the sale.
  """
  taxes: [SaleTax!]!

  """
  The total sale amount after taxes and discounts.
  """
  totalAmount: MoneyBag!

  """
  The total discounts allocated to the sale after taxes.
  """
  totalDiscountAmountAfterTaxes: MoneyBag!

  """
  The total discounts allocated to the sale before taxes.
  """
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """
  The total amount of taxes for the sale.
  """
  totalTaxAmount: MoneyBag!
}

"""
An unsigned 64-bit integer. Represents whole numeric values between 0 and 2^64 - 1 encoded as a string of base-10 digits.

Example value: `"50"`.
"""
scalar UnsignedInt64

"""
An unverified return line item.
"""
type UnverifiedReturnLineItem implements Node & ReturnLineItemType {
  """
  A note from the customer that describes the item to be returned. Maximum length: 300 characters.
  """
  customerNote: String

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The quantity being returned.
  """
  quantity: Int!

  """
  The quantity that can be refunded.
  """
  refundableQuantity: Int!

  """
  The quantity that was refunded.
  """
  refundedQuantity: Int!

  """
  The reason for returning the item.
  """
  returnReason: ReturnReason!

  """
  Additional information about the reason for the return. Maximum length: 255 characters.
  """
  returnReasonNote: String!

  """
  The unit price of the unverified return line item.
  """
  unitPrice: MoneyV2!
}

"""
The URL redirect for the online store.
"""
type UrlRedirect implements Node {
  """
  The ID of the URL redirect.
  """
  id: ID!

  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String!

  """
  The target location where the user will be redirected to.
  """
  target: String!
}

"""
An auto-generated type for paginating through multiple UrlRedirects.
"""
type UrlRedirectConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [UrlRedirectEdge!]!

  """
  A list of nodes that are contained in UrlRedirectEdge. You can fetch data
  about an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [UrlRedirect!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one UrlRedirect and a cursor during pagination.
"""
type UrlRedirectEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of UrlRedirectEdge.
  """
  node: UrlRedirect!
}

"""
A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object
into the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.

For more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.
"""
type UrlRedirectImport implements Node {
  """
  The number of rows in the file.
  """
  count: Int

  """
  The number of redirects created from the import.
  """
  createdCount: Int

  """
  The number of redirects that failed to be imported.
  """
  failedCount: Int

  """
  Whether the import is finished.
  """
  finished: Boolean!

  """
  The date and time when the import finished.
  """
  finishedAt: DateTime

  """
  The ID of the `UrlRedirectImport` object.
  """
  id: ID!

  """
  A list of up to three previews of the URL redirects to be imported.
  """
  previewRedirects: [UrlRedirectImportPreview!]!

  """
  The number of redirects updated during the import.
  """
  updatedCount: Int
}

"""
A preview of a URL redirect import row.
"""
type UrlRedirectImportPreview {
  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String!

  """
  The target location where the user will be redirected to.
  """
  target: String!
}

"""
The set of valid sort keys for the UrlRedirect query.
"""
enum UrlRedirectSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by the `path` value.
  """
  PATH

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Represents an error in the input of a mutation.
"""
type UserError implements DisplayableError {
  """
  The path to the input field that caused the error.
  """
  field: [String!]

  """
  The error message.
  """
  message: String!
}

"""
A checkout server side validation installed on the shop.
"""
type Validation implements HasMetafieldDefinitions & HasMetafields & Node {
  """
  Whether the validation should block on failures other than expected violations.
  """
  blockOnFailure: Boolean!

  """
  Whether the validation is enabled on the merchant checkout.
  """
  enabled: Boolean!

  """
  The error history on the most recent version of the validation function.
  """
  errorHistory: FunctionsErrorHistory

  """
  Global ID for the validation.
  """
  id: ID!

  """
  A [custom field](https://shopify.dev/docs/apps/build/custom-data),
  including its `namespace` and `key`, that's associated with a Shopify resource
  for the purposes of adding and storing additional information.
  """
  metafield(
    """
    The key for the metafield.
    """
    key: String!

    """
    The container the metafield belongs to. If omitted, the app-reserved namespace will be used.
    """
    namespace: String
  ): Metafield

  """
  List of metafield definitions.
  """
  metafieldDefinitions(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    Filter metafield definitions by namespace.
    """
    namespace: String

    """
    Filter by the definition's pinned status.
    """
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    """
    A filter made up of terms, connectives, modifiers, and comparators.
    | name | type | description | acceptable_values | default_value | example_use |
    | ---- | ---- | ---- | ---- | ---- | ---- |
    | default | string | Filter by a case-insensitive search of multiple fields
    in a document. | | | - `query=Bob Norman`<br/> - `query=title:green hoodie` |
    | created_at | time | Filter by the date and time when the metafield
    definition was created. | | | - `created_at:>2020-10-21T23:39:20Z`<br/> -
    `created_at:<now`<br/> - `created_at:<=2024` |
    | id | id | Filter by `id` range. | | | - `id:1234`<br/> - `id:>=1234`<br/> - `id:<=1234` |
    | key | string | Filter by the metafield definition [`key`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-key)
    field. | | | - `key:some-key` |
    | namespace | string | Filter by the metafield definition [`namespace`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-namespace)
    field. | | | - `namespace:some-namespace` |
    | owner_type | string | Filter by the metafield definition [`ownerType`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-ownertype)
    field. | | | - `owner_type:PRODUCT` |
    | type | string | Filter by the metafield definition [`type`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MetafieldDefinition#field-type)
    field. | | | - `type:single_line_text_field` |
    | updated_at | time | Filter by the date and time when the metafield
    definition was last updated. | | | - `updated_at:>2020-10-21T23:39:20Z`<br/>
    - `updated_at:<now`<br/> - `updated_at:<=2024` |
    You can apply one or more filters to a query. Learn more about [Shopify API
    search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    query: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false

    """
    Sort the underlying list using a key. If your query is slow or returns an
    error, then [try specifying a sort key that matches the field used in the search](https://shopify.dev/api/usage/pagination-graphql#search-performance-considerations).
    """
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection! @deprecated(reason: "This field will be removed in a future version. Use the root `metafieldDefinitions` field instead.")

  """
  A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
  that a merchant associates with a Shopify resource.
  """
  metafields(
    """
    The elements that come after the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    after: String

    """
    The elements that come before the specified [cursor](https://shopify.dev/api/usage/pagination-graphql).
    """
    before: String

    """
    The first `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    first: Int

    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]

    """
    The last `n` elements from the [paginated list](https://shopify.dev/api/usage/pagination-graphql).
    """
    last: Int

    """
    The metafield namespace to filter by. If omitted, the app-reserved namespace will be used.
    """
    namespace: String

    """
    Reverse the order of the underlying list.
    """
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The Shopify Function implementing the validation.
  """
  shopifyFunction: ShopifyFunction!

  """
  The merchant-facing validation name.
  """
  title: String!
}

"""
An auto-generated type for paginating through multiple Validations.
"""
type ValidationConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [ValidationEdge!]!

  """
  A list of nodes that are contained in ValidationEdge. You can fetch data about
  an individual node, or you can follow the edges to fetch data about a
  collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [Validation!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one Validation and a cursor during pagination.
"""
type ValidationEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of ValidationEdge.
  """
  node: Validation!
}

"""
The set of valid sort keys for the Validation query.
"""
enum ValidationSortKeys {
  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Represents a credit card payment instrument.
"""
type VaultCreditCard {
  """
  The billing address of the card.
  """
  billingAddress: CustomerCreditCardBillingAddress

  """
  The brand for the card.
  """
  brand: String!

  """
  Whether the card has been expired.
  """
  expired: Boolean!

  """
  The expiry month of the card.
  """
  expiryMonth: Int!

  """
  The expiry year of the card.
  """
  expiryYear: Int!

  """
  The last four digits for the card.
  """
  lastDigits: String!

  """
  The name of the card holder.
  """
  name: String!
}

"""
Represents a paypal billing agreement payment instrument.
"""
type VaultPaypalBillingAgreement {
  """
  Whether the paypal billing agreement is inactive.
  """
  inactive: Boolean!

  """
  The paypal account name.
  """
  name: String!

  """
  The paypal account email address.
  """
  paypalAccountEmail: String!
}

"""
Representation of 3d vectors and points. It can represent
either the coordinates of a point in space, a direction, or
size. Presented as an object with three floating-point values.
"""
type Vector3 {
  """
  The x coordinate of Vector3.
  """
  x: Float!

  """
  The y coordinate of Vector3.
  """
  y: Float!

  """
  The z coordinate of Vector3.
  """
  z: Float!
}

"""
Represents a Shopify hosted video.
"""
type Video implements File & Media & Node {
  """
  A word or phrase to share the nature or contents of a media.
  """
  alt: String

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!

  """
  The video's duration in milliseconds. This value is `null` unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  duration: Int

  """
  Any errors that have occurred on the file.
  """
  fileErrors: [FileError!]!

  """
  The status of the file.
  """
  fileStatus: FileStatus!

  """
  The video's filename.
  """
  filename: String!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  The media content type.
  """
  mediaContentType: MediaContentType!

  """
  Any errors which have occurred on the media.
  """
  mediaErrors: [MediaError!]!

  """
  The warnings attached to the media.
  """
  mediaWarnings: [MediaWarning!]!

  """
  The video's original source. This value is `null` unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  originalSource: VideoSource

  """
  The preview image for the media.
  """
  preview: MediaPreviewImage

  """
  The video's sources. This value is empty unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  sources: [VideoSource!]!

  """
  Current status of the media.
  """
  status: MediaStatus!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
  """
  updatedAt: DateTime!
}

"""
Represents a source for a Shopify hosted video.

Types of sources include the original video, lower resolution versions of the original video,
and an m3u8 playlist file.

Only [videos](https://shopify.dev/api/admin-graphql/latest/objects/video) with a status field
of [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready) have sources.
"""
type VideoSource {
  """
  The video source's file size in bytes.
  """
  fileSize: Int

  """
  The video source's file format extension.
  """
  format: String!

  """
  The video source's height.
  """
  height: Int!

  """
  The video source's MIME type.
  """
  mimeType: String!

  """
  The video source's URL.
  """
  url: String!

  """
  The video source's width.
  """
  width: Int!
}

"""
The `WebPixel` object enables you to manage JavaScript code snippets
that run on an online store and collect
[behavioral data](https://shopify.dev/docs/api/web-pixels-api/standard-events)
for marketing campaign optimization and analytics.

Learn how to create a
[web pixel extension](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)
to subscribe your app to events that are emitted by Shopify.
"""
type WebPixel implements Node {
  """
  A globally-unique ID.
  """
  id: ID!

  """
  The
  [settings object](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels#step-2-define-your-web-pixel-settings)
  for the web pixel. This object specifies configuration options that control
  the web pixel's functionality and behavior. You can find the settings for a web pixel in
  `extensions/<your_extension_name>/shopify.extension.toml`.
  """
  settings: JSON!
}

"""
An Amazon EventBridge partner event source to which webhook subscriptions publish events.
"""
type WebhookEventBridgeEndpoint {
  """
  The ARN of this EventBridge partner event source.
  """
  arn: ARN!
}

"""
An HTTPS endpoint to which webhook subscriptions send POST requests.
"""
type WebhookHttpEndpoint {
  """
  The URL to which the webhooks events are sent.
  """
  callbackUrl: URL!
}

"""
A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.
"""
type WebhookPubSubEndpoint {
  """
  The Google Cloud Pub/Sub project ID.
  """
  pubSubProject: String!

  """
  The Google Cloud Pub/Sub topic ID.
  """
  pubSubTopic: String!
}

"""
A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.
It describes the topic that the app wants to receive, and a destination where
Shopify should send webhooks of the specified topic.
When an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.
Learn more about the [webhooks system](https://shopify.dev/apps/webhooks).
"""
type WebhookSubscription implements LegacyInteroperability & Node {
  """
  The Admin API version that Shopify uses to serialize webhook events. This
  value is inherited from the app that created the webhook subscription.
  """
  apiVersion: ApiVersion!

  """
  The destination URI to which the webhook subscription will send a message when an event occurs.
  """
  callbackUrl: URL! @deprecated(reason: "Use `endpoint` instead.")

  """
  The date and time when the webhook subscription was created.
  """
  createdAt: DateTime!

  """
  The endpoint to which the webhook subscription will send events.
  """
  endpoint: WebhookSubscriptionEndpoint!

  """
  A constraint specified using search syntax that ensures only webhooks that
  match the specified filter are emitted. See our [guide on
  filters](https://shopify.dev/docs/apps/build/webhooks/customize/filters) for more details.
  """
  filter: String

  """
  The format in which the webhook subscription should send the data.
  """
  format: WebhookSubscriptionFormat!

  """
  A globally-unique ID.
  """
  id: ID!

  """
  An optional array of top-level resource fields that should be serialized and
  sent in the webhook message. If null, then all fields will be sent.
  """
  includeFields: [String!]!

  """
  The ID of the corresponding resource in the REST Admin API.
  """
  legacyResourceId: UnsignedInt64!

  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]!

  """
  The type of event that triggers the webhook. The topic determines when the
  webhook subscription sends a webhook, as well as what class of data object
  that webhook contains.
  """
  topic: WebhookSubscriptionTopic!

  """
  The date and time when the webhook subscription was updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple WebhookSubscriptions.
"""
type WebhookSubscriptionConnection {
  """
  The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
  """
  edges: [WebhookSubscriptionEdge!]!

  """
  A list of nodes that are contained in WebhookSubscriptionEdge. You can fetch
  data about an individual node, or you can follow the edges to fetch data about
  a collection of related nodes. At each node, you specify the fields that you
  want to retrieve.
  """
  nodes: [WebhookSubscription!]!

  """
  An object that’s used to retrieve [cursor
  information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
  """
  pageInfo: PageInfo!
}

"""
An auto-generated type which holds one WebhookSubscription and a cursor during pagination.
"""
type WebhookSubscriptionEdge {
  """
  The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql).
  """
  cursor: String!

  """
  The item at the end of WebhookSubscriptionEdge.
  """
  node: WebhookSubscription!
}

"""
An endpoint to which webhook subscriptions send webhooks events.
"""
union WebhookSubscriptionEndpoint = WebhookEventBridgeEndpoint | WebhookHttpEndpoint | WebhookPubSubEndpoint

"""
The supported formats for webhook subscriptions.
"""
enum WebhookSubscriptionFormat {
  JSON
  XML
}

"""
The set of valid sort keys for the WebhookSubscription query.
"""
enum WebhookSubscriptionSortKeys {
  """
  Sort by the `created_at` value.
  """
  CREATED_AT

  """
  Sort by the `id` value.
  """
  ID

  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The supported topics for webhook subscriptions. You can use webhook subscriptions to receive
notifications about particular events in a shop.

You create [mandatory webhooks](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks#mandatory-compliance-webhooks) either via the
[Partner Dashboard](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks#subscribe-to-privacy-webhooks)
or by updating the [app configuration file](https://shopify.dev/apps/tools/cli/configuration#app-configuration-file-example).

> Tip:
>To configure your subscription using the app configuration file, refer to the
[full list of topic
names](https://shopify.dev/docs/api/webhooks?reference=graphql).
"""
enum WebhookSubscriptionTopic {
  """
  The webhook topic for `app_purchases_one_time/update` events. Occurs whenever a one-time app charge is updated.
  """
  APP_PURCHASES_ONE_TIME_UPDATE

  """
  The webhook topic for `app/scopes_update` events. Occurs whenever the access
  scopes of any installation are modified. Allows apps to keep track of the
  granted access scopes of their installations.
  """
  APP_SCOPES_UPDATE

  """
  The webhook topic for `app_subscriptions/approaching_capped_amount` events.
  Occurs when the balance used on an app subscription crosses 90% of the capped amount.
  """
  APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT

  """
  The webhook topic for `app_subscriptions/update` events. Occurs whenever an app subscription is updated.
  """
  APP_SUBSCRIPTIONS_UPDATE

  """
  The webhook topic for `app/uninstalled` events. Occurs whenever a shop has uninstalled the app.
  """
  APP_UNINSTALLED

  """
  The webhook topic for `attributed_sessions/first` events. Occurs whenever an
  order with a "first" attributed session is attributed. Requires the
  `read_marketing_events` scope.
  """
  ATTRIBUTED_SESSIONS_FIRST

  """
  The webhook topic for `attributed_sessions/last` events. Occurs whenever an
  order with a "last" attributed session is attributed. Requires the
  `read_marketing_events` scope.
  """
  ATTRIBUTED_SESSIONS_LAST

  """
  The webhook topic for `audit_events/admin_api_activity` events. Triggers for
  each auditable Admin API request. This topic is limited to one active
  subscription per Plus store and requires the use of Google Cloud Pub/Sub or
  AWS EventBridge. Requires the `read_audit_events` scope.
  """
  AUDIT_EVENTS_ADMIN_API_ACTIVITY

  """
  The webhook topic for `bulk_operations/finish` events. Notifies when a Bulk Operation finishes.
  """
  BULK_OPERATIONS_FINISH

  """
  The webhook topic for `carts/create` events. Occurs when a cart is created in
  the online store. Other types of carts aren't supported. For example, the
  webhook doesn't support carts that are created in a custom storefront.
  Requires the `read_orders` scope.
  """
  CARTS_CREATE

  """
  The webhook topic for `carts/update` events. Occurs when a cart is updated in
  the online store. Other types of carts aren't supported. For example, the
  webhook doesn't support carts that are updated in a custom storefront.
  Requires the `read_orders` scope.
  """
  CARTS_UPDATE

  """
  The webhook topic for `channels/delete` events. Occurs whenever a channel is
  deleted. Requires the `read_publications` scope.
  """
  CHANNELS_DELETE

  """
  The webhook topic for `checkouts/create` events. Occurs whenever a checkout is created. Requires the `read_orders` scope.
  """
  CHECKOUTS_CREATE

  """
  The webhook topic for `checkouts/delete` events. Occurs whenever a checkout is deleted. Requires the `read_orders` scope.
  """
  CHECKOUTS_DELETE

  """
  The webhook topic for `checkouts/update` events. Occurs whenever a checkout is updated. Requires the `read_orders` scope.
  """
  CHECKOUTS_UPDATE

  """
  The webhook topic for `collections/create` events. Occurs whenever a
  collection is created. Requires the `read_products` scope.
  """
  COLLECTIONS_CREATE

  """
  The webhook topic for `collections/delete` events. Occurs whenever a
  collection is deleted. Requires the `read_products` scope.
  """
  COLLECTIONS_DELETE

  """
  The webhook topic for `collections/update` events. Occurs whenever a
  collection is updated, including whenever products are added or removed from
  the collection. Occurs once if multiple products are added or removed from a
  collection at the same time. Requires the `read_products` scope.
  """
  COLLECTIONS_UPDATE

  """
  The webhook topic for `collection_listings/add` events. Occurs whenever a
  collection listing is added. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_ADD

  """
  The webhook topic for `collection_listings/remove` events. Occurs whenever a
  collection listing is removed. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_REMOVE

  """
  The webhook topic for `collection_listings/update` events. Occurs whenever a
  collection listing is updated. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_UPDATE

  """
  The webhook topic for `collection_publications/create` events. Occurs whenever
  a collection publication listing is created. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_CREATE

  """
  The webhook topic for `collection_publications/delete` events. Occurs whenever
  a collection publication listing is deleted. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_DELETE

  """
  The webhook topic for `collection_publications/update` events. Occurs whenever
  a collection publication listing is updated. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_UPDATE

  """
  The webhook topic for `companies/create` events. Occurs whenever a company is
  created. Requires at least one of the following scopes: read_customers,
  read_companies.
  """
  COMPANIES_CREATE

  """
  The webhook topic for `companies/delete` events. Occurs whenever a company is
  deleted. Requires at least one of the following scopes: read_customers,
  read_companies.
  """
  COMPANIES_DELETE

  """
  The webhook topic for `companies/update` events. Occurs whenever a company is
  updated. Requires at least one of the following scopes: read_customers,
  read_companies.
  """
  COMPANIES_UPDATE

  """
  The webhook topic for `company_contacts/create` events. Occurs whenever a
  company contact is created. Requires at least one of the following scopes:
  read_customers, read_companies.
  """
  COMPANY_CONTACTS_CREATE

  """
  The webhook topic for `company_contacts/delete` events. Occurs whenever a
  company contact is deleted. Requires at least one of the following scopes:
  read_customers, read_companies.
  """
  COMPANY_CONTACTS_DELETE

  """
  The webhook topic for `company_contacts/update` events. Occurs whenever a
  company contact is updated. Requires at least one of the following scopes:
  read_customers, read_companies.
  """
  COMPANY_CONTACTS_UPDATE

  """
  The webhook topic for `company_contact_roles/assign` events. Occurs whenever a
  role is assigned to a contact at a location. Requires at least one of the
  following scopes: read_customers, read_companies.
  """
  COMPANY_CONTACT_ROLES_ASSIGN

  """
  The webhook topic for `company_contact_roles/revoke` events. Occurs whenever a
  role is revoked from a contact at a location. Requires at least one of the
  following scopes: read_customers, read_companies.
  """
  COMPANY_CONTACT_ROLES_REVOKE

  """
  The webhook topic for `company_locations/create` events. Occurs whenever a
  company location is created. Requires at least one of the following scopes:
  read_customers, read_companies.
  """
  COMPANY_LOCATIONS_CREATE

  """
  The webhook topic for `company_locations/delete` events. Occurs whenever a
  company location is deleted. Requires at least one of the following scopes:
  read_customers, read_companies.
  """
  COMPANY_LOCATIONS_DELETE

  """
  The webhook topic for `company_locations/update` events. Occurs whenever a
  company location is updated. Requires at least one of the following scopes:
  read_customers, read_companies.
  """
  COMPANY_LOCATIONS_UPDATE

  """
  The webhook topic for `customers/create` events. Occurs whenever a customer is
  created. Requires the `read_customers` scope.
  """
  CUSTOMERS_CREATE

  """
  The webhook topic for `customers/delete` events. Occurs whenever a customer is
  deleted. Requires the `read_customers` scope.
  """
  CUSTOMERS_DELETE

  """
  The webhook topic for `customers/disable` events. Occurs whenever a customer
  account is disabled. Requires the `read_customers` scope.
  """
  CUSTOMERS_DISABLE

  """
  The webhook topic for `customers_email_marketing_consent/update` events.
  Occurs whenever a customer's email marketing consent is updated. Requires the
  `read_customers` scope.
  """
  CUSTOMERS_EMAIL_MARKETING_CONSENT_UPDATE

  """
  The webhook topic for `customers/enable` events. Occurs whenever a customer
  account is enabled. Requires the `read_customers` scope.
  """
  CUSTOMERS_ENABLE

  """
  The webhook topic for `customers_marketing_consent/update` events. Occurs
  whenever a customer's SMS marketing consent is updated. Requires the
  `read_customers` scope.
  """
  CUSTOMERS_MARKETING_CONSENT_UPDATE

  """
  The webhook topic for `customers/merge` events. Triggers when two customers
  are merged Requires the `read_customer_merge` scope.
  """
  CUSTOMERS_MERGE

  """
  The webhook topic for `customers/purchasing_summary` events. Occurs when a
  customer sales history change. Requires the `read_customers` scope.
  """
  CUSTOMERS_PURCHASING_SUMMARY

  """
  The webhook topic for `customers/update` events. Occurs whenever a customer is
  updated. Requires the `read_customers` scope.
  """
  CUSTOMERS_UPDATE

  """
  The webhook topic for `customer_account_settings/update` events. Triggers when merchants change customer account setting.
  """
  CUSTOMER_ACCOUNT_SETTINGS_UPDATE

  """
  The webhook topic for `customer_groups/create` events. Occurs whenever a
  customer saved search is created. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_CREATE

  """
  The webhook topic for `customer_groups/delete` events. Occurs whenever a
  customer saved search is deleted. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_DELETE

  """
  The webhook topic for `customer_groups/update` events. Occurs whenever a
  customer saved search is updated. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_UPDATE

  """
  The webhook topic for `customer.joined_segment` events. Triggers when a
  customer joins a segment. Requires the `read_customers` scope.
  """
  CUSTOMER_JOINED_SEGMENT

  """
  The webhook topic for `customer.left_segment` events. Triggers when a customer
  leaves a segment. Requires the `read_customers` scope.
  """
  CUSTOMER_LEFT_SEGMENT

  """
  The webhook topic for `customer_payment_methods/create` events. Occurs
  whenever a customer payment method is created. Requires the
  `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_CREATE

  """
  The webhook topic for `customer_payment_methods/revoke` events. Occurs
  whenever a customer payment method is revoked. Requires the
  `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_REVOKE

  """
  The webhook topic for `customer_payment_methods/update` events. Occurs
  whenever a customer payment method is updated. Requires the
  `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_UPDATE

  """
  The webhook topic for `customer.tags_added` events. Triggers when tags are
  added to a customer. Requires the `read_customers` scope.
  """
  CUSTOMER_TAGS_ADDED

  """
  The webhook topic for `customer.tags_removed` events. Triggers when tags are
  removed from a customer. Requires the `read_customers` scope.
  """
  CUSTOMER_TAGS_REMOVED

  """
  The webhook topic for `delivery_promise_settings/update` events. Occurs when a
  promise setting is updated. Requires the `read_shipping` scope.
  """
  DELIVERY_PROMISE_SETTINGS_UPDATE

  """
  The webhook topic for `discounts/create` events. Occurs whenever a discount is
  created. Requires the `read_discounts` scope.
  """
  DISCOUNTS_CREATE

  """
  The webhook topic for `discounts/delete` events. Occurs whenever a discount is
  deleted. Requires the `read_discounts` scope.
  """
  DISCOUNTS_DELETE

  """
  The webhook topic for `discounts/redeemcode_added` events. Occurs whenever a
  redeem code is added to a code discount. Requires the `read_discounts` scope.
  """
  DISCOUNTS_REDEEMCODE_ADDED

  """
  The webhook topic for `discounts/redeemcode_removed` events. Occurs whenever a
  redeem code on a code discount is deleted. Requires the `read_discounts` scope.
  """
  DISCOUNTS_REDEEMCODE_REMOVED

  """
  The webhook topic for `discounts/update` events. Occurs whenever a discount is
  updated. Requires the `read_discounts` scope.
  """
  DISCOUNTS_UPDATE

  """
  The webhook topic for `disputes/create` events. Occurs whenever a dispute is
  created. Requires the `read_shopify_payments_disputes` scope.
  """
  DISPUTES_CREATE

  """
  The webhook topic for `disputes/update` events. Occurs whenever a dispute is
  updated. Requires the `read_shopify_payments_disputes` scope.
  """
  DISPUTES_UPDATE

  """
  The webhook topic for `domains/create` events. Occurs whenever a domain is created.
  """
  DOMAINS_CREATE

  """
  The webhook topic for `domains/destroy` events. Occurs whenever a domain is destroyed.
  """
  DOMAINS_DESTROY

  """
  The webhook topic for `domains/update` events. Occurs whenever a domain is updated.
  """
  DOMAINS_UPDATE

  """
  The webhook topic for `draft_orders/create` events. Occurs whenever a draft
  order is created. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_CREATE

  """
  The webhook topic for `draft_orders/delete` events. Occurs whenever a draft
  order is deleted. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_DELETE

  """
  The webhook topic for `draft_orders/update` events. Occurs whenever a draft
  order is updated. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_UPDATE

  """
  The webhook topic for `fulfillments/create` events. Occurs whenever a
  fulfillment is created. Requires at least one of the following scopes:
  read_fulfillments, read_marketplace_orders.
  """
  FULFILLMENTS_CREATE

  """
  The webhook topic for `fulfillments/update` events. Occurs whenever a
  fulfillment is updated. Requires at least one of the following scopes:
  read_fulfillments, read_marketplace_orders.
  """
  FULFILLMENTS_UPDATE

  """
  The webhook topic for `fulfillment_events/create` events. Occurs whenever a
  fulfillment event is created. Requires the `read_fulfillments` scope.
  """
  FULFILLMENT_EVENTS_CREATE

  """
  The webhook topic for `fulfillment_events/delete` events. Occurs whenever a
  fulfillment event is deleted. Requires the `read_fulfillments` scope.
  """
  FULFILLMENT_EVENTS_DELETE

  """
  The webhook topic for `fulfillment_holds/added` events. Occurs each time that a hold is added to a fulfillment order.

  For cases where multiple holds are applied to a fulfillment order, this webhook will trigger after each hold is applied.
   Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_HOLDS_ADDED

  """
  The webhook topic for `fulfillment_holds/released` events. Occurs each time
  that a hold is released from a fulfillment order.
  For cases where multiple holds are released from a fulfillment order a the
  same time, this webhook will trigger for each released hold.
   Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_HOLDS_RELEASED

  """
  The webhook topic for `fulfillment_orders/cancellation_request_accepted`
  events. Occurs when a 3PL accepts a fulfillment cancellation request, received
  from a merchant. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLATION_REQUEST_ACCEPTED

  """
  The webhook topic for `fulfillment_orders/cancellation_request_rejected`
  events. Occurs when a 3PL rejects a fulfillment cancellation request, received
  from a merchant. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLATION_REQUEST_REJECTED

  """
  The webhook topic for `fulfillment_orders/cancellation_request_submitted`
  events. Occurs when a merchant requests a fulfillment request to be cancelled
  after that request was approved by a 3PL. Requires at least one of the
  following scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders,
  read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLATION_REQUEST_SUBMITTED

  """
  The webhook topic for `fulfillment_orders/cancelled` events. Occurs when a
  fulfillment order is cancelled. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLED

  """
  The webhook topic for `fulfillment_orders/fulfillment_request_accepted`
  events. Occurs when a fulfillment service accepts a request to fulfill a
  fulfillment order. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_ACCEPTED

  """
  The webhook topic for `fulfillment_orders/fulfillment_request_rejected`
  events. Occurs when a 3PL rejects a fulfillment request that was sent by a
  merchant. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_REJECTED

  """
  The webhook topic for `fulfillment_orders/fulfillment_request_submitted`
  events. Occurs when a merchant submits a fulfillment request to a 3PL.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_SUBMITTED

  """
  The webhook topic for
  `fulfillment_orders/fulfillment_service_failed_to_complete` events. Occurs
  when a fulfillment service intends to close an in_progress fulfillment order.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_SERVICE_FAILED_TO_COMPLETE

  """
  The webhook topic for `fulfillment_orders/hold_released` events. Occurs when a
  fulfillment order is released and is no longer on hold.

  If a fulfillment order has multiple holds then this webhook will only be
  triggered once when the last hold is released and the status of the
  fulfillment order is no longer `ON_HOLD`.
   Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_HOLD_RELEASED

  """
  The webhook topic for
  `fulfillment_orders/line_items_prepared_for_local_delivery` events. Occurs
  whenever a fulfillment order's line items are prepared for local delivery.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_LOCAL_DELIVERY

  """
  The webhook topic for `fulfillment_orders/line_items_prepared_for_pickup`
  events. Triggers when one or more of the line items for a fulfillment order
  are prepared for pickup Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_PICKUP

  """
  The webhook topic for `fulfillment_orders/merged` events. Occurs when multiple
  fulfillment orders are merged into a single fulfillment order. Requires at
  least one of the following scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_MERGED

  """
  The webhook topic for `fulfillment_orders/moved` events. Occurs whenever the
  location which is assigned to fulfill one or more fulfillment order line items is changed.

  * `original_fulfillment_order` - The final state of the original fulfillment order.
  * `moved_fulfillment_order` - The fulfillment order which now contains the re-assigned line items.
  * `source_location` - The original location which was assigned to fulfill the
  line items (available as of the `2023-04` API version).
  * `destination_location_id` - The ID of the location which is now responsible for fulfilling the line items.

  **Note:** The [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)
  of the `original_fulfillment_order` might be changed by the move operation.
  If you need to determine the originally assigned location, then you should refer to the `source_location`.

  [Learn more about moving line items](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fulfillmentOrderMove).
   Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_MOVED

  """
  The webhook topic for `fulfillment_orders/order_routing_complete` events.
  Occurs when an order has finished being routed and it's fulfillment orders
  assigned to a fulfillment service's location. Requires at least one of the
  following scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders,
  read_buyer_membership_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_ORDER_ROUTING_COMPLETE

  """
  The webhook topic for `fulfillment_orders/placed_on_hold` events. Occurs when
  a fulfillment order transitions to the `ON_HOLD` status

  For cases where multiple holds are applied to a fulfillment order, this
  webhook will only trigger once when the first hold is applied and the
  fulfillment order status changes to `ON_HOLD`.
   Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_PLACED_ON_HOLD

  """
  The webhook topic for `fulfillment_orders/rescheduled` events. Triggers when a fulfillment order is rescheduled.

  Fulfillment orders may be merged if they have the same `fulfillAt` datetime.
  If the fulfillment order is merged then the resulting fulfillment order will be indicated in the webhook body.
  Otherwise it will be the original fulfillment order with an updated `fulfill_at` datetime.
   Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_RESCHEDULED

  """
  The webhook topic for `fulfillment_orders/scheduled_fulfillment_order_ready`
  events. Occurs whenever a fulfillment order which was scheduled becomes due.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_SCHEDULED_FULFILLMENT_ORDER_READY

  """
  The webhook topic for `fulfillment_orders/split` events. Occurs when a
  fulfillment order is split into multiple fulfillment orders. Requires at least
  one of the following scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_SPLIT

  """
  The webhook topic for `inventory_items/create` events. Occurs whenever an
  inventory item is created. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_CREATE

  """
  The webhook topic for `inventory_items/delete` events. Occurs whenever an
  inventory item is deleted. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_DELETE

  """
  The webhook topic for `inventory_items/update` events. Occurs whenever an
  inventory item is updated. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_UPDATE

  """
  The webhook topic for `inventory_levels/connect` events. Occurs whenever an
  inventory level is connected. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_CONNECT

  """
  The webhook topic for `inventory_levels/disconnect` events. Occurs whenever an
  inventory level is disconnected. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_DISCONNECT

  """
  The webhook topic for `inventory_levels/update` events. Occurs whenever an
  inventory level is updated. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_UPDATE

  """
  The webhook topic for `locales/create` events. Occurs whenever a shop locale is created Requires the `read_locales` scope.
  """
  LOCALES_CREATE

  """
  The webhook topic for `locales/update` events. Occurs whenever a shop locale
  is updated, such as published or unpublished Requires the `read_locales` scope.
  """
  LOCALES_UPDATE

  """
  The webhook topic for `locations/activate` events. Occurs whenever a
  deactivated location is re-activated. Requires the `read_locations` scope.
  """
  LOCATIONS_ACTIVATE

  """
  The webhook topic for `locations/create` events. Occurs whenever a location is
  created. Requires the `read_locations` scope.
  """
  LOCATIONS_CREATE

  """
  The webhook topic for `locations/deactivate` events. Occurs whenever a
  location is deactivated. Requires the `read_locations` scope.
  """
  LOCATIONS_DEACTIVATE

  """
  The webhook topic for `locations/delete` events. Occurs whenever a location is
  deleted. Requires the `read_locations` scope.
  """
  LOCATIONS_DELETE

  """
  The webhook topic for `locations/update` events. Occurs whenever a location is
  updated. Requires the `read_locations` scope.
  """
  LOCATIONS_UPDATE

  """
  The webhook topic for `markets/create` events. Occurs when a new market is created. Requires the `read_markets` scope.
  """
  MARKETS_CREATE

  """
  The webhook topic for `markets/delete` events. Occurs when a market is deleted. Requires the `read_markets` scope.
  """
  MARKETS_DELETE

  """
  The webhook topic for `markets/update` events. Occurs when a market is updated. Requires the `read_markets` scope.
  """
  MARKETS_UPDATE

  """
  The webhook topic for `metafield_definitions/create` events. Occurs when a
  metafield definition is created. Requires the `read_content` scope.
  """
  METAFIELD_DEFINITIONS_CREATE

  """
  The webhook topic for `metafield_definitions/delete` events. Occurs when a
  metafield definition is deleted. Requires the `read_content` scope.
  """
  METAFIELD_DEFINITIONS_DELETE

  """
  The webhook topic for `metafield_definitions/update` events. Occurs when a
  metafield definition is updated. Requires the `read_content` scope.
  """
  METAFIELD_DEFINITIONS_UPDATE

  """
  The webhook topic for `metaobjects/create` events. Occurs when a metaobject is
  created. Requires the `read_metaobjects` scope.
  """
  METAOBJECTS_CREATE

  """
  The webhook topic for `metaobjects/delete` events. Occurs when a metaobject is
  deleted. Requires the `read_metaobjects` scope.
  """
  METAOBJECTS_DELETE

  """
  The webhook topic for `metaobjects/update` events. Occurs when a metaobject is
  updated. Requires the `read_metaobjects` scope.
  """
  METAOBJECTS_UPDATE

  """
  The webhook topic for `orders/cancelled` events. Occurs whenever an order is
  cancelled. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_buyer_membership_orders.
  """
  ORDERS_CANCELLED

  """
  The webhook topic for `orders/create` events. Occurs whenever an order is
  created. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_CREATE

  """
  The webhook topic for `orders/delete` events. Occurs whenever an order is deleted. Requires the `read_orders` scope.
  """
  ORDERS_DELETE

  """
  The webhook topic for `orders/edited` events. Occurs whenever an order is
  edited. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_buyer_membership_orders.
  """
  ORDERS_EDITED

  """
  The webhook topic for `orders/fulfilled` events. Occurs whenever an order is
  fulfilled. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_FULFILLED

  """
  The webhook topic for `orders/paid` events. Occurs whenever an order is paid.
  Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_PAID

  """
  The webhook topic for `orders/partially_fulfilled` events. Occurs whenever an
  order is partially fulfilled. Requires at least one of the following scopes:
  read_orders, read_marketplace_orders.
  """
  ORDERS_PARTIALLY_FULFILLED

  """
  The webhook topic for `orders/risk_assessment_changed` events. Triggers when a
  new risk assessment is available on the order.
  This can be the first or a subsequent risk assessment.
  New risk assessments can be provided until the order is marked as fulfilled.
  Includes the risk level, risk facts, the provider and the order ID.
  Does not include the risk recommendation for the order.
  The Shop ID is available in the headers.
   Requires the `read_orders` scope.
  """
  ORDERS_RISK_ASSESSMENT_CHANGED

  """
  The webhook topic for `orders/shopify_protect_eligibility_changed` events.
  Occurs whenever Shopify Protect's eligibility for an order is changed.
  Requires the `read_orders` scope.
  """
  ORDERS_SHOPIFY_PROTECT_ELIGIBILITY_CHANGED

  """
  The webhook topic for `orders/updated` events. Occurs whenever an order is
  updated. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_buyer_membership_orders.
  """
  ORDERS_UPDATED

  """
  The webhook topic for `order_transactions/create` events. Occurs when a order
  transaction is created or when it's status is updated. Only occurs for
  transactions with a status of success, failure or error. Requires at least one
  of the following scopes: read_orders, read_marketplace_orders,
  read_buyer_membership_orders.
  """
  ORDER_TRANSACTIONS_CREATE

  """
  The webhook topic for `payment_schedules/due` events. Occurs whenever payment
  schedules are due. Requires the `read_payment_terms` scope.
  """
  PAYMENT_SCHEDULES_DUE

  """
  The webhook topic for `payment_terms/create` events. Occurs whenever payment
  terms are created. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_CREATE

  """
  The webhook topic for `payment_terms/delete` events. Occurs whenever payment
  terms are deleted. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_DELETE

  """
  The webhook topic for `payment_terms/update` events. Occurs whenever payment
  terms are updated. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_UPDATE

  """
  The webhook topic for `products/create` events. Occurs whenever a product is created. Requires the `read_products` scope.
  """
  PRODUCTS_CREATE

  """
  The webhook topic for `products/delete` events. Occurs whenever a product is deleted. Requires the `read_products` scope.
  """
  PRODUCTS_DELETE

  """
  The webhook topic for `products/update` events. Occurs whenever a product is
  updated, ordered, or variants are added, removed or updated. Requires the
  `read_products` scope.
  """
  PRODUCTS_UPDATE

  """
  The webhook topic for `product_feeds/create` events. Triggers when product
  feed is created Requires the `read_product_listings` scope.
  """
  PRODUCT_FEEDS_CREATE

  """
  The webhook topic for `product_feeds/full_sync` events. Triggers when a full
  sync for a product feed is performed Requires the `read_product_listings` scope.
  """
  PRODUCT_FEEDS_FULL_SYNC

  """
  The webhook topic for `product_feeds/full_sync_finish` events. Triggers when a
  full sync finishes Requires the `read_product_listings` scope.
  """
  PRODUCT_FEEDS_FULL_SYNC_FINISH

  """
  The webhook topic for `product_feeds/incremental_sync` events. Occurs whenever
  a product publication is created, updated or removed for a product feed
  Requires the `read_product_listings` scope.
  """
  PRODUCT_FEEDS_INCREMENTAL_SYNC

  """
  The webhook topic for `product_feeds/update` events. Triggers when product
  feed is updated Requires the `read_product_listings` scope.
  """
  PRODUCT_FEEDS_UPDATE

  """
  The webhook topic for `product_listings/add` events. Occurs whenever an active
  product is listed on a channel. Requires the `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_ADD

  """
  The webhook topic for `product_listings/remove` events. Occurs whenever a
  product listing is removed from the channel. Requires the
  `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_REMOVE

  """
  The webhook topic for `product_listings/update` events. Occurs whenever a
  product publication is updated. Requires the `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_UPDATE

  """
  The webhook topic for `product_publications/create` events. Occurs whenever a
  product publication for an active product is created, or whenever an existing
  product publication is published on the app that is subscribed to this webhook
  topic. Note that a webhook is only emitted when there are publishing changes
  to the app that is subscribed to the topic (ie. no webhook will be emitted if
  there is a publishing change to the online store and the webhook subscriber of
  the topic is a third-party app). Requires the `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_CREATE

  """
  The webhook topic for `product_publications/delete` events. Occurs whenever a
  product publication for an active product is removed, or whenever an existing
  product publication is unpublished from the app that is subscribed to this
  webhook topic. Note that a webhook is only emitted when there are publishing
  changes to the app that is subscribed to the topic (ie. no webhook will be
  emitted if there is a publishing change to the online store and the webhook
  subscriber of the topic is a third-party app). Requires the
  `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_DELETE

  """
  The webhook topic for `product_publications/update` events. Occurs whenever a
  product publication is updated from the app that is subscribed to this webhook
  topic. Note that a webhook is only emitted when there are publishing changes
  to the app that is subscribed to the topic (ie. no webhook will be emitted if
  there is a publishing change to the online store and the webhook subscriber of
  the topic is a third-party app). Requires the `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_UPDATE

  """
  The webhook topic for `profiles/create` events. Occurs whenever a delivery
  profile is created Requires at least one of the following scopes:
  read_shipping, read_assigned_shipping.
  """
  PROFILES_CREATE

  """
  The webhook topic for `profiles/delete` events. Occurs whenever a delivery
  profile is deleted Requires at least one of the following scopes:
  read_shipping, read_assigned_shipping.
  """
  PROFILES_DELETE

  """
  The webhook topic for `profiles/update` events. Occurs whenever a delivery
  profile is updated Requires at least one of the following scopes:
  read_shipping, read_assigned_shipping.
  """
  PROFILES_UPDATE

  """
  The webhook topic for `publications/delete` events. Occurs whenever a
  publication is deleted. Requires the `read_publications` scope.
  """
  PUBLICATIONS_DELETE

  """
  The webhook topic for `refunds/create` events. Occurs whenever a new refund is
  created without errors on an order, independent from the movement of money.
  Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_buyer_membership_orders.
  """
  REFUNDS_CREATE

  """
  The webhook topic for `returns/approve` events. Occurs whenever a return is
  approved. This means `Return.status` is `OPEN`. Requires at least one of the
  following scopes: read_returns, read_marketplace_returns,
  read_buyer_membership_orders.
  """
  RETURNS_APPROVE

  """
  The webhook topic for `returns/cancel` events. Occurs whenever a return is
  canceled. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_returns, read_marketplace_returns,
  read_buyer_membership_orders.
  """
  RETURNS_CANCEL

  """
  The webhook topic for `returns/close` events. Occurs whenever a return is
  closed. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_returns, read_marketplace_returns,
  read_buyer_membership_orders.
  """
  RETURNS_CLOSE

  """
  The webhook topic for `returns/decline` events. Occurs whenever a return is
  declined. This means `Return.status` is `DECLINED`. Requires at least one of
  the following scopes: read_returns, read_marketplace_returns,
  read_buyer_membership_orders.
  """
  RETURNS_DECLINE

  """
  The webhook topic for `returns/reopen` events. Occurs whenever a closed return
  is reopened. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_returns, read_marketplace_returns,
  read_buyer_membership_orders.
  """
  RETURNS_REOPEN

  """
  The webhook topic for `returns/request` events. Occurs whenever a return is
  requested. This means `Return.status` is `REQUESTED`. Requires at least one of
  the following scopes: read_returns, read_marketplace_returns,
  read_buyer_membership_orders.
  """
  RETURNS_REQUEST

  """
  The webhook topic for `returns/update` events. Occurs whenever a return is
  updated. Requires at least one of the following scopes: read_returns,
  read_marketplace_returns, read_buyer_membership_orders.
  """
  RETURNS_UPDATE

  """
  The webhook topic for `reverse_deliveries/attach_deliverable` events. Occurs
  whenever a deliverable is attached to a reverse delivery.
  This occurs when a reverse delivery is created or updated with delivery metadata.
  Metadata includes the delivery method, label, and tracking information associated with a reverse delivery.
   Requires at least one of the following scopes: read_returns, read_marketplace_returns.
  """
  REVERSE_DELIVERIES_ATTACH_DELIVERABLE

  """
  The webhook topic for `reverse_fulfillment_orders/dispose` events. Occurs
  whenever a disposition is made on a reverse fulfillment order.
  This includes dispositions made on reverse deliveries that are associated with the reverse fulfillment order.
   Requires at least one of the following scopes: read_returns, read_marketplace_returns.
  """
  REVERSE_FULFILLMENT_ORDERS_DISPOSE

  """
  The webhook topic for `scheduled_product_listings/add` events. Occurs whenever
  a product is scheduled to be published. Requires the `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_ADD

  """
  The webhook topic for `scheduled_product_listings/remove` events. Occurs
  whenever a product is no longer scheduled to be published. Requires the
  `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_REMOVE

  """
  The webhook topic for `scheduled_product_listings/update` events. Occurs
  whenever a product's scheduled availability date changes. Requires the
  `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_UPDATE

  """
  The webhook topic for `segments/create` events. Occurs whenever a segment is created. Requires the `read_customers` scope.
  """
  SEGMENTS_CREATE

  """
  The webhook topic for `segments/delete` events. Occurs whenever a segment is deleted. Requires the `read_customers` scope.
  """
  SEGMENTS_DELETE

  """
  The webhook topic for `segments/update` events. Occurs whenever a segment is updated. Requires the `read_customers` scope.
  """
  SEGMENTS_UPDATE

  """
  The webhook topic for `selling_plan_groups/create` events. Notifies when a
  SellingPlanGroup is created. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_CREATE

  """
  The webhook topic for `selling_plan_groups/delete` events. Notifies when a
  SellingPlanGroup is deleted. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_DELETE

  """
  The webhook topic for `selling_plan_groups/update` events. Notifies when a
  SellingPlanGroup is updated. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_UPDATE

  """
  The webhook topic for `shipping_addresses/create` events. Occurs whenever a
  shipping address is created. Requires the `read_shipping` scope.
  """
  SHIPPING_ADDRESSES_CREATE

  """
  The webhook topic for `shipping_addresses/update` events. Occurs whenever a
  shipping address is updated. Requires the `read_shipping` scope.
  """
  SHIPPING_ADDRESSES_UPDATE

  """
  The webhook topic for `shop/update` events. Occurs whenever a shop is updated.
  """
  SHOP_UPDATE

  """
  The webhook topic for `subscription_billing_attempts/challenged` events.
  Occurs when the financial instutition challenges the subscripttion billing
  attempt charge as per 3D Secure. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED

  """
  The webhook topic for `subscription_billing_attempts/failure` events. Occurs
  whenever a subscription billing attempt fails. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE

  """
  The webhook topic for `subscription_billing_attempts/success` events. Occurs
  whenever a subscription billing attempt succeeds. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS

  """
  The webhook topic for `subscription_billing_cycles/skip` events. Occurs
  whenever a subscription contract billing cycle is skipped. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_CYCLES_SKIP

  """
  The webhook topic for `subscription_billing_cycles/unskip` events. Occurs
  whenever a subscription contract billing cycle is unskipped. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_CYCLES_UNSKIP

  """
  The webhook topic for `subscription_billing_cycle_edits/create` events. Occurs
  whenever a subscription contract billing cycle is edited. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_CYCLE_EDITS_CREATE

  """
  The webhook topic for `subscription_billing_cycle_edits/delete` events. Occurs
  whenever a subscription contract billing cycle edit is deleted. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_CYCLE_EDITS_DELETE

  """
  The webhook topic for `subscription_billing_cycle_edits/update` events. Occurs
  whenever a subscription contract billing cycle edit is updated. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_CYCLE_EDITS_UPDATE

  """
  The webhook topic for `subscription_contracts/activate` events. Occurs when a
  subscription contract is activated. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_ACTIVATE

  """
  The webhook topic for `subscription_contracts/cancel` events. Occurs when a
  subscription contract is canceled. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_CANCEL

  """
  The webhook topic for `subscription_contracts/create` events. Occurs whenever
  a subscription contract is created. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_CREATE

  """
  The webhook topic for `subscription_contracts/expire` events. Occurs when a
  subscription contract expires. Requires the `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_EXPIRE

  """
  The webhook topic for `subscription_contracts/fail` events. Occurs when a
  subscription contract is failed. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_FAIL

  """
  The webhook topic for `subscription_contracts/pause` events. Occurs when a
  subscription contract is paused. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_PAUSE

  """
  The webhook topic for `subscription_contracts/update` events. Occurs whenever
  a subscription contract is updated. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_UPDATE

  """
  The webhook topic for `tax_partners/update` events. Occurs whenever a tax
  partner is created or updated. Requires the `read_taxes` scope.
  """
  TAX_PARTNERS_UPDATE

  """
  The webhook topic for `tax_services/create` events. Occurs whenever a tax
  service is created. Requires the `read_taxes` scope.
  """
  TAX_SERVICES_CREATE

  """
  The webhook topic for `tax_services/update` events. Occurs whenver a tax
  service is updated. Requires the `read_taxes` scope.
  """
  TAX_SERVICES_UPDATE

  """
  The webhook topic for `tender_transactions/create` events. Occurs when a
  tender transaction is created. Requires the `read_orders` scope.
  """
  TENDER_TRANSACTIONS_CREATE

  """
  The webhook topic for `themes/create` events. Occurs whenever a theme is
  created. Does not occur when theme files are created. Requires the
  `read_themes` scope.
  """
  THEMES_CREATE

  """
  The webhook topic for `themes/delete` events. Occurs whenever a theme is
  deleted. Does not occur when theme files are deleted. Requires the
  `read_themes` scope.
  """
  THEMES_DELETE

  """
  The webhook topic for `themes/publish` events. Occurs whenever a theme with
  the main or mobile (deprecated) role is published. Requires the `read_themes` scope.
  """
  THEMES_PUBLISH

  """
  The webhook topic for `themes/update` events. Occurs whenever a theme is
  updated. Does not occur when theme files are updated. Requires the
  `read_themes` scope.
  """
  THEMES_UPDATE

  """
  The webhook topic for `variants/in_stock` events. Occurs whenever a variant
  becomes in stock. Requires the `read_products` scope.
  """
  VARIANTS_IN_STOCK

  """
  The webhook topic for `variants/out_of_stock` events. Occurs whenever a
  variant becomes out of stock. Requires the `read_products` scope.
  """
  VARIANTS_OUT_OF_STOCK
}

"""
A weight, which includes a numeric value and a unit of measurement.
"""
type Weight {
  """
  The unit of measurement for `value`.
  """
  unit: WeightUnit!

  """
  The weight value using the unit system specified with `unit`.
  """
  value: Float!
}

"""
Units of measurement for weight.
"""
enum WeightUnit {
  """
  Metric system unit of mass.
  """
  GRAMS

  """
  1 kilogram equals 1000 grams.
  """
  KILOGRAMS

  """
  Imperial system unit of mass.
  """
  OUNCES

  """
  1 pound equals 16 ounces.
  """
  POUNDS
}
